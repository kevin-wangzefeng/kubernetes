/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg7_fields "k8s.io/kubernetes/pkg/fields"
	pkg6_labels "k8s.io/kubernetes/pkg/labels"
	pkg8_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg7_fields.Selector
		var v3 pkg6_labels.Selector
		var v4 pkg8_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg5_intstr.IntOrString
		var v7 pkg4_inf.Dec
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [18]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq82[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[17] = x.VolumeSource.FC != nil && x.FC != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(18)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.Cinder == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.CephFS == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.Flocker == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.FC == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr82 || yy2arr82 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym103 := z.DecBinary()
	_ = yym103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct104 := r.ContainerType()
		if yyct104 == codecSelferValueTypeMap1234 {
			yyl104 := r.ReadMapStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl104, d)
			}
		} else if yyct104 == codecSelferValueTypeArray1234 {
			yyl104 := r.ReadArrayStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys105Slc
	var yyhl105 bool = l >= 0
	for yyj105 := 0; ; yyj105++ {
		if yyhl105 {
			if yyj105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys105Slc = r.DecodeBytes(yys105Slc, true, true)
		yys105 := string(yys105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys105 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys105)
		} // end switch yys105
	} // end for yyj105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj124 int
	var yyb124 bool
	var yyhl124 bool = l >= 0
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj124++
		if yyhl124 {
			yyb124 = yyj124 > l
		} else {
			yyb124 = r.CheckBreak()
		}
		if yyb124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [17]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			yyq144[0] = x.HostPath != nil
			yyq144[1] = x.EmptyDir != nil
			yyq144[2] = x.GCEPersistentDisk != nil
			yyq144[3] = x.AWSElasticBlockStore != nil
			yyq144[4] = x.GitRepo != nil
			yyq144[5] = x.Secret != nil
			yyq144[6] = x.NFS != nil
			yyq144[7] = x.ISCSI != nil
			yyq144[8] = x.Glusterfs != nil
			yyq144[9] = x.PersistentVolumeClaim != nil
			yyq144[10] = x.RBD != nil
			yyq144[11] = x.FlexVolume != nil
			yyq144[12] = x.Cinder != nil
			yyq144[13] = x.CephFS != nil
			yyq144[14] = x.Flocker != nil
			yyq144[15] = x.DownwardAPI != nil
			yyq144[16] = x.FC != nil
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(17)
			} else {
				yynn144 = 0
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym162 := z.DecBinary()
	_ = yym162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct163 := r.ContainerType()
		if yyct163 == codecSelferValueTypeMap1234 {
			yyl163 := r.ReadMapStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl163, d)
			}
		} else if yyct163 == codecSelferValueTypeArray1234 {
			yyl163 := r.ReadArrayStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys164Slc
	var yyhl164 bool = l >= 0
	for yyj164 := 0; ; yyj164++ {
		if yyhl164 {
			if yyj164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys164Slc = r.DecodeBytes(yys164Slc, true, true)
		yys164 := string(yys164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys164 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys164)
		} // end switch yys164
	} // end for yyj164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj182 int
	var yyb182 bool
	var yyhl182 bool = l >= 0
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj182++
		if yyhl182 {
			yyb182 = yyj182 > l
		} else {
			yyb182 = r.CheckBreak()
		}
		if yyb182 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj182-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym200 := z.EncBinary()
		_ = yym200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep201 := !z.EncBinary()
			yy2arr201 := z.EncBasicHandle().StructToArray
			var yyq201 [12]bool
			_, _, _ = yysep201, yyq201, yy2arr201
			const yyr201 bool = false
			yyq201[0] = x.GCEPersistentDisk != nil
			yyq201[1] = x.AWSElasticBlockStore != nil
			yyq201[2] = x.HostPath != nil
			yyq201[3] = x.Glusterfs != nil
			yyq201[4] = x.NFS != nil
			yyq201[5] = x.RBD != nil
			yyq201[6] = x.ISCSI != nil
			yyq201[7] = x.FlexVolume != nil
			yyq201[8] = x.Cinder != nil
			yyq201[9] = x.CephFS != nil
			yyq201[10] = x.FC != nil
			yyq201[11] = x.Flocker != nil
			var yynn201 int
			if yyr201 || yy2arr201 {
				r.EncodeArrayStart(12)
			} else {
				yynn201 = 0
				for _, b := range yyq201 {
					if b {
						yynn201++
					}
				}
				r.EncodeMapStart(yynn201)
				yynn201 = 0
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[7] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[8] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[9] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[10] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[11] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym214 := z.DecBinary()
	_ = yym214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct215 := r.ContainerType()
		if yyct215 == codecSelferValueTypeMap1234 {
			yyl215 := r.ReadMapStart()
			if yyl215 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl215, d)
			}
		} else if yyct215 == codecSelferValueTypeArray1234 {
			yyl215 := r.ReadArrayStart()
			if yyl215 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl215, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys216Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys216Slc
	var yyhl216 bool = l >= 0
	for yyj216 := 0; ; yyj216++ {
		if yyhl216 {
			if yyj216 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys216Slc = r.DecodeBytes(yys216Slc, true, true)
		yys216 := string(yys216Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys216 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys216)
		} // end switch yys216
	} // end for yyj216
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj229 int
	var yyb229 bool
	var yyhl229 bool = l >= 0
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj229++
		if yyhl229 {
			yyb229 = yyj229 > l
		} else {
			yyb229 = r.CheckBreak()
		}
		if yyb229 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj229-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym242 := z.EncBinary()
		_ = yym242
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep243 := !z.EncBinary()
			yy2arr243 := z.EncBasicHandle().StructToArray
			var yyq243 [2]bool
			_, _, _ = yysep243, yyq243, yy2arr243
			const yyr243 bool = false
			yyq243[1] = x.ReadOnly != false
			var yynn243 int
			if yyr243 || yy2arr243 {
				r.EncodeArrayStart(2)
			} else {
				yynn243 = 1
				for _, b := range yyq243 {
					if b {
						yynn243++
					}
				}
				r.EncodeMapStart(yynn243)
				yynn243 = 0
			}
			if yyr243 || yy2arr243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym245 := z.EncBinary()
				_ = yym245
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym246 := z.EncBinary()
				_ = yym246
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr243 || yy2arr243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq243[1] {
					yym248 := z.EncBinary()
					_ = yym248
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq243[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym249 := z.EncBinary()
					_ = yym249
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr243 || yy2arr243 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym250 := z.DecBinary()
	_ = yym250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct251 := r.ContainerType()
		if yyct251 == codecSelferValueTypeMap1234 {
			yyl251 := r.ReadMapStart()
			if yyl251 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl251, d)
			}
		} else if yyct251 == codecSelferValueTypeArray1234 {
			yyl251 := r.ReadArrayStart()
			if yyl251 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl251, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys252Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys252Slc
	var yyhl252 bool = l >= 0
	for yyj252 := 0; ; yyj252++ {
		if yyhl252 {
			if yyj252 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys252Slc = r.DecodeBytes(yys252Slc, true, true)
		yys252 := string(yys252Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys252 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys252)
		} // end switch yys252
	} // end for yyj252
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj255 int
	var yyb255 bool
	var yyhl255 bool = l >= 0
	yyj255++
	if yyhl255 {
		yyb255 = yyj255 > l
	} else {
		yyb255 = r.CheckBreak()
	}
	if yyb255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj255++
	if yyhl255 {
		yyb255 = yyj255 > l
	} else {
		yyb255 = r.CheckBreak()
	}
	if yyb255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj255++
		if yyhl255 {
			yyb255 = yyj255 > l
		} else {
			yyb255 = r.CheckBreak()
		}
		if yyb255 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj255-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym258 := z.EncBinary()
		_ = yym258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep259 := !z.EncBinary()
			yy2arr259 := z.EncBasicHandle().StructToArray
			var yyq259 [5]bool
			_, _, _ = yysep259, yyq259, yy2arr259
			const yyr259 bool = false
			yyq259[0] = x.Kind != ""
			yyq259[1] = x.APIVersion != ""
			yyq259[2] = true
			yyq259[3] = true
			yyq259[4] = true
			var yynn259 int
			if yyr259 || yy2arr259 {
				r.EncodeArrayStart(5)
			} else {
				yynn259 = 0
				for _, b := range yyq259 {
					if b {
						yynn259++
					}
				}
				r.EncodeMapStart(yynn259)
				yynn259 = 0
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[0] {
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[1] {
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[2] {
					yy267 := &x.ObjectMeta
					yy267.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy268 := &x.ObjectMeta
					yy268.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[3] {
					yy270 := &x.Spec
					yy270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy271 := &x.Spec
					yy271.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[4] {
					yy273 := &x.Status
					yy273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy274 := &x.Status
					yy274.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym275 := z.DecBinary()
	_ = yym275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct276 := r.ContainerType()
		if yyct276 == codecSelferValueTypeMap1234 {
			yyl276 := r.ReadMapStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl276, d)
			}
		} else if yyct276 == codecSelferValueTypeArray1234 {
			yyl276 := r.ReadArrayStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys277Slc
	var yyhl277 bool = l >= 0
	for yyj277 := 0; ; yyj277++ {
		if yyhl277 {
			if yyj277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys277Slc = r.DecodeBytes(yys277Slc, true, true)
		yys277 := string(yys277Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys277 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv280 := &x.ObjectMeta
				yyv280.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv281 := &x.Spec
				yyv281.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv282 := &x.Status
				yyv282.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys277)
		} // end switch yys277
	} // end for yyj277
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj283 int
	var yyb283 bool
	var yyhl283 bool = l >= 0
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv286 := &x.ObjectMeta
		yyv286.CodecDecodeSelf(d)
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv287 := &x.Spec
		yyv287.CodecDecodeSelf(d)
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv288 := &x.Status
		yyv288.CodecDecodeSelf(d)
	}
	for {
		yyj283++
		if yyhl283 {
			yyb283 = yyj283 > l
		} else {
			yyb283 = r.CheckBreak()
		}
		if yyb283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym289 := z.EncBinary()
		_ = yym289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep290 := !z.EncBinary()
			yy2arr290 := z.EncBasicHandle().StructToArray
			var yyq290 [16]bool
			_, _, _ = yysep290, yyq290, yy2arr290
			const yyr290 bool = false
			yyq290[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq290[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq290[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq290[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq290[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq290[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq290[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq290[8] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq290[9] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq290[10] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq290[11] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq290[12] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq290[13] = len(x.AccessModes) != 0
			yyq290[14] = x.ClaimRef != nil
			yyq290[15] = x.PersistentVolumeReclaimPolicy != ""
			var yynn290 int
			if yyr290 || yy2arr290 {
				r.EncodeArrayStart(16)
			} else {
				yynn290 = 1
				for _, b := range yyq290 {
					if b {
						yynn290++
					}
				}
				r.EncodeMapStart(yynn290)
				yynn290 = 0
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr290 || yy2arr290 {
				if yyn292 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr290 || yy2arr290 {
				if yyn293 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn294 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn294 = true
				goto LABEL294
			}
		LABEL294:
			if yyr290 || yy2arr290 {
				if yyn294 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn294 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn295 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn295 = true
				goto LABEL295
			}
		LABEL295:
			if yyr290 || yy2arr290 {
				if yyn295 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn295 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn296 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn296 = true
				goto LABEL296
			}
		LABEL296:
			if yyr290 || yy2arr290 {
				if yyn296 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn296 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn297 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn297 = true
				goto LABEL297
			}
		LABEL297:
			if yyr290 || yy2arr290 {
				if yyn297 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn297 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn298 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn298 = true
				goto LABEL298
			}
		LABEL298:
			if yyr290 || yy2arr290 {
				if yyn298 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn298 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn299 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn299 = true
				goto LABEL299
			}
		LABEL299:
			if yyr290 || yy2arr290 {
				if yyn299 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[8] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn299 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn300 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn300 = true
				goto LABEL300
			}
		LABEL300:
			if yyr290 || yy2arr290 {
				if yyn300 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[9] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn300 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn301 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn301 = true
				goto LABEL301
			}
		LABEL301:
			if yyr290 || yy2arr290 {
				if yyn301 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[10] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn301 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn302 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn302 = true
				goto LABEL302
			}
		LABEL302:
			if yyr290 || yy2arr290 {
				if yyn302 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[11] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn302 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn303 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn303 = true
				goto LABEL303
			}
		LABEL303:
			if yyr290 || yy2arr290 {
				if yyn303 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[12] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn303 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[13] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym305 := z.EncBinary()
						_ = yym305
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym306 := z.EncBinary()
						_ = yym306
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[14] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[15] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq290[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym309 := z.DecBinary()
	_ = yym309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct310 := r.ContainerType()
		if yyct310 == codecSelferValueTypeMap1234 {
			yyl310 := r.ReadMapStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl310, d)
			}
		} else if yyct310 == codecSelferValueTypeArray1234 {
			yyl310 := r.ReadArrayStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys311Slc
	var yyhl311 bool = l >= 0
	for yyj311 := 0; ; yyj311++ {
		if yyhl311 {
			if yyj311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys311Slc = r.DecodeBytes(yys311Slc, true, true)
		yys311 := string(yys311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys311 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv312 := &x.Capacity
				yyv312.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv325 := &x.AccessModes
				yym326 := z.DecBinary()
				_ = yym326
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv325), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys311)
		} // end switch yys311
	} // end for yyj311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj329 int
	var yyb329 bool
	var yyhl329 bool = l >= 0
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv330 := &x.Capacity
		yyv330.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv343 := &x.AccessModes
		yym344 := z.DecBinary()
		_ = yym344
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv343), d)
		}
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj329++
		if yyhl329 {
			yyb329 = yyj329 > l
		} else {
			yyb329 = r.CheckBreak()
		}
		if yyb329 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj329-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym347 := z.EncBinary()
	_ = yym347
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym348 := z.DecBinary()
	_ = yym348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym349 := z.EncBinary()
		_ = yym349
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep350 := !z.EncBinary()
			yy2arr350 := z.EncBasicHandle().StructToArray
			var yyq350 [3]bool
			_, _, _ = yysep350, yyq350, yy2arr350
			const yyr350 bool = false
			yyq350[0] = x.Phase != ""
			yyq350[1] = x.Message != ""
			yyq350[2] = x.Reason != ""
			var yynn350 int
			if yyr350 || yy2arr350 {
				r.EncodeArrayStart(3)
			} else {
				yynn350 = 0
				for _, b := range yyq350 {
					if b {
						yynn350++
					}
				}
				r.EncodeMapStart(yynn350)
				yynn350 = 0
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[1] {
					yym353 := z.EncBinary()
					_ = yym353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym354 := z.EncBinary()
					_ = yym354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[2] {
					yym356 := z.EncBinary()
					_ = yym356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym357 := z.EncBinary()
					_ = yym357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym358 := z.DecBinary()
	_ = yym358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct359 := r.ContainerType()
		if yyct359 == codecSelferValueTypeMap1234 {
			yyl359 := r.ReadMapStart()
			if yyl359 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl359, d)
			}
		} else if yyct359 == codecSelferValueTypeArray1234 {
			yyl359 := r.ReadArrayStart()
			if yyl359 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl359, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys360Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys360Slc
	var yyhl360 bool = l >= 0
	for yyj360 := 0; ; yyj360++ {
		if yyhl360 {
			if yyj360 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys360Slc = r.DecodeBytes(yys360Slc, true, true)
		yys360 := string(yys360Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys360 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys360)
		} // end switch yys360
	} // end for yyj360
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj364 int
	var yyb364 bool
	var yyhl364 bool = l >= 0
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj364++
		if yyhl364 {
			yyb364 = yyj364 > l
		} else {
			yyb364 = r.CheckBreak()
		}
		if yyb364 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj364-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym368 := z.EncBinary()
		_ = yym368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep369 := !z.EncBinary()
			yy2arr369 := z.EncBasicHandle().StructToArray
			var yyq369 [4]bool
			_, _, _ = yysep369, yyq369, yy2arr369
			const yyr369 bool = false
			yyq369[0] = x.Kind != ""
			yyq369[1] = x.APIVersion != ""
			yyq369[2] = true
			var yynn369 int
			if yyr369 || yy2arr369 {
				r.EncodeArrayStart(4)
			} else {
				yynn369 = 1
				for _, b := range yyq369 {
					if b {
						yynn369++
					}
				}
				r.EncodeMapStart(yynn369)
				yynn369 = 0
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[0] {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[1] {
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym375 := z.EncBinary()
					_ = yym375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[2] {
					yy377 := &x.ListMeta
					yym378 := z.EncBinary()
					_ = yym378
					if false {
					} else if z.HasExtensions() && z.EncExt(yy377) {
					} else {
						z.EncFallback(yy377)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy379 := &x.ListMeta
					yym380 := z.EncBinary()
					_ = yym380
					if false {
					} else if z.HasExtensions() && z.EncExt(yy379) {
					} else {
						z.EncFallback(yy379)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym382 := z.EncBinary()
					_ = yym382
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym383 := z.EncBinary()
					_ = yym383
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym384 := z.DecBinary()
	_ = yym384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct385 := r.ContainerType()
		if yyct385 == codecSelferValueTypeMap1234 {
			yyl385 := r.ReadMapStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl385, d)
			}
		} else if yyct385 == codecSelferValueTypeArray1234 {
			yyl385 := r.ReadArrayStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys386Slc
	var yyhl386 bool = l >= 0
	for yyj386 := 0; ; yyj386++ {
		if yyhl386 {
			if yyj386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys386Slc = r.DecodeBytes(yys386Slc, true, true)
		yys386 := string(yys386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys386 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv389 := &x.ListMeta
				yym390 := z.DecBinary()
				_ = yym390
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv389) {
				} else {
					z.DecFallback(yyv389, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv391 := &x.Items
				yym392 := z.DecBinary()
				_ = yym392
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv391), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys386)
		} // end switch yys386
	} // end for yyj386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj393 int
	var yyb393 bool
	var yyhl393 bool = l >= 0
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv396 := &x.ListMeta
		yym397 := z.DecBinary()
		_ = yym397
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv396) {
		} else {
			z.DecFallback(yyv396, false)
		}
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv398 := &x.Items
		yym399 := z.DecBinary()
		_ = yym399
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv398), d)
		}
	}
	for {
		yyj393++
		if yyhl393 {
			yyb393 = yyj393 > l
		} else {
			yyb393 = r.CheckBreak()
		}
		if yyb393 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj393-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym400 := z.EncBinary()
		_ = yym400
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep401 := !z.EncBinary()
			yy2arr401 := z.EncBasicHandle().StructToArray
			var yyq401 [5]bool
			_, _, _ = yysep401, yyq401, yy2arr401
			const yyr401 bool = false
			yyq401[0] = x.Kind != ""
			yyq401[1] = x.APIVersion != ""
			yyq401[2] = true
			yyq401[3] = true
			yyq401[4] = true
			var yynn401 int
			if yyr401 || yy2arr401 {
				r.EncodeArrayStart(5)
			} else {
				yynn401 = 0
				for _, b := range yyq401 {
					if b {
						yynn401++
					}
				}
				r.EncodeMapStart(yynn401)
				yynn401 = 0
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[0] {
					yym403 := z.EncBinary()
					_ = yym403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq401[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym404 := z.EncBinary()
					_ = yym404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[1] {
					yym406 := z.EncBinary()
					_ = yym406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq401[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym407 := z.EncBinary()
					_ = yym407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[2] {
					yy409 := &x.ObjectMeta
					yy409.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy410 := &x.ObjectMeta
					yy410.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[3] {
					yy412 := &x.Spec
					yy412.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy413 := &x.Spec
					yy413.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[4] {
					yy415 := &x.Status
					yy415.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy416 := &x.Status
					yy416.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym417 := z.DecBinary()
	_ = yym417
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct418 := r.ContainerType()
		if yyct418 == codecSelferValueTypeMap1234 {
			yyl418 := r.ReadMapStart()
			if yyl418 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl418, d)
			}
		} else if yyct418 == codecSelferValueTypeArray1234 {
			yyl418 := r.ReadArrayStart()
			if yyl418 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl418, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys419Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys419Slc
	var yyhl419 bool = l >= 0
	for yyj419 := 0; ; yyj419++ {
		if yyhl419 {
			if yyj419 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys419Slc = r.DecodeBytes(yys419Slc, true, true)
		yys419 := string(yys419Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys419 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv422 := &x.ObjectMeta
				yyv422.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv423 := &x.Spec
				yyv423.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv424 := &x.Status
				yyv424.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys419)
		} // end switch yys419
	} // end for yyj419
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj425 int
	var yyb425 bool
	var yyhl425 bool = l >= 0
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv428 := &x.ObjectMeta
		yyv428.CodecDecodeSelf(d)
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv429 := &x.Spec
		yyv429.CodecDecodeSelf(d)
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv430 := &x.Status
		yyv430.CodecDecodeSelf(d)
	}
	for {
		yyj425++
		if yyhl425 {
			yyb425 = yyj425 > l
		} else {
			yyb425 = r.CheckBreak()
		}
		if yyb425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym431 := z.EncBinary()
		_ = yym431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep432 := !z.EncBinary()
			yy2arr432 := z.EncBasicHandle().StructToArray
			var yyq432 [4]bool
			_, _, _ = yysep432, yyq432, yy2arr432
			const yyr432 bool = false
			yyq432[0] = x.Kind != ""
			yyq432[1] = x.APIVersion != ""
			yyq432[2] = true
			var yynn432 int
			if yyr432 || yy2arr432 {
				r.EncodeArrayStart(4)
			} else {
				yynn432 = 1
				for _, b := range yyq432 {
					if b {
						yynn432++
					}
				}
				r.EncodeMapStart(yynn432)
				yynn432 = 0
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[0] {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[1] {
					yym437 := z.EncBinary()
					_ = yym437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[2] {
					yy440 := &x.ListMeta
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else if z.HasExtensions() && z.EncExt(yy440) {
					} else {
						z.EncFallback(yy440)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq432[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy442 := &x.ListMeta
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else if z.HasExtensions() && z.EncExt(yy442) {
					} else {
						z.EncFallback(yy442)
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym446 := z.EncBinary()
					_ = yym446
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym447 := z.DecBinary()
	_ = yym447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct448 := r.ContainerType()
		if yyct448 == codecSelferValueTypeMap1234 {
			yyl448 := r.ReadMapStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl448, d)
			}
		} else if yyct448 == codecSelferValueTypeArray1234 {
			yyl448 := r.ReadArrayStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl448, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys449Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys449Slc
	var yyhl449 bool = l >= 0
	for yyj449 := 0; ; yyj449++ {
		if yyhl449 {
			if yyj449 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys449Slc = r.DecodeBytes(yys449Slc, true, true)
		yys449 := string(yys449Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys449 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv452 := &x.ListMeta
				yym453 := z.DecBinary()
				_ = yym453
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv452) {
				} else {
					z.DecFallback(yyv452, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv454 := &x.Items
				yym455 := z.DecBinary()
				_ = yym455
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv454), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys449)
		} // end switch yys449
	} // end for yyj449
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj456 int
	var yyb456 bool
	var yyhl456 bool = l >= 0
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv459 := &x.ListMeta
		yym460 := z.DecBinary()
		_ = yym460
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv459) {
		} else {
			z.DecFallback(yyv459, false)
		}
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv461 := &x.Items
		yym462 := z.DecBinary()
		_ = yym462
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv461), d)
		}
	}
	for {
		yyj456++
		if yyhl456 {
			yyb456 = yyj456 > l
		} else {
			yyb456 = r.CheckBreak()
		}
		if yyb456 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj456-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym463 := z.EncBinary()
		_ = yym463
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep464 := !z.EncBinary()
			yy2arr464 := z.EncBasicHandle().StructToArray
			var yyq464 [3]bool
			_, _, _ = yysep464, yyq464, yy2arr464
			const yyr464 bool = false
			yyq464[0] = len(x.AccessModes) != 0
			yyq464[1] = true
			yyq464[2] = x.VolumeName != ""
			var yynn464 int
			if yyr464 || yy2arr464 {
				r.EncodeArrayStart(3)
			} else {
				yynn464 = 0
				for _, b := range yyq464 {
					if b {
						yynn464++
					}
				}
				r.EncodeMapStart(yynn464)
				yynn464 = 0
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym466 := z.EncBinary()
						_ = yym466
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq464[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym467 := z.EncBinary()
						_ = yym467
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[1] {
					yy469 := &x.Resources
					yy469.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq464[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy470 := &x.Resources
					yy470.CodecEncodeSelf(e)
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[2] {
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq464[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym473 := z.EncBinary()
					_ = yym473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym474 := z.DecBinary()
	_ = yym474
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct475 := r.ContainerType()
		if yyct475 == codecSelferValueTypeMap1234 {
			yyl475 := r.ReadMapStart()
			if yyl475 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl475, d)
			}
		} else if yyct475 == codecSelferValueTypeArray1234 {
			yyl475 := r.ReadArrayStart()
			if yyl475 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl475, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys476Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys476Slc
	var yyhl476 bool = l >= 0
	for yyj476 := 0; ; yyj476++ {
		if yyhl476 {
			if yyj476 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys476Slc = r.DecodeBytes(yys476Slc, true, true)
		yys476 := string(yys476Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys476 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv477 := &x.AccessModes
				yym478 := z.DecBinary()
				_ = yym478
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv477), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv479 := &x.Resources
				yyv479.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys476)
		} // end switch yys476
	} // end for yyj476
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj481 int
	var yyb481 bool
	var yyhl481 bool = l >= 0
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv482 := &x.AccessModes
		yym483 := z.DecBinary()
		_ = yym483
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv482), d)
		}
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv484 := &x.Resources
		yyv484.CodecDecodeSelf(d)
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj481++
		if yyhl481 {
			yyb481 = yyj481 > l
		} else {
			yyb481 = r.CheckBreak()
		}
		if yyb481 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj481-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym486 := z.EncBinary()
		_ = yym486
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep487 := !z.EncBinary()
			yy2arr487 := z.EncBasicHandle().StructToArray
			var yyq487 [3]bool
			_, _, _ = yysep487, yyq487, yy2arr487
			const yyr487 bool = false
			yyq487[0] = x.Phase != ""
			yyq487[1] = len(x.AccessModes) != 0
			yyq487[2] = len(x.Capacity) != 0
			var yynn487 int
			if yyr487 || yy2arr487 {
				r.EncodeArrayStart(3)
			} else {
				yynn487 = 0
				for _, b := range yyq487 {
					if b {
						yynn487++
					}
				}
				r.EncodeMapStart(yynn487)
				yynn487 = 0
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq487[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym490 := z.EncBinary()
						_ = yym490
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq487[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym491 := z.EncBinary()
						_ = yym491
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq487[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym493 := z.DecBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct494 := r.ContainerType()
		if yyct494 == codecSelferValueTypeMap1234 {
			yyl494 := r.ReadMapStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl494, d)
			}
		} else if yyct494 == codecSelferValueTypeArray1234 {
			yyl494 := r.ReadArrayStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys495Slc
	var yyhl495 bool = l >= 0
	for yyj495 := 0; ; yyj495++ {
		if yyhl495 {
			if yyj495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys495Slc = r.DecodeBytes(yys495Slc, true, true)
		yys495 := string(yys495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys495 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv497 := &x.AccessModes
				yym498 := z.DecBinary()
				_ = yym498
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv497), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv499 := &x.Capacity
				yyv499.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys495)
		} // end switch yys495
	} // end for yyj495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj500 int
	var yyb500 bool
	var yyhl500 bool = l >= 0
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv502 := &x.AccessModes
		yym503 := z.DecBinary()
		_ = yym503
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv502), d)
		}
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv504 := &x.Capacity
		yyv504.CodecDecodeSelf(d)
	}
	for {
		yyj500++
		if yyhl500 {
			yyb500 = yyj500 > l
		} else {
			yyb500 = r.CheckBreak()
		}
		if yyb500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym505 := z.EncBinary()
	_ = yym505
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym506 := z.DecBinary()
	_ = yym506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym507 := z.EncBinary()
	_ = yym507
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym508 := z.DecBinary()
	_ = yym508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym509 := z.EncBinary()
	_ = yym509
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym510 := z.DecBinary()
	_ = yym510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym511 := z.EncBinary()
		_ = yym511
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep512 := !z.EncBinary()
			yy2arr512 := z.EncBasicHandle().StructToArray
			var yyq512 [1]bool
			_, _, _ = yysep512, yyq512, yy2arr512
			const yyr512 bool = false
			var yynn512 int
			if yyr512 || yy2arr512 {
				r.EncodeArrayStart(1)
			} else {
				yynn512 = 1
				for _, b := range yyq512 {
					if b {
						yynn512++
					}
				}
				r.EncodeMapStart(yynn512)
				yynn512 = 0
			}
			if yyr512 || yy2arr512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym514 := z.EncBinary()
				_ = yym514
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym515 := z.EncBinary()
				_ = yym515
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr512 || yy2arr512 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym516 := z.DecBinary()
	_ = yym516
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct517 := r.ContainerType()
		if yyct517 == codecSelferValueTypeMap1234 {
			yyl517 := r.ReadMapStart()
			if yyl517 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl517, d)
			}
		} else if yyct517 == codecSelferValueTypeArray1234 {
			yyl517 := r.ReadArrayStart()
			if yyl517 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl517, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys518Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys518Slc
	var yyhl518 bool = l >= 0
	for yyj518 := 0; ; yyj518++ {
		if yyhl518 {
			if yyj518 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys518Slc = r.DecodeBytes(yys518Slc, true, true)
		yys518 := string(yys518Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys518 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys518)
		} // end switch yys518
	} // end for yyj518
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj520 int
	var yyb520 bool
	var yyhl520 bool = l >= 0
	yyj520++
	if yyhl520 {
		yyb520 = yyj520 > l
	} else {
		yyb520 = r.CheckBreak()
	}
	if yyb520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj520++
		if yyhl520 {
			yyb520 = yyj520 > l
		} else {
			yyb520 = r.CheckBreak()
		}
		if yyb520 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj520-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym522 := z.EncBinary()
		_ = yym522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep523 := !z.EncBinary()
			yy2arr523 := z.EncBasicHandle().StructToArray
			var yyq523 [1]bool
			_, _, _ = yysep523, yyq523, yy2arr523
			const yyr523 bool = false
			yyq523[0] = x.Medium != ""
			var yynn523 int
			if yyr523 || yy2arr523 {
				r.EncodeArrayStart(1)
			} else {
				yynn523 = 0
				for _, b := range yyq523 {
					if b {
						yynn523++
					}
				}
				r.EncodeMapStart(yynn523)
				yynn523 = 0
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq523[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq523[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym525 := z.DecBinary()
	_ = yym525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct526 := r.ContainerType()
		if yyct526 == codecSelferValueTypeMap1234 {
			yyl526 := r.ReadMapStart()
			if yyl526 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl526, d)
			}
		} else if yyct526 == codecSelferValueTypeArray1234 {
			yyl526 := r.ReadArrayStart()
			if yyl526 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl526, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys527Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys527Slc
	var yyhl527 bool = l >= 0
	for yyj527 := 0; ; yyj527++ {
		if yyhl527 {
			if yyj527 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys527Slc = r.DecodeBytes(yys527Slc, true, true)
		yys527 := string(yys527Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys527 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys527)
		} // end switch yys527
	} // end for yyj527
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj529 int
	var yyb529 bool
	var yyhl529 bool = l >= 0
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj529++
		if yyhl529 {
			yyb529 = yyj529 > l
		} else {
			yyb529 = r.CheckBreak()
		}
		if yyb529 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj529-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym531 := z.EncBinary()
	_ = yym531
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym533 := z.EncBinary()
	_ = yym533
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym534 := z.DecBinary()
	_ = yym534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym535 := z.EncBinary()
		_ = yym535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep536 := !z.EncBinary()
			yy2arr536 := z.EncBasicHandle().StructToArray
			var yyq536 [4]bool
			_, _, _ = yysep536, yyq536, yy2arr536
			const yyr536 bool = false
			yyq536[1] = x.FSType != ""
			yyq536[2] = x.Partition != 0
			yyq536[3] = x.ReadOnly != false
			var yynn536 int
			if yyr536 || yy2arr536 {
				r.EncodeArrayStart(4)
			} else {
				yynn536 = 1
				for _, b := range yyq536 {
					if b {
						yynn536++
					}
				}
				r.EncodeMapStart(yynn536)
				yynn536 = 0
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym538 := z.EncBinary()
				_ = yym538
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym539 := z.EncBinary()
				_ = yym539
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[1] {
					yym541 := z.EncBinary()
					_ = yym541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq536[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[2] {
					yym544 := z.EncBinary()
					_ = yym544
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq536[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[3] {
					yym547 := z.EncBinary()
					_ = yym547
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq536[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym548 := z.EncBinary()
					_ = yym548
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym549 := z.DecBinary()
	_ = yym549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct550 := r.ContainerType()
		if yyct550 == codecSelferValueTypeMap1234 {
			yyl550 := r.ReadMapStart()
			if yyl550 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl550, d)
			}
		} else if yyct550 == codecSelferValueTypeArray1234 {
			yyl550 := r.ReadArrayStart()
			if yyl550 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys551Slc
	var yyhl551 bool = l >= 0
	for yyj551 := 0; ; yyj551++ {
		if yyhl551 {
			if yyj551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys551Slc = r.DecodeBytes(yys551Slc, true, true)
		yys551 := string(yys551Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys551 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys551)
		} // end switch yys551
	} // end for yyj551
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj556 int
	var yyb556 bool
	var yyhl556 bool = l >= 0
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj556++
		if yyhl556 {
			yyb556 = yyj556 > l
		} else {
			yyb556 = r.CheckBreak()
		}
		if yyb556 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj556-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym561 := z.EncBinary()
		_ = yym561
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep562 := !z.EncBinary()
			yy2arr562 := z.EncBasicHandle().StructToArray
			var yyq562 [6]bool
			_, _, _ = yysep562, yyq562, yy2arr562
			const yyr562 bool = false
			yyq562[0] = x.TargetPortal != ""
			yyq562[1] = x.IQN != ""
			yyq562[2] = x.Lun != 0
			yyq562[3] = x.ISCSIInterface != ""
			yyq562[4] = x.FSType != ""
			yyq562[5] = x.ReadOnly != false
			var yynn562 int
			if yyr562 || yy2arr562 {
				r.EncodeArrayStart(6)
			} else {
				yynn562 = 0
				for _, b := range yyq562 {
					if b {
						yynn562++
					}
				}
				r.EncodeMapStart(yynn562)
				yynn562 = 0
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[0] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[1] {
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[2] {
					yym570 := z.EncBinary()
					_ = yym570
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq562[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym571 := z.EncBinary()
					_ = yym571
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[3] {
					yym573 := z.EncBinary()
					_ = yym573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym574 := z.EncBinary()
					_ = yym574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[4] {
					yym576 := z.EncBinary()
					_ = yym576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym577 := z.EncBinary()
					_ = yym577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[5] {
					yym579 := z.EncBinary()
					_ = yym579
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq562[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym580 := z.EncBinary()
					_ = yym580
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym581 := z.DecBinary()
	_ = yym581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct582 := r.ContainerType()
		if yyct582 == codecSelferValueTypeMap1234 {
			yyl582 := r.ReadMapStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl582, d)
			}
		} else if yyct582 == codecSelferValueTypeArray1234 {
			yyl582 := r.ReadArrayStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys583Slc
	var yyhl583 bool = l >= 0
	for yyj583 := 0; ; yyj583++ {
		if yyhl583 {
			if yyj583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys583Slc = r.DecodeBytes(yys583Slc, true, true)
		yys583 := string(yys583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys583 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys583)
		} // end switch yys583
	} // end for yyj583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj590 int
	var yyb590 bool
	var yyhl590 bool = l >= 0
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj590++
		if yyhl590 {
			yyb590 = yyj590 > l
		} else {
			yyb590 = r.CheckBreak()
		}
		if yyb590 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj590-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym597 := z.EncBinary()
		_ = yym597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep598 := !z.EncBinary()
			yy2arr598 := z.EncBasicHandle().StructToArray
			var yyq598 [4]bool
			_, _, _ = yysep598, yyq598, yy2arr598
			const yyr598 bool = false
			yyq598[3] = x.ReadOnly != false
			var yynn598 int
			if yyr598 || yy2arr598 {
				r.EncodeArrayStart(4)
			} else {
				yynn598 = 3
				for _, b := range yyq598 {
					if b {
						yynn598++
					}
				}
				r.EncodeMapStart(yynn598)
				yynn598 = 0
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym600 := z.EncBinary()
					_ = yym600
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym601 := z.EncBinary()
					_ = yym601
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy603 := *x.Lun
					yym604 := z.EncBinary()
					_ = yym604
					if false {
					} else {
						r.EncodeInt(int64(yy603))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy605 := *x.Lun
					yym606 := z.EncBinary()
					_ = yym606
					if false {
					} else {
						r.EncodeInt(int64(yy605))
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym608 := z.EncBinary()
				_ = yym608
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym609 := z.EncBinary()
				_ = yym609
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq598[3] {
					yym611 := z.EncBinary()
					_ = yym611
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq598[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym613 := z.DecBinary()
	_ = yym613
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct614 := r.ContainerType()
		if yyct614 == codecSelferValueTypeMap1234 {
			yyl614 := r.ReadMapStart()
			if yyl614 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl614, d)
			}
		} else if yyct614 == codecSelferValueTypeArray1234 {
			yyl614 := r.ReadArrayStart()
			if yyl614 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl614, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys615Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys615Slc
	var yyhl615 bool = l >= 0
	for yyj615 := 0; ; yyj615++ {
		if yyhl615 {
			if yyj615 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys615Slc = r.DecodeBytes(yys615Slc, true, true)
		yys615 := string(yys615Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys615 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv616 := &x.TargetWWNs
				yym617 := z.DecBinary()
				_ = yym617
				if false {
				} else {
					z.F.DecSliceStringX(yyv616, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym619 := z.DecBinary()
				_ = yym619
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys615)
		} // end switch yys615
	} // end for yyj615
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj622 int
	var yyb622 bool
	var yyhl622 bool = l >= 0
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv623 := &x.TargetWWNs
		yym624 := z.DecBinary()
		_ = yym624
		if false {
		} else {
			z.F.DecSliceStringX(yyv623, false, d)
		}
	}
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym626 := z.DecBinary()
		_ = yym626
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj622++
		if yyhl622 {
			yyb622 = yyj622 > l
		} else {
			yyb622 = r.CheckBreak()
		}
		if yyb622 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj622-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym629 := z.EncBinary()
		_ = yym629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep630 := !z.EncBinary()
			yy2arr630 := z.EncBasicHandle().StructToArray
			var yyq630 [5]bool
			_, _, _ = yysep630, yyq630, yy2arr630
			const yyr630 bool = false
			yyq630[1] = x.FSType != ""
			yyq630[2] = x.SecretRef != nil
			yyq630[3] = x.ReadOnly != false
			yyq630[4] = len(x.Options) != 0
			var yynn630 int
			if yyr630 || yy2arr630 {
				r.EncodeArrayStart(5)
			} else {
				yynn630 = 1
				for _, b := range yyq630 {
					if b {
						yynn630++
					}
				}
				r.EncodeMapStart(yynn630)
				yynn630 = 0
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym632 := z.EncBinary()
				_ = yym632
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym633 := z.EncBinary()
				_ = yym633
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[1] {
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq630[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[3] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq630[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym642 := z.EncBinary()
						_ = yym642
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq630[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym643 := z.EncBinary()
						_ = yym643
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym644 := z.DecBinary()
	_ = yym644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct645 := r.ContainerType()
		if yyct645 == codecSelferValueTypeMap1234 {
			yyl645 := r.ReadMapStart()
			if yyl645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl645, d)
			}
		} else if yyct645 == codecSelferValueTypeArray1234 {
			yyl645 := r.ReadArrayStart()
			if yyl645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys646Slc
	var yyhl646 bool = l >= 0
	for yyj646 := 0; ; yyj646++ {
		if yyhl646 {
			if yyj646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys646Slc = r.DecodeBytes(yys646Slc, true, true)
		yys646 := string(yys646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys646 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv651 := &x.Options
				yym652 := z.DecBinary()
				_ = yym652
				if false {
				} else {
					z.F.DecMapStringStringX(yyv651, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys646)
		} // end switch yys646
	} // end for yyj646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj653 int
	var yyb653 bool
	var yyhl653 bool = l >= 0
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv658 := &x.Options
		yym659 := z.DecBinary()
		_ = yym659
		if false {
		} else {
			z.F.DecMapStringStringX(yyv658, false, d)
		}
	}
	for {
		yyj653++
		if yyhl653 {
			yyb653 = yyj653 > l
		} else {
			yyb653 = r.CheckBreak()
		}
		if yyb653 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj653-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym660 := z.EncBinary()
		_ = yym660
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep661 := !z.EncBinary()
			yy2arr661 := z.EncBasicHandle().StructToArray
			var yyq661 [4]bool
			_, _, _ = yysep661, yyq661, yy2arr661
			const yyr661 bool = false
			yyq661[1] = x.FSType != ""
			yyq661[2] = x.Partition != 0
			yyq661[3] = x.ReadOnly != false
			var yynn661 int
			if yyr661 || yy2arr661 {
				r.EncodeArrayStart(4)
			} else {
				yynn661 = 1
				for _, b := range yyq661 {
					if b {
						yynn661++
					}
				}
				r.EncodeMapStart(yynn661)
				yynn661 = 0
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym663 := z.EncBinary()
				_ = yym663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym664 := z.EncBinary()
				_ = yym664
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[1] {
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq661[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[2] {
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq661[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym670 := z.EncBinary()
					_ = yym670
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[3] {
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq661[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym674 := z.DecBinary()
	_ = yym674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct675 := r.ContainerType()
		if yyct675 == codecSelferValueTypeMap1234 {
			yyl675 := r.ReadMapStart()
			if yyl675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl675, d)
			}
		} else if yyct675 == codecSelferValueTypeArray1234 {
			yyl675 := r.ReadArrayStart()
			if yyl675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys676Slc
	var yyhl676 bool = l >= 0
	for yyj676 := 0; ; yyj676++ {
		if yyhl676 {
			if yyj676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys676Slc = r.DecodeBytes(yys676Slc, true, true)
		yys676 := string(yys676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys676 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys676)
		} // end switch yys676
	} // end for yyj676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj681 int
	var yyb681 bool
	var yyhl681 bool = l >= 0
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj681++
		if yyhl681 {
			yyb681 = yyj681 > l
		} else {
			yyb681 = r.CheckBreak()
		}
		if yyb681 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj681-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym686 := z.EncBinary()
		_ = yym686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep687 := !z.EncBinary()
			yy2arr687 := z.EncBasicHandle().StructToArray
			var yyq687 [3]bool
			_, _, _ = yysep687, yyq687, yy2arr687
			const yyr687 bool = false
			yyq687[1] = x.Revision != ""
			yyq687[2] = x.Directory != ""
			var yynn687 int
			if yyr687 || yy2arr687 {
				r.EncodeArrayStart(3)
			} else {
				yynn687 = 1
				for _, b := range yyq687 {
					if b {
						yynn687++
					}
				}
				r.EncodeMapStart(yynn687)
				yynn687 = 0
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym689 := z.EncBinary()
				_ = yym689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym690 := z.EncBinary()
				_ = yym690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq687[1] {
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq687[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq687[2] {
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq687[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym697 := z.DecBinary()
	_ = yym697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct698 := r.ContainerType()
		if yyct698 == codecSelferValueTypeMap1234 {
			yyl698 := r.ReadMapStart()
			if yyl698 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl698, d)
			}
		} else if yyct698 == codecSelferValueTypeArray1234 {
			yyl698 := r.ReadArrayStart()
			if yyl698 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys699Slc
	var yyhl699 bool = l >= 0
	for yyj699 := 0; ; yyj699++ {
		if yyhl699 {
			if yyj699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys699Slc = r.DecodeBytes(yys699Slc, true, true)
		yys699 := string(yys699Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys699 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys699)
		} // end switch yys699
	} // end for yyj699
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj703 int
	var yyb703 bool
	var yyhl703 bool = l >= 0
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj703++
		if yyhl703 {
			yyb703 = yyj703 > l
		} else {
			yyb703 = r.CheckBreak()
		}
		if yyb703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym707 := z.EncBinary()
		_ = yym707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep708 := !z.EncBinary()
			yy2arr708 := z.EncBasicHandle().StructToArray
			var yyq708 [1]bool
			_, _, _ = yysep708, yyq708, yy2arr708
			const yyr708 bool = false
			var yynn708 int
			if yyr708 || yy2arr708 {
				r.EncodeArrayStart(1)
			} else {
				yynn708 = 1
				for _, b := range yyq708 {
					if b {
						yynn708++
					}
				}
				r.EncodeMapStart(yynn708)
				yynn708 = 0
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym710 := z.EncBinary()
				_ = yym710
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym711 := z.EncBinary()
				_ = yym711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym712 := z.DecBinary()
	_ = yym712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct713 := r.ContainerType()
		if yyct713 == codecSelferValueTypeMap1234 {
			yyl713 := r.ReadMapStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl713, d)
			}
		} else if yyct713 == codecSelferValueTypeArray1234 {
			yyl713 := r.ReadArrayStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl713, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys714Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys714Slc
	var yyhl714 bool = l >= 0
	for yyj714 := 0; ; yyj714++ {
		if yyhl714 {
			if yyj714 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys714Slc = r.DecodeBytes(yys714Slc, true, true)
		yys714 := string(yys714Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys714 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys714)
		} // end switch yys714
	} // end for yyj714
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj716 int
	var yyb716 bool
	var yyhl716 bool = l >= 0
	yyj716++
	if yyhl716 {
		yyb716 = yyj716 > l
	} else {
		yyb716 = r.CheckBreak()
	}
	if yyb716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj716++
		if yyhl716 {
			yyb716 = yyj716 > l
		} else {
			yyb716 = r.CheckBreak()
		}
		if yyb716 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj716-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym718 := z.EncBinary()
		_ = yym718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep719 := !z.EncBinary()
			yy2arr719 := z.EncBasicHandle().StructToArray
			var yyq719 [3]bool
			_, _, _ = yysep719, yyq719, yy2arr719
			const yyr719 bool = false
			yyq719[2] = x.ReadOnly != false
			var yynn719 int
			if yyr719 || yy2arr719 {
				r.EncodeArrayStart(3)
			} else {
				yynn719 = 2
				for _, b := range yyq719 {
					if b {
						yynn719++
					}
				}
				r.EncodeMapStart(yynn719)
				yynn719 = 0
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym721 := z.EncBinary()
				_ = yym721
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym722 := z.EncBinary()
				_ = yym722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq719[2] {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym729 := z.DecBinary()
	_ = yym729
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct730 := r.ContainerType()
		if yyct730 == codecSelferValueTypeMap1234 {
			yyl730 := r.ReadMapStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl730, d)
			}
		} else if yyct730 == codecSelferValueTypeArray1234 {
			yyl730 := r.ReadArrayStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl730, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys731Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys731Slc
	var yyhl731 bool = l >= 0
	for yyj731 := 0; ; yyj731++ {
		if yyhl731 {
			if yyj731 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys731Slc = r.DecodeBytes(yys731Slc, true, true)
		yys731 := string(yys731Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys731 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys731)
		} // end switch yys731
	} // end for yyj731
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj735 int
	var yyb735 bool
	var yyhl735 bool = l >= 0
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj735++
		if yyhl735 {
			yyb735 = yyj735 > l
		} else {
			yyb735 = r.CheckBreak()
		}
		if yyb735 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj735-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym739 := z.EncBinary()
		_ = yym739
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep740 := !z.EncBinary()
			yy2arr740 := z.EncBasicHandle().StructToArray
			var yyq740 [3]bool
			_, _, _ = yysep740, yyq740, yy2arr740
			const yyr740 bool = false
			yyq740[2] = x.ReadOnly != false
			var yynn740 int
			if yyr740 || yy2arr740 {
				r.EncodeArrayStart(3)
			} else {
				yynn740 = 2
				for _, b := range yyq740 {
					if b {
						yynn740++
					}
				}
				r.EncodeMapStart(yynn740)
				yynn740 = 0
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym742 := z.EncBinary()
				_ = yym742
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym743 := z.EncBinary()
				_ = yym743
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym745 := z.EncBinary()
				_ = yym745
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym746 := z.EncBinary()
				_ = yym746
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq740[2] {
					yym748 := z.EncBinary()
					_ = yym748
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq740[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym749 := z.EncBinary()
					_ = yym749
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym750 := z.DecBinary()
	_ = yym750
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct751 := r.ContainerType()
		if yyct751 == codecSelferValueTypeMap1234 {
			yyl751 := r.ReadMapStart()
			if yyl751 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl751, d)
			}
		} else if yyct751 == codecSelferValueTypeArray1234 {
			yyl751 := r.ReadArrayStart()
			if yyl751 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl751, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys752Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys752Slc
	var yyhl752 bool = l >= 0
	for yyj752 := 0; ; yyj752++ {
		if yyhl752 {
			if yyj752 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys752Slc = r.DecodeBytes(yys752Slc, true, true)
		yys752 := string(yys752Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys752 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys752)
		} // end switch yys752
	} // end for yyj752
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj756 int
	var yyb756 bool
	var yyhl756 bool = l >= 0
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj756++
		if yyhl756 {
			yyb756 = yyj756 > l
		} else {
			yyb756 = r.CheckBreak()
		}
		if yyb756 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj756-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym760 := z.EncBinary()
		_ = yym760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep761 := !z.EncBinary()
			yy2arr761 := z.EncBasicHandle().StructToArray
			var yyq761 [8]bool
			_, _, _ = yysep761, yyq761, yy2arr761
			const yyr761 bool = false
			yyq761[2] = x.FSType != ""
			yyq761[7] = x.ReadOnly != false
			var yynn761 int
			if yyr761 || yy2arr761 {
				r.EncodeArrayStart(8)
			} else {
				yynn761 = 6
				for _, b := range yyq761 {
					if b {
						yynn761++
					}
				}
				r.EncodeMapStart(yynn761)
				yynn761 = 0
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym767 := z.EncBinary()
				_ = yym767
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[2] {
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq761[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym772 := z.EncBinary()
				_ = yym772
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym773 := z.EncBinary()
				_ = yym773
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym775 := z.EncBinary()
				_ = yym775
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym776 := z.EncBinary()
				_ = yym776
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym778 := z.EncBinary()
				_ = yym778
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym779 := z.EncBinary()
				_ = yym779
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[7] {
					yym782 := z.EncBinary()
					_ = yym782
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq761[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym784 := z.DecBinary()
	_ = yym784
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct785 := r.ContainerType()
		if yyct785 == codecSelferValueTypeMap1234 {
			yyl785 := r.ReadMapStart()
			if yyl785 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl785, d)
			}
		} else if yyct785 == codecSelferValueTypeArray1234 {
			yyl785 := r.ReadArrayStart()
			if yyl785 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl785, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys786Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys786Slc
	var yyhl786 bool = l >= 0
	for yyj786 := 0; ; yyj786++ {
		if yyhl786 {
			if yyj786 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys786Slc = r.DecodeBytes(yys786Slc, true, true)
		yys786 := string(yys786Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys786 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv787 := &x.CephMonitors
				yym788 := z.DecBinary()
				_ = yym788
				if false {
				} else {
					z.F.DecSliceStringX(yyv787, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys786)
		} // end switch yys786
	} // end for yyj786
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj796 int
	var yyb796 bool
	var yyhl796 bool = l >= 0
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv797 := &x.CephMonitors
		yym798 := z.DecBinary()
		_ = yym798
		if false {
		} else {
			z.F.DecSliceStringX(yyv797, false, d)
		}
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj796++
		if yyhl796 {
			yyb796 = yyj796 > l
		} else {
			yyb796 = r.CheckBreak()
		}
		if yyb796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym806 := z.EncBinary()
		_ = yym806
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep807 := !z.EncBinary()
			yy2arr807 := z.EncBasicHandle().StructToArray
			var yyq807 [3]bool
			_, _, _ = yysep807, yyq807, yy2arr807
			const yyr807 bool = false
			yyq807[1] = x.FSType != ""
			yyq807[2] = x.ReadOnly != false
			var yynn807 int
			if yyr807 || yy2arr807 {
				r.EncodeArrayStart(3)
			} else {
				yynn807 = 1
				for _, b := range yyq807 {
					if b {
						yynn807++
					}
				}
				r.EncodeMapStart(yynn807)
				yynn807 = 0
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym809 := z.EncBinary()
				_ = yym809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym810 := z.EncBinary()
				_ = yym810
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq807[1] {
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq807[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq807[2] {
					yym815 := z.EncBinary()
					_ = yym815
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq807[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym816 := z.EncBinary()
					_ = yym816
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym817 := z.DecBinary()
	_ = yym817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct818 := r.ContainerType()
		if yyct818 == codecSelferValueTypeMap1234 {
			yyl818 := r.ReadMapStart()
			if yyl818 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl818, d)
			}
		} else if yyct818 == codecSelferValueTypeArray1234 {
			yyl818 := r.ReadArrayStart()
			if yyl818 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl818, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys819Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys819Slc
	var yyhl819 bool = l >= 0
	for yyj819 := 0; ; yyj819++ {
		if yyhl819 {
			if yyj819 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys819Slc = r.DecodeBytes(yys819Slc, true, true)
		yys819 := string(yys819Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys819 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys819)
		} // end switch yys819
	} // end for yyj819
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj823 int
	var yyb823 bool
	var yyhl823 bool = l >= 0
	yyj823++
	if yyhl823 {
		yyb823 = yyj823 > l
	} else {
		yyb823 = r.CheckBreak()
	}
	if yyb823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj823++
	if yyhl823 {
		yyb823 = yyj823 > l
	} else {
		yyb823 = r.CheckBreak()
	}
	if yyb823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj823++
	if yyhl823 {
		yyb823 = yyj823 > l
	} else {
		yyb823 = r.CheckBreak()
	}
	if yyb823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj823++
		if yyhl823 {
			yyb823 = yyj823 > l
		} else {
			yyb823 = r.CheckBreak()
		}
		if yyb823 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj823-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym827 := z.EncBinary()
		_ = yym827
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep828 := !z.EncBinary()
			yy2arr828 := z.EncBasicHandle().StructToArray
			var yyq828 [5]bool
			_, _, _ = yysep828, yyq828, yy2arr828
			const yyr828 bool = false
			yyq828[1] = x.User != ""
			yyq828[2] = x.SecretFile != ""
			yyq828[3] = x.SecretRef != nil
			yyq828[4] = x.ReadOnly != false
			var yynn828 int
			if yyr828 || yy2arr828 {
				r.EncodeArrayStart(5)
			} else {
				yynn828 = 1
				for _, b := range yyq828 {
					if b {
						yynn828++
					}
				}
				r.EncodeMapStart(yynn828)
				yynn828 = 0
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[1] {
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq828[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[2] {
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq828[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq828[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[4] {
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq828[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym842 := z.DecBinary()
	_ = yym842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct843 := r.ContainerType()
		if yyct843 == codecSelferValueTypeMap1234 {
			yyl843 := r.ReadMapStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl843, d)
			}
		} else if yyct843 == codecSelferValueTypeArray1234 {
			yyl843 := r.ReadArrayStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys844Slc
	var yyhl844 bool = l >= 0
	for yyj844 := 0; ; yyj844++ {
		if yyhl844 {
			if yyj844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys844Slc = r.DecodeBytes(yys844Slc, true, true)
		yys844 := string(yys844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys844 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv845 := &x.Monitors
				yym846 := z.DecBinary()
				_ = yym846
				if false {
				} else {
					z.F.DecSliceStringX(yyv845, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys844)
		} // end switch yys844
	} // end for yyj844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj851 int
	var yyb851 bool
	var yyhl851 bool = l >= 0
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv852 := &x.Monitors
		yym853 := z.DecBinary()
		_ = yym853
		if false {
		} else {
			z.F.DecSliceStringX(yyv852, false, d)
		}
	}
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj851++
		if yyhl851 {
			yyb851 = yyj851 > l
		} else {
			yyb851 = r.CheckBreak()
		}
		if yyb851 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj851-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym858 := z.EncBinary()
		_ = yym858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep859 := !z.EncBinary()
			yy2arr859 := z.EncBasicHandle().StructToArray
			var yyq859 [1]bool
			_, _, _ = yysep859, yyq859, yy2arr859
			const yyr859 bool = false
			var yynn859 int
			if yyr859 || yy2arr859 {
				r.EncodeArrayStart(1)
			} else {
				yynn859 = 1
				for _, b := range yyq859 {
					if b {
						yynn859++
					}
				}
				r.EncodeMapStart(yynn859)
				yynn859 = 0
			}
			if yyr859 || yy2arr859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym861 := z.EncBinary()
				_ = yym861
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym862 := z.EncBinary()
				_ = yym862
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr859 || yy2arr859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym863 := z.DecBinary()
	_ = yym863
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct864 := r.ContainerType()
		if yyct864 == codecSelferValueTypeMap1234 {
			yyl864 := r.ReadMapStart()
			if yyl864 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl864, d)
			}
		} else if yyct864 == codecSelferValueTypeArray1234 {
			yyl864 := r.ReadArrayStart()
			if yyl864 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl864, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys865Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys865Slc
	var yyhl865 bool = l >= 0
	for yyj865 := 0; ; yyj865++ {
		if yyhl865 {
			if yyj865 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys865Slc = r.DecodeBytes(yys865Slc, true, true)
		yys865 := string(yys865Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys865 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys865)
		} // end switch yys865
	} // end for yyj865
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj867 int
	var yyb867 bool
	var yyhl867 bool = l >= 0
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj867++
		if yyhl867 {
			yyb867 = yyj867 > l
		} else {
			yyb867 = r.CheckBreak()
		}
		if yyb867 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj867-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym869 := z.EncBinary()
		_ = yym869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep870 := !z.EncBinary()
			yy2arr870 := z.EncBasicHandle().StructToArray
			var yyq870 [1]bool
			_, _, _ = yysep870, yyq870, yy2arr870
			const yyr870 bool = false
			yyq870[0] = len(x.Items) != 0
			var yynn870 int
			if yyr870 || yy2arr870 {
				r.EncodeArrayStart(1)
			} else {
				yynn870 = 0
				for _, b := range yyq870 {
					if b {
						yynn870++
					}
				}
				r.EncodeMapStart(yynn870)
				yynn870 = 0
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym872 := z.EncBinary()
						_ = yym872
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq870[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym873 := z.EncBinary()
						_ = yym873
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym874 := z.DecBinary()
	_ = yym874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct875 := r.ContainerType()
		if yyct875 == codecSelferValueTypeMap1234 {
			yyl875 := r.ReadMapStart()
			if yyl875 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl875, d)
			}
		} else if yyct875 == codecSelferValueTypeArray1234 {
			yyl875 := r.ReadArrayStart()
			if yyl875 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys876Slc
	var yyhl876 bool = l >= 0
	for yyj876 := 0; ; yyj876++ {
		if yyhl876 {
			if yyj876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys876Slc = r.DecodeBytes(yys876Slc, true, true)
		yys876 := string(yys876Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys876 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv877 := &x.Items
				yym878 := z.DecBinary()
				_ = yym878
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv877), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys876)
		} // end switch yys876
	} // end for yyj876
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj879 int
	var yyb879 bool
	var yyhl879 bool = l >= 0
	yyj879++
	if yyhl879 {
		yyb879 = yyj879 > l
	} else {
		yyb879 = r.CheckBreak()
	}
	if yyb879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv880 := &x.Items
		yym881 := z.DecBinary()
		_ = yym881
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv880), d)
		}
	}
	for {
		yyj879++
		if yyhl879 {
			yyb879 = yyj879 > l
		} else {
			yyb879 = r.CheckBreak()
		}
		if yyb879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym882 := z.EncBinary()
		_ = yym882
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep883 := !z.EncBinary()
			yy2arr883 := z.EncBasicHandle().StructToArray
			var yyq883 [2]bool
			_, _, _ = yysep883, yyq883, yy2arr883
			const yyr883 bool = false
			var yynn883 int
			if yyr883 || yy2arr883 {
				r.EncodeArrayStart(2)
			} else {
				yynn883 = 2
				for _, b := range yyq883 {
					if b {
						yynn883++
					}
				}
				r.EncodeMapStart(yynn883)
				yynn883 = 0
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym885 := z.EncBinary()
				_ = yym885
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym886 := z.EncBinary()
				_ = yym886
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy888 := &x.FieldRef
				yy888.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy889 := &x.FieldRef
				yy889.CodecEncodeSelf(e)
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym890 := z.DecBinary()
	_ = yym890
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct891 := r.ContainerType()
		if yyct891 == codecSelferValueTypeMap1234 {
			yyl891 := r.ReadMapStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl891, d)
			}
		} else if yyct891 == codecSelferValueTypeArray1234 {
			yyl891 := r.ReadArrayStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl891, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys892Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys892Slc
	var yyhl892 bool = l >= 0
	for yyj892 := 0; ; yyj892++ {
		if yyhl892 {
			if yyj892 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys892Slc = r.DecodeBytes(yys892Slc, true, true)
		yys892 := string(yys892Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys892 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv894 := &x.FieldRef
				yyv894.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys892)
		} // end switch yys892
	} // end for yyj892
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj895 int
	var yyb895 bool
	var yyhl895 bool = l >= 0
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv897 := &x.FieldRef
		yyv897.CodecDecodeSelf(d)
	}
	for {
		yyj895++
		if yyhl895 {
			yyb895 = yyj895 > l
		} else {
			yyb895 = r.CheckBreak()
		}
		if yyb895 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj895-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym898 := z.EncBinary()
		_ = yym898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep899 := !z.EncBinary()
			yy2arr899 := z.EncBasicHandle().StructToArray
			var yyq899 [5]bool
			_, _, _ = yysep899, yyq899, yy2arr899
			const yyr899 bool = false
			yyq899[0] = x.Name != ""
			yyq899[1] = x.HostPort != 0
			yyq899[3] = x.Protocol != ""
			yyq899[4] = x.HostIP != ""
			var yynn899 int
			if yyr899 || yy2arr899 {
				r.EncodeArrayStart(5)
			} else {
				yynn899 = 1
				for _, b := range yyq899 {
					if b {
						yynn899++
					}
				}
				r.EncodeMapStart(yynn899)
				yynn899 = 0
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq899[0] {
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq899[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq899[1] {
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq899[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym907 := z.EncBinary()
				_ = yym907
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym908 := z.EncBinary()
				_ = yym908
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq899[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq899[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq899[4] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq899[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym913 := z.DecBinary()
	_ = yym913
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct914 := r.ContainerType()
		if yyct914 == codecSelferValueTypeMap1234 {
			yyl914 := r.ReadMapStart()
			if yyl914 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl914, d)
			}
		} else if yyct914 == codecSelferValueTypeArray1234 {
			yyl914 := r.ReadArrayStart()
			if yyl914 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl914, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys915Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys915Slc
	var yyhl915 bool = l >= 0
	for yyj915 := 0; ; yyj915++ {
		if yyhl915 {
			if yyj915 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys915Slc = r.DecodeBytes(yys915Slc, true, true)
		yys915 := string(yys915Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys915 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys915)
		} // end switch yys915
	} // end for yyj915
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj921 int
	var yyb921 bool
	var yyhl921 bool = l >= 0
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj921++
		if yyhl921 {
			yyb921 = yyj921 > l
		} else {
			yyb921 = r.CheckBreak()
		}
		if yyb921 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj921-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym927 := z.EncBinary()
		_ = yym927
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep928 := !z.EncBinary()
			yy2arr928 := z.EncBasicHandle().StructToArray
			var yyq928 [3]bool
			_, _, _ = yysep928, yyq928, yy2arr928
			const yyr928 bool = false
			yyq928[1] = x.ReadOnly != false
			var yynn928 int
			if yyr928 || yy2arr928 {
				r.EncodeArrayStart(3)
			} else {
				yynn928 = 2
				for _, b := range yyq928 {
					if b {
						yynn928++
					}
				}
				r.EncodeMapStart(yynn928)
				yynn928 = 0
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym930 := z.EncBinary()
				_ = yym930
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym931 := z.EncBinary()
				_ = yym931
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq928[1] {
					yym933 := z.EncBinary()
					_ = yym933
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq928[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym934 := z.EncBinary()
					_ = yym934
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym936 := z.EncBinary()
				_ = yym936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym937 := z.EncBinary()
				_ = yym937
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym938 := z.DecBinary()
	_ = yym938
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct939 := r.ContainerType()
		if yyct939 == codecSelferValueTypeMap1234 {
			yyl939 := r.ReadMapStart()
			if yyl939 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl939, d)
			}
		} else if yyct939 == codecSelferValueTypeArray1234 {
			yyl939 := r.ReadArrayStart()
			if yyl939 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl939, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys940Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys940Slc
	var yyhl940 bool = l >= 0
	for yyj940 := 0; ; yyj940++ {
		if yyhl940 {
			if yyj940 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys940Slc = r.DecodeBytes(yys940Slc, true, true)
		yys940 := string(yys940Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys940 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys940)
		} // end switch yys940
	} // end for yyj940
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj944 int
	var yyb944 bool
	var yyhl944 bool = l >= 0
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj944++
		if yyhl944 {
			yyb944 = yyj944 > l
		} else {
			yyb944 = r.CheckBreak()
		}
		if yyb944 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj944-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym948 := z.EncBinary()
		_ = yym948
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep949 := !z.EncBinary()
			yy2arr949 := z.EncBasicHandle().StructToArray
			var yyq949 [3]bool
			_, _, _ = yysep949, yyq949, yy2arr949
			const yyr949 bool = false
			yyq949[1] = x.Value != ""
			yyq949[2] = x.ValueFrom != nil
			var yynn949 int
			if yyr949 || yy2arr949 {
				r.EncodeArrayStart(3)
			} else {
				yynn949 = 1
				for _, b := range yyq949 {
					if b {
						yynn949++
					}
				}
				r.EncodeMapStart(yynn949)
				yynn949 = 0
			}
			if yyr949 || yy2arr949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym951 := z.EncBinary()
				_ = yym951
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym952 := z.EncBinary()
				_ = yym952
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr949 || yy2arr949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq949[1] {
					yym954 := z.EncBinary()
					_ = yym954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq949[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr949 || yy2arr949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq949[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq949[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr949 || yy2arr949 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym957 := z.DecBinary()
	_ = yym957
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct958 := r.ContainerType()
		if yyct958 == codecSelferValueTypeMap1234 {
			yyl958 := r.ReadMapStart()
			if yyl958 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl958, d)
			}
		} else if yyct958 == codecSelferValueTypeArray1234 {
			yyl958 := r.ReadArrayStart()
			if yyl958 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl958, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys959Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys959Slc
	var yyhl959 bool = l >= 0
	for yyj959 := 0; ; yyj959++ {
		if yyhl959 {
			if yyj959 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys959Slc = r.DecodeBytes(yys959Slc, true, true)
		yys959 := string(yys959Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys959 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys959)
		} // end switch yys959
	} // end for yyj959
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj963 int
	var yyb963 bool
	var yyhl963 bool = l >= 0
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj963++
		if yyhl963 {
			yyb963 = yyj963 > l
		} else {
			yyb963 = r.CheckBreak()
		}
		if yyb963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym967 := z.EncBinary()
		_ = yym967
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep968 := !z.EncBinary()
			yy2arr968 := z.EncBasicHandle().StructToArray
			var yyq968 [1]bool
			_, _, _ = yysep968, yyq968, yy2arr968
			const yyr968 bool = false
			var yynn968 int
			if yyr968 || yy2arr968 {
				r.EncodeArrayStart(1)
			} else {
				yynn968 = 1
				for _, b := range yyq968 {
					if b {
						yynn968++
					}
				}
				r.EncodeMapStart(yynn968)
				yynn968 = 0
			}
			if yyr968 || yy2arr968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yyr968 || yy2arr968 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym970 := z.DecBinary()
	_ = yym970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct971 := r.ContainerType()
		if yyct971 == codecSelferValueTypeMap1234 {
			yyl971 := r.ReadMapStart()
			if yyl971 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl971, d)
			}
		} else if yyct971 == codecSelferValueTypeArray1234 {
			yyl971 := r.ReadArrayStart()
			if yyl971 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl971, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys972Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys972Slc
	var yyhl972 bool = l >= 0
	for yyj972 := 0; ; yyj972++ {
		if yyhl972 {
			if yyj972 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys972Slc = r.DecodeBytes(yys972Slc, true, true)
		yys972 := string(yys972Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys972 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys972)
		} // end switch yys972
	} // end for yyj972
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj974 int
	var yyb974 bool
	var yyhl974 bool = l >= 0
	yyj974++
	if yyhl974 {
		yyb974 = yyj974 > l
	} else {
		yyb974 = r.CheckBreak()
	}
	if yyb974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj974++
		if yyhl974 {
			yyb974 = yyj974 > l
		} else {
			yyb974 = r.CheckBreak()
		}
		if yyb974 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj974-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym976 := z.EncBinary()
		_ = yym976
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep977 := !z.EncBinary()
			yy2arr977 := z.EncBasicHandle().StructToArray
			var yyq977 [2]bool
			_, _, _ = yysep977, yyq977, yy2arr977
			const yyr977 bool = false
			var yynn977 int
			if yyr977 || yy2arr977 {
				r.EncodeArrayStart(2)
			} else {
				yynn977 = 2
				for _, b := range yyq977 {
					if b {
						yynn977++
					}
				}
				r.EncodeMapStart(yynn977)
				yynn977 = 0
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym979 := z.EncBinary()
				_ = yym979
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym980 := z.EncBinary()
				_ = yym980
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym982 := z.EncBinary()
				_ = yym982
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym983 := z.EncBinary()
				_ = yym983
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym984 := z.DecBinary()
	_ = yym984
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct985 := r.ContainerType()
		if yyct985 == codecSelferValueTypeMap1234 {
			yyl985 := r.ReadMapStart()
			if yyl985 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl985, d)
			}
		} else if yyct985 == codecSelferValueTypeArray1234 {
			yyl985 := r.ReadArrayStart()
			if yyl985 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl985, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys986Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys986Slc
	var yyhl986 bool = l >= 0
	for yyj986 := 0; ; yyj986++ {
		if yyhl986 {
			if yyj986 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys986Slc = r.DecodeBytes(yys986Slc, true, true)
		yys986 := string(yys986Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys986 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys986)
		} // end switch yys986
	} // end for yyj986
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj989 int
	var yyb989 bool
	var yyhl989 bool = l >= 0
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj989++
		if yyhl989 {
			yyb989 = yyj989 > l
		} else {
			yyb989 = r.CheckBreak()
		}
		if yyb989 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj989-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym992 := z.EncBinary()
		_ = yym992
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep993 := !z.EncBinary()
			yy2arr993 := z.EncBasicHandle().StructToArray
			var yyq993 [4]bool
			_, _, _ = yysep993, yyq993, yy2arr993
			const yyr993 bool = false
			yyq993[0] = x.Path != ""
			yyq993[1] = true
			yyq993[2] = x.Host != ""
			yyq993[3] = x.Scheme != ""
			var yynn993 int
			if yyr993 || yy2arr993 {
				r.EncodeArrayStart(4)
			} else {
				yynn993 = 0
				for _, b := range yyq993 {
					if b {
						yynn993++
					}
				}
				r.EncodeMapStart(yynn993)
				yynn993 = 0
			}
			if yyr993 || yy2arr993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq993[0] {
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq993[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym996 := z.EncBinary()
					_ = yym996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr993 || yy2arr993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq993[1] {
					yy998 := &x.Port
					yym999 := z.EncBinary()
					_ = yym999
					if false {
					} else if z.HasExtensions() && z.EncExt(yy998) {
					} else if !yym999 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy998)
					} else {
						z.EncFallback(yy998)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq993[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1000 := &x.Port
					yym1001 := z.EncBinary()
					_ = yym1001
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1000) {
					} else if !yym1001 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1000)
					} else {
						z.EncFallback(yy1000)
					}
				}
			}
			if yyr993 || yy2arr993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq993[2] {
					yym1003 := z.EncBinary()
					_ = yym1003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq993[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr993 || yy2arr993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq993[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq993[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr993 || yy2arr993 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1006 := z.DecBinary()
	_ = yym1006
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1007 := r.ContainerType()
		if yyct1007 == codecSelferValueTypeMap1234 {
			yyl1007 := r.ReadMapStart()
			if yyl1007 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1007, d)
			}
		} else if yyct1007 == codecSelferValueTypeArray1234 {
			yyl1007 := r.ReadArrayStart()
			if yyl1007 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1007, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1008Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1008Slc
	var yyhl1008 bool = l >= 0
	for yyj1008 := 0; ; yyj1008++ {
		if yyhl1008 {
			if yyj1008 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1008Slc = r.DecodeBytes(yys1008Slc, true, true)
		yys1008 := string(yys1008Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1008 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1010 := &x.Port
				yym1011 := z.DecBinary()
				_ = yym1011
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1010) {
				} else if !yym1011 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1010)
				} else {
					z.DecFallback(yyv1010, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1008)
		} // end switch yys1008
	} // end for yyj1008
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1014 int
	var yyb1014 bool
	var yyhl1014 bool = l >= 0
	yyj1014++
	if yyhl1014 {
		yyb1014 = yyj1014 > l
	} else {
		yyb1014 = r.CheckBreak()
	}
	if yyb1014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1014++
	if yyhl1014 {
		yyb1014 = yyj1014 > l
	} else {
		yyb1014 = r.CheckBreak()
	}
	if yyb1014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1016 := &x.Port
		yym1017 := z.DecBinary()
		_ = yym1017
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1016) {
		} else if !yym1017 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1016)
		} else {
			z.DecFallback(yyv1016, false)
		}
	}
	yyj1014++
	if yyhl1014 {
		yyb1014 = yyj1014 > l
	} else {
		yyb1014 = r.CheckBreak()
	}
	if yyb1014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1014++
	if yyhl1014 {
		yyb1014 = yyj1014 > l
	} else {
		yyb1014 = r.CheckBreak()
	}
	if yyb1014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj1014++
		if yyhl1014 {
			yyb1014 = yyj1014 > l
		} else {
			yyb1014 = r.CheckBreak()
		}
		if yyb1014 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1014-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1020 := z.EncBinary()
	_ = yym1020
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1021 := z.DecBinary()
	_ = yym1021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1022 := z.EncBinary()
		_ = yym1022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1023 := !z.EncBinary()
			yy2arr1023 := z.EncBasicHandle().StructToArray
			var yyq1023 [1]bool
			_, _, _ = yysep1023, yyq1023, yy2arr1023
			const yyr1023 bool = false
			yyq1023[0] = true
			var yynn1023 int
			if yyr1023 || yy2arr1023 {
				r.EncodeArrayStart(1)
			} else {
				yynn1023 = 0
				for _, b := range yyq1023 {
					if b {
						yynn1023++
					}
				}
				r.EncodeMapStart(yynn1023)
				yynn1023 = 0
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1023[0] {
					yy1025 := &x.Port
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1025) {
					} else if !yym1026 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1025)
					} else {
						z.EncFallback(yy1025)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1023[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1027 := &x.Port
					yym1028 := z.EncBinary()
					_ = yym1028
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1027) {
					} else if !yym1028 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1027)
					} else {
						z.EncFallback(yy1027)
					}
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1029 := z.DecBinary()
	_ = yym1029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1030 := r.ContainerType()
		if yyct1030 == codecSelferValueTypeMap1234 {
			yyl1030 := r.ReadMapStart()
			if yyl1030 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1030, d)
			}
		} else if yyct1030 == codecSelferValueTypeArray1234 {
			yyl1030 := r.ReadArrayStart()
			if yyl1030 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1030, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1031Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1031Slc
	var yyhl1031 bool = l >= 0
	for yyj1031 := 0; ; yyj1031++ {
		if yyhl1031 {
			if yyj1031 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1031Slc = r.DecodeBytes(yys1031Slc, true, true)
		yys1031 := string(yys1031Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1031 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1032 := &x.Port
				yym1033 := z.DecBinary()
				_ = yym1033
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1032) {
				} else if !yym1033 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1032)
				} else {
					z.DecFallback(yyv1032, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1031)
		} // end switch yys1031
	} // end for yyj1031
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1034 int
	var yyb1034 bool
	var yyhl1034 bool = l >= 0
	yyj1034++
	if yyhl1034 {
		yyb1034 = yyj1034 > l
	} else {
		yyb1034 = r.CheckBreak()
	}
	if yyb1034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1035 := &x.Port
		yym1036 := z.DecBinary()
		_ = yym1036
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1035) {
		} else if !yym1036 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1035)
		} else {
			z.DecFallback(yyv1035, false)
		}
	}
	for {
		yyj1034++
		if yyhl1034 {
			yyb1034 = yyj1034 > l
		} else {
			yyb1034 = r.CheckBreak()
		}
		if yyb1034 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1034-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1037 := z.EncBinary()
		_ = yym1037
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1038 := !z.EncBinary()
			yy2arr1038 := z.EncBasicHandle().StructToArray
			var yyq1038 [1]bool
			_, _, _ = yysep1038, yyq1038, yy2arr1038
			const yyr1038 bool = false
			yyq1038[0] = len(x.Command) != 0
			var yynn1038 int
			if yyr1038 || yy2arr1038 {
				r.EncodeArrayStart(1)
			} else {
				yynn1038 = 0
				for _, b := range yyq1038 {
					if b {
						yynn1038++
					}
				}
				r.EncodeMapStart(yynn1038)
				yynn1038 = 0
			}
			if yyr1038 || yy2arr1038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1038[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1040 := z.EncBinary()
						_ = yym1040
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1038[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1041 := z.EncBinary()
						_ = yym1041
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1038 || yy2arr1038 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1042 := z.DecBinary()
	_ = yym1042
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1043 := r.ContainerType()
		if yyct1043 == codecSelferValueTypeMap1234 {
			yyl1043 := r.ReadMapStart()
			if yyl1043 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1043, d)
			}
		} else if yyct1043 == codecSelferValueTypeArray1234 {
			yyl1043 := r.ReadArrayStart()
			if yyl1043 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1043, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1044Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1044Slc
	var yyhl1044 bool = l >= 0
	for yyj1044 := 0; ; yyj1044++ {
		if yyhl1044 {
			if yyj1044 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1044Slc = r.DecodeBytes(yys1044Slc, true, true)
		yys1044 := string(yys1044Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1044 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1045 := &x.Command
				yym1046 := z.DecBinary()
				_ = yym1046
				if false {
				} else {
					z.F.DecSliceStringX(yyv1045, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1044)
		} // end switch yys1044
	} // end for yyj1044
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1047 int
	var yyb1047 bool
	var yyhl1047 bool = l >= 0
	yyj1047++
	if yyhl1047 {
		yyb1047 = yyj1047 > l
	} else {
		yyb1047 = r.CheckBreak()
	}
	if yyb1047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1048 := &x.Command
		yym1049 := z.DecBinary()
		_ = yym1049
		if false {
		} else {
			z.F.DecSliceStringX(yyv1048, false, d)
		}
	}
	for {
		yyj1047++
		if yyhl1047 {
			yyb1047 = yyj1047 > l
		} else {
			yyb1047 = r.CheckBreak()
		}
		if yyb1047 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1047-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1050 := z.EncBinary()
		_ = yym1050
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1051 := !z.EncBinary()
			yy2arr1051 := z.EncBasicHandle().StructToArray
			var yyq1051 [8]bool
			_, _, _ = yysep1051, yyq1051, yy2arr1051
			const yyr1051 bool = false
			yyq1051[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1051[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1051[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1051[3] = x.InitialDelaySeconds != 0
			yyq1051[4] = x.TimeoutSeconds != 0
			yyq1051[5] = x.PeriodSeconds != 0
			yyq1051[6] = x.SuccessThreshold != 0
			yyq1051[7] = x.FailureThreshold != 0
			var yynn1051 int
			if yyr1051 || yy2arr1051 {
				r.EncodeArrayStart(8)
			} else {
				yynn1051 = 0
				for _, b := range yyq1051 {
					if b {
						yynn1051++
					}
				}
				r.EncodeMapStart(yynn1051)
				yynn1051 = 0
			}
			var yyn1052 bool
			if x.Handler.Exec == nil {
				yyn1052 = true
				goto LABEL1052
			}
		LABEL1052:
			if yyr1051 || yy2arr1051 {
				if yyn1052 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1051[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1051[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1052 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1053 bool
			if x.Handler.HTTPGet == nil {
				yyn1053 = true
				goto LABEL1053
			}
		LABEL1053:
			if yyr1051 || yy2arr1051 {
				if yyn1053 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1051[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1051[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1053 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1054 bool
			if x.Handler.TCPSocket == nil {
				yyn1054 = true
				goto LABEL1054
			}
		LABEL1054:
			if yyr1051 || yy2arr1051 {
				if yyn1054 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1051[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1051[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1054 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1051 || yy2arr1051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1051[3] {
					yym1056 := z.EncBinary()
					_ = yym1056
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1051[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1057 := z.EncBinary()
					_ = yym1057
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1051 || yy2arr1051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1051[4] {
					yym1059 := z.EncBinary()
					_ = yym1059
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1051[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1051 || yy2arr1051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1051[5] {
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1051[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1051 || yy2arr1051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1051[6] {
					yym1065 := z.EncBinary()
					_ = yym1065
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1051[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1066 := z.EncBinary()
					_ = yym1066
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1051 || yy2arr1051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1051[7] {
					yym1068 := z.EncBinary()
					_ = yym1068
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1051[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1069 := z.EncBinary()
					_ = yym1069
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1051 || yy2arr1051 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1070 := z.DecBinary()
	_ = yym1070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1071 := r.ContainerType()
		if yyct1071 == codecSelferValueTypeMap1234 {
			yyl1071 := r.ReadMapStart()
			if yyl1071 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1071, d)
			}
		} else if yyct1071 == codecSelferValueTypeArray1234 {
			yyl1071 := r.ReadArrayStart()
			if yyl1071 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1071, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1072Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1072Slc
	var yyhl1072 bool = l >= 0
	for yyj1072 := 0; ; yyj1072++ {
		if yyhl1072 {
			if yyj1072 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1072Slc = r.DecodeBytes(yys1072Slc, true, true)
		yys1072 := string(yys1072Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1072 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1072)
		} // end switch yys1072
	} // end for yyj1072
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1081 int
	var yyb1081 bool
	var yyhl1081 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1081++
		if yyhl1081 {
			yyb1081 = yyj1081 > l
		} else {
			yyb1081 = r.CheckBreak()
		}
		if yyb1081 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1081-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1090 := z.EncBinary()
	_ = yym1090
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1091 := z.DecBinary()
	_ = yym1091
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1092 := z.EncBinary()
	_ = yym1092
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1093 := z.DecBinary()
	_ = yym1093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1094 := z.EncBinary()
		_ = yym1094
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1095 := !z.EncBinary()
			yy2arr1095 := z.EncBasicHandle().StructToArray
			var yyq1095 [2]bool
			_, _, _ = yysep1095, yyq1095, yy2arr1095
			const yyr1095 bool = false
			yyq1095[0] = len(x.Add) != 0
			yyq1095[1] = len(x.Drop) != 0
			var yynn1095 int
			if yyr1095 || yy2arr1095 {
				r.EncodeArrayStart(2)
			} else {
				yynn1095 = 0
				for _, b := range yyq1095 {
					if b {
						yynn1095++
					}
				}
				r.EncodeMapStart(yynn1095)
				yynn1095 = 0
			}
			if yyr1095 || yy2arr1095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1095[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1097 := z.EncBinary()
						_ = yym1097
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1095[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1098 := z.EncBinary()
						_ = yym1098
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1095 || yy2arr1095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1095[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1100 := z.EncBinary()
						_ = yym1100
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1095[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1101 := z.EncBinary()
						_ = yym1101
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1095 || yy2arr1095 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1102 := z.DecBinary()
	_ = yym1102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1103 := r.ContainerType()
		if yyct1103 == codecSelferValueTypeMap1234 {
			yyl1103 := r.ReadMapStart()
			if yyl1103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1103, d)
			}
		} else if yyct1103 == codecSelferValueTypeArray1234 {
			yyl1103 := r.ReadArrayStart()
			if yyl1103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1104Slc
	var yyhl1104 bool = l >= 0
	for yyj1104 := 0; ; yyj1104++ {
		if yyhl1104 {
			if yyj1104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1104Slc = r.DecodeBytes(yys1104Slc, true, true)
		yys1104 := string(yys1104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1104 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1105 := &x.Add
				yym1106 := z.DecBinary()
				_ = yym1106
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1105), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1107 := &x.Drop
				yym1108 := z.DecBinary()
				_ = yym1108
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1107), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1104)
		} // end switch yys1104
	} // end for yyj1104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1109 int
	var yyb1109 bool
	var yyhl1109 bool = l >= 0
	yyj1109++
	if yyhl1109 {
		yyb1109 = yyj1109 > l
	} else {
		yyb1109 = r.CheckBreak()
	}
	if yyb1109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1110 := &x.Add
		yym1111 := z.DecBinary()
		_ = yym1111
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1110), d)
		}
	}
	yyj1109++
	if yyhl1109 {
		yyb1109 = yyj1109 > l
	} else {
		yyb1109 = r.CheckBreak()
	}
	if yyb1109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1112 := &x.Drop
		yym1113 := z.DecBinary()
		_ = yym1113
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1112), d)
		}
	}
	for {
		yyj1109++
		if yyhl1109 {
			yyb1109 = yyj1109 > l
		} else {
			yyb1109 = r.CheckBreak()
		}
		if yyb1109 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1109-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1114 := z.EncBinary()
		_ = yym1114
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1115 := !z.EncBinary()
			yy2arr1115 := z.EncBasicHandle().StructToArray
			var yyq1115 [2]bool
			_, _, _ = yysep1115, yyq1115, yy2arr1115
			const yyr1115 bool = false
			yyq1115[0] = len(x.Limits) != 0
			yyq1115[1] = len(x.Requests) != 0
			var yynn1115 int
			if yyr1115 || yy2arr1115 {
				r.EncodeArrayStart(2)
			} else {
				yynn1115 = 0
				for _, b := range yyq1115 {
					if b {
						yynn1115++
					}
				}
				r.EncodeMapStart(yynn1115)
				yynn1115 = 0
			}
			if yyr1115 || yy2arr1115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1115[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1115[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1115 || yy2arr1115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1115[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1115[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1115 || yy2arr1115 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1118 := z.DecBinary()
	_ = yym1118
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1119 := r.ContainerType()
		if yyct1119 == codecSelferValueTypeMap1234 {
			yyl1119 := r.ReadMapStart()
			if yyl1119 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1119, d)
			}
		} else if yyct1119 == codecSelferValueTypeArray1234 {
			yyl1119 := r.ReadArrayStart()
			if yyl1119 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1119, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1120Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1120Slc
	var yyhl1120 bool = l >= 0
	for yyj1120 := 0; ; yyj1120++ {
		if yyhl1120 {
			if yyj1120 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1120Slc = r.DecodeBytes(yys1120Slc, true, true)
		yys1120 := string(yys1120Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1120 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1121 := &x.Limits
				yyv1121.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1122 := &x.Requests
				yyv1122.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1120)
		} // end switch yys1120
	} // end for yyj1120
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1123 int
	var yyb1123 bool
	var yyhl1123 bool = l >= 0
	yyj1123++
	if yyhl1123 {
		yyb1123 = yyj1123 > l
	} else {
		yyb1123 = r.CheckBreak()
	}
	if yyb1123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1124 := &x.Limits
		yyv1124.CodecDecodeSelf(d)
	}
	yyj1123++
	if yyhl1123 {
		yyb1123 = yyj1123 > l
	} else {
		yyb1123 = r.CheckBreak()
	}
	if yyb1123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1125 := &x.Requests
		yyv1125.CodecDecodeSelf(d)
	}
	for {
		yyj1123++
		if yyhl1123 {
			yyb1123 = yyj1123 > l
		} else {
			yyb1123 = r.CheckBreak()
		}
		if yyb1123 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1123-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1126 := z.EncBinary()
		_ = yym1126
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1127 := !z.EncBinary()
			yy2arr1127 := z.EncBasicHandle().StructToArray
			var yyq1127 [18]bool
			_, _, _ = yysep1127, yyq1127, yy2arr1127
			const yyr1127 bool = false
			yyq1127[2] = len(x.Command) != 0
			yyq1127[3] = len(x.Args) != 0
			yyq1127[4] = x.WorkingDir != ""
			yyq1127[5] = len(x.Ports) != 0
			yyq1127[6] = len(x.Env) != 0
			yyq1127[7] = true
			yyq1127[8] = len(x.VolumeMounts) != 0
			yyq1127[9] = x.LivenessProbe != nil
			yyq1127[10] = x.ReadinessProbe != nil
			yyq1127[11] = x.Lifecycle != nil
			yyq1127[12] = x.TerminationMessagePath != ""
			yyq1127[14] = x.SecurityContext != nil
			yyq1127[15] = x.Stdin != false
			yyq1127[16] = x.StdinOnce != false
			yyq1127[17] = x.TTY != false
			var yynn1127 int
			if yyr1127 || yy2arr1127 {
				r.EncodeArrayStart(18)
			} else {
				yynn1127 = 3
				for _, b := range yyq1127 {
					if b {
						yynn1127++
					}
				}
				r.EncodeMapStart(yynn1127)
				yynn1127 = 0
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1129 := z.EncBinary()
				_ = yym1129
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1130 := z.EncBinary()
				_ = yym1130
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1132 := z.EncBinary()
				_ = yym1132
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1133 := z.EncBinary()
				_ = yym1133
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1135 := z.EncBinary()
						_ = yym1135
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1127[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1136 := z.EncBinary()
						_ = yym1136
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1138 := z.EncBinary()
						_ = yym1138
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1127[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1139 := z.EncBinary()
						_ = yym1139
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[4] {
					yym1141 := z.EncBinary()
					_ = yym1141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1127[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1142 := z.EncBinary()
					_ = yym1142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1144 := z.EncBinary()
						_ = yym1144
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1127[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1145 := z.EncBinary()
						_ = yym1145
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1147 := z.EncBinary()
						_ = yym1147
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1127[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1148 := z.EncBinary()
						_ = yym1148
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[7] {
					yy1150 := &x.Resources
					yy1150.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1127[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1151 := &x.Resources
					yy1151.CodecEncodeSelf(e)
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1153 := z.EncBinary()
						_ = yym1153
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1127[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1154 := z.EncBinary()
						_ = yym1154
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1127[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1127[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1127[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[12] {
					yym1159 := z.EncBinary()
					_ = yym1159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1127[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1160 := z.EncBinary()
					_ = yym1160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1127[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[15] {
					yym1164 := z.EncBinary()
					_ = yym1164
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1127[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1165 := z.EncBinary()
					_ = yym1165
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[16] {
					yym1167 := z.EncBinary()
					_ = yym1167
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1127[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1168 := z.EncBinary()
					_ = yym1168
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[17] {
					yym1170 := z.EncBinary()
					_ = yym1170
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1127[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1171 := z.EncBinary()
					_ = yym1171
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1172 := z.DecBinary()
	_ = yym1172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1173 := r.ContainerType()
		if yyct1173 == codecSelferValueTypeMap1234 {
			yyl1173 := r.ReadMapStart()
			if yyl1173 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1173, d)
			}
		} else if yyct1173 == codecSelferValueTypeArray1234 {
			yyl1173 := r.ReadArrayStart()
			if yyl1173 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1173, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1174Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1174Slc
	var yyhl1174 bool = l >= 0
	for yyj1174 := 0; ; yyj1174++ {
		if yyhl1174 {
			if yyj1174 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1174Slc = r.DecodeBytes(yys1174Slc, true, true)
		yys1174 := string(yys1174Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1174 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1177 := &x.Command
				yym1178 := z.DecBinary()
				_ = yym1178
				if false {
				} else {
					z.F.DecSliceStringX(yyv1177, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1179 := &x.Args
				yym1180 := z.DecBinary()
				_ = yym1180
				if false {
				} else {
					z.F.DecSliceStringX(yyv1179, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1182 := &x.Ports
				yym1183 := z.DecBinary()
				_ = yym1183
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1182), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1184 := &x.Env
				yym1185 := z.DecBinary()
				_ = yym1185
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1184), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1186 := &x.Resources
				yyv1186.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1187 := &x.VolumeMounts
				yym1188 := z.DecBinary()
				_ = yym1188
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1187), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1174)
		} // end switch yys1174
	} // end for yyj1174
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1198 int
	var yyb1198 bool
	var yyhl1198 bool = l >= 0
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1201 := &x.Command
		yym1202 := z.DecBinary()
		_ = yym1202
		if false {
		} else {
			z.F.DecSliceStringX(yyv1201, false, d)
		}
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1203 := &x.Args
		yym1204 := z.DecBinary()
		_ = yym1204
		if false {
		} else {
			z.F.DecSliceStringX(yyv1203, false, d)
		}
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1206 := &x.Ports
		yym1207 := z.DecBinary()
		_ = yym1207
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1206), d)
		}
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1208 := &x.Env
		yym1209 := z.DecBinary()
		_ = yym1209
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1208), d)
		}
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1210 := &x.Resources
		yyv1210.CodecDecodeSelf(d)
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1211 := &x.VolumeMounts
		yym1212 := z.DecBinary()
		_ = yym1212
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1211), d)
		}
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1198++
		if yyhl1198 {
			yyb1198 = yyj1198 > l
		} else {
			yyb1198 = r.CheckBreak()
		}
		if yyb1198 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1198-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1222 := z.EncBinary()
		_ = yym1222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1223 := !z.EncBinary()
			yy2arr1223 := z.EncBasicHandle().StructToArray
			var yyq1223 [3]bool
			_, _, _ = yysep1223, yyq1223, yy2arr1223
			const yyr1223 bool = false
			yyq1223[0] = x.Exec != nil
			yyq1223[1] = x.HTTPGet != nil
			yyq1223[2] = x.TCPSocket != nil
			var yynn1223 int
			if yyr1223 || yy2arr1223 {
				r.EncodeArrayStart(3)
			} else {
				yynn1223 = 0
				for _, b := range yyq1223 {
					if b {
						yynn1223++
					}
				}
				r.EncodeMapStart(yynn1223)
				yynn1223 = 0
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1223[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1223[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1223[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1223[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1223[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1223[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1227 := z.DecBinary()
	_ = yym1227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1228 := r.ContainerType()
		if yyct1228 == codecSelferValueTypeMap1234 {
			yyl1228 := r.ReadMapStart()
			if yyl1228 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1228, d)
			}
		} else if yyct1228 == codecSelferValueTypeArray1234 {
			yyl1228 := r.ReadArrayStart()
			if yyl1228 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1228, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1229Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1229Slc
	var yyhl1229 bool = l >= 0
	for yyj1229 := 0; ; yyj1229++ {
		if yyhl1229 {
			if yyj1229 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1229Slc = r.DecodeBytes(yys1229Slc, true, true)
		yys1229 := string(yys1229Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1229 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1229)
		} // end switch yys1229
	} // end for yyj1229
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1233 int
	var yyb1233 bool
	var yyhl1233 bool = l >= 0
	yyj1233++
	if yyhl1233 {
		yyb1233 = yyj1233 > l
	} else {
		yyb1233 = r.CheckBreak()
	}
	if yyb1233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1233++
	if yyhl1233 {
		yyb1233 = yyj1233 > l
	} else {
		yyb1233 = r.CheckBreak()
	}
	if yyb1233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1233++
	if yyhl1233 {
		yyb1233 = yyj1233 > l
	} else {
		yyb1233 = r.CheckBreak()
	}
	if yyb1233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1233++
		if yyhl1233 {
			yyb1233 = yyj1233 > l
		} else {
			yyb1233 = r.CheckBreak()
		}
		if yyb1233 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1233-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1237 := z.EncBinary()
		_ = yym1237
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1238 := !z.EncBinary()
			yy2arr1238 := z.EncBasicHandle().StructToArray
			var yyq1238 [2]bool
			_, _, _ = yysep1238, yyq1238, yy2arr1238
			const yyr1238 bool = false
			yyq1238[0] = x.PostStart != nil
			yyq1238[1] = x.PreStop != nil
			var yynn1238 int
			if yyr1238 || yy2arr1238 {
				r.EncodeArrayStart(2)
			} else {
				yynn1238 = 0
				for _, b := range yyq1238 {
					if b {
						yynn1238++
					}
				}
				r.EncodeMapStart(yynn1238)
				yynn1238 = 0
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1238[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1238[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1238[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1238[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1241 := z.DecBinary()
	_ = yym1241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1242 := r.ContainerType()
		if yyct1242 == codecSelferValueTypeMap1234 {
			yyl1242 := r.ReadMapStart()
			if yyl1242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1242, d)
			}
		} else if yyct1242 == codecSelferValueTypeArray1234 {
			yyl1242 := r.ReadArrayStart()
			if yyl1242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1243Slc
	var yyhl1243 bool = l >= 0
	for yyj1243 := 0; ; yyj1243++ {
		if yyhl1243 {
			if yyj1243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1243Slc = r.DecodeBytes(yys1243Slc, true, true)
		yys1243 := string(yys1243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1243 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1243)
		} // end switch yys1243
	} // end for yyj1243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1246 int
	var yyb1246 bool
	var yyhl1246 bool = l >= 0
	yyj1246++
	if yyhl1246 {
		yyb1246 = yyj1246 > l
	} else {
		yyb1246 = r.CheckBreak()
	}
	if yyb1246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1246++
	if yyhl1246 {
		yyb1246 = yyj1246 > l
	} else {
		yyb1246 = r.CheckBreak()
	}
	if yyb1246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1246++
		if yyhl1246 {
			yyb1246 = yyj1246 > l
		} else {
			yyb1246 = r.CheckBreak()
		}
		if yyb1246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1249 := z.EncBinary()
	_ = yym1249
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1250 := z.DecBinary()
	_ = yym1250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1251 := z.EncBinary()
		_ = yym1251
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1252 := !z.EncBinary()
			yy2arr1252 := z.EncBasicHandle().StructToArray
			var yyq1252 [2]bool
			_, _, _ = yysep1252, yyq1252, yy2arr1252
			const yyr1252 bool = false
			yyq1252[0] = x.Reason != ""
			yyq1252[1] = x.Message != ""
			var yynn1252 int
			if yyr1252 || yy2arr1252 {
				r.EncodeArrayStart(2)
			} else {
				yynn1252 = 0
				for _, b := range yyq1252 {
					if b {
						yynn1252++
					}
				}
				r.EncodeMapStart(yynn1252)
				yynn1252 = 0
			}
			if yyr1252 || yy2arr1252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1252[0] {
					yym1254 := z.EncBinary()
					_ = yym1254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1252[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1255 := z.EncBinary()
					_ = yym1255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1252 || yy2arr1252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1252[1] {
					yym1257 := z.EncBinary()
					_ = yym1257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1252[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1258 := z.EncBinary()
					_ = yym1258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1252 || yy2arr1252 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1259 := z.DecBinary()
	_ = yym1259
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1260 := r.ContainerType()
		if yyct1260 == codecSelferValueTypeMap1234 {
			yyl1260 := r.ReadMapStart()
			if yyl1260 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1260, d)
			}
		} else if yyct1260 == codecSelferValueTypeArray1234 {
			yyl1260 := r.ReadArrayStart()
			if yyl1260 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1260, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1261Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1261Slc
	var yyhl1261 bool = l >= 0
	for yyj1261 := 0; ; yyj1261++ {
		if yyhl1261 {
			if yyj1261 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1261Slc = r.DecodeBytes(yys1261Slc, true, true)
		yys1261 := string(yys1261Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1261 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1261)
		} // end switch yys1261
	} // end for yyj1261
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1264 int
	var yyb1264 bool
	var yyhl1264 bool = l >= 0
	yyj1264++
	if yyhl1264 {
		yyb1264 = yyj1264 > l
	} else {
		yyb1264 = r.CheckBreak()
	}
	if yyb1264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1264++
	if yyhl1264 {
		yyb1264 = yyj1264 > l
	} else {
		yyb1264 = r.CheckBreak()
	}
	if yyb1264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1264++
		if yyhl1264 {
			yyb1264 = yyj1264 > l
		} else {
			yyb1264 = r.CheckBreak()
		}
		if yyb1264 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1264-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1267 := z.EncBinary()
		_ = yym1267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1268 := !z.EncBinary()
			yy2arr1268 := z.EncBasicHandle().StructToArray
			var yyq1268 [1]bool
			_, _, _ = yysep1268, yyq1268, yy2arr1268
			const yyr1268 bool = false
			yyq1268[0] = true
			var yynn1268 int
			if yyr1268 || yy2arr1268 {
				r.EncodeArrayStart(1)
			} else {
				yynn1268 = 0
				for _, b := range yyq1268 {
					if b {
						yynn1268++
					}
				}
				r.EncodeMapStart(yynn1268)
				yynn1268 = 0
			}
			if yyr1268 || yy2arr1268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1268[0] {
					yy1270 := &x.StartedAt
					yym1271 := z.EncBinary()
					_ = yym1271
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1270) {
					} else if yym1271 {
						z.EncBinaryMarshal(yy1270)
					} else if !yym1271 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1270)
					} else {
						z.EncFallback(yy1270)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1268[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1272 := &x.StartedAt
					yym1273 := z.EncBinary()
					_ = yym1273
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1272) {
					} else if yym1273 {
						z.EncBinaryMarshal(yy1272)
					} else if !yym1273 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1272)
					} else {
						z.EncFallback(yy1272)
					}
				}
			}
			if yyr1268 || yy2arr1268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1274 := z.DecBinary()
	_ = yym1274
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1275 := r.ContainerType()
		if yyct1275 == codecSelferValueTypeMap1234 {
			yyl1275 := r.ReadMapStart()
			if yyl1275 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1275, d)
			}
		} else if yyct1275 == codecSelferValueTypeArray1234 {
			yyl1275 := r.ReadArrayStart()
			if yyl1275 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1275, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1276Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1276Slc
	var yyhl1276 bool = l >= 0
	for yyj1276 := 0; ; yyj1276++ {
		if yyhl1276 {
			if yyj1276 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1276Slc = r.DecodeBytes(yys1276Slc, true, true)
		yys1276 := string(yys1276Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1276 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1277 := &x.StartedAt
				yym1278 := z.DecBinary()
				_ = yym1278
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1277) {
				} else if yym1278 {
					z.DecBinaryUnmarshal(yyv1277)
				} else if !yym1278 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1277)
				} else {
					z.DecFallback(yyv1277, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1276)
		} // end switch yys1276
	} // end for yyj1276
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1279 int
	var yyb1279 bool
	var yyhl1279 bool = l >= 0
	yyj1279++
	if yyhl1279 {
		yyb1279 = yyj1279 > l
	} else {
		yyb1279 = r.CheckBreak()
	}
	if yyb1279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1280 := &x.StartedAt
		yym1281 := z.DecBinary()
		_ = yym1281
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1280) {
		} else if yym1281 {
			z.DecBinaryUnmarshal(yyv1280)
		} else if !yym1281 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1280)
		} else {
			z.DecFallback(yyv1280, false)
		}
	}
	for {
		yyj1279++
		if yyhl1279 {
			yyb1279 = yyj1279 > l
		} else {
			yyb1279 = r.CheckBreak()
		}
		if yyb1279 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1279-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1282 := z.EncBinary()
		_ = yym1282
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1283 := !z.EncBinary()
			yy2arr1283 := z.EncBasicHandle().StructToArray
			var yyq1283 [7]bool
			_, _, _ = yysep1283, yyq1283, yy2arr1283
			const yyr1283 bool = false
			yyq1283[1] = x.Signal != 0
			yyq1283[2] = x.Reason != ""
			yyq1283[3] = x.Message != ""
			yyq1283[4] = true
			yyq1283[5] = true
			yyq1283[6] = x.ContainerID != ""
			var yynn1283 int
			if yyr1283 || yy2arr1283 {
				r.EncodeArrayStart(7)
			} else {
				yynn1283 = 1
				for _, b := range yyq1283 {
					if b {
						yynn1283++
					}
				}
				r.EncodeMapStart(yynn1283)
				yynn1283 = 0
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1285 := z.EncBinary()
				_ = yym1285
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1286 := z.EncBinary()
				_ = yym1286
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1283[1] {
					yym1288 := z.EncBinary()
					_ = yym1288
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1283[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1289 := z.EncBinary()
					_ = yym1289
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1283[2] {
					yym1291 := z.EncBinary()
					_ = yym1291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1283[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1292 := z.EncBinary()
					_ = yym1292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1283[3] {
					yym1294 := z.EncBinary()
					_ = yym1294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1283[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1295 := z.EncBinary()
					_ = yym1295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1283[4] {
					yy1297 := &x.StartedAt
					yym1298 := z.EncBinary()
					_ = yym1298
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1297) {
					} else if yym1298 {
						z.EncBinaryMarshal(yy1297)
					} else if !yym1298 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1297)
					} else {
						z.EncFallback(yy1297)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1283[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1299 := &x.StartedAt
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1299) {
					} else if yym1300 {
						z.EncBinaryMarshal(yy1299)
					} else if !yym1300 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1299)
					} else {
						z.EncFallback(yy1299)
					}
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1283[5] {
					yy1302 := &x.FinishedAt
					yym1303 := z.EncBinary()
					_ = yym1303
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1302) {
					} else if yym1303 {
						z.EncBinaryMarshal(yy1302)
					} else if !yym1303 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1302)
					} else {
						z.EncFallback(yy1302)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1283[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1304 := &x.FinishedAt
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1304) {
					} else if yym1305 {
						z.EncBinaryMarshal(yy1304)
					} else if !yym1305 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1304)
					} else {
						z.EncFallback(yy1304)
					}
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1283[6] {
					yym1307 := z.EncBinary()
					_ = yym1307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1283[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1308 := z.EncBinary()
					_ = yym1308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1309 := z.DecBinary()
	_ = yym1309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1310 := r.ContainerType()
		if yyct1310 == codecSelferValueTypeMap1234 {
			yyl1310 := r.ReadMapStart()
			if yyl1310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1310, d)
			}
		} else if yyct1310 == codecSelferValueTypeArray1234 {
			yyl1310 := r.ReadArrayStart()
			if yyl1310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1311Slc
	var yyhl1311 bool = l >= 0
	for yyj1311 := 0; ; yyj1311++ {
		if yyhl1311 {
			if yyj1311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1311Slc = r.DecodeBytes(yys1311Slc, true, true)
		yys1311 := string(yys1311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1311 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1316 := &x.StartedAt
				yym1317 := z.DecBinary()
				_ = yym1317
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1316) {
				} else if yym1317 {
					z.DecBinaryUnmarshal(yyv1316)
				} else if !yym1317 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1316)
				} else {
					z.DecFallback(yyv1316, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1318 := &x.FinishedAt
				yym1319 := z.DecBinary()
				_ = yym1319
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1318) {
				} else if yym1319 {
					z.DecBinaryUnmarshal(yyv1318)
				} else if !yym1319 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1318)
				} else {
					z.DecFallback(yyv1318, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1311)
		} // end switch yys1311
	} // end for yyj1311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1321 int
	var yyb1321 bool
	var yyhl1321 bool = l >= 0
	yyj1321++
	if yyhl1321 {
		yyb1321 = yyj1321 > l
	} else {
		yyb1321 = r.CheckBreak()
	}
	if yyb1321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1321++
	if yyhl1321 {
		yyb1321 = yyj1321 > l
	} else {
		yyb1321 = r.CheckBreak()
	}
	if yyb1321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1321++
	if yyhl1321 {
		yyb1321 = yyj1321 > l
	} else {
		yyb1321 = r.CheckBreak()
	}
	if yyb1321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1321++
	if yyhl1321 {
		yyb1321 = yyj1321 > l
	} else {
		yyb1321 = r.CheckBreak()
	}
	if yyb1321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1321++
	if yyhl1321 {
		yyb1321 = yyj1321 > l
	} else {
		yyb1321 = r.CheckBreak()
	}
	if yyb1321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1326 := &x.StartedAt
		yym1327 := z.DecBinary()
		_ = yym1327
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1326) {
		} else if yym1327 {
			z.DecBinaryUnmarshal(yyv1326)
		} else if !yym1327 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1326)
		} else {
			z.DecFallback(yyv1326, false)
		}
	}
	yyj1321++
	if yyhl1321 {
		yyb1321 = yyj1321 > l
	} else {
		yyb1321 = r.CheckBreak()
	}
	if yyb1321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1328 := &x.FinishedAt
		yym1329 := z.DecBinary()
		_ = yym1329
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1328) {
		} else if yym1329 {
			z.DecBinaryUnmarshal(yyv1328)
		} else if !yym1329 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1328)
		} else {
			z.DecFallback(yyv1328, false)
		}
	}
	yyj1321++
	if yyhl1321 {
		yyb1321 = yyj1321 > l
	} else {
		yyb1321 = r.CheckBreak()
	}
	if yyb1321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1321++
		if yyhl1321 {
			yyb1321 = yyj1321 > l
		} else {
			yyb1321 = r.CheckBreak()
		}
		if yyb1321 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1321-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1331 := z.EncBinary()
		_ = yym1331
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1332 := !z.EncBinary()
			yy2arr1332 := z.EncBasicHandle().StructToArray
			var yyq1332 [3]bool
			_, _, _ = yysep1332, yyq1332, yy2arr1332
			const yyr1332 bool = false
			yyq1332[0] = x.Waiting != nil
			yyq1332[1] = x.Running != nil
			yyq1332[2] = x.Terminated != nil
			var yynn1332 int
			if yyr1332 || yy2arr1332 {
				r.EncodeArrayStart(3)
			} else {
				yynn1332 = 0
				for _, b := range yyq1332 {
					if b {
						yynn1332++
					}
				}
				r.EncodeMapStart(yynn1332)
				yynn1332 = 0
			}
			if yyr1332 || yy2arr1332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1332[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1332[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1332 || yy2arr1332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1332[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1332[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1332 || yy2arr1332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1332[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1332[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1332 || yy2arr1332 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1336 := z.DecBinary()
	_ = yym1336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1337 := r.ContainerType()
		if yyct1337 == codecSelferValueTypeMap1234 {
			yyl1337 := r.ReadMapStart()
			if yyl1337 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1337, d)
			}
		} else if yyct1337 == codecSelferValueTypeArray1234 {
			yyl1337 := r.ReadArrayStart()
			if yyl1337 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1338Slc
	var yyhl1338 bool = l >= 0
	for yyj1338 := 0; ; yyj1338++ {
		if yyhl1338 {
			if yyj1338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1338Slc = r.DecodeBytes(yys1338Slc, true, true)
		yys1338 := string(yys1338Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1338 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1338)
		} // end switch yys1338
	} // end for yyj1338
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1342 int
	var yyb1342 bool
	var yyhl1342 bool = l >= 0
	yyj1342++
	if yyhl1342 {
		yyb1342 = yyj1342 > l
	} else {
		yyb1342 = r.CheckBreak()
	}
	if yyb1342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1342++
	if yyhl1342 {
		yyb1342 = yyj1342 > l
	} else {
		yyb1342 = r.CheckBreak()
	}
	if yyb1342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1342++
	if yyhl1342 {
		yyb1342 = yyj1342 > l
	} else {
		yyb1342 = r.CheckBreak()
	}
	if yyb1342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1342++
		if yyhl1342 {
			yyb1342 = yyj1342 > l
		} else {
			yyb1342 = r.CheckBreak()
		}
		if yyb1342 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1342-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1346 := z.EncBinary()
		_ = yym1346
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1347 := !z.EncBinary()
			yy2arr1347 := z.EncBasicHandle().StructToArray
			var yyq1347 [8]bool
			_, _, _ = yysep1347, yyq1347, yy2arr1347
			const yyr1347 bool = false
			yyq1347[1] = true
			yyq1347[2] = true
			yyq1347[7] = x.ContainerID != ""
			var yynn1347 int
			if yyr1347 || yy2arr1347 {
				r.EncodeArrayStart(8)
			} else {
				yynn1347 = 5
				for _, b := range yyq1347 {
					if b {
						yynn1347++
					}
				}
				r.EncodeMapStart(yynn1347)
				yynn1347 = 0
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1349 := z.EncBinary()
				_ = yym1349
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1350 := z.EncBinary()
				_ = yym1350
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1347[1] {
					yy1352 := &x.State
					yy1352.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1347[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1353 := &x.State
					yy1353.CodecEncodeSelf(e)
				}
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1347[2] {
					yy1355 := &x.LastTerminationState
					yy1355.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1347[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1356 := &x.LastTerminationState
					yy1356.CodecEncodeSelf(e)
				}
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1358 := z.EncBinary()
				_ = yym1358
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1359 := z.EncBinary()
				_ = yym1359
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1361 := z.EncBinary()
				_ = yym1361
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1362 := z.EncBinary()
				_ = yym1362
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1364 := z.EncBinary()
				_ = yym1364
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1365 := z.EncBinary()
				_ = yym1365
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1367 := z.EncBinary()
				_ = yym1367
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1368 := z.EncBinary()
				_ = yym1368
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1347[7] {
					yym1370 := z.EncBinary()
					_ = yym1370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1347[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1372 := z.DecBinary()
	_ = yym1372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1373 := r.ContainerType()
		if yyct1373 == codecSelferValueTypeMap1234 {
			yyl1373 := r.ReadMapStart()
			if yyl1373 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1373, d)
			}
		} else if yyct1373 == codecSelferValueTypeArray1234 {
			yyl1373 := r.ReadArrayStart()
			if yyl1373 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1374Slc
	var yyhl1374 bool = l >= 0
	for yyj1374 := 0; ; yyj1374++ {
		if yyhl1374 {
			if yyj1374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1374Slc = r.DecodeBytes(yys1374Slc, true, true)
		yys1374 := string(yys1374Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1374 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1376 := &x.State
				yyv1376.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1377 := &x.LastTerminationState
				yyv1377.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1374)
		} // end switch yys1374
	} // end for yyj1374
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1383 int
	var yyb1383 bool
	var yyhl1383 bool = l >= 0
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1385 := &x.State
		yyv1385.CodecDecodeSelf(d)
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1386 := &x.LastTerminationState
		yyv1386.CodecDecodeSelf(d)
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1383++
	if yyhl1383 {
		yyb1383 = yyj1383 > l
	} else {
		yyb1383 = r.CheckBreak()
	}
	if yyb1383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1383++
		if yyhl1383 {
			yyb1383 = yyj1383 > l
		} else {
			yyb1383 = r.CheckBreak()
		}
		if yyb1383 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1383-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1392 := z.EncBinary()
	_ = yym1392
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1393 := z.DecBinary()
	_ = yym1393
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1394 := z.EncBinary()
	_ = yym1394
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1395 := z.DecBinary()
	_ = yym1395
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1396 := z.EncBinary()
		_ = yym1396
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1397 := !z.EncBinary()
			yy2arr1397 := z.EncBasicHandle().StructToArray
			var yyq1397 [6]bool
			_, _, _ = yysep1397, yyq1397, yy2arr1397
			const yyr1397 bool = false
			yyq1397[2] = true
			yyq1397[3] = true
			yyq1397[4] = x.Reason != ""
			yyq1397[5] = x.Message != ""
			var yynn1397 int
			if yyr1397 || yy2arr1397 {
				r.EncodeArrayStart(6)
			} else {
				yynn1397 = 2
				for _, b := range yyq1397 {
					if b {
						yynn1397++
					}
				}
				r.EncodeMapStart(yynn1397)
				yynn1397 = 0
			}
			if yyr1397 || yy2arr1397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1397 || yy2arr1397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1397 || yy2arr1397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1397[2] {
					yy1401 := &x.LastProbeTime
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1401) {
					} else if yym1402 {
						z.EncBinaryMarshal(yy1401)
					} else if !yym1402 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1401)
					} else {
						z.EncFallback(yy1401)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1397[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1403 := &x.LastProbeTime
					yym1404 := z.EncBinary()
					_ = yym1404
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1403) {
					} else if yym1404 {
						z.EncBinaryMarshal(yy1403)
					} else if !yym1404 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1403)
					} else {
						z.EncFallback(yy1403)
					}
				}
			}
			if yyr1397 || yy2arr1397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1397[3] {
					yy1406 := &x.LastTransitionTime
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1406) {
					} else if yym1407 {
						z.EncBinaryMarshal(yy1406)
					} else if !yym1407 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1406)
					} else {
						z.EncFallback(yy1406)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1397[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1408 := &x.LastTransitionTime
					yym1409 := z.EncBinary()
					_ = yym1409
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1408) {
					} else if yym1409 {
						z.EncBinaryMarshal(yy1408)
					} else if !yym1409 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1408)
					} else {
						z.EncFallback(yy1408)
					}
				}
			}
			if yyr1397 || yy2arr1397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1397[4] {
					yym1411 := z.EncBinary()
					_ = yym1411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1397[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1412 := z.EncBinary()
					_ = yym1412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1397 || yy2arr1397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1397[5] {
					yym1414 := z.EncBinary()
					_ = yym1414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1397[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1415 := z.EncBinary()
					_ = yym1415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1397 || yy2arr1397 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1416 := z.DecBinary()
	_ = yym1416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1417 := r.ContainerType()
		if yyct1417 == codecSelferValueTypeMap1234 {
			yyl1417 := r.ReadMapStart()
			if yyl1417 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1417, d)
			}
		} else if yyct1417 == codecSelferValueTypeArray1234 {
			yyl1417 := r.ReadArrayStart()
			if yyl1417 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1417, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1418Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1418Slc
	var yyhl1418 bool = l >= 0
	for yyj1418 := 0; ; yyj1418++ {
		if yyhl1418 {
			if yyj1418 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1418Slc = r.DecodeBytes(yys1418Slc, true, true)
		yys1418 := string(yys1418Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1418 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1421 := &x.LastProbeTime
				yym1422 := z.DecBinary()
				_ = yym1422
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1421) {
				} else if yym1422 {
					z.DecBinaryUnmarshal(yyv1421)
				} else if !yym1422 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1421)
				} else {
					z.DecFallback(yyv1421, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1423 := &x.LastTransitionTime
				yym1424 := z.DecBinary()
				_ = yym1424
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1423) {
				} else if yym1424 {
					z.DecBinaryUnmarshal(yyv1423)
				} else if !yym1424 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1423)
				} else {
					z.DecFallback(yyv1423, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1418)
		} // end switch yys1418
	} // end for yyj1418
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1427 int
	var yyb1427 bool
	var yyhl1427 bool = l >= 0
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1430 := &x.LastProbeTime
		yym1431 := z.DecBinary()
		_ = yym1431
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1430) {
		} else if yym1431 {
			z.DecBinaryUnmarshal(yyv1430)
		} else if !yym1431 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1430)
		} else {
			z.DecFallback(yyv1430, false)
		}
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1432 := &x.LastTransitionTime
		yym1433 := z.DecBinary()
		_ = yym1433
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1432) {
		} else if yym1433 {
			z.DecBinaryUnmarshal(yyv1432)
		} else if !yym1433 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1432)
		} else {
			z.DecFallback(yyv1432, false)
		}
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1427++
		if yyhl1427 {
			yyb1427 = yyj1427 > l
		} else {
			yyb1427 = r.CheckBreak()
		}
		if yyb1427 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1427-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1436 := z.EncBinary()
	_ = yym1436
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1437 := z.DecBinary()
	_ = yym1437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1438 := z.EncBinary()
		_ = yym1438
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1439 := !z.EncBinary()
			yy2arr1439 := z.EncBasicHandle().StructToArray
			var yyq1439 [4]bool
			_, _, _ = yysep1439, yyq1439, yy2arr1439
			const yyr1439 bool = false
			yyq1439[0] = x.Kind != ""
			yyq1439[1] = x.APIVersion != ""
			yyq1439[2] = true
			var yynn1439 int
			if yyr1439 || yy2arr1439 {
				r.EncodeArrayStart(4)
			} else {
				yynn1439 = 1
				for _, b := range yyq1439 {
					if b {
						yynn1439++
					}
				}
				r.EncodeMapStart(yynn1439)
				yynn1439 = 0
			}
			if yyr1439 || yy2arr1439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1439[0] {
					yym1441 := z.EncBinary()
					_ = yym1441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1439[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1442 := z.EncBinary()
					_ = yym1442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1439 || yy2arr1439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1439[1] {
					yym1444 := z.EncBinary()
					_ = yym1444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1439[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1445 := z.EncBinary()
					_ = yym1445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1439 || yy2arr1439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1439[2] {
					yy1447 := &x.ListMeta
					yym1448 := z.EncBinary()
					_ = yym1448
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1447) {
					} else {
						z.EncFallback(yy1447)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1439[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1449 := &x.ListMeta
					yym1450 := z.EncBinary()
					_ = yym1450
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1449) {
					} else {
						z.EncFallback(yy1449)
					}
				}
			}
			if yyr1439 || yy2arr1439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1452 := z.EncBinary()
					_ = yym1452
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1453 := z.EncBinary()
					_ = yym1453
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1439 || yy2arr1439 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1454 := z.DecBinary()
	_ = yym1454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1455 := r.ContainerType()
		if yyct1455 == codecSelferValueTypeMap1234 {
			yyl1455 := r.ReadMapStart()
			if yyl1455 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1455, d)
			}
		} else if yyct1455 == codecSelferValueTypeArray1234 {
			yyl1455 := r.ReadArrayStart()
			if yyl1455 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1455, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1456Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1456Slc
	var yyhl1456 bool = l >= 0
	for yyj1456 := 0; ; yyj1456++ {
		if yyhl1456 {
			if yyj1456 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1456Slc = r.DecodeBytes(yys1456Slc, true, true)
		yys1456 := string(yys1456Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1456 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1459 := &x.ListMeta
				yym1460 := z.DecBinary()
				_ = yym1460
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1459) {
				} else {
					z.DecFallback(yyv1459, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1461 := &x.Items
				yym1462 := z.DecBinary()
				_ = yym1462
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1461), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1456)
		} // end switch yys1456
	} // end for yyj1456
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1463 int
	var yyb1463 bool
	var yyhl1463 bool = l >= 0
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1466 := &x.ListMeta
		yym1467 := z.DecBinary()
		_ = yym1467
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1466) {
		} else {
			z.DecFallback(yyv1466, false)
		}
	}
	yyj1463++
	if yyhl1463 {
		yyb1463 = yyj1463 > l
	} else {
		yyb1463 = r.CheckBreak()
	}
	if yyb1463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1468 := &x.Items
		yym1469 := z.DecBinary()
		_ = yym1469
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1468), d)
		}
	}
	for {
		yyj1463++
		if yyhl1463 {
			yyb1463 = yyj1463 > l
		} else {
			yyb1463 = r.CheckBreak()
		}
		if yyb1463 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1463-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1470 := z.EncBinary()
	_ = yym1470
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1471 := z.DecBinary()
	_ = yym1471
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1472 := z.EncBinary()
		_ = yym1472
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1473 := !z.EncBinary()
			yy2arr1473 := z.EncBasicHandle().StructToArray
			var yyq1473 [1]bool
			_, _, _ = yysep1473, yyq1473, yy2arr1473
			const yyr1473 bool = false
			yyq1473[0] = len(x.NodeSelectorTerms) != 0
			var yynn1473 int
			if yyr1473 || yy2arr1473 {
				r.EncodeArrayStart(1)
			} else {
				yynn1473 = 0
				for _, b := range yyq1473 {
					if b {
						yynn1473++
					}
				}
				r.EncodeMapStart(yynn1473)
				yynn1473 = 0
			}
			if yyr1473 || yy2arr1473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1473[0] {
					if x.NodeSelectorTerms == nil {
						r.EncodeNil()
					} else {
						yym1475 := z.EncBinary()
						_ = yym1475
						if false {
						} else {
							h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1473[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelectorTerms == nil {
						r.EncodeNil()
					} else {
						yym1476 := z.EncBinary()
						_ = yym1476
						if false {
						} else {
							h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
						}
					}
				}
			}
			if yyr1473 || yy2arr1473 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1477 := z.DecBinary()
	_ = yym1477
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1478 := r.ContainerType()
		if yyct1478 == codecSelferValueTypeMap1234 {
			yyl1478 := r.ReadMapStart()
			if yyl1478 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1478, d)
			}
		} else if yyct1478 == codecSelferValueTypeArray1234 {
			yyl1478 := r.ReadArrayStart()
			if yyl1478 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1478, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1479Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1479Slc
	var yyhl1479 bool = l >= 0
	for yyj1479 := 0; ; yyj1479++ {
		if yyhl1479 {
			if yyj1479 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1479Slc = r.DecodeBytes(yys1479Slc, true, true)
		yys1479 := string(yys1479Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1479 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1480 := &x.NodeSelectorTerms
				yym1481 := z.DecBinary()
				_ = yym1481
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1480), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1479)
		} // end switch yys1479
	} // end for yyj1479
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1482 int
	var yyb1482 bool
	var yyhl1482 bool = l >= 0
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1483 := &x.NodeSelectorTerms
		yym1484 := z.DecBinary()
		_ = yym1484
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1483), d)
		}
	}
	for {
		yyj1482++
		if yyhl1482 {
			yyb1482 = yyj1482 > l
		} else {
			yyb1482 = r.CheckBreak()
		}
		if yyb1482 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1482-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1485 := z.EncBinary()
		_ = yym1485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1486 := !z.EncBinary()
			yy2arr1486 := z.EncBasicHandle().StructToArray
			var yyq1486 [1]bool
			_, _, _ = yysep1486, yyq1486, yy2arr1486
			const yyr1486 bool = false
			yyq1486[0] = len(x.MatchExpressions) != 0
			var yynn1486 int
			if yyr1486 || yy2arr1486 {
				r.EncodeArrayStart(1)
			} else {
				yynn1486 = 0
				for _, b := range yyq1486 {
					if b {
						yynn1486++
					}
				}
				r.EncodeMapStart(yynn1486)
				yynn1486 = 0
			}
			if yyr1486 || yy2arr1486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1486[0] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1488 := z.EncBinary()
						_ = yym1488
						if false {
						} else {
							h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1486[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1489 := z.EncBinary()
						_ = yym1489
						if false {
						} else {
							h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1486 || yy2arr1486 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1490 := z.DecBinary()
	_ = yym1490
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1491 := r.ContainerType()
		if yyct1491 == codecSelferValueTypeMap1234 {
			yyl1491 := r.ReadMapStart()
			if yyl1491 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1491, d)
			}
		} else if yyct1491 == codecSelferValueTypeArray1234 {
			yyl1491 := r.ReadArrayStart()
			if yyl1491 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1491, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1492Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1492Slc
	var yyhl1492 bool = l >= 0
	for yyj1492 := 0; ; yyj1492++ {
		if yyhl1492 {
			if yyj1492 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1492Slc = r.DecodeBytes(yys1492Slc, true, true)
		yys1492 := string(yys1492Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1492 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1493 := &x.MatchExpressions
				yym1494 := z.DecBinary()
				_ = yym1494
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1493), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1492)
		} // end switch yys1492
	} // end for yyj1492
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1495 int
	var yyb1495 bool
	var yyhl1495 bool = l >= 0
	yyj1495++
	if yyhl1495 {
		yyb1495 = yyj1495 > l
	} else {
		yyb1495 = r.CheckBreak()
	}
	if yyb1495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1496 := &x.MatchExpressions
		yym1497 := z.DecBinary()
		_ = yym1497
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1496), d)
		}
	}
	for {
		yyj1495++
		if yyhl1495 {
			yyb1495 = yyj1495 > l
		} else {
			yyb1495 = r.CheckBreak()
		}
		if yyb1495 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1495-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1498 := z.EncBinary()
		_ = yym1498
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1499 := !z.EncBinary()
			yy2arr1499 := z.EncBasicHandle().StructToArray
			var yyq1499 [3]bool
			_, _, _ = yysep1499, yyq1499, yy2arr1499
			const yyr1499 bool = false
			yyq1499[2] = len(x.Values) != 0
			var yynn1499 int
			if yyr1499 || yy2arr1499 {
				r.EncodeArrayStart(3)
			} else {
				yynn1499 = 2
				for _, b := range yyq1499 {
					if b {
						yynn1499++
					}
				}
				r.EncodeMapStart(yynn1499)
				yynn1499 = 0
			}
			if yyr1499 || yy2arr1499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1501 := z.EncBinary()
				_ = yym1501
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1502 := z.EncBinary()
				_ = yym1502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1499 || yy2arr1499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1499 || yy2arr1499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1499[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1505 := z.EncBinary()
						_ = yym1505
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1499[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1506 := z.EncBinary()
						_ = yym1506
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1499 || yy2arr1499 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1507 := z.DecBinary()
	_ = yym1507
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1508 := r.ContainerType()
		if yyct1508 == codecSelferValueTypeMap1234 {
			yyl1508 := r.ReadMapStart()
			if yyl1508 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1508, d)
			}
		} else if yyct1508 == codecSelferValueTypeArray1234 {
			yyl1508 := r.ReadArrayStart()
			if yyl1508 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1508, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1509Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1509Slc
	var yyhl1509 bool = l >= 0
	for yyj1509 := 0; ; yyj1509++ {
		if yyhl1509 {
			if yyj1509 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1509Slc = r.DecodeBytes(yys1509Slc, true, true)
		yys1509 := string(yys1509Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1509 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1512 := &x.Values
				yym1513 := z.DecBinary()
				_ = yym1513
				if false {
				} else {
					z.F.DecSliceStringX(yyv1512, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1509)
		} // end switch yys1509
	} // end for yyj1509
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1514 int
	var yyb1514 bool
	var yyhl1514 bool = l >= 0
	yyj1514++
	if yyhl1514 {
		yyb1514 = yyj1514 > l
	} else {
		yyb1514 = r.CheckBreak()
	}
	if yyb1514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1514++
	if yyhl1514 {
		yyb1514 = yyj1514 > l
	} else {
		yyb1514 = r.CheckBreak()
	}
	if yyb1514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1514++
	if yyhl1514 {
		yyb1514 = yyj1514 > l
	} else {
		yyb1514 = r.CheckBreak()
	}
	if yyb1514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1517 := &x.Values
		yym1518 := z.DecBinary()
		_ = yym1518
		if false {
		} else {
			z.F.DecSliceStringX(yyv1517, false, d)
		}
	}
	for {
		yyj1514++
		if yyhl1514 {
			yyb1514 = yyj1514 > l
		} else {
			yyb1514 = r.CheckBreak()
		}
		if yyb1514 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1514-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1519 := z.EncBinary()
	_ = yym1519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1520 := z.DecBinary()
	_ = yym1520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1521 := z.EncBinary()
		_ = yym1521
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1522 := !z.EncBinary()
			yy2arr1522 := z.EncBasicHandle().StructToArray
			var yyq1522 [2]bool
			_, _, _ = yysep1522, yyq1522, yy2arr1522
			const yyr1522 bool = false
			yyq1522[0] = x.HardNodeAffinity != nil
			yyq1522[1] = len(x.SoftNodeAffinity) != 0
			var yynn1522 int
			if yyr1522 || yy2arr1522 {
				r.EncodeArrayStart(2)
			} else {
				yynn1522 = 0
				for _, b := range yyq1522 {
					if b {
						yynn1522++
					}
				}
				r.EncodeMapStart(yynn1522)
				yynn1522 = 0
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1522[0] {
					if x.HardNodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.HardNodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1522[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hardNodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HardNodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.HardNodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1522[1] {
					if x.SoftNodeAffinity == nil {
						r.EncodeNil()
					} else {
						yym1525 := z.EncBinary()
						_ = yym1525
						if false {
						} else {
							h.encSliceSoftNodeAffinityTerm(([]SoftNodeAffinityTerm)(x.SoftNodeAffinity), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1522[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("softNodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SoftNodeAffinity == nil {
						r.EncodeNil()
					} else {
						yym1526 := z.EncBinary()
						_ = yym1526
						if false {
						} else {
							h.encSliceSoftNodeAffinityTerm(([]SoftNodeAffinityTerm)(x.SoftNodeAffinity), e)
						}
					}
				}
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1527 := z.DecBinary()
	_ = yym1527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1528 := r.ContainerType()
		if yyct1528 == codecSelferValueTypeMap1234 {
			yyl1528 := r.ReadMapStart()
			if yyl1528 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1528, d)
			}
		} else if yyct1528 == codecSelferValueTypeArray1234 {
			yyl1528 := r.ReadArrayStart()
			if yyl1528 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1528, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1529Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1529Slc
	var yyhl1529 bool = l >= 0
	for yyj1529 := 0; ; yyj1529++ {
		if yyhl1529 {
			if yyj1529 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1529Slc = r.DecodeBytes(yys1529Slc, true, true)
		yys1529 := string(yys1529Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1529 {
		case "hardNodeAffinity":
			if r.TryDecodeAsNil() {
				if x.HardNodeAffinity != nil {
					x.HardNodeAffinity = nil
				}
			} else {
				if x.HardNodeAffinity == nil {
					x.HardNodeAffinity = new(NodeSelector)
				}
				x.HardNodeAffinity.CodecDecodeSelf(d)
			}
		case "softNodeAffinity":
			if r.TryDecodeAsNil() {
				x.SoftNodeAffinity = nil
			} else {
				yyv1531 := &x.SoftNodeAffinity
				yym1532 := z.DecBinary()
				_ = yym1532
				if false {
				} else {
					h.decSliceSoftNodeAffinityTerm((*[]SoftNodeAffinityTerm)(yyv1531), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1529)
		} // end switch yys1529
	} // end for yyj1529
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1533 int
	var yyb1533 bool
	var yyhl1533 bool = l >= 0
	yyj1533++
	if yyhl1533 {
		yyb1533 = yyj1533 > l
	} else {
		yyb1533 = r.CheckBreak()
	}
	if yyb1533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HardNodeAffinity != nil {
			x.HardNodeAffinity = nil
		}
	} else {
		if x.HardNodeAffinity == nil {
			x.HardNodeAffinity = new(NodeSelector)
		}
		x.HardNodeAffinity.CodecDecodeSelf(d)
	}
	yyj1533++
	if yyhl1533 {
		yyb1533 = yyj1533 > l
	} else {
		yyb1533 = r.CheckBreak()
	}
	if yyb1533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SoftNodeAffinity = nil
	} else {
		yyv1535 := &x.SoftNodeAffinity
		yym1536 := z.DecBinary()
		_ = yym1536
		if false {
		} else {
			h.decSliceSoftNodeAffinityTerm((*[]SoftNodeAffinityTerm)(yyv1535), d)
		}
	}
	for {
		yyj1533++
		if yyhl1533 {
			yyb1533 = yyj1533 > l
		} else {
			yyb1533 = r.CheckBreak()
		}
		if yyb1533 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1533-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SoftNodeAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1537 := z.EncBinary()
		_ = yym1537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1538 := !z.EncBinary()
			yy2arr1538 := z.EncBasicHandle().StructToArray
			var yyq1538 [2]bool
			_, _, _ = yysep1538, yyq1538, yy2arr1538
			const yyr1538 bool = false
			yyq1538[1] = len(x.MatchExpressions) != 0
			var yynn1538 int
			if yyr1538 || yy2arr1538 {
				r.EncodeArrayStart(2)
			} else {
				yynn1538 = 1
				for _, b := range yyq1538 {
					if b {
						yynn1538++
					}
				}
				r.EncodeMapStart(yynn1538)
				yynn1538 = 0
			}
			if yyr1538 || yy2arr1538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1540 := z.EncBinary()
				_ = yym1540
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1541 := z.EncBinary()
				_ = yym1541
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1538 || yy2arr1538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1538[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1543 := z.EncBinary()
						_ = yym1543
						if false {
						} else {
							h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1538[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1544 := z.EncBinary()
						_ = yym1544
						if false {
						} else {
							h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1538 || yy2arr1538 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SoftNodeAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1545 := z.DecBinary()
	_ = yym1545
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1546 := r.ContainerType()
		if yyct1546 == codecSelferValueTypeMap1234 {
			yyl1546 := r.ReadMapStart()
			if yyl1546 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1546, d)
			}
		} else if yyct1546 == codecSelferValueTypeArray1234 {
			yyl1546 := r.ReadArrayStart()
			if yyl1546 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1546, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SoftNodeAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1547Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1547Slc
	var yyhl1547 bool = l >= 0
	for yyj1547 := 0; ; yyj1547++ {
		if yyhl1547 {
			if yyj1547 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1547Slc = r.DecodeBytes(yys1547Slc, true, true)
		yys1547 := string(yys1547Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1547 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1549 := &x.MatchExpressions
				yym1550 := z.DecBinary()
				_ = yym1550
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1549), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1547)
		} // end switch yys1547
	} // end for yyj1547
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SoftNodeAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1551 int
	var yyb1551 bool
	var yyhl1551 bool = l >= 0
	yyj1551++
	if yyhl1551 {
		yyb1551 = yyj1551 > l
	} else {
		yyb1551 = r.CheckBreak()
	}
	if yyb1551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1551++
	if yyhl1551 {
		yyb1551 = yyj1551 > l
	} else {
		yyb1551 = r.CheckBreak()
	}
	if yyb1551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1553 := &x.MatchExpressions
		yym1554 := z.DecBinary()
		_ = yym1554
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1553), d)
		}
	}
	for {
		yyj1551++
		if yyhl1551 {
			yyb1551 = yyj1551 > l
		} else {
			yyb1551 = r.CheckBreak()
		}
		if yyb1551 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1551-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1555 := z.EncBinary()
		_ = yym1555
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1556 := !z.EncBinary()
			yy2arr1556 := z.EncBasicHandle().StructToArray
			var yyq1556 [12]bool
			_, _, _ = yysep1556, yyq1556, yy2arr1556
			const yyr1556 bool = false
			yyq1556[2] = x.RestartPolicy != ""
			yyq1556[3] = x.TerminationGracePeriodSeconds != nil
			yyq1556[4] = x.ActiveDeadlineSeconds != nil
			yyq1556[5] = x.DNSPolicy != ""
			yyq1556[6] = len(x.NodeSelector) != 0
			yyq1556[7] = x.Affinity != nil
			yyq1556[9] = x.NodeName != ""
			yyq1556[10] = x.SecurityContext != nil
			yyq1556[11] = len(x.ImagePullSecrets) != 0
			var yynn1556 int
			if yyr1556 || yy2arr1556 {
				r.EncodeArrayStart(12)
			} else {
				yynn1556 = 3
				for _, b := range yyq1556 {
					if b {
						yynn1556++
					}
				}
				r.EncodeMapStart(yynn1556)
				yynn1556 = 0
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1558 := z.EncBinary()
					_ = yym1558
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1559 := z.EncBinary()
					_ = yym1559
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1561 := z.EncBinary()
					_ = yym1561
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1562 := z.EncBinary()
					_ = yym1562
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1556[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1565 := *x.TerminationGracePeriodSeconds
						yym1566 := z.EncBinary()
						_ = yym1566
						if false {
						} else {
							r.EncodeInt(int64(yy1565))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1567 := *x.TerminationGracePeriodSeconds
						yym1568 := z.EncBinary()
						_ = yym1568
						if false {
						} else {
							r.EncodeInt(int64(yy1567))
						}
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1570 := *x.ActiveDeadlineSeconds
						yym1571 := z.EncBinary()
						_ = yym1571
						if false {
						} else {
							r.EncodeInt(int64(yy1570))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1572 := *x.ActiveDeadlineSeconds
						yym1573 := z.EncBinary()
						_ = yym1573
						if false {
						} else {
							r.EncodeInt(int64(yy1572))
						}
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1556[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1576 := z.EncBinary()
						_ = yym1576
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1577 := z.EncBinary()
						_ = yym1577
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[7] {
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("affinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1580 := z.EncBinary()
				_ = yym1580
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1581 := z.EncBinary()
				_ = yym1581
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[9] {
					yym1583 := z.EncBinary()
					_ = yym1583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1556[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1584 := z.EncBinary()
					_ = yym1584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[10] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[11] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1587 := z.EncBinary()
						_ = yym1587
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1588 := z.EncBinary()
						_ = yym1588
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1589 := z.DecBinary()
	_ = yym1589
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1590 := r.ContainerType()
		if yyct1590 == codecSelferValueTypeMap1234 {
			yyl1590 := r.ReadMapStart()
			if yyl1590 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1590, d)
			}
		} else if yyct1590 == codecSelferValueTypeArray1234 {
			yyl1590 := r.ReadArrayStart()
			if yyl1590 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1590, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1591Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1591Slc
	var yyhl1591 bool = l >= 0
	for yyj1591 := 0; ; yyj1591++ {
		if yyhl1591 {
			if yyj1591 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1591Slc = r.DecodeBytes(yys1591Slc, true, true)
		yys1591 := string(yys1591Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1591 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1592 := &x.Volumes
				yym1593 := z.DecBinary()
				_ = yym1593
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1592), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1594 := &x.Containers
				yym1595 := z.DecBinary()
				_ = yym1595
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1594), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1598 := z.DecBinary()
				_ = yym1598
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1600 := z.DecBinary()
				_ = yym1600
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1602 := &x.NodeSelector
				yym1603 := z.DecBinary()
				_ = yym1603
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1602, false, d)
				}
			}
		case "affinity":
			if r.TryDecodeAsNil() {
				if x.Affinity != nil {
					x.Affinity = nil
				}
			} else {
				if x.Affinity == nil {
					x.Affinity = new(Affinity)
				}
				x.Affinity.CodecDecodeSelf(d)
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1608 := &x.ImagePullSecrets
				yym1609 := z.DecBinary()
				_ = yym1609
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1608), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1591)
		} // end switch yys1591
	} // end for yyj1591
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1610 int
	var yyb1610 bool
	var yyhl1610 bool = l >= 0
	yyj1610++
	if yyhl1610 {
		yyb1610 = yyj1610 > l
	} else {
		yyb1610 = r.CheckBreak()
	}
	if yyb1610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1611 := &x.Volumes
		yym1612 := z.DecBinary()
		_ = yym1612
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1611), d)
		}
	}
	yyj1610++
	if yyhl1610 {
		yyb1610 = yyj1610 > l
	} else {
		yyb1610 = r.CheckBreak()
	}
	if yyb1610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1613 := &x.Containers
		yym1614 := z.DecBinary()
		_ = yym1614
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1613), d)
		}
	}
	yyj1610++
	if yyhl1610 {
		yyb1610 = yyj1610 > l
	} else {
		yyb1610 = r.CheckBreak()
	}
	if yyb1610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1610++
	if yyhl1610 {
		yyb1610 = yyj1610 > l
	} else {
		yyb1610 = r.CheckBreak()
	}
	if yyb1610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1617 := z.DecBinary()
		_ = yym1617
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1610++
	if yyhl1610 {
		yyb1610 = yyj1610 > l
	} else {
		yyb1610 = r.CheckBreak()
	}
	if yyb1610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1619 := z.DecBinary()
		_ = yym1619
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1610++
	if yyhl1610 {
		yyb1610 = yyj1610 > l
	} else {
		yyb1610 = r.CheckBreak()
	}
	if yyb1610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1610++
	if yyhl1610 {
		yyb1610 = yyj1610 > l
	} else {
		yyb1610 = r.CheckBreak()
	}
	if yyb1610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1621 := &x.NodeSelector
		yym1622 := z.DecBinary()
		_ = yym1622
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1621, false, d)
		}
	}
	yyj1610++
	if yyhl1610 {
		yyb1610 = yyj1610 > l
	} else {
		yyb1610 = r.CheckBreak()
	}
	if yyb1610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Affinity != nil {
			x.Affinity = nil
		}
	} else {
		if x.Affinity == nil {
			x.Affinity = new(Affinity)
		}
		x.Affinity.CodecDecodeSelf(d)
	}
	yyj1610++
	if yyhl1610 {
		yyb1610 = yyj1610 > l
	} else {
		yyb1610 = r.CheckBreak()
	}
	if yyb1610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1610++
	if yyhl1610 {
		yyb1610 = yyj1610 > l
	} else {
		yyb1610 = r.CheckBreak()
	}
	if yyb1610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1610++
	if yyhl1610 {
		yyb1610 = yyj1610 > l
	} else {
		yyb1610 = r.CheckBreak()
	}
	if yyb1610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1610++
	if yyhl1610 {
		yyb1610 = yyj1610 > l
	} else {
		yyb1610 = r.CheckBreak()
	}
	if yyb1610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1627 := &x.ImagePullSecrets
		yym1628 := z.DecBinary()
		_ = yym1628
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1627), d)
		}
	}
	for {
		yyj1610++
		if yyhl1610 {
			yyb1610 = yyj1610 > l
		} else {
			yyb1610 = r.CheckBreak()
		}
		if yyb1610 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1610-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1629 := z.EncBinary()
		_ = yym1629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1630 := !z.EncBinary()
			yy2arr1630 := z.EncBasicHandle().StructToArray
			var yyq1630 [8]bool
			_, _, _ = yysep1630, yyq1630, yy2arr1630
			const yyr1630 bool = false
			yyq1630[0] = x.HostNetwork != false
			yyq1630[1] = x.HostPID != false
			yyq1630[2] = x.HostIPC != false
			yyq1630[3] = x.SELinuxOptions != nil
			yyq1630[4] = x.RunAsUser != nil
			yyq1630[5] = x.RunAsNonRoot != nil
			yyq1630[6] = len(x.SupplementalGroups) != 0
			yyq1630[7] = x.FSGroup != nil
			var yynn1630 int
			if yyr1630 || yy2arr1630 {
				r.EncodeArrayStart(8)
			} else {
				yynn1630 = 0
				for _, b := range yyq1630 {
					if b {
						yynn1630++
					}
				}
				r.EncodeMapStart(yynn1630)
				yynn1630 = 0
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[0] {
					yym1632 := z.EncBinary()
					_ = yym1632
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1630[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1633 := z.EncBinary()
					_ = yym1633
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[1] {
					yym1635 := z.EncBinary()
					_ = yym1635
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1636 := z.EncBinary()
					_ = yym1636
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[2] {
					yym1638 := z.EncBinary()
					_ = yym1638
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1630[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1639 := z.EncBinary()
					_ = yym1639
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1630[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1642 := *x.RunAsUser
						yym1643 := z.EncBinary()
						_ = yym1643
						if false {
						} else {
							r.EncodeInt(int64(yy1642))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1630[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1644 := *x.RunAsUser
						yym1645 := z.EncBinary()
						_ = yym1645
						if false {
						} else {
							r.EncodeInt(int64(yy1644))
						}
					}
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1647 := *x.RunAsNonRoot
						yym1648 := z.EncBinary()
						_ = yym1648
						if false {
						} else {
							r.EncodeBool(bool(yy1647))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1630[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1649 := *x.RunAsNonRoot
						yym1650 := z.EncBinary()
						_ = yym1650
						if false {
						} else {
							r.EncodeBool(bool(yy1649))
						}
					}
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1652 := z.EncBinary()
						_ = yym1652
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1630[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1653 := z.EncBinary()
						_ = yym1653
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1655 := *x.FSGroup
						yym1656 := z.EncBinary()
						_ = yym1656
						if false {
						} else {
							r.EncodeInt(int64(yy1655))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1630[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1657 := *x.FSGroup
						yym1658 := z.EncBinary()
						_ = yym1658
						if false {
						} else {
							r.EncodeInt(int64(yy1657))
						}
					}
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1659 := z.DecBinary()
	_ = yym1659
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1660 := r.ContainerType()
		if yyct1660 == codecSelferValueTypeMap1234 {
			yyl1660 := r.ReadMapStart()
			if yyl1660 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1660, d)
			}
		} else if yyct1660 == codecSelferValueTypeArray1234 {
			yyl1660 := r.ReadArrayStart()
			if yyl1660 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1660, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1661Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1661Slc
	var yyhl1661 bool = l >= 0
	for yyj1661 := 0; ; yyj1661++ {
		if yyhl1661 {
			if yyj1661 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1661Slc = r.DecodeBytes(yys1661Slc, true, true)
		yys1661 := string(yys1661Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1661 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1667 := z.DecBinary()
				_ = yym1667
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1669 := z.DecBinary()
				_ = yym1669
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1670 := &x.SupplementalGroups
				yym1671 := z.DecBinary()
				_ = yym1671
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1670, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1673 := z.DecBinary()
				_ = yym1673
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1661)
		} // end switch yys1661
	} // end for yyj1661
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1674 int
	var yyb1674 bool
	var yyhl1674 bool = l >= 0
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1680 := z.DecBinary()
		_ = yym1680
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1682 := z.DecBinary()
		_ = yym1682
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1683 := &x.SupplementalGroups
		yym1684 := z.DecBinary()
		_ = yym1684
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1683, false, d)
		}
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1686 := z.DecBinary()
		_ = yym1686
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1674++
		if yyhl1674 {
			yyb1674 = yyj1674 > l
		} else {
			yyb1674 = r.CheckBreak()
		}
		if yyb1674 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1674-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1687 := z.EncBinary()
		_ = yym1687
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1688 := !z.EncBinary()
			yy2arr1688 := z.EncBasicHandle().StructToArray
			var yyq1688 [8]bool
			_, _, _ = yysep1688, yyq1688, yy2arr1688
			const yyr1688 bool = false
			yyq1688[0] = x.Phase != ""
			yyq1688[1] = len(x.Conditions) != 0
			yyq1688[2] = x.Message != ""
			yyq1688[3] = x.Reason != ""
			yyq1688[4] = x.HostIP != ""
			yyq1688[5] = x.PodIP != ""
			yyq1688[6] = x.StartTime != nil
			yyq1688[7] = len(x.ContainerStatuses) != 0
			var yynn1688 int
			if yyr1688 || yy2arr1688 {
				r.EncodeArrayStart(8)
			} else {
				yynn1688 = 0
				for _, b := range yyq1688 {
					if b {
						yynn1688++
					}
				}
				r.EncodeMapStart(yynn1688)
				yynn1688 = 0
			}
			if yyr1688 || yy2arr1688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1688[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1688[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1688 || yy2arr1688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1688[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1691 := z.EncBinary()
						_ = yym1691
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1688[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1692 := z.EncBinary()
						_ = yym1692
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1688 || yy2arr1688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1688[2] {
					yym1694 := z.EncBinary()
					_ = yym1694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1688[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1695 := z.EncBinary()
					_ = yym1695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1688 || yy2arr1688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1688[3] {
					yym1697 := z.EncBinary()
					_ = yym1697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1688[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1698 := z.EncBinary()
					_ = yym1698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1688 || yy2arr1688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1688[4] {
					yym1700 := z.EncBinary()
					_ = yym1700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1688[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1701 := z.EncBinary()
					_ = yym1701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1688 || yy2arr1688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1688[5] {
					yym1703 := z.EncBinary()
					_ = yym1703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1688[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1704 := z.EncBinary()
					_ = yym1704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1688 || yy2arr1688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1688[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1706 := z.EncBinary()
						_ = yym1706
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1706 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1706 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1688[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1707 := z.EncBinary()
						_ = yym1707
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1707 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1707 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1688 || yy2arr1688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1688[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1709 := z.EncBinary()
						_ = yym1709
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1688[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1710 := z.EncBinary()
						_ = yym1710
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1688 || yy2arr1688 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1711 := z.DecBinary()
	_ = yym1711
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1712 := r.ContainerType()
		if yyct1712 == codecSelferValueTypeMap1234 {
			yyl1712 := r.ReadMapStart()
			if yyl1712 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1712, d)
			}
		} else if yyct1712 == codecSelferValueTypeArray1234 {
			yyl1712 := r.ReadArrayStart()
			if yyl1712 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1712, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1713Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1713Slc
	var yyhl1713 bool = l >= 0
	for yyj1713 := 0; ; yyj1713++ {
		if yyhl1713 {
			if yyj1713 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1713Slc = r.DecodeBytes(yys1713Slc, true, true)
		yys1713 := string(yys1713Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1713 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1715 := &x.Conditions
				yym1716 := z.DecBinary()
				_ = yym1716
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1715), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1722 := z.DecBinary()
				_ = yym1722
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1722 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1722 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1723 := &x.ContainerStatuses
				yym1724 := z.DecBinary()
				_ = yym1724
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1723), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1713)
		} // end switch yys1713
	} // end for yyj1713
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1725 int
	var yyb1725 bool
	var yyhl1725 bool = l >= 0
	yyj1725++
	if yyhl1725 {
		yyb1725 = yyj1725 > l
	} else {
		yyb1725 = r.CheckBreak()
	}
	if yyb1725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1725++
	if yyhl1725 {
		yyb1725 = yyj1725 > l
	} else {
		yyb1725 = r.CheckBreak()
	}
	if yyb1725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1727 := &x.Conditions
		yym1728 := z.DecBinary()
		_ = yym1728
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1727), d)
		}
	}
	yyj1725++
	if yyhl1725 {
		yyb1725 = yyj1725 > l
	} else {
		yyb1725 = r.CheckBreak()
	}
	if yyb1725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1725++
	if yyhl1725 {
		yyb1725 = yyj1725 > l
	} else {
		yyb1725 = r.CheckBreak()
	}
	if yyb1725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1725++
	if yyhl1725 {
		yyb1725 = yyj1725 > l
	} else {
		yyb1725 = r.CheckBreak()
	}
	if yyb1725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1725++
	if yyhl1725 {
		yyb1725 = yyj1725 > l
	} else {
		yyb1725 = r.CheckBreak()
	}
	if yyb1725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1725++
	if yyhl1725 {
		yyb1725 = yyj1725 > l
	} else {
		yyb1725 = r.CheckBreak()
	}
	if yyb1725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1734 := z.DecBinary()
		_ = yym1734
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1734 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1734 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1725++
	if yyhl1725 {
		yyb1725 = yyj1725 > l
	} else {
		yyb1725 = r.CheckBreak()
	}
	if yyb1725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1735 := &x.ContainerStatuses
		yym1736 := z.DecBinary()
		_ = yym1736
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1735), d)
		}
	}
	for {
		yyj1725++
		if yyhl1725 {
			yyb1725 = yyj1725 > l
		} else {
			yyb1725 = r.CheckBreak()
		}
		if yyb1725 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1725-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1737 := z.EncBinary()
		_ = yym1737
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1738 := !z.EncBinary()
			yy2arr1738 := z.EncBasicHandle().StructToArray
			var yyq1738 [4]bool
			_, _, _ = yysep1738, yyq1738, yy2arr1738
			const yyr1738 bool = false
			yyq1738[0] = x.Kind != ""
			yyq1738[1] = x.APIVersion != ""
			yyq1738[2] = true
			yyq1738[3] = true
			var yynn1738 int
			if yyr1738 || yy2arr1738 {
				r.EncodeArrayStart(4)
			} else {
				yynn1738 = 0
				for _, b := range yyq1738 {
					if b {
						yynn1738++
					}
				}
				r.EncodeMapStart(yynn1738)
				yynn1738 = 0
			}
			if yyr1738 || yy2arr1738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1738[0] {
					yym1740 := z.EncBinary()
					_ = yym1740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1738[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1738 || yy2arr1738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1738[1] {
					yym1743 := z.EncBinary()
					_ = yym1743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1738[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1744 := z.EncBinary()
					_ = yym1744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1738 || yy2arr1738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1738[2] {
					yy1746 := &x.ObjectMeta
					yy1746.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1738[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1747 := &x.ObjectMeta
					yy1747.CodecEncodeSelf(e)
				}
			}
			if yyr1738 || yy2arr1738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1738[3] {
					yy1749 := &x.Status
					yy1749.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1738[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1750 := &x.Status
					yy1750.CodecEncodeSelf(e)
				}
			}
			if yyr1738 || yy2arr1738 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1751 := z.DecBinary()
	_ = yym1751
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1752 := r.ContainerType()
		if yyct1752 == codecSelferValueTypeMap1234 {
			yyl1752 := r.ReadMapStart()
			if yyl1752 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1752, d)
			}
		} else if yyct1752 == codecSelferValueTypeArray1234 {
			yyl1752 := r.ReadArrayStart()
			if yyl1752 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1752, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1753Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1753Slc
	var yyhl1753 bool = l >= 0
	for yyj1753 := 0; ; yyj1753++ {
		if yyhl1753 {
			if yyj1753 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1753Slc = r.DecodeBytes(yys1753Slc, true, true)
		yys1753 := string(yys1753Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1753 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1756 := &x.ObjectMeta
				yyv1756.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1757 := &x.Status
				yyv1757.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1753)
		} // end switch yys1753
	} // end for yyj1753
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1758 int
	var yyb1758 bool
	var yyhl1758 bool = l >= 0
	yyj1758++
	if yyhl1758 {
		yyb1758 = yyj1758 > l
	} else {
		yyb1758 = r.CheckBreak()
	}
	if yyb1758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1758++
	if yyhl1758 {
		yyb1758 = yyj1758 > l
	} else {
		yyb1758 = r.CheckBreak()
	}
	if yyb1758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1758++
	if yyhl1758 {
		yyb1758 = yyj1758 > l
	} else {
		yyb1758 = r.CheckBreak()
	}
	if yyb1758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1761 := &x.ObjectMeta
		yyv1761.CodecDecodeSelf(d)
	}
	yyj1758++
	if yyhl1758 {
		yyb1758 = yyj1758 > l
	} else {
		yyb1758 = r.CheckBreak()
	}
	if yyb1758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1762 := &x.Status
		yyv1762.CodecDecodeSelf(d)
	}
	for {
		yyj1758++
		if yyhl1758 {
			yyb1758 = yyj1758 > l
		} else {
			yyb1758 = r.CheckBreak()
		}
		if yyb1758 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1758-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1763 := z.EncBinary()
		_ = yym1763
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1764 := !z.EncBinary()
			yy2arr1764 := z.EncBasicHandle().StructToArray
			var yyq1764 [5]bool
			_, _, _ = yysep1764, yyq1764, yy2arr1764
			const yyr1764 bool = false
			yyq1764[0] = x.Kind != ""
			yyq1764[1] = x.APIVersion != ""
			yyq1764[2] = true
			yyq1764[3] = true
			yyq1764[4] = true
			var yynn1764 int
			if yyr1764 || yy2arr1764 {
				r.EncodeArrayStart(5)
			} else {
				yynn1764 = 0
				for _, b := range yyq1764 {
					if b {
						yynn1764++
					}
				}
				r.EncodeMapStart(yynn1764)
				yynn1764 = 0
			}
			if yyr1764 || yy2arr1764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1764[0] {
					yym1766 := z.EncBinary()
					_ = yym1766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1764[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1764 || yy2arr1764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1764[1] {
					yym1769 := z.EncBinary()
					_ = yym1769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1764[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1770 := z.EncBinary()
					_ = yym1770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1764 || yy2arr1764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1764[2] {
					yy1772 := &x.ObjectMeta
					yy1772.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1764[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1773 := &x.ObjectMeta
					yy1773.CodecEncodeSelf(e)
				}
			}
			if yyr1764 || yy2arr1764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1764[3] {
					yy1775 := &x.Spec
					yy1775.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1764[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1776 := &x.Spec
					yy1776.CodecEncodeSelf(e)
				}
			}
			if yyr1764 || yy2arr1764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1764[4] {
					yy1778 := &x.Status
					yy1778.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1764[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1779 := &x.Status
					yy1779.CodecEncodeSelf(e)
				}
			}
			if yyr1764 || yy2arr1764 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1780 := z.DecBinary()
	_ = yym1780
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1781 := r.ContainerType()
		if yyct1781 == codecSelferValueTypeMap1234 {
			yyl1781 := r.ReadMapStart()
			if yyl1781 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1781, d)
			}
		} else if yyct1781 == codecSelferValueTypeArray1234 {
			yyl1781 := r.ReadArrayStart()
			if yyl1781 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1781, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1782Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1782Slc
	var yyhl1782 bool = l >= 0
	for yyj1782 := 0; ; yyj1782++ {
		if yyhl1782 {
			if yyj1782 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1782Slc = r.DecodeBytes(yys1782Slc, true, true)
		yys1782 := string(yys1782Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1782 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1785 := &x.ObjectMeta
				yyv1785.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1786 := &x.Spec
				yyv1786.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1787 := &x.Status
				yyv1787.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1782)
		} // end switch yys1782
	} // end for yyj1782
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1788 int
	var yyb1788 bool
	var yyhl1788 bool = l >= 0
	yyj1788++
	if yyhl1788 {
		yyb1788 = yyj1788 > l
	} else {
		yyb1788 = r.CheckBreak()
	}
	if yyb1788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1788++
	if yyhl1788 {
		yyb1788 = yyj1788 > l
	} else {
		yyb1788 = r.CheckBreak()
	}
	if yyb1788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1788++
	if yyhl1788 {
		yyb1788 = yyj1788 > l
	} else {
		yyb1788 = r.CheckBreak()
	}
	if yyb1788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1791 := &x.ObjectMeta
		yyv1791.CodecDecodeSelf(d)
	}
	yyj1788++
	if yyhl1788 {
		yyb1788 = yyj1788 > l
	} else {
		yyb1788 = r.CheckBreak()
	}
	if yyb1788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1792 := &x.Spec
		yyv1792.CodecDecodeSelf(d)
	}
	yyj1788++
	if yyhl1788 {
		yyb1788 = yyj1788 > l
	} else {
		yyb1788 = r.CheckBreak()
	}
	if yyb1788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1793 := &x.Status
		yyv1793.CodecDecodeSelf(d)
	}
	for {
		yyj1788++
		if yyhl1788 {
			yyb1788 = yyj1788 > l
		} else {
			yyb1788 = r.CheckBreak()
		}
		if yyb1788 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1788-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1794 := z.EncBinary()
		_ = yym1794
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1795 := !z.EncBinary()
			yy2arr1795 := z.EncBasicHandle().StructToArray
			var yyq1795 [2]bool
			_, _, _ = yysep1795, yyq1795, yy2arr1795
			const yyr1795 bool = false
			yyq1795[0] = true
			yyq1795[1] = true
			var yynn1795 int
			if yyr1795 || yy2arr1795 {
				r.EncodeArrayStart(2)
			} else {
				yynn1795 = 0
				for _, b := range yyq1795 {
					if b {
						yynn1795++
					}
				}
				r.EncodeMapStart(yynn1795)
				yynn1795 = 0
			}
			if yyr1795 || yy2arr1795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1795[0] {
					yy1797 := &x.ObjectMeta
					yy1797.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1795[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1798 := &x.ObjectMeta
					yy1798.CodecEncodeSelf(e)
				}
			}
			if yyr1795 || yy2arr1795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1795[1] {
					yy1800 := &x.Spec
					yy1800.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1795[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1801 := &x.Spec
					yy1801.CodecEncodeSelf(e)
				}
			}
			if yyr1795 || yy2arr1795 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1802 := z.DecBinary()
	_ = yym1802
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1803 := r.ContainerType()
		if yyct1803 == codecSelferValueTypeMap1234 {
			yyl1803 := r.ReadMapStart()
			if yyl1803 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1803, d)
			}
		} else if yyct1803 == codecSelferValueTypeArray1234 {
			yyl1803 := r.ReadArrayStart()
			if yyl1803 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1803, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1804Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1804Slc
	var yyhl1804 bool = l >= 0
	for yyj1804 := 0; ; yyj1804++ {
		if yyhl1804 {
			if yyj1804 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1804Slc = r.DecodeBytes(yys1804Slc, true, true)
		yys1804 := string(yys1804Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1804 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1805 := &x.ObjectMeta
				yyv1805.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1806 := &x.Spec
				yyv1806.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1804)
		} // end switch yys1804
	} // end for yyj1804
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1807 int
	var yyb1807 bool
	var yyhl1807 bool = l >= 0
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1808 := &x.ObjectMeta
		yyv1808.CodecDecodeSelf(d)
	}
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1809 := &x.Spec
		yyv1809.CodecDecodeSelf(d)
	}
	for {
		yyj1807++
		if yyhl1807 {
			yyb1807 = yyj1807 > l
		} else {
			yyb1807 = r.CheckBreak()
		}
		if yyb1807 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1807-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1810 := z.EncBinary()
		_ = yym1810
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1811 := !z.EncBinary()
			yy2arr1811 := z.EncBasicHandle().StructToArray
			var yyq1811 [4]bool
			_, _, _ = yysep1811, yyq1811, yy2arr1811
			const yyr1811 bool = false
			yyq1811[0] = x.Kind != ""
			yyq1811[1] = x.APIVersion != ""
			yyq1811[2] = true
			yyq1811[3] = true
			var yynn1811 int
			if yyr1811 || yy2arr1811 {
				r.EncodeArrayStart(4)
			} else {
				yynn1811 = 0
				for _, b := range yyq1811 {
					if b {
						yynn1811++
					}
				}
				r.EncodeMapStart(yynn1811)
				yynn1811 = 0
			}
			if yyr1811 || yy2arr1811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1811[0] {
					yym1813 := z.EncBinary()
					_ = yym1813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1811[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1814 := z.EncBinary()
					_ = yym1814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1811 || yy2arr1811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1811[1] {
					yym1816 := z.EncBinary()
					_ = yym1816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1811[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1817 := z.EncBinary()
					_ = yym1817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1811 || yy2arr1811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1811[2] {
					yy1819 := &x.ObjectMeta
					yy1819.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1811[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1820 := &x.ObjectMeta
					yy1820.CodecEncodeSelf(e)
				}
			}
			if yyr1811 || yy2arr1811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1811[3] {
					yy1822 := &x.Template
					yy1822.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1811[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1823 := &x.Template
					yy1823.CodecEncodeSelf(e)
				}
			}
			if yyr1811 || yy2arr1811 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1824 := z.DecBinary()
	_ = yym1824
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1825 := r.ContainerType()
		if yyct1825 == codecSelferValueTypeMap1234 {
			yyl1825 := r.ReadMapStart()
			if yyl1825 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1825, d)
			}
		} else if yyct1825 == codecSelferValueTypeArray1234 {
			yyl1825 := r.ReadArrayStart()
			if yyl1825 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1825, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1826Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1826Slc
	var yyhl1826 bool = l >= 0
	for yyj1826 := 0; ; yyj1826++ {
		if yyhl1826 {
			if yyj1826 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1826Slc = r.DecodeBytes(yys1826Slc, true, true)
		yys1826 := string(yys1826Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1826 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1829 := &x.ObjectMeta
				yyv1829.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1830 := &x.Template
				yyv1830.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1826)
		} // end switch yys1826
	} // end for yyj1826
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1831 int
	var yyb1831 bool
	var yyhl1831 bool = l >= 0
	yyj1831++
	if yyhl1831 {
		yyb1831 = yyj1831 > l
	} else {
		yyb1831 = r.CheckBreak()
	}
	if yyb1831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1831++
	if yyhl1831 {
		yyb1831 = yyj1831 > l
	} else {
		yyb1831 = r.CheckBreak()
	}
	if yyb1831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1831++
	if yyhl1831 {
		yyb1831 = yyj1831 > l
	} else {
		yyb1831 = r.CheckBreak()
	}
	if yyb1831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1834 := &x.ObjectMeta
		yyv1834.CodecDecodeSelf(d)
	}
	yyj1831++
	if yyhl1831 {
		yyb1831 = yyj1831 > l
	} else {
		yyb1831 = r.CheckBreak()
	}
	if yyb1831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1835 := &x.Template
		yyv1835.CodecDecodeSelf(d)
	}
	for {
		yyj1831++
		if yyhl1831 {
			yyb1831 = yyj1831 > l
		} else {
			yyb1831 = r.CheckBreak()
		}
		if yyb1831 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1831-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1836 := z.EncBinary()
		_ = yym1836
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1837 := !z.EncBinary()
			yy2arr1837 := z.EncBasicHandle().StructToArray
			var yyq1837 [4]bool
			_, _, _ = yysep1837, yyq1837, yy2arr1837
			const yyr1837 bool = false
			yyq1837[0] = x.Kind != ""
			yyq1837[1] = x.APIVersion != ""
			yyq1837[2] = true
			var yynn1837 int
			if yyr1837 || yy2arr1837 {
				r.EncodeArrayStart(4)
			} else {
				yynn1837 = 1
				for _, b := range yyq1837 {
					if b {
						yynn1837++
					}
				}
				r.EncodeMapStart(yynn1837)
				yynn1837 = 0
			}
			if yyr1837 || yy2arr1837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1837[0] {
					yym1839 := z.EncBinary()
					_ = yym1839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1837[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1840 := z.EncBinary()
					_ = yym1840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1837 || yy2arr1837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1837[1] {
					yym1842 := z.EncBinary()
					_ = yym1842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1837[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1843 := z.EncBinary()
					_ = yym1843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1837 || yy2arr1837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1837[2] {
					yy1845 := &x.ListMeta
					yym1846 := z.EncBinary()
					_ = yym1846
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1845) {
					} else {
						z.EncFallback(yy1845)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1837[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1847 := &x.ListMeta
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1847) {
					} else {
						z.EncFallback(yy1847)
					}
				}
			}
			if yyr1837 || yy2arr1837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1850 := z.EncBinary()
					_ = yym1850
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr1837 || yy2arr1837 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1852 := z.DecBinary()
	_ = yym1852
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1853 := r.ContainerType()
		if yyct1853 == codecSelferValueTypeMap1234 {
			yyl1853 := r.ReadMapStart()
			if yyl1853 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1853, d)
			}
		} else if yyct1853 == codecSelferValueTypeArray1234 {
			yyl1853 := r.ReadArrayStart()
			if yyl1853 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1853, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1854Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1854Slc
	var yyhl1854 bool = l >= 0
	for yyj1854 := 0; ; yyj1854++ {
		if yyhl1854 {
			if yyj1854 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1854Slc = r.DecodeBytes(yys1854Slc, true, true)
		yys1854 := string(yys1854Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1854 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1857 := &x.ListMeta
				yym1858 := z.DecBinary()
				_ = yym1858
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1857) {
				} else {
					z.DecFallback(yyv1857, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1859 := &x.Items
				yym1860 := z.DecBinary()
				_ = yym1860
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1859), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1854)
		} // end switch yys1854
	} // end for yyj1854
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1861 int
	var yyb1861 bool
	var yyhl1861 bool = l >= 0
	yyj1861++
	if yyhl1861 {
		yyb1861 = yyj1861 > l
	} else {
		yyb1861 = r.CheckBreak()
	}
	if yyb1861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1861++
	if yyhl1861 {
		yyb1861 = yyj1861 > l
	} else {
		yyb1861 = r.CheckBreak()
	}
	if yyb1861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1861++
	if yyhl1861 {
		yyb1861 = yyj1861 > l
	} else {
		yyb1861 = r.CheckBreak()
	}
	if yyb1861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1864 := &x.ListMeta
		yym1865 := z.DecBinary()
		_ = yym1865
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1864) {
		} else {
			z.DecFallback(yyv1864, false)
		}
	}
	yyj1861++
	if yyhl1861 {
		yyb1861 = yyj1861 > l
	} else {
		yyb1861 = r.CheckBreak()
	}
	if yyb1861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1866 := &x.Items
		yym1867 := z.DecBinary()
		_ = yym1867
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1866), d)
		}
	}
	for {
		yyj1861++
		if yyhl1861 {
			yyb1861 = yyj1861 > l
		} else {
			yyb1861 = r.CheckBreak()
		}
		if yyb1861 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1861-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1868 := z.EncBinary()
		_ = yym1868
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1869 := !z.EncBinary()
			yy2arr1869 := z.EncBasicHandle().StructToArray
			var yyq1869 [3]bool
			_, _, _ = yysep1869, yyq1869, yy2arr1869
			const yyr1869 bool = false
			yyq1869[2] = x.Template != nil
			var yynn1869 int
			if yyr1869 || yy2arr1869 {
				r.EncodeArrayStart(3)
			} else {
				yynn1869 = 2
				for _, b := range yyq1869 {
					if b {
						yynn1869++
					}
				}
				r.EncodeMapStart(yynn1869)
				yynn1869 = 0
			}
			if yyr1869 || yy2arr1869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1871 := z.EncBinary()
				_ = yym1871
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1872 := z.EncBinary()
				_ = yym1872
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1869 || yy2arr1869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1874 := z.EncBinary()
					_ = yym1874
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1875 := z.EncBinary()
					_ = yym1875
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1869 || yy2arr1869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1869[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1869[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1869 || yy2arr1869 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1877 := z.DecBinary()
	_ = yym1877
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1878 := r.ContainerType()
		if yyct1878 == codecSelferValueTypeMap1234 {
			yyl1878 := r.ReadMapStart()
			if yyl1878 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1878, d)
			}
		} else if yyct1878 == codecSelferValueTypeArray1234 {
			yyl1878 := r.ReadArrayStart()
			if yyl1878 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1878, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1879Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1879Slc
	var yyhl1879 bool = l >= 0
	for yyj1879 := 0; ; yyj1879++ {
		if yyhl1879 {
			if yyj1879 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1879Slc = r.DecodeBytes(yys1879Slc, true, true)
		yys1879 := string(yys1879Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1879 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1881 := &x.Selector
				yym1882 := z.DecBinary()
				_ = yym1882
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1881, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1879)
		} // end switch yys1879
	} // end for yyj1879
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1884 int
	var yyb1884 bool
	var yyhl1884 bool = l >= 0
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1886 := &x.Selector
		yym1887 := z.DecBinary()
		_ = yym1887
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1886, false, d)
		}
	}
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1884++
		if yyhl1884 {
			yyb1884 = yyj1884 > l
		} else {
			yyb1884 = r.CheckBreak()
		}
		if yyb1884 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1884-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1889 := z.EncBinary()
		_ = yym1889
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1890 := !z.EncBinary()
			yy2arr1890 := z.EncBasicHandle().StructToArray
			var yyq1890 [2]bool
			_, _, _ = yysep1890, yyq1890, yy2arr1890
			const yyr1890 bool = false
			yyq1890[1] = x.ObservedGeneration != 0
			var yynn1890 int
			if yyr1890 || yy2arr1890 {
				r.EncodeArrayStart(2)
			} else {
				yynn1890 = 1
				for _, b := range yyq1890 {
					if b {
						yynn1890++
					}
				}
				r.EncodeMapStart(yynn1890)
				yynn1890 = 0
			}
			if yyr1890 || yy2arr1890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1892 := z.EncBinary()
				_ = yym1892
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1893 := z.EncBinary()
				_ = yym1893
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1890 || yy2arr1890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1890[1] {
					yym1895 := z.EncBinary()
					_ = yym1895
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1890[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1896 := z.EncBinary()
					_ = yym1896
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1890 || yy2arr1890 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1897 := z.DecBinary()
	_ = yym1897
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1898 := r.ContainerType()
		if yyct1898 == codecSelferValueTypeMap1234 {
			yyl1898 := r.ReadMapStart()
			if yyl1898 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1898, d)
			}
		} else if yyct1898 == codecSelferValueTypeArray1234 {
			yyl1898 := r.ReadArrayStart()
			if yyl1898 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1898, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1899Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1899Slc
	var yyhl1899 bool = l >= 0
	for yyj1899 := 0; ; yyj1899++ {
		if yyhl1899 {
			if yyj1899 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1899Slc = r.DecodeBytes(yys1899Slc, true, true)
		yys1899 := string(yys1899Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1899 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1899)
		} // end switch yys1899
	} // end for yyj1899
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1902 int
	var yyb1902 bool
	var yyhl1902 bool = l >= 0
	yyj1902++
	if yyhl1902 {
		yyb1902 = yyj1902 > l
	} else {
		yyb1902 = r.CheckBreak()
	}
	if yyb1902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1902++
	if yyhl1902 {
		yyb1902 = yyj1902 > l
	} else {
		yyb1902 = r.CheckBreak()
	}
	if yyb1902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1902++
		if yyhl1902 {
			yyb1902 = yyj1902 > l
		} else {
			yyb1902 = r.CheckBreak()
		}
		if yyb1902 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1902-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1905 := z.EncBinary()
		_ = yym1905
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1906 := !z.EncBinary()
			yy2arr1906 := z.EncBasicHandle().StructToArray
			var yyq1906 [5]bool
			_, _, _ = yysep1906, yyq1906, yy2arr1906
			const yyr1906 bool = false
			yyq1906[0] = x.Kind != ""
			yyq1906[1] = x.APIVersion != ""
			yyq1906[2] = true
			yyq1906[3] = true
			yyq1906[4] = true
			var yynn1906 int
			if yyr1906 || yy2arr1906 {
				r.EncodeArrayStart(5)
			} else {
				yynn1906 = 0
				for _, b := range yyq1906 {
					if b {
						yynn1906++
					}
				}
				r.EncodeMapStart(yynn1906)
				yynn1906 = 0
			}
			if yyr1906 || yy2arr1906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1906[0] {
					yym1908 := z.EncBinary()
					_ = yym1908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1906[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1909 := z.EncBinary()
					_ = yym1909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1906 || yy2arr1906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1906[1] {
					yym1911 := z.EncBinary()
					_ = yym1911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1906[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1912 := z.EncBinary()
					_ = yym1912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1906 || yy2arr1906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1906[2] {
					yy1914 := &x.ObjectMeta
					yy1914.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1906[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1915 := &x.ObjectMeta
					yy1915.CodecEncodeSelf(e)
				}
			}
			if yyr1906 || yy2arr1906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1906[3] {
					yy1917 := &x.Spec
					yy1917.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1906[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1918 := &x.Spec
					yy1918.CodecEncodeSelf(e)
				}
			}
			if yyr1906 || yy2arr1906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1906[4] {
					yy1920 := &x.Status
					yy1920.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1906[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1921 := &x.Status
					yy1921.CodecEncodeSelf(e)
				}
			}
			if yyr1906 || yy2arr1906 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1922 := z.DecBinary()
	_ = yym1922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1923 := r.ContainerType()
		if yyct1923 == codecSelferValueTypeMap1234 {
			yyl1923 := r.ReadMapStart()
			if yyl1923 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1923, d)
			}
		} else if yyct1923 == codecSelferValueTypeArray1234 {
			yyl1923 := r.ReadArrayStart()
			if yyl1923 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1923, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1924Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1924Slc
	var yyhl1924 bool = l >= 0
	for yyj1924 := 0; ; yyj1924++ {
		if yyhl1924 {
			if yyj1924 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1924Slc = r.DecodeBytes(yys1924Slc, true, true)
		yys1924 := string(yys1924Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1924 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1927 := &x.ObjectMeta
				yyv1927.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1928 := &x.Spec
				yyv1928.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1929 := &x.Status
				yyv1929.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1924)
		} // end switch yys1924
	} // end for yyj1924
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1930 int
	var yyb1930 bool
	var yyhl1930 bool = l >= 0
	yyj1930++
	if yyhl1930 {
		yyb1930 = yyj1930 > l
	} else {
		yyb1930 = r.CheckBreak()
	}
	if yyb1930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1930++
	if yyhl1930 {
		yyb1930 = yyj1930 > l
	} else {
		yyb1930 = r.CheckBreak()
	}
	if yyb1930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1930++
	if yyhl1930 {
		yyb1930 = yyj1930 > l
	} else {
		yyb1930 = r.CheckBreak()
	}
	if yyb1930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1933 := &x.ObjectMeta
		yyv1933.CodecDecodeSelf(d)
	}
	yyj1930++
	if yyhl1930 {
		yyb1930 = yyj1930 > l
	} else {
		yyb1930 = r.CheckBreak()
	}
	if yyb1930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1934 := &x.Spec
		yyv1934.CodecDecodeSelf(d)
	}
	yyj1930++
	if yyhl1930 {
		yyb1930 = yyj1930 > l
	} else {
		yyb1930 = r.CheckBreak()
	}
	if yyb1930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1935 := &x.Status
		yyv1935.CodecDecodeSelf(d)
	}
	for {
		yyj1930++
		if yyhl1930 {
			yyb1930 = yyj1930 > l
		} else {
			yyb1930 = r.CheckBreak()
		}
		if yyb1930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1936 := z.EncBinary()
		_ = yym1936
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1937 := !z.EncBinary()
			yy2arr1937 := z.EncBasicHandle().StructToArray
			var yyq1937 [4]bool
			_, _, _ = yysep1937, yyq1937, yy2arr1937
			const yyr1937 bool = false
			yyq1937[0] = x.Kind != ""
			yyq1937[1] = x.APIVersion != ""
			yyq1937[2] = true
			var yynn1937 int
			if yyr1937 || yy2arr1937 {
				r.EncodeArrayStart(4)
			} else {
				yynn1937 = 1
				for _, b := range yyq1937 {
					if b {
						yynn1937++
					}
				}
				r.EncodeMapStart(yynn1937)
				yynn1937 = 0
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1937[0] {
					yym1939 := z.EncBinary()
					_ = yym1939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1937[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1940 := z.EncBinary()
					_ = yym1940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1937[1] {
					yym1942 := z.EncBinary()
					_ = yym1942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1937[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1943 := z.EncBinary()
					_ = yym1943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1937[2] {
					yy1945 := &x.ListMeta
					yym1946 := z.EncBinary()
					_ = yym1946
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1945) {
					} else {
						z.EncFallback(yy1945)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1937[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1947 := &x.ListMeta
					yym1948 := z.EncBinary()
					_ = yym1948
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1947) {
					} else {
						z.EncFallback(yy1947)
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1950 := z.EncBinary()
					_ = yym1950
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1951 := z.EncBinary()
					_ = yym1951
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1952 := z.DecBinary()
	_ = yym1952
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1953 := r.ContainerType()
		if yyct1953 == codecSelferValueTypeMap1234 {
			yyl1953 := r.ReadMapStart()
			if yyl1953 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1953, d)
			}
		} else if yyct1953 == codecSelferValueTypeArray1234 {
			yyl1953 := r.ReadArrayStart()
			if yyl1953 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1953, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1954Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1954Slc
	var yyhl1954 bool = l >= 0
	for yyj1954 := 0; ; yyj1954++ {
		if yyhl1954 {
			if yyj1954 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1954Slc = r.DecodeBytes(yys1954Slc, true, true)
		yys1954 := string(yys1954Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1954 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1957 := &x.ListMeta
				yym1958 := z.DecBinary()
				_ = yym1958
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1957) {
				} else {
					z.DecFallback(yyv1957, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1959 := &x.Items
				yym1960 := z.DecBinary()
				_ = yym1960
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1959), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1954)
		} // end switch yys1954
	} // end for yyj1954
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1961 int
	var yyb1961 bool
	var yyhl1961 bool = l >= 0
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1964 := &x.ListMeta
		yym1965 := z.DecBinary()
		_ = yym1965
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1964) {
		} else {
			z.DecFallback(yyv1964, false)
		}
	}
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1966 := &x.Items
		yym1967 := z.DecBinary()
		_ = yym1967
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1966), d)
		}
	}
	for {
		yyj1961++
		if yyhl1961 {
			yyb1961 = yyj1961 > l
		} else {
			yyb1961 = r.CheckBreak()
		}
		if yyb1961 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1961-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1968 := z.EncBinary()
		_ = yym1968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1969 := !z.EncBinary()
			yy2arr1969 := z.EncBasicHandle().StructToArray
			var yyq1969 [4]bool
			_, _, _ = yysep1969, yyq1969, yy2arr1969
			const yyr1969 bool = false
			yyq1969[0] = x.Kind != ""
			yyq1969[1] = x.APIVersion != ""
			yyq1969[2] = true
			var yynn1969 int
			if yyr1969 || yy2arr1969 {
				r.EncodeArrayStart(4)
			} else {
				yynn1969 = 1
				for _, b := range yyq1969 {
					if b {
						yynn1969++
					}
				}
				r.EncodeMapStart(yynn1969)
				yynn1969 = 0
			}
			if yyr1969 || yy2arr1969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1969[0] {
					yym1971 := z.EncBinary()
					_ = yym1971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1969[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1972 := z.EncBinary()
					_ = yym1972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1969 || yy2arr1969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1969[1] {
					yym1974 := z.EncBinary()
					_ = yym1974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1969[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1975 := z.EncBinary()
					_ = yym1975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1969 || yy2arr1969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1969[2] {
					yy1977 := &x.ListMeta
					yym1978 := z.EncBinary()
					_ = yym1978
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1977) {
					} else {
						z.EncFallback(yy1977)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1969[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1979 := &x.ListMeta
					yym1980 := z.EncBinary()
					_ = yym1980
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1979) {
					} else {
						z.EncFallback(yy1979)
					}
				}
			}
			if yyr1969 || yy2arr1969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1982 := z.EncBinary()
					_ = yym1982
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1983 := z.EncBinary()
					_ = yym1983
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr1969 || yy2arr1969 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1984 := z.DecBinary()
	_ = yym1984
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1985 := r.ContainerType()
		if yyct1985 == codecSelferValueTypeMap1234 {
			yyl1985 := r.ReadMapStart()
			if yyl1985 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1985, d)
			}
		} else if yyct1985 == codecSelferValueTypeArray1234 {
			yyl1985 := r.ReadArrayStart()
			if yyl1985 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1985, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1986Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1986Slc
	var yyhl1986 bool = l >= 0
	for yyj1986 := 0; ; yyj1986++ {
		if yyhl1986 {
			if yyj1986 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1986Slc = r.DecodeBytes(yys1986Slc, true, true)
		yys1986 := string(yys1986Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1986 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1989 := &x.ListMeta
				yym1990 := z.DecBinary()
				_ = yym1990
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1989) {
				} else {
					z.DecFallback(yyv1989, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1991 := &x.Items
				yym1992 := z.DecBinary()
				_ = yym1992
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1991), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1986)
		} // end switch yys1986
	} // end for yyj1986
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1993 int
	var yyb1993 bool
	var yyhl1993 bool = l >= 0
	yyj1993++
	if yyhl1993 {
		yyb1993 = yyj1993 > l
	} else {
		yyb1993 = r.CheckBreak()
	}
	if yyb1993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1993++
	if yyhl1993 {
		yyb1993 = yyj1993 > l
	} else {
		yyb1993 = r.CheckBreak()
	}
	if yyb1993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1993++
	if yyhl1993 {
		yyb1993 = yyj1993 > l
	} else {
		yyb1993 = r.CheckBreak()
	}
	if yyb1993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1996 := &x.ListMeta
		yym1997 := z.DecBinary()
		_ = yym1997
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1996) {
		} else {
			z.DecFallback(yyv1996, false)
		}
	}
	yyj1993++
	if yyhl1993 {
		yyb1993 = yyj1993 > l
	} else {
		yyb1993 = r.CheckBreak()
	}
	if yyb1993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1998 := &x.Items
		yym1999 := z.DecBinary()
		_ = yym1999
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1998), d)
		}
	}
	for {
		yyj1993++
		if yyhl1993 {
			yyb1993 = yyj1993 > l
		} else {
			yyb1993 = r.CheckBreak()
		}
		if yyb1993 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1993-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2000 := z.EncBinary()
	_ = yym2000
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2001 := z.DecBinary()
	_ = yym2001
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2002 := z.EncBinary()
	_ = yym2002
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2003 := z.DecBinary()
	_ = yym2003
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2004 := z.EncBinary()
		_ = yym2004
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2005 := !z.EncBinary()
			yy2arr2005 := z.EncBasicHandle().StructToArray
			var yyq2005 [1]bool
			_, _, _ = yysep2005, yyq2005, yy2arr2005
			const yyr2005 bool = false
			yyq2005[0] = true
			var yynn2005 int
			if yyr2005 || yy2arr2005 {
				r.EncodeArrayStart(1)
			} else {
				yynn2005 = 0
				for _, b := range yyq2005 {
					if b {
						yynn2005++
					}
				}
				r.EncodeMapStart(yynn2005)
				yynn2005 = 0
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2005[0] {
					yy2007 := &x.LoadBalancer
					yy2007.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2005[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2008 := &x.LoadBalancer
					yy2008.CodecEncodeSelf(e)
				}
			}
			if yyr2005 || yy2arr2005 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2009 := z.DecBinary()
	_ = yym2009
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2010 := r.ContainerType()
		if yyct2010 == codecSelferValueTypeMap1234 {
			yyl2010 := r.ReadMapStart()
			if yyl2010 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2010, d)
			}
		} else if yyct2010 == codecSelferValueTypeArray1234 {
			yyl2010 := r.ReadArrayStart()
			if yyl2010 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2010, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2011Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2011Slc
	var yyhl2011 bool = l >= 0
	for yyj2011 := 0; ; yyj2011++ {
		if yyhl2011 {
			if yyj2011 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2011Slc = r.DecodeBytes(yys2011Slc, true, true)
		yys2011 := string(yys2011Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2011 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2012 := &x.LoadBalancer
				yyv2012.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2011)
		} // end switch yys2011
	} // end for yyj2011
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2013 int
	var yyb2013 bool
	var yyhl2013 bool = l >= 0
	yyj2013++
	if yyhl2013 {
		yyb2013 = yyj2013 > l
	} else {
		yyb2013 = r.CheckBreak()
	}
	if yyb2013 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2014 := &x.LoadBalancer
		yyv2014.CodecDecodeSelf(d)
	}
	for {
		yyj2013++
		if yyhl2013 {
			yyb2013 = yyj2013 > l
		} else {
			yyb2013 = r.CheckBreak()
		}
		if yyb2013 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2013-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2015 := z.EncBinary()
		_ = yym2015
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2016 := !z.EncBinary()
			yy2arr2016 := z.EncBasicHandle().StructToArray
			var yyq2016 [1]bool
			_, _, _ = yysep2016, yyq2016, yy2arr2016
			const yyr2016 bool = false
			yyq2016[0] = len(x.Ingress) != 0
			var yynn2016 int
			if yyr2016 || yy2arr2016 {
				r.EncodeArrayStart(1)
			} else {
				yynn2016 = 0
				for _, b := range yyq2016 {
					if b {
						yynn2016++
					}
				}
				r.EncodeMapStart(yynn2016)
				yynn2016 = 0
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2016[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2018 := z.EncBinary()
						_ = yym2018
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2016[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2019 := z.EncBinary()
						_ = yym2019
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2020 := z.DecBinary()
	_ = yym2020
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2021 := r.ContainerType()
		if yyct2021 == codecSelferValueTypeMap1234 {
			yyl2021 := r.ReadMapStart()
			if yyl2021 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2021, d)
			}
		} else if yyct2021 == codecSelferValueTypeArray1234 {
			yyl2021 := r.ReadArrayStart()
			if yyl2021 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2021, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2022Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2022Slc
	var yyhl2022 bool = l >= 0
	for yyj2022 := 0; ; yyj2022++ {
		if yyhl2022 {
			if yyj2022 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2022Slc = r.DecodeBytes(yys2022Slc, true, true)
		yys2022 := string(yys2022Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2022 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2023 := &x.Ingress
				yym2024 := z.DecBinary()
				_ = yym2024
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2023), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2022)
		} // end switch yys2022
	} // end for yyj2022
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2025 int
	var yyb2025 bool
	var yyhl2025 bool = l >= 0
	yyj2025++
	if yyhl2025 {
		yyb2025 = yyj2025 > l
	} else {
		yyb2025 = r.CheckBreak()
	}
	if yyb2025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2026 := &x.Ingress
		yym2027 := z.DecBinary()
		_ = yym2027
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2026), d)
		}
	}
	for {
		yyj2025++
		if yyhl2025 {
			yyb2025 = yyj2025 > l
		} else {
			yyb2025 = r.CheckBreak()
		}
		if yyb2025 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2025-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2028 := z.EncBinary()
		_ = yym2028
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2029 := !z.EncBinary()
			yy2arr2029 := z.EncBasicHandle().StructToArray
			var yyq2029 [2]bool
			_, _, _ = yysep2029, yyq2029, yy2arr2029
			const yyr2029 bool = false
			yyq2029[0] = x.IP != ""
			yyq2029[1] = x.Hostname != ""
			var yynn2029 int
			if yyr2029 || yy2arr2029 {
				r.EncodeArrayStart(2)
			} else {
				yynn2029 = 0
				for _, b := range yyq2029 {
					if b {
						yynn2029++
					}
				}
				r.EncodeMapStart(yynn2029)
				yynn2029 = 0
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2029[0] {
					yym2031 := z.EncBinary()
					_ = yym2031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2029[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2032 := z.EncBinary()
					_ = yym2032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2029[1] {
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2029[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2035 := z.EncBinary()
					_ = yym2035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2036 := z.DecBinary()
	_ = yym2036
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2037 := r.ContainerType()
		if yyct2037 == codecSelferValueTypeMap1234 {
			yyl2037 := r.ReadMapStart()
			if yyl2037 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2037, d)
			}
		} else if yyct2037 == codecSelferValueTypeArray1234 {
			yyl2037 := r.ReadArrayStart()
			if yyl2037 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2037, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2038Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2038Slc
	var yyhl2038 bool = l >= 0
	for yyj2038 := 0; ; yyj2038++ {
		if yyhl2038 {
			if yyj2038 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2038Slc = r.DecodeBytes(yys2038Slc, true, true)
		yys2038 := string(yys2038Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2038 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2038)
		} // end switch yys2038
	} // end for yyj2038
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2041 int
	var yyb2041 bool
	var yyhl2041 bool = l >= 0
	yyj2041++
	if yyhl2041 {
		yyb2041 = yyj2041 > l
	} else {
		yyb2041 = r.CheckBreak()
	}
	if yyb2041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2041++
	if yyhl2041 {
		yyb2041 = yyj2041 > l
	} else {
		yyb2041 = r.CheckBreak()
	}
	if yyb2041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2041++
		if yyhl2041 {
			yyb2041 = yyj2041 > l
		} else {
			yyb2041 = r.CheckBreak()
		}
		if yyb2041 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2041-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2044 := z.EncBinary()
		_ = yym2044
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2045 := !z.EncBinary()
			yy2arr2045 := z.EncBasicHandle().StructToArray
			var yyq2045 [7]bool
			_, _, _ = yysep2045, yyq2045, yy2arr2045
			const yyr2045 bool = false
			yyq2045[0] = x.Type != ""
			yyq2045[3] = x.ClusterIP != ""
			yyq2045[4] = len(x.ExternalIPs) != 0
			yyq2045[5] = x.LoadBalancerIP != ""
			yyq2045[6] = x.SessionAffinity != ""
			var yynn2045 int
			if yyr2045 || yy2arr2045 {
				r.EncodeArrayStart(7)
			} else {
				yynn2045 = 2
				for _, b := range yyq2045 {
					if b {
						yynn2045++
					}
				}
				r.EncodeMapStart(yynn2045)
				yynn2045 = 0
			}
			if yyr2045 || yy2arr2045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2045[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2045[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2045 || yy2arr2045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2048 := z.EncBinary()
					_ = yym2048
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2049 := z.EncBinary()
					_ = yym2049
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2045 || yy2arr2045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2051 := z.EncBinary()
					_ = yym2051
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2052 := z.EncBinary()
					_ = yym2052
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2045 || yy2arr2045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2045[3] {
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2045[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2055 := z.EncBinary()
					_ = yym2055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2045 || yy2arr2045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2045[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2057 := z.EncBinary()
						_ = yym2057
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2045[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2058 := z.EncBinary()
						_ = yym2058
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2045 || yy2arr2045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2045[5] {
					yym2060 := z.EncBinary()
					_ = yym2060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2045[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2061 := z.EncBinary()
					_ = yym2061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2045 || yy2arr2045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2045[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2045[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2045 || yy2arr2045 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2063 := z.DecBinary()
	_ = yym2063
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2064 := r.ContainerType()
		if yyct2064 == codecSelferValueTypeMap1234 {
			yyl2064 := r.ReadMapStart()
			if yyl2064 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2064, d)
			}
		} else if yyct2064 == codecSelferValueTypeArray1234 {
			yyl2064 := r.ReadArrayStart()
			if yyl2064 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2064, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2065Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2065Slc
	var yyhl2065 bool = l >= 0
	for yyj2065 := 0; ; yyj2065++ {
		if yyhl2065 {
			if yyj2065 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2065Slc = r.DecodeBytes(yys2065Slc, true, true)
		yys2065 := string(yys2065Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2065 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2067 := &x.Ports
				yym2068 := z.DecBinary()
				_ = yym2068
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2067), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2069 := &x.Selector
				yym2070 := z.DecBinary()
				_ = yym2070
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2069, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2072 := &x.ExternalIPs
				yym2073 := z.DecBinary()
				_ = yym2073
				if false {
				} else {
					z.F.DecSliceStringX(yyv2072, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2065)
		} // end switch yys2065
	} // end for yyj2065
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2076 int
	var yyb2076 bool
	var yyhl2076 bool = l >= 0
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2078 := &x.Ports
		yym2079 := z.DecBinary()
		_ = yym2079
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2078), d)
		}
	}
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2080 := &x.Selector
		yym2081 := z.DecBinary()
		_ = yym2081
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2080, false, d)
		}
	}
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2083 := &x.ExternalIPs
		yym2084 := z.DecBinary()
		_ = yym2084
		if false {
		} else {
			z.F.DecSliceStringX(yyv2083, false, d)
		}
	}
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj2076++
		if yyhl2076 {
			yyb2076 = yyj2076 > l
		} else {
			yyb2076 = r.CheckBreak()
		}
		if yyb2076 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2076-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2087 := z.EncBinary()
		_ = yym2087
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2088 := !z.EncBinary()
			yy2arr2088 := z.EncBasicHandle().StructToArray
			var yyq2088 [5]bool
			_, _, _ = yysep2088, yyq2088, yy2arr2088
			const yyr2088 bool = false
			var yynn2088 int
			if yyr2088 || yy2arr2088 {
				r.EncodeArrayStart(5)
			} else {
				yynn2088 = 5
				for _, b := range yyq2088 {
					if b {
						yynn2088++
					}
				}
				r.EncodeMapStart(yynn2088)
				yynn2088 = 0
			}
			if yyr2088 || yy2arr2088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2090 := z.EncBinary()
				_ = yym2090
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2091 := z.EncBinary()
				_ = yym2091
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2088 || yy2arr2088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2088 || yy2arr2088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2094 := z.EncBinary()
				_ = yym2094
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2095 := z.EncBinary()
				_ = yym2095
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2088 || yy2arr2088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2097 := &x.TargetPort
				yym2098 := z.EncBinary()
				_ = yym2098
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2097) {
				} else if !yym2098 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2097)
				} else {
					z.EncFallback(yy2097)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2099 := &x.TargetPort
				yym2100 := z.EncBinary()
				_ = yym2100
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2099) {
				} else if !yym2100 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2099)
				} else {
					z.EncFallback(yy2099)
				}
			}
			if yyr2088 || yy2arr2088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2102 := z.EncBinary()
				_ = yym2102
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2103 := z.EncBinary()
				_ = yym2103
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2088 || yy2arr2088 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2104 := z.DecBinary()
	_ = yym2104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2105 := r.ContainerType()
		if yyct2105 == codecSelferValueTypeMap1234 {
			yyl2105 := r.ReadMapStart()
			if yyl2105 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2105, d)
			}
		} else if yyct2105 == codecSelferValueTypeArray1234 {
			yyl2105 := r.ReadArrayStart()
			if yyl2105 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2105, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2106Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2106Slc
	var yyhl2106 bool = l >= 0
	for yyj2106 := 0; ; yyj2106++ {
		if yyhl2106 {
			if yyj2106 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2106Slc = r.DecodeBytes(yys2106Slc, true, true)
		yys2106 := string(yys2106Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2106 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv2110 := &x.TargetPort
				yym2111 := z.DecBinary()
				_ = yym2111
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2110) {
				} else if !yym2111 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2110)
				} else {
					z.DecFallback(yyv2110, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2106)
		} // end switch yys2106
	} // end for yyj2106
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2113 int
	var yyb2113 bool
	var yyhl2113 bool = l >= 0
	yyj2113++
	if yyhl2113 {
		yyb2113 = yyj2113 > l
	} else {
		yyb2113 = r.CheckBreak()
	}
	if yyb2113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2113++
	if yyhl2113 {
		yyb2113 = yyj2113 > l
	} else {
		yyb2113 = r.CheckBreak()
	}
	if yyb2113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2113++
	if yyhl2113 {
		yyb2113 = yyj2113 > l
	} else {
		yyb2113 = r.CheckBreak()
	}
	if yyb2113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2113++
	if yyhl2113 {
		yyb2113 = yyj2113 > l
	} else {
		yyb2113 = r.CheckBreak()
	}
	if yyb2113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv2117 := &x.TargetPort
		yym2118 := z.DecBinary()
		_ = yym2118
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2117) {
		} else if !yym2118 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2117)
		} else {
			z.DecFallback(yyv2117, false)
		}
	}
	yyj2113++
	if yyhl2113 {
		yyb2113 = yyj2113 > l
	} else {
		yyb2113 = r.CheckBreak()
	}
	if yyb2113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2113++
		if yyhl2113 {
			yyb2113 = yyj2113 > l
		} else {
			yyb2113 = r.CheckBreak()
		}
		if yyb2113 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2113-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2120 := z.EncBinary()
		_ = yym2120
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2121 := !z.EncBinary()
			yy2arr2121 := z.EncBasicHandle().StructToArray
			var yyq2121 [5]bool
			_, _, _ = yysep2121, yyq2121, yy2arr2121
			const yyr2121 bool = false
			yyq2121[0] = x.Kind != ""
			yyq2121[1] = x.APIVersion != ""
			yyq2121[2] = true
			yyq2121[3] = true
			yyq2121[4] = true
			var yynn2121 int
			if yyr2121 || yy2arr2121 {
				r.EncodeArrayStart(5)
			} else {
				yynn2121 = 0
				for _, b := range yyq2121 {
					if b {
						yynn2121++
					}
				}
				r.EncodeMapStart(yynn2121)
				yynn2121 = 0
			}
			if yyr2121 || yy2arr2121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2121[0] {
					yym2123 := z.EncBinary()
					_ = yym2123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2121[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2124 := z.EncBinary()
					_ = yym2124
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2121 || yy2arr2121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2121[1] {
					yym2126 := z.EncBinary()
					_ = yym2126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2121[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2127 := z.EncBinary()
					_ = yym2127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2121 || yy2arr2121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2121[2] {
					yy2129 := &x.ObjectMeta
					yy2129.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2121[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2130 := &x.ObjectMeta
					yy2130.CodecEncodeSelf(e)
				}
			}
			if yyr2121 || yy2arr2121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2121[3] {
					yy2132 := &x.Spec
					yy2132.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2121[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2133 := &x.Spec
					yy2133.CodecEncodeSelf(e)
				}
			}
			if yyr2121 || yy2arr2121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2121[4] {
					yy2135 := &x.Status
					yy2135.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2121[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2136 := &x.Status
					yy2136.CodecEncodeSelf(e)
				}
			}
			if yyr2121 || yy2arr2121 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2137 := z.DecBinary()
	_ = yym2137
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2138 := r.ContainerType()
		if yyct2138 == codecSelferValueTypeMap1234 {
			yyl2138 := r.ReadMapStart()
			if yyl2138 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2138, d)
			}
		} else if yyct2138 == codecSelferValueTypeArray1234 {
			yyl2138 := r.ReadArrayStart()
			if yyl2138 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2138, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2139Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2139Slc
	var yyhl2139 bool = l >= 0
	for yyj2139 := 0; ; yyj2139++ {
		if yyhl2139 {
			if yyj2139 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2139Slc = r.DecodeBytes(yys2139Slc, true, true)
		yys2139 := string(yys2139Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2139 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2142 := &x.ObjectMeta
				yyv2142.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2143 := &x.Spec
				yyv2143.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2144 := &x.Status
				yyv2144.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2139)
		} // end switch yys2139
	} // end for yyj2139
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2145 int
	var yyb2145 bool
	var yyhl2145 bool = l >= 0
	yyj2145++
	if yyhl2145 {
		yyb2145 = yyj2145 > l
	} else {
		yyb2145 = r.CheckBreak()
	}
	if yyb2145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2145++
	if yyhl2145 {
		yyb2145 = yyj2145 > l
	} else {
		yyb2145 = r.CheckBreak()
	}
	if yyb2145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2145++
	if yyhl2145 {
		yyb2145 = yyj2145 > l
	} else {
		yyb2145 = r.CheckBreak()
	}
	if yyb2145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2148 := &x.ObjectMeta
		yyv2148.CodecDecodeSelf(d)
	}
	yyj2145++
	if yyhl2145 {
		yyb2145 = yyj2145 > l
	} else {
		yyb2145 = r.CheckBreak()
	}
	if yyb2145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2149 := &x.Spec
		yyv2149.CodecDecodeSelf(d)
	}
	yyj2145++
	if yyhl2145 {
		yyb2145 = yyj2145 > l
	} else {
		yyb2145 = r.CheckBreak()
	}
	if yyb2145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2150 := &x.Status
		yyv2150.CodecDecodeSelf(d)
	}
	for {
		yyj2145++
		if yyhl2145 {
			yyb2145 = yyj2145 > l
		} else {
			yyb2145 = r.CheckBreak()
		}
		if yyb2145 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2145-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2151 := z.EncBinary()
		_ = yym2151
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2152 := !z.EncBinary()
			yy2arr2152 := z.EncBasicHandle().StructToArray
			var yyq2152 [5]bool
			_, _, _ = yysep2152, yyq2152, yy2arr2152
			const yyr2152 bool = false
			yyq2152[0] = x.Kind != ""
			yyq2152[1] = x.APIVersion != ""
			yyq2152[2] = true
			yyq2152[4] = len(x.ImagePullSecrets) != 0
			var yynn2152 int
			if yyr2152 || yy2arr2152 {
				r.EncodeArrayStart(5)
			} else {
				yynn2152 = 1
				for _, b := range yyq2152 {
					if b {
						yynn2152++
					}
				}
				r.EncodeMapStart(yynn2152)
				yynn2152 = 0
			}
			if yyr2152 || yy2arr2152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2152[0] {
					yym2154 := z.EncBinary()
					_ = yym2154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2152[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2155 := z.EncBinary()
					_ = yym2155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2152 || yy2arr2152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2152[1] {
					yym2157 := z.EncBinary()
					_ = yym2157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2152[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2158 := z.EncBinary()
					_ = yym2158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2152 || yy2arr2152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2152[2] {
					yy2160 := &x.ObjectMeta
					yy2160.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2152[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2161 := &x.ObjectMeta
					yy2161.CodecEncodeSelf(e)
				}
			}
			if yyr2152 || yy2arr2152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2163 := z.EncBinary()
					_ = yym2163
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2164 := z.EncBinary()
					_ = yym2164
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2152 || yy2arr2152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2152[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2166 := z.EncBinary()
						_ = yym2166
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2152[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2167 := z.EncBinary()
						_ = yym2167
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2152 || yy2arr2152 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2168 := z.DecBinary()
	_ = yym2168
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2169 := r.ContainerType()
		if yyct2169 == codecSelferValueTypeMap1234 {
			yyl2169 := r.ReadMapStart()
			if yyl2169 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2169, d)
			}
		} else if yyct2169 == codecSelferValueTypeArray1234 {
			yyl2169 := r.ReadArrayStart()
			if yyl2169 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2169, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2170Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2170Slc
	var yyhl2170 bool = l >= 0
	for yyj2170 := 0; ; yyj2170++ {
		if yyhl2170 {
			if yyj2170 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2170Slc = r.DecodeBytes(yys2170Slc, true, true)
		yys2170 := string(yys2170Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2170 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2173 := &x.ObjectMeta
				yyv2173.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2174 := &x.Secrets
				yym2175 := z.DecBinary()
				_ = yym2175
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2174), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2176 := &x.ImagePullSecrets
				yym2177 := z.DecBinary()
				_ = yym2177
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2176), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2170)
		} // end switch yys2170
	} // end for yyj2170
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2178 int
	var yyb2178 bool
	var yyhl2178 bool = l >= 0
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2181 := &x.ObjectMeta
		yyv2181.CodecDecodeSelf(d)
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2182 := &x.Secrets
		yym2183 := z.DecBinary()
		_ = yym2183
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2182), d)
		}
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2184 := &x.ImagePullSecrets
		yym2185 := z.DecBinary()
		_ = yym2185
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2184), d)
		}
	}
	for {
		yyj2178++
		if yyhl2178 {
			yyb2178 = yyj2178 > l
		} else {
			yyb2178 = r.CheckBreak()
		}
		if yyb2178 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2178-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2186 := z.EncBinary()
		_ = yym2186
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2187 := !z.EncBinary()
			yy2arr2187 := z.EncBasicHandle().StructToArray
			var yyq2187 [4]bool
			_, _, _ = yysep2187, yyq2187, yy2arr2187
			const yyr2187 bool = false
			yyq2187[0] = x.Kind != ""
			yyq2187[1] = x.APIVersion != ""
			yyq2187[2] = true
			var yynn2187 int
			if yyr2187 || yy2arr2187 {
				r.EncodeArrayStart(4)
			} else {
				yynn2187 = 1
				for _, b := range yyq2187 {
					if b {
						yynn2187++
					}
				}
				r.EncodeMapStart(yynn2187)
				yynn2187 = 0
			}
			if yyr2187 || yy2arr2187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2187[0] {
					yym2189 := z.EncBinary()
					_ = yym2189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2187[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2190 := z.EncBinary()
					_ = yym2190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2187 || yy2arr2187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2187[1] {
					yym2192 := z.EncBinary()
					_ = yym2192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2187[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2193 := z.EncBinary()
					_ = yym2193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2187 || yy2arr2187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2187[2] {
					yy2195 := &x.ListMeta
					yym2196 := z.EncBinary()
					_ = yym2196
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2195) {
					} else {
						z.EncFallback(yy2195)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2187[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2197 := &x.ListMeta
					yym2198 := z.EncBinary()
					_ = yym2198
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2197) {
					} else {
						z.EncFallback(yy2197)
					}
				}
			}
			if yyr2187 || yy2arr2187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2200 := z.EncBinary()
					_ = yym2200
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2201 := z.EncBinary()
					_ = yym2201
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2187 || yy2arr2187 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2202 := z.DecBinary()
	_ = yym2202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2203 := r.ContainerType()
		if yyct2203 == codecSelferValueTypeMap1234 {
			yyl2203 := r.ReadMapStart()
			if yyl2203 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2203, d)
			}
		} else if yyct2203 == codecSelferValueTypeArray1234 {
			yyl2203 := r.ReadArrayStart()
			if yyl2203 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2204Slc
	var yyhl2204 bool = l >= 0
	for yyj2204 := 0; ; yyj2204++ {
		if yyhl2204 {
			if yyj2204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2204Slc = r.DecodeBytes(yys2204Slc, true, true)
		yys2204 := string(yys2204Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2204 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2207 := &x.ListMeta
				yym2208 := z.DecBinary()
				_ = yym2208
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2207) {
				} else {
					z.DecFallback(yyv2207, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2209 := &x.Items
				yym2210 := z.DecBinary()
				_ = yym2210
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2209), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2204)
		} // end switch yys2204
	} // end for yyj2204
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2211 int
	var yyb2211 bool
	var yyhl2211 bool = l >= 0
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2214 := &x.ListMeta
		yym2215 := z.DecBinary()
		_ = yym2215
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2214) {
		} else {
			z.DecFallback(yyv2214, false)
		}
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2216 := &x.Items
		yym2217 := z.DecBinary()
		_ = yym2217
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2216), d)
		}
	}
	for {
		yyj2211++
		if yyhl2211 {
			yyb2211 = yyj2211 > l
		} else {
			yyb2211 = r.CheckBreak()
		}
		if yyb2211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2218 := z.EncBinary()
		_ = yym2218
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2219 := !z.EncBinary()
			yy2arr2219 := z.EncBasicHandle().StructToArray
			var yyq2219 [4]bool
			_, _, _ = yysep2219, yyq2219, yy2arr2219
			const yyr2219 bool = false
			yyq2219[0] = x.Kind != ""
			yyq2219[1] = x.APIVersion != ""
			yyq2219[2] = true
			var yynn2219 int
			if yyr2219 || yy2arr2219 {
				r.EncodeArrayStart(4)
			} else {
				yynn2219 = 1
				for _, b := range yyq2219 {
					if b {
						yynn2219++
					}
				}
				r.EncodeMapStart(yynn2219)
				yynn2219 = 0
			}
			if yyr2219 || yy2arr2219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2219[0] {
					yym2221 := z.EncBinary()
					_ = yym2221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2219[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2222 := z.EncBinary()
					_ = yym2222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2219 || yy2arr2219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2219[1] {
					yym2224 := z.EncBinary()
					_ = yym2224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2219[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2225 := z.EncBinary()
					_ = yym2225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2219 || yy2arr2219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2219[2] {
					yy2227 := &x.ObjectMeta
					yy2227.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2219[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2228 := &x.ObjectMeta
					yy2228.CodecEncodeSelf(e)
				}
			}
			if yyr2219 || yy2arr2219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2230 := z.EncBinary()
					_ = yym2230
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2231 := z.EncBinary()
					_ = yym2231
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2219 || yy2arr2219 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2232 := z.DecBinary()
	_ = yym2232
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2233 := r.ContainerType()
		if yyct2233 == codecSelferValueTypeMap1234 {
			yyl2233 := r.ReadMapStart()
			if yyl2233 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2233, d)
			}
		} else if yyct2233 == codecSelferValueTypeArray1234 {
			yyl2233 := r.ReadArrayStart()
			if yyl2233 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2233, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2234Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2234Slc
	var yyhl2234 bool = l >= 0
	for yyj2234 := 0; ; yyj2234++ {
		if yyhl2234 {
			if yyj2234 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2234Slc = r.DecodeBytes(yys2234Slc, true, true)
		yys2234 := string(yys2234Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2234 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2237 := &x.ObjectMeta
				yyv2237.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2238 := &x.Subsets
				yym2239 := z.DecBinary()
				_ = yym2239
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2238), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2234)
		} // end switch yys2234
	} // end for yyj2234
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2240 int
	var yyb2240 bool
	var yyhl2240 bool = l >= 0
	yyj2240++
	if yyhl2240 {
		yyb2240 = yyj2240 > l
	} else {
		yyb2240 = r.CheckBreak()
	}
	if yyb2240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2240++
	if yyhl2240 {
		yyb2240 = yyj2240 > l
	} else {
		yyb2240 = r.CheckBreak()
	}
	if yyb2240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2240++
	if yyhl2240 {
		yyb2240 = yyj2240 > l
	} else {
		yyb2240 = r.CheckBreak()
	}
	if yyb2240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2243 := &x.ObjectMeta
		yyv2243.CodecDecodeSelf(d)
	}
	yyj2240++
	if yyhl2240 {
		yyb2240 = yyj2240 > l
	} else {
		yyb2240 = r.CheckBreak()
	}
	if yyb2240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2244 := &x.Subsets
		yym2245 := z.DecBinary()
		_ = yym2245
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2244), d)
		}
	}
	for {
		yyj2240++
		if yyhl2240 {
			yyb2240 = yyj2240 > l
		} else {
			yyb2240 = r.CheckBreak()
		}
		if yyb2240 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2240-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2246 := z.EncBinary()
		_ = yym2246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2247 := !z.EncBinary()
			yy2arr2247 := z.EncBasicHandle().StructToArray
			var yyq2247 [3]bool
			_, _, _ = yysep2247, yyq2247, yy2arr2247
			const yyr2247 bool = false
			var yynn2247 int
			if yyr2247 || yy2arr2247 {
				r.EncodeArrayStart(3)
			} else {
				yynn2247 = 3
				for _, b := range yyq2247 {
					if b {
						yynn2247++
					}
				}
				r.EncodeMapStart(yynn2247)
				yynn2247 = 0
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2249 := z.EncBinary()
					_ = yym2249
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2250 := z.EncBinary()
					_ = yym2250
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2252 := z.EncBinary()
					_ = yym2252
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2253 := z.EncBinary()
					_ = yym2253
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2255 := z.EncBinary()
					_ = yym2255
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2256 := z.EncBinary()
					_ = yym2256
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2257 := z.DecBinary()
	_ = yym2257
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2258 := r.ContainerType()
		if yyct2258 == codecSelferValueTypeMap1234 {
			yyl2258 := r.ReadMapStart()
			if yyl2258 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2258, d)
			}
		} else if yyct2258 == codecSelferValueTypeArray1234 {
			yyl2258 := r.ReadArrayStart()
			if yyl2258 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2258, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2259Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2259Slc
	var yyhl2259 bool = l >= 0
	for yyj2259 := 0; ; yyj2259++ {
		if yyhl2259 {
			if yyj2259 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2259Slc = r.DecodeBytes(yys2259Slc, true, true)
		yys2259 := string(yys2259Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2259 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2260 := &x.Addresses
				yym2261 := z.DecBinary()
				_ = yym2261
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2260), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2262 := &x.NotReadyAddresses
				yym2263 := z.DecBinary()
				_ = yym2263
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2262), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2264 := &x.Ports
				yym2265 := z.DecBinary()
				_ = yym2265
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2264), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2259)
		} // end switch yys2259
	} // end for yyj2259
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2266 int
	var yyb2266 bool
	var yyhl2266 bool = l >= 0
	yyj2266++
	if yyhl2266 {
		yyb2266 = yyj2266 > l
	} else {
		yyb2266 = r.CheckBreak()
	}
	if yyb2266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2267 := &x.Addresses
		yym2268 := z.DecBinary()
		_ = yym2268
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2267), d)
		}
	}
	yyj2266++
	if yyhl2266 {
		yyb2266 = yyj2266 > l
	} else {
		yyb2266 = r.CheckBreak()
	}
	if yyb2266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2269 := &x.NotReadyAddresses
		yym2270 := z.DecBinary()
		_ = yym2270
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2269), d)
		}
	}
	yyj2266++
	if yyhl2266 {
		yyb2266 = yyj2266 > l
	} else {
		yyb2266 = r.CheckBreak()
	}
	if yyb2266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2271 := &x.Ports
		yym2272 := z.DecBinary()
		_ = yym2272
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2271), d)
		}
	}
	for {
		yyj2266++
		if yyhl2266 {
			yyb2266 = yyj2266 > l
		} else {
			yyb2266 = r.CheckBreak()
		}
		if yyb2266 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2266-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2273 := z.EncBinary()
		_ = yym2273
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2274 := !z.EncBinary()
			yy2arr2274 := z.EncBasicHandle().StructToArray
			var yyq2274 [2]bool
			_, _, _ = yysep2274, yyq2274, yy2arr2274
			const yyr2274 bool = false
			var yynn2274 int
			if yyr2274 || yy2arr2274 {
				r.EncodeArrayStart(2)
			} else {
				yynn2274 = 2
				for _, b := range yyq2274 {
					if b {
						yynn2274++
					}
				}
				r.EncodeMapStart(yynn2274)
				yynn2274 = 0
			}
			if yyr2274 || yy2arr2274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2276 := z.EncBinary()
				_ = yym2276
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2277 := z.EncBinary()
				_ = yym2277
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2274 || yy2arr2274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2274 || yy2arr2274 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2279 := z.DecBinary()
	_ = yym2279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2280 := r.ContainerType()
		if yyct2280 == codecSelferValueTypeMap1234 {
			yyl2280 := r.ReadMapStart()
			if yyl2280 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2280, d)
			}
		} else if yyct2280 == codecSelferValueTypeArray1234 {
			yyl2280 := r.ReadArrayStart()
			if yyl2280 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2280, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2281Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2281Slc
	var yyhl2281 bool = l >= 0
	for yyj2281 := 0; ; yyj2281++ {
		if yyhl2281 {
			if yyj2281 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2281Slc = r.DecodeBytes(yys2281Slc, true, true)
		yys2281 := string(yys2281Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2281 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2281)
		} // end switch yys2281
	} // end for yyj2281
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2284 int
	var yyb2284 bool
	var yyhl2284 bool = l >= 0
	yyj2284++
	if yyhl2284 {
		yyb2284 = yyj2284 > l
	} else {
		yyb2284 = r.CheckBreak()
	}
	if yyb2284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2284++
	if yyhl2284 {
		yyb2284 = yyj2284 > l
	} else {
		yyb2284 = r.CheckBreak()
	}
	if yyb2284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2284++
		if yyhl2284 {
			yyb2284 = yyj2284 > l
		} else {
			yyb2284 = r.CheckBreak()
		}
		if yyb2284 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2284-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2287 := z.EncBinary()
		_ = yym2287
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2288 := !z.EncBinary()
			yy2arr2288 := z.EncBasicHandle().StructToArray
			var yyq2288 [3]bool
			_, _, _ = yysep2288, yyq2288, yy2arr2288
			const yyr2288 bool = false
			var yynn2288 int
			if yyr2288 || yy2arr2288 {
				r.EncodeArrayStart(3)
			} else {
				yynn2288 = 3
				for _, b := range yyq2288 {
					if b {
						yynn2288++
					}
				}
				r.EncodeMapStart(yynn2288)
				yynn2288 = 0
			}
			if yyr2288 || yy2arr2288 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2290 := z.EncBinary()
				_ = yym2290
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2291 := z.EncBinary()
				_ = yym2291
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2288 || yy2arr2288 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2293 := z.EncBinary()
				_ = yym2293
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2294 := z.EncBinary()
				_ = yym2294
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2288 || yy2arr2288 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2288 || yy2arr2288 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2296 := z.DecBinary()
	_ = yym2296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2297 := r.ContainerType()
		if yyct2297 == codecSelferValueTypeMap1234 {
			yyl2297 := r.ReadMapStart()
			if yyl2297 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2297, d)
			}
		} else if yyct2297 == codecSelferValueTypeArray1234 {
			yyl2297 := r.ReadArrayStart()
			if yyl2297 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2298Slc
	var yyhl2298 bool = l >= 0
	for yyj2298 := 0; ; yyj2298++ {
		if yyhl2298 {
			if yyj2298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2298Slc = r.DecodeBytes(yys2298Slc, true, true)
		yys2298 := string(yys2298Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2298 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2298)
		} // end switch yys2298
	} // end for yyj2298
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2302 int
	var yyb2302 bool
	var yyhl2302 bool = l >= 0
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2302++
		if yyhl2302 {
			yyb2302 = yyj2302 > l
		} else {
			yyb2302 = r.CheckBreak()
		}
		if yyb2302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2306 := z.EncBinary()
		_ = yym2306
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2307 := !z.EncBinary()
			yy2arr2307 := z.EncBasicHandle().StructToArray
			var yyq2307 [4]bool
			_, _, _ = yysep2307, yyq2307, yy2arr2307
			const yyr2307 bool = false
			yyq2307[0] = x.Kind != ""
			yyq2307[1] = x.APIVersion != ""
			yyq2307[2] = true
			var yynn2307 int
			if yyr2307 || yy2arr2307 {
				r.EncodeArrayStart(4)
			} else {
				yynn2307 = 1
				for _, b := range yyq2307 {
					if b {
						yynn2307++
					}
				}
				r.EncodeMapStart(yynn2307)
				yynn2307 = 0
			}
			if yyr2307 || yy2arr2307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2307[0] {
					yym2309 := z.EncBinary()
					_ = yym2309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2307[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2310 := z.EncBinary()
					_ = yym2310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2307 || yy2arr2307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2307[1] {
					yym2312 := z.EncBinary()
					_ = yym2312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2307[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2313 := z.EncBinary()
					_ = yym2313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2307 || yy2arr2307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2307[2] {
					yy2315 := &x.ListMeta
					yym2316 := z.EncBinary()
					_ = yym2316
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2315) {
					} else {
						z.EncFallback(yy2315)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2307[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2317 := &x.ListMeta
					yym2318 := z.EncBinary()
					_ = yym2318
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2317) {
					} else {
						z.EncFallback(yy2317)
					}
				}
			}
			if yyr2307 || yy2arr2307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2320 := z.EncBinary()
					_ = yym2320
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2321 := z.EncBinary()
					_ = yym2321
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2307 || yy2arr2307 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2322 := z.DecBinary()
	_ = yym2322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2323 := r.ContainerType()
		if yyct2323 == codecSelferValueTypeMap1234 {
			yyl2323 := r.ReadMapStart()
			if yyl2323 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2323, d)
			}
		} else if yyct2323 == codecSelferValueTypeArray1234 {
			yyl2323 := r.ReadArrayStart()
			if yyl2323 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2323, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2324Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2324Slc
	var yyhl2324 bool = l >= 0
	for yyj2324 := 0; ; yyj2324++ {
		if yyhl2324 {
			if yyj2324 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2324Slc = r.DecodeBytes(yys2324Slc, true, true)
		yys2324 := string(yys2324Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2324 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2327 := &x.ListMeta
				yym2328 := z.DecBinary()
				_ = yym2328
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2327) {
				} else {
					z.DecFallback(yyv2327, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2329 := &x.Items
				yym2330 := z.DecBinary()
				_ = yym2330
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2329), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2324)
		} // end switch yys2324
	} // end for yyj2324
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2331 int
	var yyb2331 bool
	var yyhl2331 bool = l >= 0
	yyj2331++
	if yyhl2331 {
		yyb2331 = yyj2331 > l
	} else {
		yyb2331 = r.CheckBreak()
	}
	if yyb2331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2331++
	if yyhl2331 {
		yyb2331 = yyj2331 > l
	} else {
		yyb2331 = r.CheckBreak()
	}
	if yyb2331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2331++
	if yyhl2331 {
		yyb2331 = yyj2331 > l
	} else {
		yyb2331 = r.CheckBreak()
	}
	if yyb2331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2334 := &x.ListMeta
		yym2335 := z.DecBinary()
		_ = yym2335
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2334) {
		} else {
			z.DecFallback(yyv2334, false)
		}
	}
	yyj2331++
	if yyhl2331 {
		yyb2331 = yyj2331 > l
	} else {
		yyb2331 = r.CheckBreak()
	}
	if yyb2331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2336 := &x.Items
		yym2337 := z.DecBinary()
		_ = yym2337
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2336), d)
		}
	}
	for {
		yyj2331++
		if yyhl2331 {
			yyb2331 = yyj2331 > l
		} else {
			yyb2331 = r.CheckBreak()
		}
		if yyb2331 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2331-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2338 := z.EncBinary()
		_ = yym2338
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2339 := !z.EncBinary()
			yy2arr2339 := z.EncBasicHandle().StructToArray
			var yyq2339 [4]bool
			_, _, _ = yysep2339, yyq2339, yy2arr2339
			const yyr2339 bool = false
			yyq2339[0] = x.PodCIDR != ""
			yyq2339[1] = x.ExternalID != ""
			yyq2339[2] = x.ProviderID != ""
			yyq2339[3] = x.Unschedulable != false
			var yynn2339 int
			if yyr2339 || yy2arr2339 {
				r.EncodeArrayStart(4)
			} else {
				yynn2339 = 0
				for _, b := range yyq2339 {
					if b {
						yynn2339++
					}
				}
				r.EncodeMapStart(yynn2339)
				yynn2339 = 0
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[0] {
					yym2341 := z.EncBinary()
					_ = yym2341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2339[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2342 := z.EncBinary()
					_ = yym2342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[1] {
					yym2344 := z.EncBinary()
					_ = yym2344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2339[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2345 := z.EncBinary()
					_ = yym2345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[2] {
					yym2347 := z.EncBinary()
					_ = yym2347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2339[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2348 := z.EncBinary()
					_ = yym2348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[3] {
					yym2350 := z.EncBinary()
					_ = yym2350
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2339[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2351 := z.EncBinary()
					_ = yym2351
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2352 := z.DecBinary()
	_ = yym2352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2353 := r.ContainerType()
		if yyct2353 == codecSelferValueTypeMap1234 {
			yyl2353 := r.ReadMapStart()
			if yyl2353 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2353, d)
			}
		} else if yyct2353 == codecSelferValueTypeArray1234 {
			yyl2353 := r.ReadArrayStart()
			if yyl2353 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2353, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2354Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2354Slc
	var yyhl2354 bool = l >= 0
	for yyj2354 := 0; ; yyj2354++ {
		if yyhl2354 {
			if yyj2354 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2354Slc = r.DecodeBytes(yys2354Slc, true, true)
		yys2354 := string(yys2354Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2354 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2354)
		} // end switch yys2354
	} // end for yyj2354
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2359 int
	var yyb2359 bool
	var yyhl2359 bool = l >= 0
	yyj2359++
	if yyhl2359 {
		yyb2359 = yyj2359 > l
	} else {
		yyb2359 = r.CheckBreak()
	}
	if yyb2359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2359++
	if yyhl2359 {
		yyb2359 = yyj2359 > l
	} else {
		yyb2359 = r.CheckBreak()
	}
	if yyb2359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2359++
	if yyhl2359 {
		yyb2359 = yyj2359 > l
	} else {
		yyb2359 = r.CheckBreak()
	}
	if yyb2359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2359++
	if yyhl2359 {
		yyb2359 = yyj2359 > l
	} else {
		yyb2359 = r.CheckBreak()
	}
	if yyb2359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2359++
		if yyhl2359 {
			yyb2359 = yyj2359 > l
		} else {
			yyb2359 = r.CheckBreak()
		}
		if yyb2359 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2359-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2364 := z.EncBinary()
		_ = yym2364
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2365 := !z.EncBinary()
			yy2arr2365 := z.EncBasicHandle().StructToArray
			var yyq2365 [1]bool
			_, _, _ = yysep2365, yyq2365, yy2arr2365
			const yyr2365 bool = false
			var yynn2365 int
			if yyr2365 || yy2arr2365 {
				r.EncodeArrayStart(1)
			} else {
				yynn2365 = 1
				for _, b := range yyq2365 {
					if b {
						yynn2365++
					}
				}
				r.EncodeMapStart(yynn2365)
				yynn2365 = 0
			}
			if yyr2365 || yy2arr2365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2367 := z.EncBinary()
				_ = yym2367
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2368 := z.EncBinary()
				_ = yym2368
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2365 || yy2arr2365 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2369 := z.DecBinary()
	_ = yym2369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2370 := r.ContainerType()
		if yyct2370 == codecSelferValueTypeMap1234 {
			yyl2370 := r.ReadMapStart()
			if yyl2370 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2370, d)
			}
		} else if yyct2370 == codecSelferValueTypeArray1234 {
			yyl2370 := r.ReadArrayStart()
			if yyl2370 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2370, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2371Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2371Slc
	var yyhl2371 bool = l >= 0
	for yyj2371 := 0; ; yyj2371++ {
		if yyhl2371 {
			if yyj2371 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2371Slc = r.DecodeBytes(yys2371Slc, true, true)
		yys2371 := string(yys2371Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2371 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2371)
		} // end switch yys2371
	} // end for yyj2371
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2373 int
	var yyb2373 bool
	var yyhl2373 bool = l >= 0
	yyj2373++
	if yyhl2373 {
		yyb2373 = yyj2373 > l
	} else {
		yyb2373 = r.CheckBreak()
	}
	if yyb2373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2373++
		if yyhl2373 {
			yyb2373 = yyj2373 > l
		} else {
			yyb2373 = r.CheckBreak()
		}
		if yyb2373 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2373-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2375 := z.EncBinary()
		_ = yym2375
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2376 := !z.EncBinary()
			yy2arr2376 := z.EncBasicHandle().StructToArray
			var yyq2376 [1]bool
			_, _, _ = yysep2376, yyq2376, yy2arr2376
			const yyr2376 bool = false
			yyq2376[0] = true
			var yynn2376 int
			if yyr2376 || yy2arr2376 {
				r.EncodeArrayStart(1)
			} else {
				yynn2376 = 0
				for _, b := range yyq2376 {
					if b {
						yynn2376++
					}
				}
				r.EncodeMapStart(yynn2376)
				yynn2376 = 0
			}
			if yyr2376 || yy2arr2376 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2376[0] {
					yy2378 := &x.KubeletEndpoint
					yy2378.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2376[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2379 := &x.KubeletEndpoint
					yy2379.CodecEncodeSelf(e)
				}
			}
			if yyr2376 || yy2arr2376 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2380 := z.DecBinary()
	_ = yym2380
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2381 := r.ContainerType()
		if yyct2381 == codecSelferValueTypeMap1234 {
			yyl2381 := r.ReadMapStart()
			if yyl2381 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2381, d)
			}
		} else if yyct2381 == codecSelferValueTypeArray1234 {
			yyl2381 := r.ReadArrayStart()
			if yyl2381 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2381, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2382Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2382Slc
	var yyhl2382 bool = l >= 0
	for yyj2382 := 0; ; yyj2382++ {
		if yyhl2382 {
			if yyj2382 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2382Slc = r.DecodeBytes(yys2382Slc, true, true)
		yys2382 := string(yys2382Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2382 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2383 := &x.KubeletEndpoint
				yyv2383.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2382)
		} // end switch yys2382
	} // end for yyj2382
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2384 int
	var yyb2384 bool
	var yyhl2384 bool = l >= 0
	yyj2384++
	if yyhl2384 {
		yyb2384 = yyj2384 > l
	} else {
		yyb2384 = r.CheckBreak()
	}
	if yyb2384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2385 := &x.KubeletEndpoint
		yyv2385.CodecDecodeSelf(d)
	}
	for {
		yyj2384++
		if yyhl2384 {
			yyb2384 = yyj2384 > l
		} else {
			yyb2384 = r.CheckBreak()
		}
		if yyb2384 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2384-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2386 := z.EncBinary()
		_ = yym2386
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2387 := !z.EncBinary()
			yy2arr2387 := z.EncBasicHandle().StructToArray
			var yyq2387 [8]bool
			_, _, _ = yysep2387, yyq2387, yy2arr2387
			const yyr2387 bool = false
			var yynn2387 int
			if yyr2387 || yy2arr2387 {
				r.EncodeArrayStart(8)
			} else {
				yynn2387 = 8
				for _, b := range yyq2387 {
					if b {
						yynn2387++
					}
				}
				r.EncodeMapStart(yynn2387)
				yynn2387 = 0
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2389 := z.EncBinary()
				_ = yym2389
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2390 := z.EncBinary()
				_ = yym2390
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2392 := z.EncBinary()
				_ = yym2392
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2393 := z.EncBinary()
				_ = yym2393
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2395 := z.EncBinary()
				_ = yym2395
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2396 := z.EncBinary()
				_ = yym2396
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2398 := z.EncBinary()
				_ = yym2398
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2399 := z.EncBinary()
				_ = yym2399
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2401 := z.EncBinary()
				_ = yym2401
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2402 := z.EncBinary()
				_ = yym2402
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2404 := z.EncBinary()
				_ = yym2404
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2405 := z.EncBinary()
				_ = yym2405
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2407 := z.EncBinary()
				_ = yym2407
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2408 := z.EncBinary()
				_ = yym2408
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2410 := z.EncBinary()
				_ = yym2410
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2411 := z.EncBinary()
				_ = yym2411
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2387 || yy2arr2387 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2412 := z.DecBinary()
	_ = yym2412
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2413 := r.ContainerType()
		if yyct2413 == codecSelferValueTypeMap1234 {
			yyl2413 := r.ReadMapStart()
			if yyl2413 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2413, d)
			}
		} else if yyct2413 == codecSelferValueTypeArray1234 {
			yyl2413 := r.ReadArrayStart()
			if yyl2413 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2413, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2414Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2414Slc
	var yyhl2414 bool = l >= 0
	for yyj2414 := 0; ; yyj2414++ {
		if yyhl2414 {
			if yyj2414 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2414Slc = r.DecodeBytes(yys2414Slc, true, true)
		yys2414 := string(yys2414Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2414 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2414)
		} // end switch yys2414
	} // end for yyj2414
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2423 int
	var yyb2423 bool
	var yyhl2423 bool = l >= 0
	yyj2423++
	if yyhl2423 {
		yyb2423 = yyj2423 > l
	} else {
		yyb2423 = r.CheckBreak()
	}
	if yyb2423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2423++
	if yyhl2423 {
		yyb2423 = yyj2423 > l
	} else {
		yyb2423 = r.CheckBreak()
	}
	if yyb2423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2423++
	if yyhl2423 {
		yyb2423 = yyj2423 > l
	} else {
		yyb2423 = r.CheckBreak()
	}
	if yyb2423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2423++
	if yyhl2423 {
		yyb2423 = yyj2423 > l
	} else {
		yyb2423 = r.CheckBreak()
	}
	if yyb2423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2423++
	if yyhl2423 {
		yyb2423 = yyj2423 > l
	} else {
		yyb2423 = r.CheckBreak()
	}
	if yyb2423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2423++
	if yyhl2423 {
		yyb2423 = yyj2423 > l
	} else {
		yyb2423 = r.CheckBreak()
	}
	if yyb2423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2423++
	if yyhl2423 {
		yyb2423 = yyj2423 > l
	} else {
		yyb2423 = r.CheckBreak()
	}
	if yyb2423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2423++
	if yyhl2423 {
		yyb2423 = yyj2423 > l
	} else {
		yyb2423 = r.CheckBreak()
	}
	if yyb2423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2423++
		if yyhl2423 {
			yyb2423 = yyj2423 > l
		} else {
			yyb2423 = r.CheckBreak()
		}
		if yyb2423 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2423-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2432 := z.EncBinary()
		_ = yym2432
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2433 := !z.EncBinary()
			yy2arr2433 := z.EncBasicHandle().StructToArray
			var yyq2433 [7]bool
			_, _, _ = yysep2433, yyq2433, yy2arr2433
			const yyr2433 bool = false
			yyq2433[0] = len(x.Capacity) != 0
			yyq2433[1] = len(x.Allocatable) != 0
			yyq2433[2] = x.Phase != ""
			yyq2433[3] = len(x.Conditions) != 0
			yyq2433[4] = len(x.Addresses) != 0
			yyq2433[5] = true
			yyq2433[6] = true
			var yynn2433 int
			if yyr2433 || yy2arr2433 {
				r.EncodeArrayStart(7)
			} else {
				yynn2433 = 0
				for _, b := range yyq2433 {
					if b {
						yynn2433++
					}
				}
				r.EncodeMapStart(yynn2433)
				yynn2433 = 0
			}
			if yyr2433 || yy2arr2433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2433[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2433[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2433 || yy2arr2433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2433[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2433[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2433 || yy2arr2433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2433[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2433[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2433 || yy2arr2433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2433[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2438 := z.EncBinary()
						_ = yym2438
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2433[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2439 := z.EncBinary()
						_ = yym2439
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2433 || yy2arr2433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2433[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2441 := z.EncBinary()
						_ = yym2441
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2433[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2442 := z.EncBinary()
						_ = yym2442
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2433 || yy2arr2433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2433[5] {
					yy2444 := &x.DaemonEndpoints
					yy2444.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2433[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2445 := &x.DaemonEndpoints
					yy2445.CodecEncodeSelf(e)
				}
			}
			if yyr2433 || yy2arr2433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2433[6] {
					yy2447 := &x.NodeInfo
					yy2447.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2433[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2448 := &x.NodeInfo
					yy2448.CodecEncodeSelf(e)
				}
			}
			if yyr2433 || yy2arr2433 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2449 := z.DecBinary()
	_ = yym2449
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2450 := r.ContainerType()
		if yyct2450 == codecSelferValueTypeMap1234 {
			yyl2450 := r.ReadMapStart()
			if yyl2450 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2450, d)
			}
		} else if yyct2450 == codecSelferValueTypeArray1234 {
			yyl2450 := r.ReadArrayStart()
			if yyl2450 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2450, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2451Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2451Slc
	var yyhl2451 bool = l >= 0
	for yyj2451 := 0; ; yyj2451++ {
		if yyhl2451 {
			if yyj2451 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2451Slc = r.DecodeBytes(yys2451Slc, true, true)
		yys2451 := string(yys2451Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2451 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2452 := &x.Capacity
				yyv2452.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2453 := &x.Allocatable
				yyv2453.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2455 := &x.Conditions
				yym2456 := z.DecBinary()
				_ = yym2456
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2455), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2457 := &x.Addresses
				yym2458 := z.DecBinary()
				_ = yym2458
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2457), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2459 := &x.DaemonEndpoints
				yyv2459.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2460 := &x.NodeInfo
				yyv2460.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2451)
		} // end switch yys2451
	} // end for yyj2451
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2461 int
	var yyb2461 bool
	var yyhl2461 bool = l >= 0
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2462 := &x.Capacity
		yyv2462.CodecDecodeSelf(d)
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2463 := &x.Allocatable
		yyv2463.CodecDecodeSelf(d)
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2465 := &x.Conditions
		yym2466 := z.DecBinary()
		_ = yym2466
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2465), d)
		}
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2467 := &x.Addresses
		yym2468 := z.DecBinary()
		_ = yym2468
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2467), d)
		}
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2469 := &x.DaemonEndpoints
		yyv2469.CodecDecodeSelf(d)
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2470 := &x.NodeInfo
		yyv2470.CodecDecodeSelf(d)
	}
	for {
		yyj2461++
		if yyhl2461 {
			yyb2461 = yyj2461 > l
		} else {
			yyb2461 = r.CheckBreak()
		}
		if yyb2461 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2461-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2471 := z.EncBinary()
	_ = yym2471
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2472 := z.DecBinary()
	_ = yym2472
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2473 := z.EncBinary()
	_ = yym2473
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2474 := z.DecBinary()
	_ = yym2474
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2475 := z.EncBinary()
		_ = yym2475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2476 := !z.EncBinary()
			yy2arr2476 := z.EncBasicHandle().StructToArray
			var yyq2476 [6]bool
			_, _, _ = yysep2476, yyq2476, yy2arr2476
			const yyr2476 bool = false
			yyq2476[2] = true
			yyq2476[3] = true
			yyq2476[4] = x.Reason != ""
			yyq2476[5] = x.Message != ""
			var yynn2476 int
			if yyr2476 || yy2arr2476 {
				r.EncodeArrayStart(6)
			} else {
				yynn2476 = 2
				for _, b := range yyq2476 {
					if b {
						yynn2476++
					}
				}
				r.EncodeMapStart(yynn2476)
				yynn2476 = 0
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2476[2] {
					yy2480 := &x.LastHeartbeatTime
					yym2481 := z.EncBinary()
					_ = yym2481
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2480) {
					} else if yym2481 {
						z.EncBinaryMarshal(yy2480)
					} else if !yym2481 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2480)
					} else {
						z.EncFallback(yy2480)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2482 := &x.LastHeartbeatTime
					yym2483 := z.EncBinary()
					_ = yym2483
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2482) {
					} else if yym2483 {
						z.EncBinaryMarshal(yy2482)
					} else if !yym2483 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2482)
					} else {
						z.EncFallback(yy2482)
					}
				}
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2476[3] {
					yy2485 := &x.LastTransitionTime
					yym2486 := z.EncBinary()
					_ = yym2486
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2485) {
					} else if yym2486 {
						z.EncBinaryMarshal(yy2485)
					} else if !yym2486 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2485)
					} else {
						z.EncFallback(yy2485)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2476[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2487 := &x.LastTransitionTime
					yym2488 := z.EncBinary()
					_ = yym2488
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2487) {
					} else if yym2488 {
						z.EncBinaryMarshal(yy2487)
					} else if !yym2488 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2487)
					} else {
						z.EncFallback(yy2487)
					}
				}
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2476[4] {
					yym2490 := z.EncBinary()
					_ = yym2490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2476[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2491 := z.EncBinary()
					_ = yym2491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2476[5] {
					yym2493 := z.EncBinary()
					_ = yym2493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2476[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2494 := z.EncBinary()
					_ = yym2494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2495 := z.DecBinary()
	_ = yym2495
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2496 := r.ContainerType()
		if yyct2496 == codecSelferValueTypeMap1234 {
			yyl2496 := r.ReadMapStart()
			if yyl2496 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2496, d)
			}
		} else if yyct2496 == codecSelferValueTypeArray1234 {
			yyl2496 := r.ReadArrayStart()
			if yyl2496 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2496, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2497Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2497Slc
	var yyhl2497 bool = l >= 0
	for yyj2497 := 0; ; yyj2497++ {
		if yyhl2497 {
			if yyj2497 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2497Slc = r.DecodeBytes(yys2497Slc, true, true)
		yys2497 := string(yys2497Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2497 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2500 := &x.LastHeartbeatTime
				yym2501 := z.DecBinary()
				_ = yym2501
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2500) {
				} else if yym2501 {
					z.DecBinaryUnmarshal(yyv2500)
				} else if !yym2501 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2500)
				} else {
					z.DecFallback(yyv2500, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2502 := &x.LastTransitionTime
				yym2503 := z.DecBinary()
				_ = yym2503
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2502) {
				} else if yym2503 {
					z.DecBinaryUnmarshal(yyv2502)
				} else if !yym2503 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2502)
				} else {
					z.DecFallback(yyv2502, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2497)
		} // end switch yys2497
	} // end for yyj2497
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2506 int
	var yyb2506 bool
	var yyhl2506 bool = l >= 0
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2509 := &x.LastHeartbeatTime
		yym2510 := z.DecBinary()
		_ = yym2510
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2509) {
		} else if yym2510 {
			z.DecBinaryUnmarshal(yyv2509)
		} else if !yym2510 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2509)
		} else {
			z.DecFallback(yyv2509, false)
		}
	}
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2511 := &x.LastTransitionTime
		yym2512 := z.DecBinary()
		_ = yym2512
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2511) {
		} else if yym2512 {
			z.DecBinaryUnmarshal(yyv2511)
		} else if !yym2512 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2511)
		} else {
			z.DecFallback(yyv2511, false)
		}
	}
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2506++
		if yyhl2506 {
			yyb2506 = yyj2506 > l
		} else {
			yyb2506 = r.CheckBreak()
		}
		if yyb2506 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2506-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2515 := z.EncBinary()
	_ = yym2515
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2516 := z.DecBinary()
	_ = yym2516
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2517 := z.EncBinary()
		_ = yym2517
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2518 := !z.EncBinary()
			yy2arr2518 := z.EncBasicHandle().StructToArray
			var yyq2518 [2]bool
			_, _, _ = yysep2518, yyq2518, yy2arr2518
			const yyr2518 bool = false
			var yynn2518 int
			if yyr2518 || yy2arr2518 {
				r.EncodeArrayStart(2)
			} else {
				yynn2518 = 2
				for _, b := range yyq2518 {
					if b {
						yynn2518++
					}
				}
				r.EncodeMapStart(yynn2518)
				yynn2518 = 0
			}
			if yyr2518 || yy2arr2518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2518 || yy2arr2518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2521 := z.EncBinary()
				_ = yym2521
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2522 := z.EncBinary()
				_ = yym2522
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2518 || yy2arr2518 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2523 := z.DecBinary()
	_ = yym2523
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2524 := r.ContainerType()
		if yyct2524 == codecSelferValueTypeMap1234 {
			yyl2524 := r.ReadMapStart()
			if yyl2524 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2524, d)
			}
		} else if yyct2524 == codecSelferValueTypeArray1234 {
			yyl2524 := r.ReadArrayStart()
			if yyl2524 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2524, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2525Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2525Slc
	var yyhl2525 bool = l >= 0
	for yyj2525 := 0; ; yyj2525++ {
		if yyhl2525 {
			if yyj2525 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2525Slc = r.DecodeBytes(yys2525Slc, true, true)
		yys2525 := string(yys2525Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2525 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2525)
		} // end switch yys2525
	} // end for yyj2525
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2528 int
	var yyb2528 bool
	var yyhl2528 bool = l >= 0
	yyj2528++
	if yyhl2528 {
		yyb2528 = yyj2528 > l
	} else {
		yyb2528 = r.CheckBreak()
	}
	if yyb2528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2528++
	if yyhl2528 {
		yyb2528 = yyj2528 > l
	} else {
		yyb2528 = r.CheckBreak()
	}
	if yyb2528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2528++
		if yyhl2528 {
			yyb2528 = yyj2528 > l
		} else {
			yyb2528 = r.CheckBreak()
		}
		if yyb2528 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2528-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2531 := z.EncBinary()
		_ = yym2531
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2532 := !z.EncBinary()
			yy2arr2532 := z.EncBasicHandle().StructToArray
			var yyq2532 [1]bool
			_, _, _ = yysep2532, yyq2532, yy2arr2532
			const yyr2532 bool = false
			yyq2532[0] = len(x.Capacity) != 0
			var yynn2532 int
			if yyr2532 || yy2arr2532 {
				r.EncodeArrayStart(1)
			} else {
				yynn2532 = 0
				for _, b := range yyq2532 {
					if b {
						yynn2532++
					}
				}
				r.EncodeMapStart(yynn2532)
				yynn2532 = 0
			}
			if yyr2532 || yy2arr2532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2532[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2532[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2532 || yy2arr2532 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2534 := z.DecBinary()
	_ = yym2534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2535 := r.ContainerType()
		if yyct2535 == codecSelferValueTypeMap1234 {
			yyl2535 := r.ReadMapStart()
			if yyl2535 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2535, d)
			}
		} else if yyct2535 == codecSelferValueTypeArray1234 {
			yyl2535 := r.ReadArrayStart()
			if yyl2535 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2535, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2536Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2536Slc
	var yyhl2536 bool = l >= 0
	for yyj2536 := 0; ; yyj2536++ {
		if yyhl2536 {
			if yyj2536 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2536Slc = r.DecodeBytes(yys2536Slc, true, true)
		yys2536 := string(yys2536Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2536 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2537 := &x.Capacity
				yyv2537.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2536)
		} // end switch yys2536
	} // end for yyj2536
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2538 int
	var yyb2538 bool
	var yyhl2538 bool = l >= 0
	yyj2538++
	if yyhl2538 {
		yyb2538 = yyj2538 > l
	} else {
		yyb2538 = r.CheckBreak()
	}
	if yyb2538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2539 := &x.Capacity
		yyv2539.CodecDecodeSelf(d)
	}
	for {
		yyj2538++
		if yyhl2538 {
			yyb2538 = yyj2538 > l
		} else {
			yyb2538 = r.CheckBreak()
		}
		if yyb2538 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2538-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2540 := z.EncBinary()
	_ = yym2540
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2541 := z.DecBinary()
	_ = yym2541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2542 := z.EncBinary()
		_ = yym2542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2543 := z.DecBinary()
	_ = yym2543
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2544 := z.EncBinary()
		_ = yym2544
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2545 := !z.EncBinary()
			yy2arr2545 := z.EncBasicHandle().StructToArray
			var yyq2545 [5]bool
			_, _, _ = yysep2545, yyq2545, yy2arr2545
			const yyr2545 bool = false
			yyq2545[0] = x.Kind != ""
			yyq2545[1] = x.APIVersion != ""
			yyq2545[2] = true
			yyq2545[3] = true
			yyq2545[4] = true
			var yynn2545 int
			if yyr2545 || yy2arr2545 {
				r.EncodeArrayStart(5)
			} else {
				yynn2545 = 0
				for _, b := range yyq2545 {
					if b {
						yynn2545++
					}
				}
				r.EncodeMapStart(yynn2545)
				yynn2545 = 0
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2545[0] {
					yym2547 := z.EncBinary()
					_ = yym2547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2545[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2548 := z.EncBinary()
					_ = yym2548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2545[1] {
					yym2550 := z.EncBinary()
					_ = yym2550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2545[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2545[2] {
					yy2553 := &x.ObjectMeta
					yy2553.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2545[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2554 := &x.ObjectMeta
					yy2554.CodecEncodeSelf(e)
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2545[3] {
					yy2556 := &x.Spec
					yy2556.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2545[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2557 := &x.Spec
					yy2557.CodecEncodeSelf(e)
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2545[4] {
					yy2559 := &x.Status
					yy2559.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2545[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2560 := &x.Status
					yy2560.CodecEncodeSelf(e)
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2561 := z.DecBinary()
	_ = yym2561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2562 := r.ContainerType()
		if yyct2562 == codecSelferValueTypeMap1234 {
			yyl2562 := r.ReadMapStart()
			if yyl2562 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2562, d)
			}
		} else if yyct2562 == codecSelferValueTypeArray1234 {
			yyl2562 := r.ReadArrayStart()
			if yyl2562 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2563Slc
	var yyhl2563 bool = l >= 0
	for yyj2563 := 0; ; yyj2563++ {
		if yyhl2563 {
			if yyj2563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2563Slc = r.DecodeBytes(yys2563Slc, true, true)
		yys2563 := string(yys2563Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2563 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2566 := &x.ObjectMeta
				yyv2566.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2567 := &x.Spec
				yyv2567.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2568 := &x.Status
				yyv2568.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2563)
		} // end switch yys2563
	} // end for yyj2563
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2569 int
	var yyb2569 bool
	var yyhl2569 bool = l >= 0
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2572 := &x.ObjectMeta
		yyv2572.CodecDecodeSelf(d)
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2573 := &x.Spec
		yyv2573.CodecDecodeSelf(d)
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2574 := &x.Status
		yyv2574.CodecDecodeSelf(d)
	}
	for {
		yyj2569++
		if yyhl2569 {
			yyb2569 = yyj2569 > l
		} else {
			yyb2569 = r.CheckBreak()
		}
		if yyb2569 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2569-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2575 := z.EncBinary()
		_ = yym2575
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2576 := !z.EncBinary()
			yy2arr2576 := z.EncBasicHandle().StructToArray
			var yyq2576 [4]bool
			_, _, _ = yysep2576, yyq2576, yy2arr2576
			const yyr2576 bool = false
			yyq2576[0] = x.Kind != ""
			yyq2576[1] = x.APIVersion != ""
			yyq2576[2] = true
			var yynn2576 int
			if yyr2576 || yy2arr2576 {
				r.EncodeArrayStart(4)
			} else {
				yynn2576 = 1
				for _, b := range yyq2576 {
					if b {
						yynn2576++
					}
				}
				r.EncodeMapStart(yynn2576)
				yynn2576 = 0
			}
			if yyr2576 || yy2arr2576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2576[0] {
					yym2578 := z.EncBinary()
					_ = yym2578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2576[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2579 := z.EncBinary()
					_ = yym2579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2576 || yy2arr2576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2576[1] {
					yym2581 := z.EncBinary()
					_ = yym2581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2576[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2582 := z.EncBinary()
					_ = yym2582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2576 || yy2arr2576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2576[2] {
					yy2584 := &x.ListMeta
					yym2585 := z.EncBinary()
					_ = yym2585
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2584) {
					} else {
						z.EncFallback(yy2584)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2576[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2586 := &x.ListMeta
					yym2587 := z.EncBinary()
					_ = yym2587
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2586) {
					} else {
						z.EncFallback(yy2586)
					}
				}
			}
			if yyr2576 || yy2arr2576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2576 || yy2arr2576 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2591 := z.DecBinary()
	_ = yym2591
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2592 := r.ContainerType()
		if yyct2592 == codecSelferValueTypeMap1234 {
			yyl2592 := r.ReadMapStart()
			if yyl2592 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2592, d)
			}
		} else if yyct2592 == codecSelferValueTypeArray1234 {
			yyl2592 := r.ReadArrayStart()
			if yyl2592 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2592, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2593Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2593Slc
	var yyhl2593 bool = l >= 0
	for yyj2593 := 0; ; yyj2593++ {
		if yyhl2593 {
			if yyj2593 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2593Slc = r.DecodeBytes(yys2593Slc, true, true)
		yys2593 := string(yys2593Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2593 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2596 := &x.ListMeta
				yym2597 := z.DecBinary()
				_ = yym2597
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2596) {
				} else {
					z.DecFallback(yyv2596, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2598 := &x.Items
				yym2599 := z.DecBinary()
				_ = yym2599
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2598), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2593)
		} // end switch yys2593
	} // end for yyj2593
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2600 int
	var yyb2600 bool
	var yyhl2600 bool = l >= 0
	yyj2600++
	if yyhl2600 {
		yyb2600 = yyj2600 > l
	} else {
		yyb2600 = r.CheckBreak()
	}
	if yyb2600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2600++
	if yyhl2600 {
		yyb2600 = yyj2600 > l
	} else {
		yyb2600 = r.CheckBreak()
	}
	if yyb2600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2600++
	if yyhl2600 {
		yyb2600 = yyj2600 > l
	} else {
		yyb2600 = r.CheckBreak()
	}
	if yyb2600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2603 := &x.ListMeta
		yym2604 := z.DecBinary()
		_ = yym2604
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2603) {
		} else {
			z.DecFallback(yyv2603, false)
		}
	}
	yyj2600++
	if yyhl2600 {
		yyb2600 = yyj2600 > l
	} else {
		yyb2600 = r.CheckBreak()
	}
	if yyb2600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2605 := &x.Items
		yym2606 := z.DecBinary()
		_ = yym2606
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2605), d)
		}
	}
	for {
		yyj2600++
		if yyhl2600 {
			yyb2600 = yyj2600 > l
		} else {
			yyb2600 = r.CheckBreak()
		}
		if yyb2600 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2600-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2607 := z.EncBinary()
		_ = yym2607
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2608 := !z.EncBinary()
			yy2arr2608 := z.EncBasicHandle().StructToArray
			var yyq2608 [1]bool
			_, _, _ = yysep2608, yyq2608, yy2arr2608
			const yyr2608 bool = false
			var yynn2608 int
			if yyr2608 || yy2arr2608 {
				r.EncodeArrayStart(1)
			} else {
				yynn2608 = 1
				for _, b := range yyq2608 {
					if b {
						yynn2608++
					}
				}
				r.EncodeMapStart(yynn2608)
				yynn2608 = 0
			}
			if yyr2608 || yy2arr2608 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2610 := z.EncBinary()
					_ = yym2610
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2611 := z.EncBinary()
					_ = yym2611
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr2608 || yy2arr2608 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2612 := z.DecBinary()
	_ = yym2612
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2613 := r.ContainerType()
		if yyct2613 == codecSelferValueTypeMap1234 {
			yyl2613 := r.ReadMapStart()
			if yyl2613 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2613, d)
			}
		} else if yyct2613 == codecSelferValueTypeArray1234 {
			yyl2613 := r.ReadArrayStart()
			if yyl2613 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2613, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2614Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2614Slc
	var yyhl2614 bool = l >= 0
	for yyj2614 := 0; ; yyj2614++ {
		if yyhl2614 {
			if yyj2614 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2614Slc = r.DecodeBytes(yys2614Slc, true, true)
		yys2614 := string(yys2614Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2614 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2615 := &x.Finalizers
				yym2616 := z.DecBinary()
				_ = yym2616
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2615), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2614)
		} // end switch yys2614
	} // end for yyj2614
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2617 int
	var yyb2617 bool
	var yyhl2617 bool = l >= 0
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2618 := &x.Finalizers
		yym2619 := z.DecBinary()
		_ = yym2619
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2618), d)
		}
	}
	for {
		yyj2617++
		if yyhl2617 {
			yyb2617 = yyj2617 > l
		} else {
			yyb2617 = r.CheckBreak()
		}
		if yyb2617 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2617-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2620 := z.EncBinary()
	_ = yym2620
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2621 := z.DecBinary()
	_ = yym2621
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2622 := z.EncBinary()
		_ = yym2622
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2623 := !z.EncBinary()
			yy2arr2623 := z.EncBasicHandle().StructToArray
			var yyq2623 [1]bool
			_, _, _ = yysep2623, yyq2623, yy2arr2623
			const yyr2623 bool = false
			yyq2623[0] = x.Phase != ""
			var yynn2623 int
			if yyr2623 || yy2arr2623 {
				r.EncodeArrayStart(1)
			} else {
				yynn2623 = 0
				for _, b := range yyq2623 {
					if b {
						yynn2623++
					}
				}
				r.EncodeMapStart(yynn2623)
				yynn2623 = 0
			}
			if yyr2623 || yy2arr2623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2623[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2623[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2623 || yy2arr2623 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2625 := z.DecBinary()
	_ = yym2625
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2626 := r.ContainerType()
		if yyct2626 == codecSelferValueTypeMap1234 {
			yyl2626 := r.ReadMapStart()
			if yyl2626 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2626, d)
			}
		} else if yyct2626 == codecSelferValueTypeArray1234 {
			yyl2626 := r.ReadArrayStart()
			if yyl2626 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2626, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2627Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2627Slc
	var yyhl2627 bool = l >= 0
	for yyj2627 := 0; ; yyj2627++ {
		if yyhl2627 {
			if yyj2627 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2627Slc = r.DecodeBytes(yys2627Slc, true, true)
		yys2627 := string(yys2627Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2627 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2627)
		} // end switch yys2627
	} // end for yyj2627
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2629 int
	var yyb2629 bool
	var yyhl2629 bool = l >= 0
	yyj2629++
	if yyhl2629 {
		yyb2629 = yyj2629 > l
	} else {
		yyb2629 = r.CheckBreak()
	}
	if yyb2629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2629++
		if yyhl2629 {
			yyb2629 = yyj2629 > l
		} else {
			yyb2629 = r.CheckBreak()
		}
		if yyb2629 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2629-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2631 := z.EncBinary()
	_ = yym2631
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2632 := z.DecBinary()
	_ = yym2632
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2633 := z.EncBinary()
		_ = yym2633
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2634 := !z.EncBinary()
			yy2arr2634 := z.EncBasicHandle().StructToArray
			var yyq2634 [5]bool
			_, _, _ = yysep2634, yyq2634, yy2arr2634
			const yyr2634 bool = false
			yyq2634[0] = x.Kind != ""
			yyq2634[1] = x.APIVersion != ""
			yyq2634[2] = true
			yyq2634[3] = true
			yyq2634[4] = true
			var yynn2634 int
			if yyr2634 || yy2arr2634 {
				r.EncodeArrayStart(5)
			} else {
				yynn2634 = 0
				for _, b := range yyq2634 {
					if b {
						yynn2634++
					}
				}
				r.EncodeMapStart(yynn2634)
				yynn2634 = 0
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2634[0] {
					yym2636 := z.EncBinary()
					_ = yym2636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2634[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2637 := z.EncBinary()
					_ = yym2637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2634[1] {
					yym2639 := z.EncBinary()
					_ = yym2639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2634[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2634[2] {
					yy2642 := &x.ObjectMeta
					yy2642.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2634[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2643 := &x.ObjectMeta
					yy2643.CodecEncodeSelf(e)
				}
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2634[3] {
					yy2645 := &x.Spec
					yy2645.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2634[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2646 := &x.Spec
					yy2646.CodecEncodeSelf(e)
				}
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2634[4] {
					yy2648 := &x.Status
					yy2648.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2634[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2649 := &x.Status
					yy2649.CodecEncodeSelf(e)
				}
			}
			if yyr2634 || yy2arr2634 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2650 := z.DecBinary()
	_ = yym2650
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2651 := r.ContainerType()
		if yyct2651 == codecSelferValueTypeMap1234 {
			yyl2651 := r.ReadMapStart()
			if yyl2651 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2651, d)
			}
		} else if yyct2651 == codecSelferValueTypeArray1234 {
			yyl2651 := r.ReadArrayStart()
			if yyl2651 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2651, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2652Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2652Slc
	var yyhl2652 bool = l >= 0
	for yyj2652 := 0; ; yyj2652++ {
		if yyhl2652 {
			if yyj2652 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2652Slc = r.DecodeBytes(yys2652Slc, true, true)
		yys2652 := string(yys2652Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2652 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2655 := &x.ObjectMeta
				yyv2655.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2656 := &x.Spec
				yyv2656.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2657 := &x.Status
				yyv2657.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2652)
		} // end switch yys2652
	} // end for yyj2652
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2658 int
	var yyb2658 bool
	var yyhl2658 bool = l >= 0
	yyj2658++
	if yyhl2658 {
		yyb2658 = yyj2658 > l
	} else {
		yyb2658 = r.CheckBreak()
	}
	if yyb2658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2658++
	if yyhl2658 {
		yyb2658 = yyj2658 > l
	} else {
		yyb2658 = r.CheckBreak()
	}
	if yyb2658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2658++
	if yyhl2658 {
		yyb2658 = yyj2658 > l
	} else {
		yyb2658 = r.CheckBreak()
	}
	if yyb2658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2661 := &x.ObjectMeta
		yyv2661.CodecDecodeSelf(d)
	}
	yyj2658++
	if yyhl2658 {
		yyb2658 = yyj2658 > l
	} else {
		yyb2658 = r.CheckBreak()
	}
	if yyb2658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2662 := &x.Spec
		yyv2662.CodecDecodeSelf(d)
	}
	yyj2658++
	if yyhl2658 {
		yyb2658 = yyj2658 > l
	} else {
		yyb2658 = r.CheckBreak()
	}
	if yyb2658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2663 := &x.Status
		yyv2663.CodecDecodeSelf(d)
	}
	for {
		yyj2658++
		if yyhl2658 {
			yyb2658 = yyj2658 > l
		} else {
			yyb2658 = r.CheckBreak()
		}
		if yyb2658 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2658-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2664 := z.EncBinary()
		_ = yym2664
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2665 := !z.EncBinary()
			yy2arr2665 := z.EncBasicHandle().StructToArray
			var yyq2665 [4]bool
			_, _, _ = yysep2665, yyq2665, yy2arr2665
			const yyr2665 bool = false
			yyq2665[0] = x.Kind != ""
			yyq2665[1] = x.APIVersion != ""
			yyq2665[2] = true
			var yynn2665 int
			if yyr2665 || yy2arr2665 {
				r.EncodeArrayStart(4)
			} else {
				yynn2665 = 1
				for _, b := range yyq2665 {
					if b {
						yynn2665++
					}
				}
				r.EncodeMapStart(yynn2665)
				yynn2665 = 0
			}
			if yyr2665 || yy2arr2665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2665[0] {
					yym2667 := z.EncBinary()
					_ = yym2667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2665[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2668 := z.EncBinary()
					_ = yym2668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2665 || yy2arr2665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2665[1] {
					yym2670 := z.EncBinary()
					_ = yym2670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2665[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2671 := z.EncBinary()
					_ = yym2671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2665 || yy2arr2665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2665[2] {
					yy2673 := &x.ListMeta
					yym2674 := z.EncBinary()
					_ = yym2674
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2673) {
					} else {
						z.EncFallback(yy2673)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2665[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2675 := &x.ListMeta
					yym2676 := z.EncBinary()
					_ = yym2676
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2675) {
					} else {
						z.EncFallback(yy2675)
					}
				}
			}
			if yyr2665 || yy2arr2665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2678 := z.EncBinary()
					_ = yym2678
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2679 := z.EncBinary()
					_ = yym2679
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2665 || yy2arr2665 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2680 := z.DecBinary()
	_ = yym2680
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2681 := r.ContainerType()
		if yyct2681 == codecSelferValueTypeMap1234 {
			yyl2681 := r.ReadMapStart()
			if yyl2681 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2681, d)
			}
		} else if yyct2681 == codecSelferValueTypeArray1234 {
			yyl2681 := r.ReadArrayStart()
			if yyl2681 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2681, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2682Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2682Slc
	var yyhl2682 bool = l >= 0
	for yyj2682 := 0; ; yyj2682++ {
		if yyhl2682 {
			if yyj2682 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2682Slc = r.DecodeBytes(yys2682Slc, true, true)
		yys2682 := string(yys2682Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2682 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2685 := &x.ListMeta
				yym2686 := z.DecBinary()
				_ = yym2686
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2685) {
				} else {
					z.DecFallback(yyv2685, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2687 := &x.Items
				yym2688 := z.DecBinary()
				_ = yym2688
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2687), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2682)
		} // end switch yys2682
	} // end for yyj2682
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2689 int
	var yyb2689 bool
	var yyhl2689 bool = l >= 0
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2692 := &x.ListMeta
		yym2693 := z.DecBinary()
		_ = yym2693
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2692) {
		} else {
			z.DecFallback(yyv2692, false)
		}
	}
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2694 := &x.Items
		yym2695 := z.DecBinary()
		_ = yym2695
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2694), d)
		}
	}
	for {
		yyj2689++
		if yyhl2689 {
			yyb2689 = yyj2689 > l
		} else {
			yyb2689 = r.CheckBreak()
		}
		if yyb2689 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2689-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2696 := z.EncBinary()
		_ = yym2696
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2697 := !z.EncBinary()
			yy2arr2697 := z.EncBasicHandle().StructToArray
			var yyq2697 [4]bool
			_, _, _ = yysep2697, yyq2697, yy2arr2697
			const yyr2697 bool = false
			yyq2697[0] = x.Kind != ""
			yyq2697[1] = x.APIVersion != ""
			yyq2697[2] = true
			var yynn2697 int
			if yyr2697 || yy2arr2697 {
				r.EncodeArrayStart(4)
			} else {
				yynn2697 = 1
				for _, b := range yyq2697 {
					if b {
						yynn2697++
					}
				}
				r.EncodeMapStart(yynn2697)
				yynn2697 = 0
			}
			if yyr2697 || yy2arr2697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2697[0] {
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2697[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2700 := z.EncBinary()
					_ = yym2700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2697 || yy2arr2697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2697[1] {
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2697[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2703 := z.EncBinary()
					_ = yym2703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2697 || yy2arr2697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2697[2] {
					yy2705 := &x.ObjectMeta
					yy2705.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2697[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2706 := &x.ObjectMeta
					yy2706.CodecEncodeSelf(e)
				}
			}
			if yyr2697 || yy2arr2697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2708 := &x.Target
				yy2708.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2709 := &x.Target
				yy2709.CodecEncodeSelf(e)
			}
			if yyr2697 || yy2arr2697 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2710 := z.DecBinary()
	_ = yym2710
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2711 := r.ContainerType()
		if yyct2711 == codecSelferValueTypeMap1234 {
			yyl2711 := r.ReadMapStart()
			if yyl2711 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2711, d)
			}
		} else if yyct2711 == codecSelferValueTypeArray1234 {
			yyl2711 := r.ReadArrayStart()
			if yyl2711 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2711, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2712Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2712Slc
	var yyhl2712 bool = l >= 0
	for yyj2712 := 0; ; yyj2712++ {
		if yyhl2712 {
			if yyj2712 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2712Slc = r.DecodeBytes(yys2712Slc, true, true)
		yys2712 := string(yys2712Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2712 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2715 := &x.ObjectMeta
				yyv2715.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2716 := &x.Target
				yyv2716.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2712)
		} // end switch yys2712
	} // end for yyj2712
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2717 int
	var yyb2717 bool
	var yyhl2717 bool = l >= 0
	yyj2717++
	if yyhl2717 {
		yyb2717 = yyj2717 > l
	} else {
		yyb2717 = r.CheckBreak()
	}
	if yyb2717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2717++
	if yyhl2717 {
		yyb2717 = yyj2717 > l
	} else {
		yyb2717 = r.CheckBreak()
	}
	if yyb2717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2717++
	if yyhl2717 {
		yyb2717 = yyj2717 > l
	} else {
		yyb2717 = r.CheckBreak()
	}
	if yyb2717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2720 := &x.ObjectMeta
		yyv2720.CodecDecodeSelf(d)
	}
	yyj2717++
	if yyhl2717 {
		yyb2717 = yyj2717 > l
	} else {
		yyb2717 = r.CheckBreak()
	}
	if yyb2717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2721 := &x.Target
		yyv2721.CodecDecodeSelf(d)
	}
	for {
		yyj2717++
		if yyhl2717 {
			yyb2717 = yyj2717 > l
		} else {
			yyb2717 = r.CheckBreak()
		}
		if yyb2717 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2717-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2722 := z.EncBinary()
		_ = yym2722
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2723 := !z.EncBinary()
			yy2arr2723 := z.EncBasicHandle().StructToArray
			var yyq2723 [3]bool
			_, _, _ = yysep2723, yyq2723, yy2arr2723
			const yyr2723 bool = false
			yyq2723[0] = x.Kind != ""
			yyq2723[1] = x.APIVersion != ""
			var yynn2723 int
			if yyr2723 || yy2arr2723 {
				r.EncodeArrayStart(3)
			} else {
				yynn2723 = 1
				for _, b := range yyq2723 {
					if b {
						yynn2723++
					}
				}
				r.EncodeMapStart(yynn2723)
				yynn2723 = 0
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2723[0] {
					yym2725 := z.EncBinary()
					_ = yym2725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2723[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2726 := z.EncBinary()
					_ = yym2726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2723[1] {
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2723[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2731 := *x.GracePeriodSeconds
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						r.EncodeInt(int64(yy2731))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2733 := *x.GracePeriodSeconds
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else {
						r.EncodeInt(int64(yy2733))
					}
				}
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2735 := z.DecBinary()
	_ = yym2735
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2736 := r.ContainerType()
		if yyct2736 == codecSelferValueTypeMap1234 {
			yyl2736 := r.ReadMapStart()
			if yyl2736 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2736, d)
			}
		} else if yyct2736 == codecSelferValueTypeArray1234 {
			yyl2736 := r.ReadArrayStart()
			if yyl2736 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2736, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2737Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2737Slc
	var yyhl2737 bool = l >= 0
	for yyj2737 := 0; ; yyj2737++ {
		if yyhl2737 {
			if yyj2737 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2737Slc = r.DecodeBytes(yys2737Slc, true, true)
		yys2737 := string(yys2737Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2737 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2741 := z.DecBinary()
				_ = yym2741
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2737)
		} // end switch yys2737
	} // end for yyj2737
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2742 int
	var yyb2742 bool
	var yyhl2742 bool = l >= 0
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2746 := z.DecBinary()
		_ = yym2746
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2742++
		if yyhl2742 {
			yyb2742 = yyj2742 > l
		} else {
			yyb2742 = r.CheckBreak()
		}
		if yyb2742 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2742-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2747 := z.EncBinary()
		_ = yym2747
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2748 := !z.EncBinary()
			yy2arr2748 := z.EncBasicHandle().StructToArray
			var yyq2748 [4]bool
			_, _, _ = yysep2748, yyq2748, yy2arr2748
			const yyr2748 bool = false
			yyq2748[0] = x.Kind != ""
			yyq2748[1] = x.APIVersion != ""
			var yynn2748 int
			if yyr2748 || yy2arr2748 {
				r.EncodeArrayStart(4)
			} else {
				yynn2748 = 2
				for _, b := range yyq2748 {
					if b {
						yynn2748++
					}
				}
				r.EncodeMapStart(yynn2748)
				yynn2748 = 0
			}
			if yyr2748 || yy2arr2748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2748[0] {
					yym2750 := z.EncBinary()
					_ = yym2750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2748[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2748 || yy2arr2748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2748[1] {
					yym2753 := z.EncBinary()
					_ = yym2753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2748[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2748 || yy2arr2748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2756 := z.EncBinary()
				_ = yym2756
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2757 := z.EncBinary()
				_ = yym2757
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr2748 || yy2arr2748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2759 := z.EncBinary()
				_ = yym2759
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2760 := z.EncBinary()
				_ = yym2760
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr2748 || yy2arr2748 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2761 := z.DecBinary()
	_ = yym2761
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2762 := r.ContainerType()
		if yyct2762 == codecSelferValueTypeMap1234 {
			yyl2762 := r.ReadMapStart()
			if yyl2762 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2762, d)
			}
		} else if yyct2762 == codecSelferValueTypeArray1234 {
			yyl2762 := r.ReadArrayStart()
			if yyl2762 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2762, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2763Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2763Slc
	var yyhl2763 bool = l >= 0
	for yyj2763 := 0; ; yyj2763++ {
		if yyhl2763 {
			if yyj2763 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2763Slc = r.DecodeBytes(yys2763Slc, true, true)
		yys2763 := string(yys2763Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2763 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2763)
		} // end switch yys2763
	} // end for yyj2763
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2768 int
	var yyb2768 bool
	var yyhl2768 bool = l >= 0
	yyj2768++
	if yyhl2768 {
		yyb2768 = yyj2768 > l
	} else {
		yyb2768 = r.CheckBreak()
	}
	if yyb2768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2768++
	if yyhl2768 {
		yyb2768 = yyj2768 > l
	} else {
		yyb2768 = r.CheckBreak()
	}
	if yyb2768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2768++
	if yyhl2768 {
		yyb2768 = yyj2768 > l
	} else {
		yyb2768 = r.CheckBreak()
	}
	if yyb2768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj2768++
	if yyhl2768 {
		yyb2768 = yyj2768 > l
	} else {
		yyb2768 = r.CheckBreak()
	}
	if yyb2768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj2768++
		if yyhl2768 {
			yyb2768 = yyj2768 > l
		} else {
			yyb2768 = r.CheckBreak()
		}
		if yyb2768 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2768-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2773 := z.EncBinary()
		_ = yym2773
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2774 := !z.EncBinary()
			yy2arr2774 := z.EncBasicHandle().StructToArray
			var yyq2774 [7]bool
			_, _, _ = yysep2774, yyq2774, yy2arr2774
			const yyr2774 bool = false
			yyq2774[0] = x.Kind != ""
			yyq2774[1] = x.APIVersion != ""
			var yynn2774 int
			if yyr2774 || yy2arr2774 {
				r.EncodeArrayStart(7)
			} else {
				yynn2774 = 5
				for _, b := range yyq2774 {
					if b {
						yynn2774++
					}
				}
				r.EncodeMapStart(yynn2774)
				yynn2774 = 0
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2774[0] {
					yym2776 := z.EncBinary()
					_ = yym2776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2774[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2777 := z.EncBinary()
					_ = yym2777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2774[1] {
					yym2779 := z.EncBinary()
					_ = yym2779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2774[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2780 := z.EncBinary()
					_ = yym2780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2782 := z.EncBinary()
					_ = yym2782
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2783 := z.EncBinary()
					_ = yym2783
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2785 := z.EncBinary()
					_ = yym2785
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2786 := z.EncBinary()
					_ = yym2786
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2788 := z.EncBinary()
				_ = yym2788
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2789 := z.EncBinary()
				_ = yym2789
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2791 := z.EncBinary()
				_ = yym2791
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2792 := z.EncBinary()
				_ = yym2792
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2794 := *x.TimeoutSeconds
					yym2795 := z.EncBinary()
					_ = yym2795
					if false {
					} else {
						r.EncodeInt(int64(yy2794))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2796 := *x.TimeoutSeconds
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						r.EncodeInt(int64(yy2796))
					}
				}
			}
			if yyr2774 || yy2arr2774 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2798 := z.DecBinary()
	_ = yym2798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2799 := r.ContainerType()
		if yyct2799 == codecSelferValueTypeMap1234 {
			yyl2799 := r.ReadMapStart()
			if yyl2799 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2799, d)
			}
		} else if yyct2799 == codecSelferValueTypeArray1234 {
			yyl2799 := r.ReadArrayStart()
			if yyl2799 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2800Slc
	var yyhl2800 bool = l >= 0
	for yyj2800 := 0; ; yyj2800++ {
		if yyhl2800 {
			if yyj2800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2800Slc = r.DecodeBytes(yys2800Slc, true, true)
		yys2800 := string(yys2800Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2800 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv2803 := &x.LabelSelector
				yym2804 := z.DecBinary()
				_ = yym2804
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2803) {
				} else {
					z.DecFallback(yyv2803, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv2805 := &x.FieldSelector
				yym2806 := z.DecBinary()
				_ = yym2806
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2805) {
				} else {
					z.DecFallback(yyv2805, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2810 := z.DecBinary()
				_ = yym2810
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2800)
		} // end switch yys2800
	} // end for yyj2800
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2811 int
	var yyb2811 bool
	var yyhl2811 bool = l >= 0
	yyj2811++
	if yyhl2811 {
		yyb2811 = yyj2811 > l
	} else {
		yyb2811 = r.CheckBreak()
	}
	if yyb2811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2811++
	if yyhl2811 {
		yyb2811 = yyj2811 > l
	} else {
		yyb2811 = r.CheckBreak()
	}
	if yyb2811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2811++
	if yyhl2811 {
		yyb2811 = yyj2811 > l
	} else {
		yyb2811 = r.CheckBreak()
	}
	if yyb2811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv2814 := &x.LabelSelector
		yym2815 := z.DecBinary()
		_ = yym2815
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2814) {
		} else {
			z.DecFallback(yyv2814, true)
		}
	}
	yyj2811++
	if yyhl2811 {
		yyb2811 = yyj2811 > l
	} else {
		yyb2811 = r.CheckBreak()
	}
	if yyb2811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv2816 := &x.FieldSelector
		yym2817 := z.DecBinary()
		_ = yym2817
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2816) {
		} else {
			z.DecFallback(yyv2816, true)
		}
	}
	yyj2811++
	if yyhl2811 {
		yyb2811 = yyj2811 > l
	} else {
		yyb2811 = r.CheckBreak()
	}
	if yyb2811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2811++
	if yyhl2811 {
		yyb2811 = yyj2811 > l
	} else {
		yyb2811 = r.CheckBreak()
	}
	if yyb2811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2811++
	if yyhl2811 {
		yyb2811 = yyj2811 > l
	} else {
		yyb2811 = r.CheckBreak()
	}
	if yyb2811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2821 := z.DecBinary()
		_ = yym2821
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2811++
		if yyhl2811 {
			yyb2811 = yyj2811 > l
		} else {
			yyb2811 = r.CheckBreak()
		}
		if yyb2811 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2811-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2822 := z.EncBinary()
		_ = yym2822
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2823 := !z.EncBinary()
			yy2arr2823 := z.EncBasicHandle().StructToArray
			var yyq2823 [10]bool
			_, _, _ = yysep2823, yyq2823, yy2arr2823
			const yyr2823 bool = false
			yyq2823[0] = x.Kind != ""
			yyq2823[1] = x.APIVersion != ""
			var yynn2823 int
			if yyr2823 || yy2arr2823 {
				r.EncodeArrayStart(10)
			} else {
				yynn2823 = 8
				for _, b := range yyq2823 {
					if b {
						yynn2823++
					}
				}
				r.EncodeMapStart(yynn2823)
				yynn2823 = 0
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2823[0] {
					yym2825 := z.EncBinary()
					_ = yym2825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2823[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2826 := z.EncBinary()
					_ = yym2826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2823[1] {
					yym2828 := z.EncBinary()
					_ = yym2828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2823[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2829 := z.EncBinary()
					_ = yym2829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2831 := z.EncBinary()
				_ = yym2831
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2832 := z.EncBinary()
				_ = yym2832
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2834 := z.EncBinary()
				_ = yym2834
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2835 := z.EncBinary()
				_ = yym2835
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2837 := z.EncBinary()
				_ = yym2837
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2838 := z.EncBinary()
				_ = yym2838
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2840 := *x.SinceSeconds
					yym2841 := z.EncBinary()
					_ = yym2841
					if false {
					} else {
						r.EncodeInt(int64(yy2840))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2842 := *x.SinceSeconds
					yym2843 := z.EncBinary()
					_ = yym2843
					if false {
					} else {
						r.EncodeInt(int64(yy2842))
					}
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2845 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2845 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2846 := z.EncBinary()
					_ = yym2846
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2846 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2846 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2848 := z.EncBinary()
				_ = yym2848
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2849 := z.EncBinary()
				_ = yym2849
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2851 := *x.TailLines
					yym2852 := z.EncBinary()
					_ = yym2852
					if false {
					} else {
						r.EncodeInt(int64(yy2851))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2853 := *x.TailLines
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						r.EncodeInt(int64(yy2853))
					}
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2856 := *x.LimitBytes
					yym2857 := z.EncBinary()
					_ = yym2857
					if false {
					} else {
						r.EncodeInt(int64(yy2856))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2858 := *x.LimitBytes
					yym2859 := z.EncBinary()
					_ = yym2859
					if false {
					} else {
						r.EncodeInt(int64(yy2858))
					}
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2860 := z.DecBinary()
	_ = yym2860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2861 := r.ContainerType()
		if yyct2861 == codecSelferValueTypeMap1234 {
			yyl2861 := r.ReadMapStart()
			if yyl2861 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2861, d)
			}
		} else if yyct2861 == codecSelferValueTypeArray1234 {
			yyl2861 := r.ReadArrayStart()
			if yyl2861 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2862Slc
	var yyhl2862 bool = l >= 0
	for yyj2862 := 0; ; yyj2862++ {
		if yyhl2862 {
			if yyj2862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2862Slc = r.DecodeBytes(yys2862Slc, true, true)
		yys2862 := string(yys2862Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2862 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2869 := z.DecBinary()
				_ = yym2869
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2871 := z.DecBinary()
				_ = yym2871
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2871 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2871 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2874 := z.DecBinary()
				_ = yym2874
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2876 := z.DecBinary()
				_ = yym2876
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2862)
		} // end switch yys2862
	} // end for yyj2862
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2877 int
	var yyb2877 bool
	var yyhl2877 bool = l >= 0
	yyj2877++
	if yyhl2877 {
		yyb2877 = yyj2877 > l
	} else {
		yyb2877 = r.CheckBreak()
	}
	if yyb2877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2877++
	if yyhl2877 {
		yyb2877 = yyj2877 > l
	} else {
		yyb2877 = r.CheckBreak()
	}
	if yyb2877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2877++
	if yyhl2877 {
		yyb2877 = yyj2877 > l
	} else {
		yyb2877 = r.CheckBreak()
	}
	if yyb2877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2877++
	if yyhl2877 {
		yyb2877 = yyj2877 > l
	} else {
		yyb2877 = r.CheckBreak()
	}
	if yyb2877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2877++
	if yyhl2877 {
		yyb2877 = yyj2877 > l
	} else {
		yyb2877 = r.CheckBreak()
	}
	if yyb2877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2877++
	if yyhl2877 {
		yyb2877 = yyj2877 > l
	} else {
		yyb2877 = r.CheckBreak()
	}
	if yyb2877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2884 := z.DecBinary()
		_ = yym2884
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2877++
	if yyhl2877 {
		yyb2877 = yyj2877 > l
	} else {
		yyb2877 = r.CheckBreak()
	}
	if yyb2877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2886 := z.DecBinary()
		_ = yym2886
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2886 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2886 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2877++
	if yyhl2877 {
		yyb2877 = yyj2877 > l
	} else {
		yyb2877 = r.CheckBreak()
	}
	if yyb2877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2877++
	if yyhl2877 {
		yyb2877 = yyj2877 > l
	} else {
		yyb2877 = r.CheckBreak()
	}
	if yyb2877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2889 := z.DecBinary()
		_ = yym2889
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2877++
	if yyhl2877 {
		yyb2877 = yyj2877 > l
	} else {
		yyb2877 = r.CheckBreak()
	}
	if yyb2877 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2891 := z.DecBinary()
		_ = yym2891
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2877++
		if yyhl2877 {
			yyb2877 = yyj2877 > l
		} else {
			yyb2877 = r.CheckBreak()
		}
		if yyb2877 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2877-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2892 := z.EncBinary()
		_ = yym2892
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2893 := !z.EncBinary()
			yy2arr2893 := z.EncBasicHandle().StructToArray
			var yyq2893 [7]bool
			_, _, _ = yysep2893, yyq2893, yy2arr2893
			const yyr2893 bool = false
			yyq2893[0] = x.Kind != ""
			yyq2893[1] = x.APIVersion != ""
			yyq2893[2] = x.Stdin != false
			yyq2893[3] = x.Stdout != false
			yyq2893[4] = x.Stderr != false
			yyq2893[5] = x.TTY != false
			yyq2893[6] = x.Container != ""
			var yynn2893 int
			if yyr2893 || yy2arr2893 {
				r.EncodeArrayStart(7)
			} else {
				yynn2893 = 0
				for _, b := range yyq2893 {
					if b {
						yynn2893++
					}
				}
				r.EncodeMapStart(yynn2893)
				yynn2893 = 0
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2893[0] {
					yym2895 := z.EncBinary()
					_ = yym2895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2893[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2896 := z.EncBinary()
					_ = yym2896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2893[1] {
					yym2898 := z.EncBinary()
					_ = yym2898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2893[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2893[2] {
					yym2901 := z.EncBinary()
					_ = yym2901
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2893[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2902 := z.EncBinary()
					_ = yym2902
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2893[3] {
					yym2904 := z.EncBinary()
					_ = yym2904
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2893[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2905 := z.EncBinary()
					_ = yym2905
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2893[4] {
					yym2907 := z.EncBinary()
					_ = yym2907
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2893[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2908 := z.EncBinary()
					_ = yym2908
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2893[5] {
					yym2910 := z.EncBinary()
					_ = yym2910
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2893[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2911 := z.EncBinary()
					_ = yym2911
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2893[6] {
					yym2913 := z.EncBinary()
					_ = yym2913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2893[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2915 := z.DecBinary()
	_ = yym2915
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2916 := r.ContainerType()
		if yyct2916 == codecSelferValueTypeMap1234 {
			yyl2916 := r.ReadMapStart()
			if yyl2916 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2916, d)
			}
		} else if yyct2916 == codecSelferValueTypeArray1234 {
			yyl2916 := r.ReadArrayStart()
			if yyl2916 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2916, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2917Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2917Slc
	var yyhl2917 bool = l >= 0
	for yyj2917 := 0; ; yyj2917++ {
		if yyhl2917 {
			if yyj2917 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2917Slc = r.DecodeBytes(yys2917Slc, true, true)
		yys2917 := string(yys2917Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2917 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2917)
		} // end switch yys2917
	} // end for yyj2917
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2925 int
	var yyb2925 bool
	var yyhl2925 bool = l >= 0
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2925++
		if yyhl2925 {
			yyb2925 = yyj2925 > l
		} else {
			yyb2925 = r.CheckBreak()
		}
		if yyb2925 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2925-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2933 := z.EncBinary()
		_ = yym2933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2934 := !z.EncBinary()
			yy2arr2934 := z.EncBasicHandle().StructToArray
			var yyq2934 [8]bool
			_, _, _ = yysep2934, yyq2934, yy2arr2934
			const yyr2934 bool = false
			yyq2934[0] = x.Kind != ""
			yyq2934[1] = x.APIVersion != ""
			var yynn2934 int
			if yyr2934 || yy2arr2934 {
				r.EncodeArrayStart(8)
			} else {
				yynn2934 = 6
				for _, b := range yyq2934 {
					if b {
						yynn2934++
					}
				}
				r.EncodeMapStart(yynn2934)
				yynn2934 = 0
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2934[0] {
					yym2936 := z.EncBinary()
					_ = yym2936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2934[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2937 := z.EncBinary()
					_ = yym2937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2934[1] {
					yym2939 := z.EncBinary()
					_ = yym2939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2934[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2940 := z.EncBinary()
					_ = yym2940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2942 := z.EncBinary()
				_ = yym2942
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2943 := z.EncBinary()
				_ = yym2943
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2945 := z.EncBinary()
				_ = yym2945
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2946 := z.EncBinary()
				_ = yym2946
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2948 := z.EncBinary()
				_ = yym2948
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2949 := z.EncBinary()
				_ = yym2949
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2951 := z.EncBinary()
				_ = yym2951
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2952 := z.EncBinary()
				_ = yym2952
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2954 := z.EncBinary()
				_ = yym2954
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2955 := z.EncBinary()
				_ = yym2955
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2957 := z.EncBinary()
					_ = yym2957
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2958 := z.EncBinary()
					_ = yym2958
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2959 := z.DecBinary()
	_ = yym2959
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2960 := r.ContainerType()
		if yyct2960 == codecSelferValueTypeMap1234 {
			yyl2960 := r.ReadMapStart()
			if yyl2960 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2960, d)
			}
		} else if yyct2960 == codecSelferValueTypeArray1234 {
			yyl2960 := r.ReadArrayStart()
			if yyl2960 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2960, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2961Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2961Slc
	var yyhl2961 bool = l >= 0
	for yyj2961 := 0; ; yyj2961++ {
		if yyhl2961 {
			if yyj2961 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2961Slc = r.DecodeBytes(yys2961Slc, true, true)
		yys2961 := string(yys2961Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2961 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2969 := &x.Command
				yym2970 := z.DecBinary()
				_ = yym2970
				if false {
				} else {
					z.F.DecSliceStringX(yyv2969, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2961)
		} // end switch yys2961
	} // end for yyj2961
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2971 int
	var yyb2971 bool
	var yyhl2971 bool = l >= 0
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2979 := &x.Command
		yym2980 := z.DecBinary()
		_ = yym2980
		if false {
		} else {
			z.F.DecSliceStringX(yyv2979, false, d)
		}
	}
	for {
		yyj2971++
		if yyhl2971 {
			yyb2971 = yyj2971 > l
		} else {
			yyb2971 = r.CheckBreak()
		}
		if yyb2971 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2971-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2981 := z.EncBinary()
		_ = yym2981
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2982 := !z.EncBinary()
			yy2arr2982 := z.EncBasicHandle().StructToArray
			var yyq2982 [3]bool
			_, _, _ = yysep2982, yyq2982, yy2arr2982
			const yyr2982 bool = false
			yyq2982[0] = x.Kind != ""
			yyq2982[1] = x.APIVersion != ""
			var yynn2982 int
			if yyr2982 || yy2arr2982 {
				r.EncodeArrayStart(3)
			} else {
				yynn2982 = 1
				for _, b := range yyq2982 {
					if b {
						yynn2982++
					}
				}
				r.EncodeMapStart(yynn2982)
				yynn2982 = 0
			}
			if yyr2982 || yy2arr2982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2982[0] {
					yym2984 := z.EncBinary()
					_ = yym2984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2982[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2985 := z.EncBinary()
					_ = yym2985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2982 || yy2arr2982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2982[1] {
					yym2987 := z.EncBinary()
					_ = yym2987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2982[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2988 := z.EncBinary()
					_ = yym2988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2982 || yy2arr2982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2990 := z.EncBinary()
				_ = yym2990
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2991 := z.EncBinary()
				_ = yym2991
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr2982 || yy2arr2982 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2992 := z.DecBinary()
	_ = yym2992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2993 := r.ContainerType()
		if yyct2993 == codecSelferValueTypeMap1234 {
			yyl2993 := r.ReadMapStart()
			if yyl2993 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2993, d)
			}
		} else if yyct2993 == codecSelferValueTypeArray1234 {
			yyl2993 := r.ReadArrayStart()
			if yyl2993 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2993, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2994Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2994Slc
	var yyhl2994 bool = l >= 0
	for yyj2994 := 0; ; yyj2994++ {
		if yyhl2994 {
			if yyj2994 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2994Slc = r.DecodeBytes(yys2994Slc, true, true)
		yys2994 := string(yys2994Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2994 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2994)
		} // end switch yys2994
	} // end for yyj2994
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2998 int
	var yyb2998 bool
	var yyhl2998 bool = l >= 0
	yyj2998++
	if yyhl2998 {
		yyb2998 = yyj2998 > l
	} else {
		yyb2998 = r.CheckBreak()
	}
	if yyb2998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2998++
	if yyhl2998 {
		yyb2998 = yyj2998 > l
	} else {
		yyb2998 = r.CheckBreak()
	}
	if yyb2998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2998++
	if yyhl2998 {
		yyb2998 = yyj2998 > l
	} else {
		yyb2998 = r.CheckBreak()
	}
	if yyb2998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2998++
		if yyhl2998 {
			yyb2998 = yyj2998 > l
		} else {
			yyb2998 = r.CheckBreak()
		}
		if yyb2998 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2998-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3002 := z.EncBinary()
		_ = yym3002
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3003 := !z.EncBinary()
			yy2arr3003 := z.EncBasicHandle().StructToArray
			var yyq3003 [7]bool
			_, _, _ = yysep3003, yyq3003, yy2arr3003
			const yyr3003 bool = false
			yyq3003[0] = x.Kind != ""
			yyq3003[1] = x.Namespace != ""
			yyq3003[2] = x.Name != ""
			yyq3003[3] = x.UID != ""
			yyq3003[4] = x.APIVersion != ""
			yyq3003[5] = x.ResourceVersion != ""
			yyq3003[6] = x.FieldPath != ""
			var yynn3003 int
			if yyr3003 || yy2arr3003 {
				r.EncodeArrayStart(7)
			} else {
				yynn3003 = 0
				for _, b := range yyq3003 {
					if b {
						yynn3003++
					}
				}
				r.EncodeMapStart(yynn3003)
				yynn3003 = 0
			}
			if yyr3003 || yy2arr3003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3003[0] {
					yym3005 := z.EncBinary()
					_ = yym3005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3003[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3006 := z.EncBinary()
					_ = yym3006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3003 || yy2arr3003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3003[1] {
					yym3008 := z.EncBinary()
					_ = yym3008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3003[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3009 := z.EncBinary()
					_ = yym3009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3003 || yy2arr3003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3003[2] {
					yym3011 := z.EncBinary()
					_ = yym3011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3003[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3012 := z.EncBinary()
					_ = yym3012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3003 || yy2arr3003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3003[3] {
					yym3014 := z.EncBinary()
					_ = yym3014
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3003[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3015 := z.EncBinary()
					_ = yym3015
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3003 || yy2arr3003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3003[4] {
					yym3017 := z.EncBinary()
					_ = yym3017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3003[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3018 := z.EncBinary()
					_ = yym3018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3003 || yy2arr3003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3003[5] {
					yym3020 := z.EncBinary()
					_ = yym3020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3003[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3021 := z.EncBinary()
					_ = yym3021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3003 || yy2arr3003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3003[6] {
					yym3023 := z.EncBinary()
					_ = yym3023
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3003[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3024 := z.EncBinary()
					_ = yym3024
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3003 || yy2arr3003 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3025 := z.DecBinary()
	_ = yym3025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3026 := r.ContainerType()
		if yyct3026 == codecSelferValueTypeMap1234 {
			yyl3026 := r.ReadMapStart()
			if yyl3026 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3026, d)
			}
		} else if yyct3026 == codecSelferValueTypeArray1234 {
			yyl3026 := r.ReadArrayStart()
			if yyl3026 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3026, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3027Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3027Slc
	var yyhl3027 bool = l >= 0
	for yyj3027 := 0; ; yyj3027++ {
		if yyhl3027 {
			if yyj3027 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3027Slc = r.DecodeBytes(yys3027Slc, true, true)
		yys3027 := string(yys3027Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3027 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3027)
		} // end switch yys3027
	} // end for yyj3027
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3035 int
	var yyb3035 bool
	var yyhl3035 bool = l >= 0
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3035++
		if yyhl3035 {
			yyb3035 = yyj3035 > l
		} else {
			yyb3035 = r.CheckBreak()
		}
		if yyb3035 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3035-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3043 := z.EncBinary()
		_ = yym3043
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3044 := !z.EncBinary()
			yy2arr3044 := z.EncBasicHandle().StructToArray
			var yyq3044 [1]bool
			_, _, _ = yysep3044, yyq3044, yy2arr3044
			const yyr3044 bool = false
			var yynn3044 int
			if yyr3044 || yy2arr3044 {
				r.EncodeArrayStart(1)
			} else {
				yynn3044 = 1
				for _, b := range yyq3044 {
					if b {
						yynn3044++
					}
				}
				r.EncodeMapStart(yynn3044)
				yynn3044 = 0
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3046 := z.EncBinary()
				_ = yym3046
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3047 := z.EncBinary()
				_ = yym3047
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3048 := z.DecBinary()
	_ = yym3048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3049 := r.ContainerType()
		if yyct3049 == codecSelferValueTypeMap1234 {
			yyl3049 := r.ReadMapStart()
			if yyl3049 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3049, d)
			}
		} else if yyct3049 == codecSelferValueTypeArray1234 {
			yyl3049 := r.ReadArrayStart()
			if yyl3049 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3050Slc
	var yyhl3050 bool = l >= 0
	for yyj3050 := 0; ; yyj3050++ {
		if yyhl3050 {
			if yyj3050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3050Slc = r.DecodeBytes(yys3050Slc, true, true)
		yys3050 := string(yys3050Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3050 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3050)
		} // end switch yys3050
	} // end for yyj3050
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3052 int
	var yyb3052 bool
	var yyhl3052 bool = l >= 0
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3052++
		if yyhl3052 {
			yyb3052 = yyj3052 > l
		} else {
			yyb3052 = r.CheckBreak()
		}
		if yyb3052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3054 := z.EncBinary()
		_ = yym3054
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3055 := !z.EncBinary()
			yy2arr3055 := z.EncBasicHandle().StructToArray
			var yyq3055 [3]bool
			_, _, _ = yysep3055, yyq3055, yy2arr3055
			const yyr3055 bool = false
			yyq3055[0] = x.Kind != ""
			yyq3055[1] = x.APIVersion != ""
			yyq3055[2] = true
			var yynn3055 int
			if yyr3055 || yy2arr3055 {
				r.EncodeArrayStart(3)
			} else {
				yynn3055 = 0
				for _, b := range yyq3055 {
					if b {
						yynn3055++
					}
				}
				r.EncodeMapStart(yynn3055)
				yynn3055 = 0
			}
			if yyr3055 || yy2arr3055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3055[0] {
					yym3057 := z.EncBinary()
					_ = yym3057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3055[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3058 := z.EncBinary()
					_ = yym3058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3055 || yy2arr3055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3055[1] {
					yym3060 := z.EncBinary()
					_ = yym3060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3055[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3061 := z.EncBinary()
					_ = yym3061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3055 || yy2arr3055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3055[2] {
					yy3063 := &x.Reference
					yy3063.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3055[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3064 := &x.Reference
					yy3064.CodecEncodeSelf(e)
				}
			}
			if yyr3055 || yy2arr3055 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3065 := z.DecBinary()
	_ = yym3065
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3066 := r.ContainerType()
		if yyct3066 == codecSelferValueTypeMap1234 {
			yyl3066 := r.ReadMapStart()
			if yyl3066 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3066, d)
			}
		} else if yyct3066 == codecSelferValueTypeArray1234 {
			yyl3066 := r.ReadArrayStart()
			if yyl3066 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3066, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3067Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3067Slc
	var yyhl3067 bool = l >= 0
	for yyj3067 := 0; ; yyj3067++ {
		if yyhl3067 {
			if yyj3067 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3067Slc = r.DecodeBytes(yys3067Slc, true, true)
		yys3067 := string(yys3067Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3067 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3070 := &x.Reference
				yyv3070.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3067)
		} // end switch yys3067
	} // end for yyj3067
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3071 int
	var yyb3071 bool
	var yyhl3071 bool = l >= 0
	yyj3071++
	if yyhl3071 {
		yyb3071 = yyj3071 > l
	} else {
		yyb3071 = r.CheckBreak()
	}
	if yyb3071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3071++
	if yyhl3071 {
		yyb3071 = yyj3071 > l
	} else {
		yyb3071 = r.CheckBreak()
	}
	if yyb3071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3071++
	if yyhl3071 {
		yyb3071 = yyj3071 > l
	} else {
		yyb3071 = r.CheckBreak()
	}
	if yyb3071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3074 := &x.Reference
		yyv3074.CodecDecodeSelf(d)
	}
	for {
		yyj3071++
		if yyhl3071 {
			yyb3071 = yyj3071 > l
		} else {
			yyb3071 = r.CheckBreak()
		}
		if yyb3071 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3071-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3075 := z.EncBinary()
		_ = yym3075
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3076 := !z.EncBinary()
			yy2arr3076 := z.EncBasicHandle().StructToArray
			var yyq3076 [2]bool
			_, _, _ = yysep3076, yyq3076, yy2arr3076
			const yyr3076 bool = false
			yyq3076[0] = x.Component != ""
			yyq3076[1] = x.Host != ""
			var yynn3076 int
			if yyr3076 || yy2arr3076 {
				r.EncodeArrayStart(2)
			} else {
				yynn3076 = 0
				for _, b := range yyq3076 {
					if b {
						yynn3076++
					}
				}
				r.EncodeMapStart(yynn3076)
				yynn3076 = 0
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3076[0] {
					yym3078 := z.EncBinary()
					_ = yym3078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3079 := z.EncBinary()
					_ = yym3079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3076[1] {
					yym3081 := z.EncBinary()
					_ = yym3081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3082 := z.EncBinary()
					_ = yym3082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3083 := z.DecBinary()
	_ = yym3083
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3084 := r.ContainerType()
		if yyct3084 == codecSelferValueTypeMap1234 {
			yyl3084 := r.ReadMapStart()
			if yyl3084 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3084, d)
			}
		} else if yyct3084 == codecSelferValueTypeArray1234 {
			yyl3084 := r.ReadArrayStart()
			if yyl3084 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3084, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3085Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3085Slc
	var yyhl3085 bool = l >= 0
	for yyj3085 := 0; ; yyj3085++ {
		if yyhl3085 {
			if yyj3085 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3085Slc = r.DecodeBytes(yys3085Slc, true, true)
		yys3085 := string(yys3085Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3085 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3085)
		} // end switch yys3085
	} // end for yyj3085
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3088 int
	var yyb3088 bool
	var yyhl3088 bool = l >= 0
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3088++
		if yyhl3088 {
			yyb3088 = yyj3088 > l
		} else {
			yyb3088 = r.CheckBreak()
		}
		if yyb3088 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3088-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3091 := z.EncBinary()
		_ = yym3091
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3092 := !z.EncBinary()
			yy2arr3092 := z.EncBasicHandle().StructToArray
			var yyq3092 [11]bool
			_, _, _ = yysep3092, yyq3092, yy2arr3092
			const yyr3092 bool = false
			yyq3092[0] = x.Kind != ""
			yyq3092[1] = x.APIVersion != ""
			yyq3092[2] = true
			yyq3092[3] = true
			yyq3092[4] = x.Reason != ""
			yyq3092[5] = x.Message != ""
			yyq3092[6] = true
			yyq3092[7] = true
			yyq3092[8] = true
			yyq3092[9] = x.Count != 0
			yyq3092[10] = x.Type != ""
			var yynn3092 int
			if yyr3092 || yy2arr3092 {
				r.EncodeArrayStart(11)
			} else {
				yynn3092 = 0
				for _, b := range yyq3092 {
					if b {
						yynn3092++
					}
				}
				r.EncodeMapStart(yynn3092)
				yynn3092 = 0
			}
			if yyr3092 || yy2arr3092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3092[0] {
					yym3094 := z.EncBinary()
					_ = yym3094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3092[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3095 := z.EncBinary()
					_ = yym3095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3092 || yy2arr3092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3092[1] {
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3092[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3098 := z.EncBinary()
					_ = yym3098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3092 || yy2arr3092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3092[2] {
					yy3100 := &x.ObjectMeta
					yy3100.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3092[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3101 := &x.ObjectMeta
					yy3101.CodecEncodeSelf(e)
				}
			}
			if yyr3092 || yy2arr3092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3092[3] {
					yy3103 := &x.InvolvedObject
					yy3103.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3092[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3104 := &x.InvolvedObject
					yy3104.CodecEncodeSelf(e)
				}
			}
			if yyr3092 || yy2arr3092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3092[4] {
					yym3106 := z.EncBinary()
					_ = yym3106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3092[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3107 := z.EncBinary()
					_ = yym3107
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3092 || yy2arr3092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3092[5] {
					yym3109 := z.EncBinary()
					_ = yym3109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3092[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3110 := z.EncBinary()
					_ = yym3110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3092 || yy2arr3092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3092[6] {
					yy3112 := &x.Source
					yy3112.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3092[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3113 := &x.Source
					yy3113.CodecEncodeSelf(e)
				}
			}
			if yyr3092 || yy2arr3092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3092[7] {
					yy3115 := &x.FirstTimestamp
					yym3116 := z.EncBinary()
					_ = yym3116
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3115) {
					} else if yym3116 {
						z.EncBinaryMarshal(yy3115)
					} else if !yym3116 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3115)
					} else {
						z.EncFallback(yy3115)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3092[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3117 := &x.FirstTimestamp
					yym3118 := z.EncBinary()
					_ = yym3118
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3117) {
					} else if yym3118 {
						z.EncBinaryMarshal(yy3117)
					} else if !yym3118 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3117)
					} else {
						z.EncFallback(yy3117)
					}
				}
			}
			if yyr3092 || yy2arr3092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3092[8] {
					yy3120 := &x.LastTimestamp
					yym3121 := z.EncBinary()
					_ = yym3121
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3120) {
					} else if yym3121 {
						z.EncBinaryMarshal(yy3120)
					} else if !yym3121 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3120)
					} else {
						z.EncFallback(yy3120)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3092[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3122 := &x.LastTimestamp
					yym3123 := z.EncBinary()
					_ = yym3123
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3122) {
					} else if yym3123 {
						z.EncBinaryMarshal(yy3122)
					} else if !yym3123 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3122)
					} else {
						z.EncFallback(yy3122)
					}
				}
			}
			if yyr3092 || yy2arr3092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3092[9] {
					yym3125 := z.EncBinary()
					_ = yym3125
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3092[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3126 := z.EncBinary()
					_ = yym3126
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3092 || yy2arr3092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3092[10] {
					yym3128 := z.EncBinary()
					_ = yym3128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3092[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3129 := z.EncBinary()
					_ = yym3129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3092 || yy2arr3092 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3130 := z.DecBinary()
	_ = yym3130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3131 := r.ContainerType()
		if yyct3131 == codecSelferValueTypeMap1234 {
			yyl3131 := r.ReadMapStart()
			if yyl3131 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3131, d)
			}
		} else if yyct3131 == codecSelferValueTypeArray1234 {
			yyl3131 := r.ReadArrayStart()
			if yyl3131 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3132Slc
	var yyhl3132 bool = l >= 0
	for yyj3132 := 0; ; yyj3132++ {
		if yyhl3132 {
			if yyj3132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3132Slc = r.DecodeBytes(yys3132Slc, true, true)
		yys3132 := string(yys3132Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3132 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3135 := &x.ObjectMeta
				yyv3135.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3136 := &x.InvolvedObject
				yyv3136.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3139 := &x.Source
				yyv3139.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3140 := &x.FirstTimestamp
				yym3141 := z.DecBinary()
				_ = yym3141
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3140) {
				} else if yym3141 {
					z.DecBinaryUnmarshal(yyv3140)
				} else if !yym3141 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3140)
				} else {
					z.DecFallback(yyv3140, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3142 := &x.LastTimestamp
				yym3143 := z.DecBinary()
				_ = yym3143
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3142) {
				} else if yym3143 {
					z.DecBinaryUnmarshal(yyv3142)
				} else if !yym3143 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3142)
				} else {
					z.DecFallback(yyv3142, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3132)
		} // end switch yys3132
	} // end for yyj3132
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3146 int
	var yyb3146 bool
	var yyhl3146 bool = l >= 0
	yyj3146++
	if yyhl3146 {
		yyb3146 = yyj3146 > l
	} else {
		yyb3146 = r.CheckBreak()
	}
	if yyb3146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3146++
	if yyhl3146 {
		yyb3146 = yyj3146 > l
	} else {
		yyb3146 = r.CheckBreak()
	}
	if yyb3146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3146++
	if yyhl3146 {
		yyb3146 = yyj3146 > l
	} else {
		yyb3146 = r.CheckBreak()
	}
	if yyb3146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3149 := &x.ObjectMeta
		yyv3149.CodecDecodeSelf(d)
	}
	yyj3146++
	if yyhl3146 {
		yyb3146 = yyj3146 > l
	} else {
		yyb3146 = r.CheckBreak()
	}
	if yyb3146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3150 := &x.InvolvedObject
		yyv3150.CodecDecodeSelf(d)
	}
	yyj3146++
	if yyhl3146 {
		yyb3146 = yyj3146 > l
	} else {
		yyb3146 = r.CheckBreak()
	}
	if yyb3146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3146++
	if yyhl3146 {
		yyb3146 = yyj3146 > l
	} else {
		yyb3146 = r.CheckBreak()
	}
	if yyb3146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3146++
	if yyhl3146 {
		yyb3146 = yyj3146 > l
	} else {
		yyb3146 = r.CheckBreak()
	}
	if yyb3146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3153 := &x.Source
		yyv3153.CodecDecodeSelf(d)
	}
	yyj3146++
	if yyhl3146 {
		yyb3146 = yyj3146 > l
	} else {
		yyb3146 = r.CheckBreak()
	}
	if yyb3146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3154 := &x.FirstTimestamp
		yym3155 := z.DecBinary()
		_ = yym3155
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3154) {
		} else if yym3155 {
			z.DecBinaryUnmarshal(yyv3154)
		} else if !yym3155 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3154)
		} else {
			z.DecFallback(yyv3154, false)
		}
	}
	yyj3146++
	if yyhl3146 {
		yyb3146 = yyj3146 > l
	} else {
		yyb3146 = r.CheckBreak()
	}
	if yyb3146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3156 := &x.LastTimestamp
		yym3157 := z.DecBinary()
		_ = yym3157
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3156) {
		} else if yym3157 {
			z.DecBinaryUnmarshal(yyv3156)
		} else if !yym3157 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3156)
		} else {
			z.DecFallback(yyv3156, false)
		}
	}
	yyj3146++
	if yyhl3146 {
		yyb3146 = yyj3146 > l
	} else {
		yyb3146 = r.CheckBreak()
	}
	if yyb3146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj3146++
	if yyhl3146 {
		yyb3146 = yyj3146 > l
	} else {
		yyb3146 = r.CheckBreak()
	}
	if yyb3146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3146++
		if yyhl3146 {
			yyb3146 = yyj3146 > l
		} else {
			yyb3146 = r.CheckBreak()
		}
		if yyb3146 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3146-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3160 := z.EncBinary()
		_ = yym3160
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3161 := !z.EncBinary()
			yy2arr3161 := z.EncBasicHandle().StructToArray
			var yyq3161 [4]bool
			_, _, _ = yysep3161, yyq3161, yy2arr3161
			const yyr3161 bool = false
			yyq3161[0] = x.Kind != ""
			yyq3161[1] = x.APIVersion != ""
			yyq3161[2] = true
			var yynn3161 int
			if yyr3161 || yy2arr3161 {
				r.EncodeArrayStart(4)
			} else {
				yynn3161 = 1
				for _, b := range yyq3161 {
					if b {
						yynn3161++
					}
				}
				r.EncodeMapStart(yynn3161)
				yynn3161 = 0
			}
			if yyr3161 || yy2arr3161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3161[0] {
					yym3163 := z.EncBinary()
					_ = yym3163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3161[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3164 := z.EncBinary()
					_ = yym3164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3161 || yy2arr3161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3161[1] {
					yym3166 := z.EncBinary()
					_ = yym3166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3161[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3167 := z.EncBinary()
					_ = yym3167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3161 || yy2arr3161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3161[2] {
					yy3169 := &x.ListMeta
					yym3170 := z.EncBinary()
					_ = yym3170
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3169) {
					} else {
						z.EncFallback(yy3169)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3161[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3171 := &x.ListMeta
					yym3172 := z.EncBinary()
					_ = yym3172
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3171) {
					} else {
						z.EncFallback(yy3171)
					}
				}
			}
			if yyr3161 || yy2arr3161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3174 := z.EncBinary()
					_ = yym3174
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3175 := z.EncBinary()
					_ = yym3175
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3161 || yy2arr3161 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3176 := z.DecBinary()
	_ = yym3176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3177 := r.ContainerType()
		if yyct3177 == codecSelferValueTypeMap1234 {
			yyl3177 := r.ReadMapStart()
			if yyl3177 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3177, d)
			}
		} else if yyct3177 == codecSelferValueTypeArray1234 {
			yyl3177 := r.ReadArrayStart()
			if yyl3177 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3178Slc
	var yyhl3178 bool = l >= 0
	for yyj3178 := 0; ; yyj3178++ {
		if yyhl3178 {
			if yyj3178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3178Slc = r.DecodeBytes(yys3178Slc, true, true)
		yys3178 := string(yys3178Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3178 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3181 := &x.ListMeta
				yym3182 := z.DecBinary()
				_ = yym3182
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3181) {
				} else {
					z.DecFallback(yyv3181, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3183 := &x.Items
				yym3184 := z.DecBinary()
				_ = yym3184
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3183), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3178)
		} // end switch yys3178
	} // end for yyj3178
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3185 int
	var yyb3185 bool
	var yyhl3185 bool = l >= 0
	yyj3185++
	if yyhl3185 {
		yyb3185 = yyj3185 > l
	} else {
		yyb3185 = r.CheckBreak()
	}
	if yyb3185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3185++
	if yyhl3185 {
		yyb3185 = yyj3185 > l
	} else {
		yyb3185 = r.CheckBreak()
	}
	if yyb3185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3185++
	if yyhl3185 {
		yyb3185 = yyj3185 > l
	} else {
		yyb3185 = r.CheckBreak()
	}
	if yyb3185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3188 := &x.ListMeta
		yym3189 := z.DecBinary()
		_ = yym3189
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3188) {
		} else {
			z.DecFallback(yyv3188, false)
		}
	}
	yyj3185++
	if yyhl3185 {
		yyb3185 = yyj3185 > l
	} else {
		yyb3185 = r.CheckBreak()
	}
	if yyb3185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3190 := &x.Items
		yym3191 := z.DecBinary()
		_ = yym3191
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3190), d)
		}
	}
	for {
		yyj3185++
		if yyhl3185 {
			yyb3185 = yyj3185 > l
		} else {
			yyb3185 = r.CheckBreak()
		}
		if yyb3185 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3185-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3192 := z.EncBinary()
		_ = yym3192
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3193 := !z.EncBinary()
			yy2arr3193 := z.EncBasicHandle().StructToArray
			var yyq3193 [4]bool
			_, _, _ = yysep3193, yyq3193, yy2arr3193
			const yyr3193 bool = false
			yyq3193[0] = x.Kind != ""
			yyq3193[1] = x.APIVersion != ""
			yyq3193[2] = true
			var yynn3193 int
			if yyr3193 || yy2arr3193 {
				r.EncodeArrayStart(4)
			} else {
				yynn3193 = 1
				for _, b := range yyq3193 {
					if b {
						yynn3193++
					}
				}
				r.EncodeMapStart(yynn3193)
				yynn3193 = 0
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3193[0] {
					yym3195 := z.EncBinary()
					_ = yym3195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3193[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3196 := z.EncBinary()
					_ = yym3196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3193[1] {
					yym3198 := z.EncBinary()
					_ = yym3198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3193[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3199 := z.EncBinary()
					_ = yym3199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3193[2] {
					yy3201 := &x.ListMeta
					yym3202 := z.EncBinary()
					_ = yym3202
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3201) {
					} else {
						z.EncFallback(yy3201)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3193[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3203 := &x.ListMeta
					yym3204 := z.EncBinary()
					_ = yym3204
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3203) {
					} else {
						z.EncFallback(yy3203)
					}
				}
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3206 := z.EncBinary()
					_ = yym3206
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3207 := z.EncBinary()
					_ = yym3207
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3208 := z.DecBinary()
	_ = yym3208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3209 := r.ContainerType()
		if yyct3209 == codecSelferValueTypeMap1234 {
			yyl3209 := r.ReadMapStart()
			if yyl3209 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3209, d)
			}
		} else if yyct3209 == codecSelferValueTypeArray1234 {
			yyl3209 := r.ReadArrayStart()
			if yyl3209 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3210Slc
	var yyhl3210 bool = l >= 0
	for yyj3210 := 0; ; yyj3210++ {
		if yyhl3210 {
			if yyj3210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3210Slc = r.DecodeBytes(yys3210Slc, true, true)
		yys3210 := string(yys3210Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3210 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3213 := &x.ListMeta
				yym3214 := z.DecBinary()
				_ = yym3214
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3213) {
				} else {
					z.DecFallback(yyv3213, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3215 := &x.Items
				yym3216 := z.DecBinary()
				_ = yym3216
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3215), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3210)
		} // end switch yys3210
	} // end for yyj3210
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3217 int
	var yyb3217 bool
	var yyhl3217 bool = l >= 0
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3220 := &x.ListMeta
		yym3221 := z.DecBinary()
		_ = yym3221
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3220) {
		} else {
			z.DecFallback(yyv3220, false)
		}
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3222 := &x.Items
		yym3223 := z.DecBinary()
		_ = yym3223
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3222), d)
		}
	}
	for {
		yyj3217++
		if yyhl3217 {
			yyb3217 = yyj3217 > l
		} else {
			yyb3217 = r.CheckBreak()
		}
		if yyb3217 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3217-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3224 := z.EncBinary()
	_ = yym3224
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3225 := z.DecBinary()
	_ = yym3225
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3226 := z.EncBinary()
		_ = yym3226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3227 := !z.EncBinary()
			yy2arr3227 := z.EncBasicHandle().StructToArray
			var yyq3227 [6]bool
			_, _, _ = yysep3227, yyq3227, yy2arr3227
			const yyr3227 bool = false
			yyq3227[0] = x.Type != ""
			yyq3227[1] = len(x.Max) != 0
			yyq3227[2] = len(x.Min) != 0
			yyq3227[3] = len(x.Default) != 0
			yyq3227[4] = len(x.DefaultRequest) != 0
			yyq3227[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3227 int
			if yyr3227 || yy2arr3227 {
				r.EncodeArrayStart(6)
			} else {
				yynn3227 = 0
				for _, b := range yyq3227 {
					if b {
						yynn3227++
					}
				}
				r.EncodeMapStart(yynn3227)
				yynn3227 = 0
			}
			if yyr3227 || yy2arr3227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3227[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3227[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3227 || yy2arr3227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3227[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3227[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3227 || yy2arr3227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3227[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3227[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3227 || yy2arr3227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3227[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3227[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3227 || yy2arr3227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3227[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3227[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3227 || yy2arr3227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3227[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3227[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3227 || yy2arr3227 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3234 := z.DecBinary()
	_ = yym3234
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3235 := r.ContainerType()
		if yyct3235 == codecSelferValueTypeMap1234 {
			yyl3235 := r.ReadMapStart()
			if yyl3235 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3235, d)
			}
		} else if yyct3235 == codecSelferValueTypeArray1234 {
			yyl3235 := r.ReadArrayStart()
			if yyl3235 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3235, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3236Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3236Slc
	var yyhl3236 bool = l >= 0
	for yyj3236 := 0; ; yyj3236++ {
		if yyhl3236 {
			if yyj3236 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3236Slc = r.DecodeBytes(yys3236Slc, true, true)
		yys3236 := string(yys3236Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3236 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3238 := &x.Max
				yyv3238.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3239 := &x.Min
				yyv3239.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3240 := &x.Default
				yyv3240.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3241 := &x.DefaultRequest
				yyv3241.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3242 := &x.MaxLimitRequestRatio
				yyv3242.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3236)
		} // end switch yys3236
	} // end for yyj3236
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3243 int
	var yyb3243 bool
	var yyhl3243 bool = l >= 0
	yyj3243++
	if yyhl3243 {
		yyb3243 = yyj3243 > l
	} else {
		yyb3243 = r.CheckBreak()
	}
	if yyb3243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3243++
	if yyhl3243 {
		yyb3243 = yyj3243 > l
	} else {
		yyb3243 = r.CheckBreak()
	}
	if yyb3243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3245 := &x.Max
		yyv3245.CodecDecodeSelf(d)
	}
	yyj3243++
	if yyhl3243 {
		yyb3243 = yyj3243 > l
	} else {
		yyb3243 = r.CheckBreak()
	}
	if yyb3243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3246 := &x.Min
		yyv3246.CodecDecodeSelf(d)
	}
	yyj3243++
	if yyhl3243 {
		yyb3243 = yyj3243 > l
	} else {
		yyb3243 = r.CheckBreak()
	}
	if yyb3243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3247 := &x.Default
		yyv3247.CodecDecodeSelf(d)
	}
	yyj3243++
	if yyhl3243 {
		yyb3243 = yyj3243 > l
	} else {
		yyb3243 = r.CheckBreak()
	}
	if yyb3243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3248 := &x.DefaultRequest
		yyv3248.CodecDecodeSelf(d)
	}
	yyj3243++
	if yyhl3243 {
		yyb3243 = yyj3243 > l
	} else {
		yyb3243 = r.CheckBreak()
	}
	if yyb3243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3249 := &x.MaxLimitRequestRatio
		yyv3249.CodecDecodeSelf(d)
	}
	for {
		yyj3243++
		if yyhl3243 {
			yyb3243 = yyj3243 > l
		} else {
			yyb3243 = r.CheckBreak()
		}
		if yyb3243 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3243-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3250 := z.EncBinary()
		_ = yym3250
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3251 := !z.EncBinary()
			yy2arr3251 := z.EncBasicHandle().StructToArray
			var yyq3251 [1]bool
			_, _, _ = yysep3251, yyq3251, yy2arr3251
			const yyr3251 bool = false
			var yynn3251 int
			if yyr3251 || yy2arr3251 {
				r.EncodeArrayStart(1)
			} else {
				yynn3251 = 1
				for _, b := range yyq3251 {
					if b {
						yynn3251++
					}
				}
				r.EncodeMapStart(yynn3251)
				yynn3251 = 0
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3253 := z.EncBinary()
					_ = yym3253
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3254 := z.EncBinary()
					_ = yym3254
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3255 := z.DecBinary()
	_ = yym3255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3256 := r.ContainerType()
		if yyct3256 == codecSelferValueTypeMap1234 {
			yyl3256 := r.ReadMapStart()
			if yyl3256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3256, d)
			}
		} else if yyct3256 == codecSelferValueTypeArray1234 {
			yyl3256 := r.ReadArrayStart()
			if yyl3256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3257Slc
	var yyhl3257 bool = l >= 0
	for yyj3257 := 0; ; yyj3257++ {
		if yyhl3257 {
			if yyj3257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3257Slc = r.DecodeBytes(yys3257Slc, true, true)
		yys3257 := string(yys3257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3257 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3258 := &x.Limits
				yym3259 := z.DecBinary()
				_ = yym3259
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3258), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3257)
		} // end switch yys3257
	} // end for yyj3257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3260 int
	var yyb3260 bool
	var yyhl3260 bool = l >= 0
	yyj3260++
	if yyhl3260 {
		yyb3260 = yyj3260 > l
	} else {
		yyb3260 = r.CheckBreak()
	}
	if yyb3260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3261 := &x.Limits
		yym3262 := z.DecBinary()
		_ = yym3262
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3261), d)
		}
	}
	for {
		yyj3260++
		if yyhl3260 {
			yyb3260 = yyj3260 > l
		} else {
			yyb3260 = r.CheckBreak()
		}
		if yyb3260 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3260-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3263 := z.EncBinary()
		_ = yym3263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3264 := !z.EncBinary()
			yy2arr3264 := z.EncBasicHandle().StructToArray
			var yyq3264 [4]bool
			_, _, _ = yysep3264, yyq3264, yy2arr3264
			const yyr3264 bool = false
			yyq3264[0] = x.Kind != ""
			yyq3264[1] = x.APIVersion != ""
			yyq3264[2] = true
			yyq3264[3] = true
			var yynn3264 int
			if yyr3264 || yy2arr3264 {
				r.EncodeArrayStart(4)
			} else {
				yynn3264 = 0
				for _, b := range yyq3264 {
					if b {
						yynn3264++
					}
				}
				r.EncodeMapStart(yynn3264)
				yynn3264 = 0
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3264[0] {
					yym3266 := z.EncBinary()
					_ = yym3266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3264[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3267 := z.EncBinary()
					_ = yym3267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3264[1] {
					yym3269 := z.EncBinary()
					_ = yym3269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3264[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3270 := z.EncBinary()
					_ = yym3270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3264[2] {
					yy3272 := &x.ObjectMeta
					yy3272.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3264[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3273 := &x.ObjectMeta
					yy3273.CodecEncodeSelf(e)
				}
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3264[3] {
					yy3275 := &x.Spec
					yy3275.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3264[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3276 := &x.Spec
					yy3276.CodecEncodeSelf(e)
				}
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3277 := z.DecBinary()
	_ = yym3277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3278 := r.ContainerType()
		if yyct3278 == codecSelferValueTypeMap1234 {
			yyl3278 := r.ReadMapStart()
			if yyl3278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3278, d)
			}
		} else if yyct3278 == codecSelferValueTypeArray1234 {
			yyl3278 := r.ReadArrayStart()
			if yyl3278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3279Slc
	var yyhl3279 bool = l >= 0
	for yyj3279 := 0; ; yyj3279++ {
		if yyhl3279 {
			if yyj3279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3279Slc = r.DecodeBytes(yys3279Slc, true, true)
		yys3279 := string(yys3279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3279 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3282 := &x.ObjectMeta
				yyv3282.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3283 := &x.Spec
				yyv3283.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3279)
		} // end switch yys3279
	} // end for yyj3279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3284 int
	var yyb3284 bool
	var yyhl3284 bool = l >= 0
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3287 := &x.ObjectMeta
		yyv3287.CodecDecodeSelf(d)
	}
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3288 := &x.Spec
		yyv3288.CodecDecodeSelf(d)
	}
	for {
		yyj3284++
		if yyhl3284 {
			yyb3284 = yyj3284 > l
		} else {
			yyb3284 = r.CheckBreak()
		}
		if yyb3284 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3284-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3289 := z.EncBinary()
		_ = yym3289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3290 := !z.EncBinary()
			yy2arr3290 := z.EncBasicHandle().StructToArray
			var yyq3290 [4]bool
			_, _, _ = yysep3290, yyq3290, yy2arr3290
			const yyr3290 bool = false
			yyq3290[0] = x.Kind != ""
			yyq3290[1] = x.APIVersion != ""
			yyq3290[2] = true
			var yynn3290 int
			if yyr3290 || yy2arr3290 {
				r.EncodeArrayStart(4)
			} else {
				yynn3290 = 1
				for _, b := range yyq3290 {
					if b {
						yynn3290++
					}
				}
				r.EncodeMapStart(yynn3290)
				yynn3290 = 0
			}
			if yyr3290 || yy2arr3290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3290[0] {
					yym3292 := z.EncBinary()
					_ = yym3292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3290[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3293 := z.EncBinary()
					_ = yym3293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3290 || yy2arr3290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3290[1] {
					yym3295 := z.EncBinary()
					_ = yym3295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3290[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3290 || yy2arr3290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3290[2] {
					yy3298 := &x.ListMeta
					yym3299 := z.EncBinary()
					_ = yym3299
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3298) {
					} else {
						z.EncFallback(yy3298)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3290[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3300 := &x.ListMeta
					yym3301 := z.EncBinary()
					_ = yym3301
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3300) {
					} else {
						z.EncFallback(yy3300)
					}
				}
			}
			if yyr3290 || yy2arr3290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3303 := z.EncBinary()
					_ = yym3303
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3290 || yy2arr3290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3305 := z.DecBinary()
	_ = yym3305
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3306 := r.ContainerType()
		if yyct3306 == codecSelferValueTypeMap1234 {
			yyl3306 := r.ReadMapStart()
			if yyl3306 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3306, d)
			}
		} else if yyct3306 == codecSelferValueTypeArray1234 {
			yyl3306 := r.ReadArrayStart()
			if yyl3306 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3306, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3307Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3307Slc
	var yyhl3307 bool = l >= 0
	for yyj3307 := 0; ; yyj3307++ {
		if yyhl3307 {
			if yyj3307 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3307Slc = r.DecodeBytes(yys3307Slc, true, true)
		yys3307 := string(yys3307Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3307 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3310 := &x.ListMeta
				yym3311 := z.DecBinary()
				_ = yym3311
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3310) {
				} else {
					z.DecFallback(yyv3310, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3312 := &x.Items
				yym3313 := z.DecBinary()
				_ = yym3313
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3312), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3307)
		} // end switch yys3307
	} // end for yyj3307
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3314 int
	var yyb3314 bool
	var yyhl3314 bool = l >= 0
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3317 := &x.ListMeta
		yym3318 := z.DecBinary()
		_ = yym3318
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3317) {
		} else {
			z.DecFallback(yyv3317, false)
		}
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3319 := &x.Items
		yym3320 := z.DecBinary()
		_ = yym3320
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3319), d)
		}
	}
	for {
		yyj3314++
		if yyhl3314 {
			yyb3314 = yyj3314 > l
		} else {
			yyb3314 = r.CheckBreak()
		}
		if yyb3314 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3314-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3321 := z.EncBinary()
		_ = yym3321
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3322 := !z.EncBinary()
			yy2arr3322 := z.EncBasicHandle().StructToArray
			var yyq3322 [1]bool
			_, _, _ = yysep3322, yyq3322, yy2arr3322
			const yyr3322 bool = false
			yyq3322[0] = len(x.Hard) != 0
			var yynn3322 int
			if yyr3322 || yy2arr3322 {
				r.EncodeArrayStart(1)
			} else {
				yynn3322 = 0
				for _, b := range yyq3322 {
					if b {
						yynn3322++
					}
				}
				r.EncodeMapStart(yynn3322)
				yynn3322 = 0
			}
			if yyr3322 || yy2arr3322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3322[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3322[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3322 || yy2arr3322 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3324 := z.DecBinary()
	_ = yym3324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3325 := r.ContainerType()
		if yyct3325 == codecSelferValueTypeMap1234 {
			yyl3325 := r.ReadMapStart()
			if yyl3325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3325, d)
			}
		} else if yyct3325 == codecSelferValueTypeArray1234 {
			yyl3325 := r.ReadArrayStart()
			if yyl3325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3326Slc
	var yyhl3326 bool = l >= 0
	for yyj3326 := 0; ; yyj3326++ {
		if yyhl3326 {
			if yyj3326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3326Slc = r.DecodeBytes(yys3326Slc, true, true)
		yys3326 := string(yys3326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3326 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3327 := &x.Hard
				yyv3327.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3326)
		} // end switch yys3326
	} // end for yyj3326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3328 int
	var yyb3328 bool
	var yyhl3328 bool = l >= 0
	yyj3328++
	if yyhl3328 {
		yyb3328 = yyj3328 > l
	} else {
		yyb3328 = r.CheckBreak()
	}
	if yyb3328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3329 := &x.Hard
		yyv3329.CodecDecodeSelf(d)
	}
	for {
		yyj3328++
		if yyhl3328 {
			yyb3328 = yyj3328 > l
		} else {
			yyb3328 = r.CheckBreak()
		}
		if yyb3328 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3328-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3330 := z.EncBinary()
		_ = yym3330
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3331 := !z.EncBinary()
			yy2arr3331 := z.EncBasicHandle().StructToArray
			var yyq3331 [2]bool
			_, _, _ = yysep3331, yyq3331, yy2arr3331
			const yyr3331 bool = false
			yyq3331[0] = len(x.Hard) != 0
			yyq3331[1] = len(x.Used) != 0
			var yynn3331 int
			if yyr3331 || yy2arr3331 {
				r.EncodeArrayStart(2)
			} else {
				yynn3331 = 0
				for _, b := range yyq3331 {
					if b {
						yynn3331++
					}
				}
				r.EncodeMapStart(yynn3331)
				yynn3331 = 0
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3331[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3331[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3331[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3331[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3334 := z.DecBinary()
	_ = yym3334
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3335 := r.ContainerType()
		if yyct3335 == codecSelferValueTypeMap1234 {
			yyl3335 := r.ReadMapStart()
			if yyl3335 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3335, d)
			}
		} else if yyct3335 == codecSelferValueTypeArray1234 {
			yyl3335 := r.ReadArrayStart()
			if yyl3335 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3335, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3336Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3336Slc
	var yyhl3336 bool = l >= 0
	for yyj3336 := 0; ; yyj3336++ {
		if yyhl3336 {
			if yyj3336 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3336Slc = r.DecodeBytes(yys3336Slc, true, true)
		yys3336 := string(yys3336Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3336 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3337 := &x.Hard
				yyv3337.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3338 := &x.Used
				yyv3338.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3336)
		} // end switch yys3336
	} // end for yyj3336
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3339 int
	var yyb3339 bool
	var yyhl3339 bool = l >= 0
	yyj3339++
	if yyhl3339 {
		yyb3339 = yyj3339 > l
	} else {
		yyb3339 = r.CheckBreak()
	}
	if yyb3339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3340 := &x.Hard
		yyv3340.CodecDecodeSelf(d)
	}
	yyj3339++
	if yyhl3339 {
		yyb3339 = yyj3339 > l
	} else {
		yyb3339 = r.CheckBreak()
	}
	if yyb3339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3341 := &x.Used
		yyv3341.CodecDecodeSelf(d)
	}
	for {
		yyj3339++
		if yyhl3339 {
			yyb3339 = yyj3339 > l
		} else {
			yyb3339 = r.CheckBreak()
		}
		if yyb3339 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3339-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3342 := z.EncBinary()
		_ = yym3342
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3343 := !z.EncBinary()
			yy2arr3343 := z.EncBasicHandle().StructToArray
			var yyq3343 [5]bool
			_, _, _ = yysep3343, yyq3343, yy2arr3343
			const yyr3343 bool = false
			yyq3343[0] = x.Kind != ""
			yyq3343[1] = x.APIVersion != ""
			yyq3343[2] = true
			yyq3343[3] = true
			yyq3343[4] = true
			var yynn3343 int
			if yyr3343 || yy2arr3343 {
				r.EncodeArrayStart(5)
			} else {
				yynn3343 = 0
				for _, b := range yyq3343 {
					if b {
						yynn3343++
					}
				}
				r.EncodeMapStart(yynn3343)
				yynn3343 = 0
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3343[0] {
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3343[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3346 := z.EncBinary()
					_ = yym3346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3343[1] {
					yym3348 := z.EncBinary()
					_ = yym3348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3343[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3349 := z.EncBinary()
					_ = yym3349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3343[2] {
					yy3351 := &x.ObjectMeta
					yy3351.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3343[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3352 := &x.ObjectMeta
					yy3352.CodecEncodeSelf(e)
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3343[3] {
					yy3354 := &x.Spec
					yy3354.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3343[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3355 := &x.Spec
					yy3355.CodecEncodeSelf(e)
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3343[4] {
					yy3357 := &x.Status
					yy3357.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3343[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3358 := &x.Status
					yy3358.CodecEncodeSelf(e)
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3359 := z.DecBinary()
	_ = yym3359
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3360 := r.ContainerType()
		if yyct3360 == codecSelferValueTypeMap1234 {
			yyl3360 := r.ReadMapStart()
			if yyl3360 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3360, d)
			}
		} else if yyct3360 == codecSelferValueTypeArray1234 {
			yyl3360 := r.ReadArrayStart()
			if yyl3360 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3360, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3361Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3361Slc
	var yyhl3361 bool = l >= 0
	for yyj3361 := 0; ; yyj3361++ {
		if yyhl3361 {
			if yyj3361 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3361Slc = r.DecodeBytes(yys3361Slc, true, true)
		yys3361 := string(yys3361Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3361 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3364 := &x.ObjectMeta
				yyv3364.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3365 := &x.Spec
				yyv3365.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3366 := &x.Status
				yyv3366.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3361)
		} // end switch yys3361
	} // end for yyj3361
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3367 int
	var yyb3367 bool
	var yyhl3367 bool = l >= 0
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3370 := &x.ObjectMeta
		yyv3370.CodecDecodeSelf(d)
	}
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3371 := &x.Spec
		yyv3371.CodecDecodeSelf(d)
	}
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3372 := &x.Status
		yyv3372.CodecDecodeSelf(d)
	}
	for {
		yyj3367++
		if yyhl3367 {
			yyb3367 = yyj3367 > l
		} else {
			yyb3367 = r.CheckBreak()
		}
		if yyb3367 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3367-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3373 := z.EncBinary()
		_ = yym3373
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3374 := !z.EncBinary()
			yy2arr3374 := z.EncBasicHandle().StructToArray
			var yyq3374 [4]bool
			_, _, _ = yysep3374, yyq3374, yy2arr3374
			const yyr3374 bool = false
			yyq3374[0] = x.Kind != ""
			yyq3374[1] = x.APIVersion != ""
			yyq3374[2] = true
			var yynn3374 int
			if yyr3374 || yy2arr3374 {
				r.EncodeArrayStart(4)
			} else {
				yynn3374 = 1
				for _, b := range yyq3374 {
					if b {
						yynn3374++
					}
				}
				r.EncodeMapStart(yynn3374)
				yynn3374 = 0
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3374[0] {
					yym3376 := z.EncBinary()
					_ = yym3376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3374[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3377 := z.EncBinary()
					_ = yym3377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3374[1] {
					yym3379 := z.EncBinary()
					_ = yym3379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3374[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3380 := z.EncBinary()
					_ = yym3380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3374[2] {
					yy3382 := &x.ListMeta
					yym3383 := z.EncBinary()
					_ = yym3383
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3382) {
					} else {
						z.EncFallback(yy3382)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3374[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3384 := &x.ListMeta
					yym3385 := z.EncBinary()
					_ = yym3385
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3384) {
					} else {
						z.EncFallback(yy3384)
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3387 := z.EncBinary()
					_ = yym3387
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3388 := z.EncBinary()
					_ = yym3388
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3389 := z.DecBinary()
	_ = yym3389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3390 := r.ContainerType()
		if yyct3390 == codecSelferValueTypeMap1234 {
			yyl3390 := r.ReadMapStart()
			if yyl3390 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3390, d)
			}
		} else if yyct3390 == codecSelferValueTypeArray1234 {
			yyl3390 := r.ReadArrayStart()
			if yyl3390 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3390, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3391Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3391Slc
	var yyhl3391 bool = l >= 0
	for yyj3391 := 0; ; yyj3391++ {
		if yyhl3391 {
			if yyj3391 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3391Slc = r.DecodeBytes(yys3391Slc, true, true)
		yys3391 := string(yys3391Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3391 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3394 := &x.ListMeta
				yym3395 := z.DecBinary()
				_ = yym3395
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3394) {
				} else {
					z.DecFallback(yyv3394, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3396 := &x.Items
				yym3397 := z.DecBinary()
				_ = yym3397
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3396), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3391)
		} // end switch yys3391
	} // end for yyj3391
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3398 int
	var yyb3398 bool
	var yyhl3398 bool = l >= 0
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3401 := &x.ListMeta
		yym3402 := z.DecBinary()
		_ = yym3402
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3401) {
		} else {
			z.DecFallback(yyv3401, false)
		}
	}
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3403 := &x.Items
		yym3404 := z.DecBinary()
		_ = yym3404
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3403), d)
		}
	}
	for {
		yyj3398++
		if yyhl3398 {
			yyb3398 = yyj3398 > l
		} else {
			yyb3398 = r.CheckBreak()
		}
		if yyb3398 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3398-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3405 := z.EncBinary()
		_ = yym3405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3406 := !z.EncBinary()
			yy2arr3406 := z.EncBasicHandle().StructToArray
			var yyq3406 [5]bool
			_, _, _ = yysep3406, yyq3406, yy2arr3406
			const yyr3406 bool = false
			yyq3406[0] = x.Kind != ""
			yyq3406[1] = x.APIVersion != ""
			yyq3406[2] = true
			yyq3406[3] = len(x.Data) != 0
			yyq3406[4] = x.Type != ""
			var yynn3406 int
			if yyr3406 || yy2arr3406 {
				r.EncodeArrayStart(5)
			} else {
				yynn3406 = 0
				for _, b := range yyq3406 {
					if b {
						yynn3406++
					}
				}
				r.EncodeMapStart(yynn3406)
				yynn3406 = 0
			}
			if yyr3406 || yy2arr3406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3406[0] {
					yym3408 := z.EncBinary()
					_ = yym3408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3409 := z.EncBinary()
					_ = yym3409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3406 || yy2arr3406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3406[1] {
					yym3411 := z.EncBinary()
					_ = yym3411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3406[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3412 := z.EncBinary()
					_ = yym3412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3406 || yy2arr3406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3406[2] {
					yy3414 := &x.ObjectMeta
					yy3414.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3406[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3415 := &x.ObjectMeta
					yy3415.CodecEncodeSelf(e)
				}
			}
			if yyr3406 || yy2arr3406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3406[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3417 := z.EncBinary()
						_ = yym3417
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3406[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3418 := z.EncBinary()
						_ = yym3418
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3406 || yy2arr3406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3406[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3406[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3406 || yy2arr3406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3420 := z.DecBinary()
	_ = yym3420
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3421 := r.ContainerType()
		if yyct3421 == codecSelferValueTypeMap1234 {
			yyl3421 := r.ReadMapStart()
			if yyl3421 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3421, d)
			}
		} else if yyct3421 == codecSelferValueTypeArray1234 {
			yyl3421 := r.ReadArrayStart()
			if yyl3421 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3421, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3422Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3422Slc
	var yyhl3422 bool = l >= 0
	for yyj3422 := 0; ; yyj3422++ {
		if yyhl3422 {
			if yyj3422 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3422Slc = r.DecodeBytes(yys3422Slc, true, true)
		yys3422 := string(yys3422Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3422 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3425 := &x.ObjectMeta
				yyv3425.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3426 := &x.Data
				yym3427 := z.DecBinary()
				_ = yym3427
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3426), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3422)
		} // end switch yys3422
	} // end for yyj3422
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3429 int
	var yyb3429 bool
	var yyhl3429 bool = l >= 0
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3432 := &x.ObjectMeta
		yyv3432.CodecDecodeSelf(d)
	}
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3433 := &x.Data
		yym3434 := z.DecBinary()
		_ = yym3434
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3433), d)
		}
	}
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3429++
		if yyhl3429 {
			yyb3429 = yyj3429 > l
		} else {
			yyb3429 = r.CheckBreak()
		}
		if yyb3429 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3429-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3436 := z.EncBinary()
	_ = yym3436
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3437 := z.DecBinary()
	_ = yym3437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3438 := z.EncBinary()
		_ = yym3438
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3439 := !z.EncBinary()
			yy2arr3439 := z.EncBasicHandle().StructToArray
			var yyq3439 [4]bool
			_, _, _ = yysep3439, yyq3439, yy2arr3439
			const yyr3439 bool = false
			yyq3439[0] = x.Kind != ""
			yyq3439[1] = x.APIVersion != ""
			yyq3439[2] = true
			var yynn3439 int
			if yyr3439 || yy2arr3439 {
				r.EncodeArrayStart(4)
			} else {
				yynn3439 = 1
				for _, b := range yyq3439 {
					if b {
						yynn3439++
					}
				}
				r.EncodeMapStart(yynn3439)
				yynn3439 = 0
			}
			if yyr3439 || yy2arr3439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3439[0] {
					yym3441 := z.EncBinary()
					_ = yym3441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3439[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3442 := z.EncBinary()
					_ = yym3442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3439 || yy2arr3439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3439[1] {
					yym3444 := z.EncBinary()
					_ = yym3444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3439[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3445 := z.EncBinary()
					_ = yym3445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3439 || yy2arr3439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3439[2] {
					yy3447 := &x.ListMeta
					yym3448 := z.EncBinary()
					_ = yym3448
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3447) {
					} else {
						z.EncFallback(yy3447)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3439[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3449 := &x.ListMeta
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3449) {
					} else {
						z.EncFallback(yy3449)
					}
				}
			}
			if yyr3439 || yy2arr3439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3452 := z.EncBinary()
					_ = yym3452
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3453 := z.EncBinary()
					_ = yym3453
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3439 || yy2arr3439 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3454 := z.DecBinary()
	_ = yym3454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3455 := r.ContainerType()
		if yyct3455 == codecSelferValueTypeMap1234 {
			yyl3455 := r.ReadMapStart()
			if yyl3455 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3455, d)
			}
		} else if yyct3455 == codecSelferValueTypeArray1234 {
			yyl3455 := r.ReadArrayStart()
			if yyl3455 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3455, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3456Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3456Slc
	var yyhl3456 bool = l >= 0
	for yyj3456 := 0; ; yyj3456++ {
		if yyhl3456 {
			if yyj3456 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3456Slc = r.DecodeBytes(yys3456Slc, true, true)
		yys3456 := string(yys3456Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3456 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3459 := &x.ListMeta
				yym3460 := z.DecBinary()
				_ = yym3460
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3459) {
				} else {
					z.DecFallback(yyv3459, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3461 := &x.Items
				yym3462 := z.DecBinary()
				_ = yym3462
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3461), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3456)
		} // end switch yys3456
	} // end for yyj3456
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3463 int
	var yyb3463 bool
	var yyhl3463 bool = l >= 0
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3466 := &x.ListMeta
		yym3467 := z.DecBinary()
		_ = yym3467
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3466) {
		} else {
			z.DecFallback(yyv3466, false)
		}
	}
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3468 := &x.Items
		yym3469 := z.DecBinary()
		_ = yym3469
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3468), d)
		}
	}
	for {
		yyj3463++
		if yyhl3463 {
			yyb3463 = yyj3463 > l
		} else {
			yyb3463 = r.CheckBreak()
		}
		if yyb3463 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3463-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3470 := z.EncBinary()
	_ = yym3470
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3471 := z.DecBinary()
	_ = yym3471
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3472 := z.EncBinary()
	_ = yym3472
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3473 := z.DecBinary()
	_ = yym3473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3474 := z.EncBinary()
		_ = yym3474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3475 := !z.EncBinary()
			yy2arr3475 := z.EncBasicHandle().StructToArray
			var yyq3475 [4]bool
			_, _, _ = yysep3475, yyq3475, yy2arr3475
			const yyr3475 bool = false
			yyq3475[2] = x.Message != ""
			yyq3475[3] = x.Error != ""
			var yynn3475 int
			if yyr3475 || yy2arr3475 {
				r.EncodeArrayStart(4)
			} else {
				yynn3475 = 2
				for _, b := range yyq3475 {
					if b {
						yynn3475++
					}
				}
				r.EncodeMapStart(yynn3475)
				yynn3475 = 0
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3475[2] {
					yym3479 := z.EncBinary()
					_ = yym3479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3475[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3480 := z.EncBinary()
					_ = yym3480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3475[3] {
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3475[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3483 := z.EncBinary()
					_ = yym3483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3475 || yy2arr3475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3484 := z.DecBinary()
	_ = yym3484
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3485 := r.ContainerType()
		if yyct3485 == codecSelferValueTypeMap1234 {
			yyl3485 := r.ReadMapStart()
			if yyl3485 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3485, d)
			}
		} else if yyct3485 == codecSelferValueTypeArray1234 {
			yyl3485 := r.ReadArrayStart()
			if yyl3485 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3485, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3486Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3486Slc
	var yyhl3486 bool = l >= 0
	for yyj3486 := 0; ; yyj3486++ {
		if yyhl3486 {
			if yyj3486 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3486Slc = r.DecodeBytes(yys3486Slc, true, true)
		yys3486 := string(yys3486Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3486 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3486)
		} // end switch yys3486
	} // end for yyj3486
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3491 int
	var yyb3491 bool
	var yyhl3491 bool = l >= 0
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3491++
		if yyhl3491 {
			yyb3491 = yyj3491 > l
		} else {
			yyb3491 = r.CheckBreak()
		}
		if yyb3491 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3491-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3496 := z.EncBinary()
		_ = yym3496
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3497 := !z.EncBinary()
			yy2arr3497 := z.EncBasicHandle().StructToArray
			var yyq3497 [4]bool
			_, _, _ = yysep3497, yyq3497, yy2arr3497
			const yyr3497 bool = false
			yyq3497[0] = x.Kind != ""
			yyq3497[1] = x.APIVersion != ""
			yyq3497[2] = true
			yyq3497[3] = len(x.Conditions) != 0
			var yynn3497 int
			if yyr3497 || yy2arr3497 {
				r.EncodeArrayStart(4)
			} else {
				yynn3497 = 0
				for _, b := range yyq3497 {
					if b {
						yynn3497++
					}
				}
				r.EncodeMapStart(yynn3497)
				yynn3497 = 0
			}
			if yyr3497 || yy2arr3497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3497[0] {
					yym3499 := z.EncBinary()
					_ = yym3499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3497[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3500 := z.EncBinary()
					_ = yym3500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3497 || yy2arr3497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3497[1] {
					yym3502 := z.EncBinary()
					_ = yym3502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3497[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3503 := z.EncBinary()
					_ = yym3503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3497 || yy2arr3497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3497[2] {
					yy3505 := &x.ObjectMeta
					yy3505.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3497[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3506 := &x.ObjectMeta
					yy3506.CodecEncodeSelf(e)
				}
			}
			if yyr3497 || yy2arr3497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3497[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3508 := z.EncBinary()
						_ = yym3508
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3497[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3509 := z.EncBinary()
						_ = yym3509
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3497 || yy2arr3497 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3510 := z.DecBinary()
	_ = yym3510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3511 := r.ContainerType()
		if yyct3511 == codecSelferValueTypeMap1234 {
			yyl3511 := r.ReadMapStart()
			if yyl3511 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3511, d)
			}
		} else if yyct3511 == codecSelferValueTypeArray1234 {
			yyl3511 := r.ReadArrayStart()
			if yyl3511 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3511, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3512Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3512Slc
	var yyhl3512 bool = l >= 0
	for yyj3512 := 0; ; yyj3512++ {
		if yyhl3512 {
			if yyj3512 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3512Slc = r.DecodeBytes(yys3512Slc, true, true)
		yys3512 := string(yys3512Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3512 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3515 := &x.ObjectMeta
				yyv3515.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3516 := &x.Conditions
				yym3517 := z.DecBinary()
				_ = yym3517
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3516), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3512)
		} // end switch yys3512
	} // end for yyj3512
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3518 int
	var yyb3518 bool
	var yyhl3518 bool = l >= 0
	yyj3518++
	if yyhl3518 {
		yyb3518 = yyj3518 > l
	} else {
		yyb3518 = r.CheckBreak()
	}
	if yyb3518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3518++
	if yyhl3518 {
		yyb3518 = yyj3518 > l
	} else {
		yyb3518 = r.CheckBreak()
	}
	if yyb3518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3518++
	if yyhl3518 {
		yyb3518 = yyj3518 > l
	} else {
		yyb3518 = r.CheckBreak()
	}
	if yyb3518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3521 := &x.ObjectMeta
		yyv3521.CodecDecodeSelf(d)
	}
	yyj3518++
	if yyhl3518 {
		yyb3518 = yyj3518 > l
	} else {
		yyb3518 = r.CheckBreak()
	}
	if yyb3518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3522 := &x.Conditions
		yym3523 := z.DecBinary()
		_ = yym3523
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3522), d)
		}
	}
	for {
		yyj3518++
		if yyhl3518 {
			yyb3518 = yyj3518 > l
		} else {
			yyb3518 = r.CheckBreak()
		}
		if yyb3518 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3518-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3524 := z.EncBinary()
		_ = yym3524
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3525 := !z.EncBinary()
			yy2arr3525 := z.EncBasicHandle().StructToArray
			var yyq3525 [4]bool
			_, _, _ = yysep3525, yyq3525, yy2arr3525
			const yyr3525 bool = false
			yyq3525[0] = x.Kind != ""
			yyq3525[1] = x.APIVersion != ""
			yyq3525[2] = true
			var yynn3525 int
			if yyr3525 || yy2arr3525 {
				r.EncodeArrayStart(4)
			} else {
				yynn3525 = 1
				for _, b := range yyq3525 {
					if b {
						yynn3525++
					}
				}
				r.EncodeMapStart(yynn3525)
				yynn3525 = 0
			}
			if yyr3525 || yy2arr3525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3525[0] {
					yym3527 := z.EncBinary()
					_ = yym3527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3525[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3528 := z.EncBinary()
					_ = yym3528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3525 || yy2arr3525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3525[1] {
					yym3530 := z.EncBinary()
					_ = yym3530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3525[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3531 := z.EncBinary()
					_ = yym3531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3525 || yy2arr3525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3525[2] {
					yy3533 := &x.ListMeta
					yym3534 := z.EncBinary()
					_ = yym3534
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3533) {
					} else {
						z.EncFallback(yy3533)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3525[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3535 := &x.ListMeta
					yym3536 := z.EncBinary()
					_ = yym3536
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3535) {
					} else {
						z.EncFallback(yy3535)
					}
				}
			}
			if yyr3525 || yy2arr3525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3538 := z.EncBinary()
					_ = yym3538
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3539 := z.EncBinary()
					_ = yym3539
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3525 || yy2arr3525 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3540 := z.DecBinary()
	_ = yym3540
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3541 := r.ContainerType()
		if yyct3541 == codecSelferValueTypeMap1234 {
			yyl3541 := r.ReadMapStart()
			if yyl3541 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3541, d)
			}
		} else if yyct3541 == codecSelferValueTypeArray1234 {
			yyl3541 := r.ReadArrayStart()
			if yyl3541 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3541, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3542Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3542Slc
	var yyhl3542 bool = l >= 0
	for yyj3542 := 0; ; yyj3542++ {
		if yyhl3542 {
			if yyj3542 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3542Slc = r.DecodeBytes(yys3542Slc, true, true)
		yys3542 := string(yys3542Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3542 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3545 := &x.ListMeta
				yym3546 := z.DecBinary()
				_ = yym3546
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3545) {
				} else {
					z.DecFallback(yyv3545, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3547 := &x.Items
				yym3548 := z.DecBinary()
				_ = yym3548
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3547), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3542)
		} // end switch yys3542
	} // end for yyj3542
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3549 int
	var yyb3549 bool
	var yyhl3549 bool = l >= 0
	yyj3549++
	if yyhl3549 {
		yyb3549 = yyj3549 > l
	} else {
		yyb3549 = r.CheckBreak()
	}
	if yyb3549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3549++
	if yyhl3549 {
		yyb3549 = yyj3549 > l
	} else {
		yyb3549 = r.CheckBreak()
	}
	if yyb3549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3549++
	if yyhl3549 {
		yyb3549 = yyj3549 > l
	} else {
		yyb3549 = r.CheckBreak()
	}
	if yyb3549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3552 := &x.ListMeta
		yym3553 := z.DecBinary()
		_ = yym3553
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3552) {
		} else {
			z.DecFallback(yyv3552, false)
		}
	}
	yyj3549++
	if yyhl3549 {
		yyb3549 = yyj3549 > l
	} else {
		yyb3549 = r.CheckBreak()
	}
	if yyb3549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3554 := &x.Items
		yym3555 := z.DecBinary()
		_ = yym3555
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3554), d)
		}
	}
	for {
		yyj3549++
		if yyhl3549 {
			yyb3549 = yyj3549 > l
		} else {
			yyb3549 = r.CheckBreak()
		}
		if yyb3549 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3549-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3556 := z.EncBinary()
		_ = yym3556
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3557 := !z.EncBinary()
			yy2arr3557 := z.EncBasicHandle().StructToArray
			var yyq3557 [5]bool
			_, _, _ = yysep3557, yyq3557, yy2arr3557
			const yyr3557 bool = false
			yyq3557[0] = x.Capabilities != nil
			yyq3557[1] = x.Privileged != nil
			yyq3557[2] = x.SELinuxOptions != nil
			yyq3557[3] = x.RunAsUser != nil
			yyq3557[4] = x.RunAsNonRoot != nil
			var yynn3557 int
			if yyr3557 || yy2arr3557 {
				r.EncodeArrayStart(5)
			} else {
				yynn3557 = 0
				for _, b := range yyq3557 {
					if b {
						yynn3557++
					}
				}
				r.EncodeMapStart(yynn3557)
				yynn3557 = 0
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3557[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3557[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3557[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3560 := *x.Privileged
						yym3561 := z.EncBinary()
						_ = yym3561
						if false {
						} else {
							r.EncodeBool(bool(yy3560))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3557[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3562 := *x.Privileged
						yym3563 := z.EncBinary()
						_ = yym3563
						if false {
						} else {
							r.EncodeBool(bool(yy3562))
						}
					}
				}
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3557[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3557[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3557[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3566 := *x.RunAsUser
						yym3567 := z.EncBinary()
						_ = yym3567
						if false {
						} else {
							r.EncodeInt(int64(yy3566))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3557[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3568 := *x.RunAsUser
						yym3569 := z.EncBinary()
						_ = yym3569
						if false {
						} else {
							r.EncodeInt(int64(yy3568))
						}
					}
				}
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3557[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3571 := *x.RunAsNonRoot
						yym3572 := z.EncBinary()
						_ = yym3572
						if false {
						} else {
							r.EncodeBool(bool(yy3571))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3557[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3573 := *x.RunAsNonRoot
						yym3574 := z.EncBinary()
						_ = yym3574
						if false {
						} else {
							r.EncodeBool(bool(yy3573))
						}
					}
				}
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3575 := z.DecBinary()
	_ = yym3575
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3576 := r.ContainerType()
		if yyct3576 == codecSelferValueTypeMap1234 {
			yyl3576 := r.ReadMapStart()
			if yyl3576 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3576, d)
			}
		} else if yyct3576 == codecSelferValueTypeArray1234 {
			yyl3576 := r.ReadArrayStart()
			if yyl3576 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3576, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3577Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3577Slc
	var yyhl3577 bool = l >= 0
	for yyj3577 := 0; ; yyj3577++ {
		if yyhl3577 {
			if yyj3577 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3577Slc = r.DecodeBytes(yys3577Slc, true, true)
		yys3577 := string(yys3577Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3577 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3580 := z.DecBinary()
				_ = yym3580
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3583 := z.DecBinary()
				_ = yym3583
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3585 := z.DecBinary()
				_ = yym3585
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3577)
		} // end switch yys3577
	} // end for yyj3577
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3586 int
	var yyb3586 bool
	var yyhl3586 bool = l >= 0
	yyj3586++
	if yyhl3586 {
		yyb3586 = yyj3586 > l
	} else {
		yyb3586 = r.CheckBreak()
	}
	if yyb3586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3586++
	if yyhl3586 {
		yyb3586 = yyj3586 > l
	} else {
		yyb3586 = r.CheckBreak()
	}
	if yyb3586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3589 := z.DecBinary()
		_ = yym3589
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3586++
	if yyhl3586 {
		yyb3586 = yyj3586 > l
	} else {
		yyb3586 = r.CheckBreak()
	}
	if yyb3586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3586++
	if yyhl3586 {
		yyb3586 = yyj3586 > l
	} else {
		yyb3586 = r.CheckBreak()
	}
	if yyb3586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3592 := z.DecBinary()
		_ = yym3592
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3586++
	if yyhl3586 {
		yyb3586 = yyj3586 > l
	} else {
		yyb3586 = r.CheckBreak()
	}
	if yyb3586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3594 := z.DecBinary()
		_ = yym3594
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3586++
		if yyhl3586 {
			yyb3586 = yyj3586 > l
		} else {
			yyb3586 = r.CheckBreak()
		}
		if yyb3586 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3586-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3595 := z.EncBinary()
		_ = yym3595
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3596 := !z.EncBinary()
			yy2arr3596 := z.EncBasicHandle().StructToArray
			var yyq3596 [4]bool
			_, _, _ = yysep3596, yyq3596, yy2arr3596
			const yyr3596 bool = false
			yyq3596[0] = x.User != ""
			yyq3596[1] = x.Role != ""
			yyq3596[2] = x.Type != ""
			yyq3596[3] = x.Level != ""
			var yynn3596 int
			if yyr3596 || yy2arr3596 {
				r.EncodeArrayStart(4)
			} else {
				yynn3596 = 0
				for _, b := range yyq3596 {
					if b {
						yynn3596++
					}
				}
				r.EncodeMapStart(yynn3596)
				yynn3596 = 0
			}
			if yyr3596 || yy2arr3596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3596[0] {
					yym3598 := z.EncBinary()
					_ = yym3598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3596[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3599 := z.EncBinary()
					_ = yym3599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3596 || yy2arr3596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3596[1] {
					yym3601 := z.EncBinary()
					_ = yym3601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3596[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3602 := z.EncBinary()
					_ = yym3602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3596 || yy2arr3596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3596[2] {
					yym3604 := z.EncBinary()
					_ = yym3604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3596[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3605 := z.EncBinary()
					_ = yym3605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3596 || yy2arr3596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3596[3] {
					yym3607 := z.EncBinary()
					_ = yym3607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3596[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3608 := z.EncBinary()
					_ = yym3608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3596 || yy2arr3596 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3609 := z.DecBinary()
	_ = yym3609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3610 := r.ContainerType()
		if yyct3610 == codecSelferValueTypeMap1234 {
			yyl3610 := r.ReadMapStart()
			if yyl3610 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3610, d)
			}
		} else if yyct3610 == codecSelferValueTypeArray1234 {
			yyl3610 := r.ReadArrayStart()
			if yyl3610 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3610, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3611Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3611Slc
	var yyhl3611 bool = l >= 0
	for yyj3611 := 0; ; yyj3611++ {
		if yyhl3611 {
			if yyj3611 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3611Slc = r.DecodeBytes(yys3611Slc, true, true)
		yys3611 := string(yys3611Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3611 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3611)
		} // end switch yys3611
	} // end for yyj3611
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3616 int
	var yyb3616 bool
	var yyhl3616 bool = l >= 0
	yyj3616++
	if yyhl3616 {
		yyb3616 = yyj3616 > l
	} else {
		yyb3616 = r.CheckBreak()
	}
	if yyb3616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3616++
	if yyhl3616 {
		yyb3616 = yyj3616 > l
	} else {
		yyb3616 = r.CheckBreak()
	}
	if yyb3616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3616++
	if yyhl3616 {
		yyb3616 = yyj3616 > l
	} else {
		yyb3616 = r.CheckBreak()
	}
	if yyb3616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3616++
	if yyhl3616 {
		yyb3616 = yyj3616 > l
	} else {
		yyb3616 = r.CheckBreak()
	}
	if yyb3616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3616++
		if yyhl3616 {
			yyb3616 = yyj3616 > l
		} else {
			yyb3616 = r.CheckBreak()
		}
		if yyb3616 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3616-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3621 := z.EncBinary()
		_ = yym3621
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3622 := !z.EncBinary()
			yy2arr3622 := z.EncBasicHandle().StructToArray
			var yyq3622 [5]bool
			_, _, _ = yysep3622, yyq3622, yy2arr3622
			const yyr3622 bool = false
			yyq3622[0] = x.Kind != ""
			yyq3622[1] = x.APIVersion != ""
			yyq3622[2] = true
			var yynn3622 int
			if yyr3622 || yy2arr3622 {
				r.EncodeArrayStart(5)
			} else {
				yynn3622 = 2
				for _, b := range yyq3622 {
					if b {
						yynn3622++
					}
				}
				r.EncodeMapStart(yynn3622)
				yynn3622 = 0
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[0] {
					yym3624 := z.EncBinary()
					_ = yym3624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3622[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3625 := z.EncBinary()
					_ = yym3625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[1] {
					yym3627 := z.EncBinary()
					_ = yym3627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3622[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3628 := z.EncBinary()
					_ = yym3628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[2] {
					yy3630 := &x.ObjectMeta
					yy3630.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3622[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3631 := &x.ObjectMeta
					yy3631.CodecEncodeSelf(e)
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3633 := z.EncBinary()
				_ = yym3633
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3634 := z.EncBinary()
				_ = yym3634
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3636 := z.EncBinary()
					_ = yym3636
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3637 := z.EncBinary()
					_ = yym3637
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3638 := z.DecBinary()
	_ = yym3638
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3639 := r.ContainerType()
		if yyct3639 == codecSelferValueTypeMap1234 {
			yyl3639 := r.ReadMapStart()
			if yyl3639 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3639, d)
			}
		} else if yyct3639 == codecSelferValueTypeArray1234 {
			yyl3639 := r.ReadArrayStart()
			if yyl3639 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3639, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3640Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3640Slc
	var yyhl3640 bool = l >= 0
	for yyj3640 := 0; ; yyj3640++ {
		if yyhl3640 {
			if yyj3640 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3640Slc = r.DecodeBytes(yys3640Slc, true, true)
		yys3640 := string(yys3640Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3640 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3643 := &x.ObjectMeta
				yyv3643.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3645 := &x.Data
				yym3646 := z.DecBinary()
				_ = yym3646
				if false {
				} else {
					*yyv3645 = r.DecodeBytes(*(*[]byte)(yyv3645), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3640)
		} // end switch yys3640
	} // end for yyj3640
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3647 int
	var yyb3647 bool
	var yyhl3647 bool = l >= 0
	yyj3647++
	if yyhl3647 {
		yyb3647 = yyj3647 > l
	} else {
		yyb3647 = r.CheckBreak()
	}
	if yyb3647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3647++
	if yyhl3647 {
		yyb3647 = yyj3647 > l
	} else {
		yyb3647 = r.CheckBreak()
	}
	if yyb3647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3647++
	if yyhl3647 {
		yyb3647 = yyj3647 > l
	} else {
		yyb3647 = r.CheckBreak()
	}
	if yyb3647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3650 := &x.ObjectMeta
		yyv3650.CodecDecodeSelf(d)
	}
	yyj3647++
	if yyhl3647 {
		yyb3647 = yyj3647 > l
	} else {
		yyb3647 = r.CheckBreak()
	}
	if yyb3647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3647++
	if yyhl3647 {
		yyb3647 = yyj3647 > l
	} else {
		yyb3647 = r.CheckBreak()
	}
	if yyb3647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3652 := &x.Data
		yym3653 := z.DecBinary()
		_ = yym3653
		if false {
		} else {
			*yyv3652 = r.DecodeBytes(*(*[]byte)(yyv3652), false, false)
		}
	}
	for {
		yyj3647++
		if yyhl3647 {
			yyb3647 = yyj3647 > l
		} else {
			yyb3647 = r.CheckBreak()
		}
		if yyb3647 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3647-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3654 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3654.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3655 := *v
	yyh3655, yyl3655 := z.DecSliceHelperStart()
	var yyc3655 bool
	if yyl3655 == 0 {
		if yyv3655 == nil {
			yyv3655 = []PersistentVolumeAccessMode{}
			yyc3655 = true
		} else if len(yyv3655) != 0 {
			yyv3655 = yyv3655[:0]
			yyc3655 = true
		}
	} else if yyl3655 > 0 {
		var yyrr3655, yyrl3655 int
		var yyrt3655 bool
		if yyl3655 > cap(yyv3655) {

			yyrl3655, yyrt3655 = z.DecInferLen(yyl3655, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3655 {
				if yyrl3655 <= cap(yyv3655) {
					yyv3655 = yyv3655[:yyrl3655]
				} else {
					yyv3655 = make([]PersistentVolumeAccessMode, yyrl3655)
				}
			} else {
				yyv3655 = make([]PersistentVolumeAccessMode, yyrl3655)
			}
			yyc3655 = true
			yyrr3655 = len(yyv3655)
		} else if yyl3655 != len(yyv3655) {
			yyv3655 = yyv3655[:yyl3655]
			yyc3655 = true
		}
		yyj3655 := 0
		for ; yyj3655 < yyrr3655; yyj3655++ {
			yyh3655.ElemContainerState(yyj3655)
			if r.TryDecodeAsNil() {
				yyv3655[yyj3655] = ""
			} else {
				yyv3655[yyj3655] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3655 {
			for ; yyj3655 < yyl3655; yyj3655++ {
				yyv3655 = append(yyv3655, "")
				yyh3655.ElemContainerState(yyj3655)
				if r.TryDecodeAsNil() {
					yyv3655[yyj3655] = ""
				} else {
					yyv3655[yyj3655] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3655 := 0
		for ; !r.CheckBreak(); yyj3655++ {

			if yyj3655 >= len(yyv3655) {
				yyv3655 = append(yyv3655, "") // var yyz3655 PersistentVolumeAccessMode
				yyc3655 = true
			}
			yyh3655.ElemContainerState(yyj3655)
			if yyj3655 < len(yyv3655) {
				if r.TryDecodeAsNil() {
					yyv3655[yyj3655] = ""
				} else {
					yyv3655[yyj3655] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3655 < len(yyv3655) {
			yyv3655 = yyv3655[:yyj3655]
			yyc3655 = true
		} else if yyj3655 == 0 && yyv3655 == nil {
			yyv3655 = []PersistentVolumeAccessMode{}
			yyc3655 = true
		}
	}
	yyh3655.End()
	if yyc3655 {
		*v = yyv3655
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3659 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3660 := &yyv3659
		yy3660.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3661 := *v
	yyh3661, yyl3661 := z.DecSliceHelperStart()
	var yyc3661 bool
	if yyl3661 == 0 {
		if yyv3661 == nil {
			yyv3661 = []PersistentVolume{}
			yyc3661 = true
		} else if len(yyv3661) != 0 {
			yyv3661 = yyv3661[:0]
			yyc3661 = true
		}
	} else if yyl3661 > 0 {
		var yyrr3661, yyrl3661 int
		var yyrt3661 bool
		if yyl3661 > cap(yyv3661) {

			yyrg3661 := len(yyv3661) > 0
			yyv23661 := yyv3661
			yyrl3661, yyrt3661 = z.DecInferLen(yyl3661, z.DecBasicHandle().MaxInitLen, 392)
			if yyrt3661 {
				if yyrl3661 <= cap(yyv3661) {
					yyv3661 = yyv3661[:yyrl3661]
				} else {
					yyv3661 = make([]PersistentVolume, yyrl3661)
				}
			} else {
				yyv3661 = make([]PersistentVolume, yyrl3661)
			}
			yyc3661 = true
			yyrr3661 = len(yyv3661)
			if yyrg3661 {
				copy(yyv3661, yyv23661)
			}
		} else if yyl3661 != len(yyv3661) {
			yyv3661 = yyv3661[:yyl3661]
			yyc3661 = true
		}
		yyj3661 := 0
		for ; yyj3661 < yyrr3661; yyj3661++ {
			yyh3661.ElemContainerState(yyj3661)
			if r.TryDecodeAsNil() {
				yyv3661[yyj3661] = PersistentVolume{}
			} else {
				yyv3662 := &yyv3661[yyj3661]
				yyv3662.CodecDecodeSelf(d)
			}

		}
		if yyrt3661 {
			for ; yyj3661 < yyl3661; yyj3661++ {
				yyv3661 = append(yyv3661, PersistentVolume{})
				yyh3661.ElemContainerState(yyj3661)
				if r.TryDecodeAsNil() {
					yyv3661[yyj3661] = PersistentVolume{}
				} else {
					yyv3663 := &yyv3661[yyj3661]
					yyv3663.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3661 := 0
		for ; !r.CheckBreak(); yyj3661++ {

			if yyj3661 >= len(yyv3661) {
				yyv3661 = append(yyv3661, PersistentVolume{}) // var yyz3661 PersistentVolume
				yyc3661 = true
			}
			yyh3661.ElemContainerState(yyj3661)
			if yyj3661 < len(yyv3661) {
				if r.TryDecodeAsNil() {
					yyv3661[yyj3661] = PersistentVolume{}
				} else {
					yyv3664 := &yyv3661[yyj3661]
					yyv3664.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3661 < len(yyv3661) {
			yyv3661 = yyv3661[:yyj3661]
			yyc3661 = true
		} else if yyj3661 == 0 && yyv3661 == nil {
			yyv3661 = []PersistentVolume{}
			yyc3661 = true
		}
	}
	yyh3661.End()
	if yyc3661 {
		*v = yyv3661
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3665 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3666 := &yyv3665
		yy3666.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3667 := *v
	yyh3667, yyl3667 := z.DecSliceHelperStart()
	var yyc3667 bool
	if yyl3667 == 0 {
		if yyv3667 == nil {
			yyv3667 = []PersistentVolumeClaim{}
			yyc3667 = true
		} else if len(yyv3667) != 0 {
			yyv3667 = yyv3667[:0]
			yyc3667 = true
		}
	} else if yyl3667 > 0 {
		var yyrr3667, yyrl3667 int
		var yyrt3667 bool
		if yyl3667 > cap(yyv3667) {

			yyrg3667 := len(yyv3667) > 0
			yyv23667 := yyv3667
			yyrl3667, yyrt3667 = z.DecInferLen(yyl3667, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt3667 {
				if yyrl3667 <= cap(yyv3667) {
					yyv3667 = yyv3667[:yyrl3667]
				} else {
					yyv3667 = make([]PersistentVolumeClaim, yyrl3667)
				}
			} else {
				yyv3667 = make([]PersistentVolumeClaim, yyrl3667)
			}
			yyc3667 = true
			yyrr3667 = len(yyv3667)
			if yyrg3667 {
				copy(yyv3667, yyv23667)
			}
		} else if yyl3667 != len(yyv3667) {
			yyv3667 = yyv3667[:yyl3667]
			yyc3667 = true
		}
		yyj3667 := 0
		for ; yyj3667 < yyrr3667; yyj3667++ {
			yyh3667.ElemContainerState(yyj3667)
			if r.TryDecodeAsNil() {
				yyv3667[yyj3667] = PersistentVolumeClaim{}
			} else {
				yyv3668 := &yyv3667[yyj3667]
				yyv3668.CodecDecodeSelf(d)
			}

		}
		if yyrt3667 {
			for ; yyj3667 < yyl3667; yyj3667++ {
				yyv3667 = append(yyv3667, PersistentVolumeClaim{})
				yyh3667.ElemContainerState(yyj3667)
				if r.TryDecodeAsNil() {
					yyv3667[yyj3667] = PersistentVolumeClaim{}
				} else {
					yyv3669 := &yyv3667[yyj3667]
					yyv3669.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3667 := 0
		for ; !r.CheckBreak(); yyj3667++ {

			if yyj3667 >= len(yyv3667) {
				yyv3667 = append(yyv3667, PersistentVolumeClaim{}) // var yyz3667 PersistentVolumeClaim
				yyc3667 = true
			}
			yyh3667.ElemContainerState(yyj3667)
			if yyj3667 < len(yyv3667) {
				if r.TryDecodeAsNil() {
					yyv3667[yyj3667] = PersistentVolumeClaim{}
				} else {
					yyv3670 := &yyv3667[yyj3667]
					yyv3670.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3667 < len(yyv3667) {
			yyv3667 = yyv3667[:yyj3667]
			yyc3667 = true
		} else if yyj3667 == 0 && yyv3667 == nil {
			yyv3667 = []PersistentVolumeClaim{}
			yyc3667 = true
		}
	}
	yyh3667.End()
	if yyc3667 {
		*v = yyv3667
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3671 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3672 := &yyv3671
		yy3672.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3673 := *v
	yyh3673, yyl3673 := z.DecSliceHelperStart()
	var yyc3673 bool
	if yyl3673 == 0 {
		if yyv3673 == nil {
			yyv3673 = []DownwardAPIVolumeFile{}
			yyc3673 = true
		} else if len(yyv3673) != 0 {
			yyv3673 = yyv3673[:0]
			yyc3673 = true
		}
	} else if yyl3673 > 0 {
		var yyrr3673, yyrl3673 int
		var yyrt3673 bool
		if yyl3673 > cap(yyv3673) {

			yyrg3673 := len(yyv3673) > 0
			yyv23673 := yyv3673
			yyrl3673, yyrt3673 = z.DecInferLen(yyl3673, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt3673 {
				if yyrl3673 <= cap(yyv3673) {
					yyv3673 = yyv3673[:yyrl3673]
				} else {
					yyv3673 = make([]DownwardAPIVolumeFile, yyrl3673)
				}
			} else {
				yyv3673 = make([]DownwardAPIVolumeFile, yyrl3673)
			}
			yyc3673 = true
			yyrr3673 = len(yyv3673)
			if yyrg3673 {
				copy(yyv3673, yyv23673)
			}
		} else if yyl3673 != len(yyv3673) {
			yyv3673 = yyv3673[:yyl3673]
			yyc3673 = true
		}
		yyj3673 := 0
		for ; yyj3673 < yyrr3673; yyj3673++ {
			yyh3673.ElemContainerState(yyj3673)
			if r.TryDecodeAsNil() {
				yyv3673[yyj3673] = DownwardAPIVolumeFile{}
			} else {
				yyv3674 := &yyv3673[yyj3673]
				yyv3674.CodecDecodeSelf(d)
			}

		}
		if yyrt3673 {
			for ; yyj3673 < yyl3673; yyj3673++ {
				yyv3673 = append(yyv3673, DownwardAPIVolumeFile{})
				yyh3673.ElemContainerState(yyj3673)
				if r.TryDecodeAsNil() {
					yyv3673[yyj3673] = DownwardAPIVolumeFile{}
				} else {
					yyv3675 := &yyv3673[yyj3673]
					yyv3675.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3673 := 0
		for ; !r.CheckBreak(); yyj3673++ {

			if yyj3673 >= len(yyv3673) {
				yyv3673 = append(yyv3673, DownwardAPIVolumeFile{}) // var yyz3673 DownwardAPIVolumeFile
				yyc3673 = true
			}
			yyh3673.ElemContainerState(yyj3673)
			if yyj3673 < len(yyv3673) {
				if r.TryDecodeAsNil() {
					yyv3673[yyj3673] = DownwardAPIVolumeFile{}
				} else {
					yyv3676 := &yyv3673[yyj3673]
					yyv3676.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3673 < len(yyv3673) {
			yyv3673 = yyv3673[:yyj3673]
			yyc3673 = true
		} else if yyj3673 == 0 && yyv3673 == nil {
			yyv3673 = []DownwardAPIVolumeFile{}
			yyc3673 = true
		}
	}
	yyh3673.End()
	if yyc3673 {
		*v = yyv3673
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3677 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3677.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3678 := *v
	yyh3678, yyl3678 := z.DecSliceHelperStart()
	var yyc3678 bool
	if yyl3678 == 0 {
		if yyv3678 == nil {
			yyv3678 = []Capability{}
			yyc3678 = true
		} else if len(yyv3678) != 0 {
			yyv3678 = yyv3678[:0]
			yyc3678 = true
		}
	} else if yyl3678 > 0 {
		var yyrr3678, yyrl3678 int
		var yyrt3678 bool
		if yyl3678 > cap(yyv3678) {

			yyrl3678, yyrt3678 = z.DecInferLen(yyl3678, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3678 {
				if yyrl3678 <= cap(yyv3678) {
					yyv3678 = yyv3678[:yyrl3678]
				} else {
					yyv3678 = make([]Capability, yyrl3678)
				}
			} else {
				yyv3678 = make([]Capability, yyrl3678)
			}
			yyc3678 = true
			yyrr3678 = len(yyv3678)
		} else if yyl3678 != len(yyv3678) {
			yyv3678 = yyv3678[:yyl3678]
			yyc3678 = true
		}
		yyj3678 := 0
		for ; yyj3678 < yyrr3678; yyj3678++ {
			yyh3678.ElemContainerState(yyj3678)
			if r.TryDecodeAsNil() {
				yyv3678[yyj3678] = ""
			} else {
				yyv3678[yyj3678] = Capability(r.DecodeString())
			}

		}
		if yyrt3678 {
			for ; yyj3678 < yyl3678; yyj3678++ {
				yyv3678 = append(yyv3678, "")
				yyh3678.ElemContainerState(yyj3678)
				if r.TryDecodeAsNil() {
					yyv3678[yyj3678] = ""
				} else {
					yyv3678[yyj3678] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj3678 := 0
		for ; !r.CheckBreak(); yyj3678++ {

			if yyj3678 >= len(yyv3678) {
				yyv3678 = append(yyv3678, "") // var yyz3678 Capability
				yyc3678 = true
			}
			yyh3678.ElemContainerState(yyj3678)
			if yyj3678 < len(yyv3678) {
				if r.TryDecodeAsNil() {
					yyv3678[yyj3678] = ""
				} else {
					yyv3678[yyj3678] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3678 < len(yyv3678) {
			yyv3678 = yyv3678[:yyj3678]
			yyc3678 = true
		} else if yyj3678 == 0 && yyv3678 == nil {
			yyv3678 = []Capability{}
			yyc3678 = true
		}
	}
	yyh3678.End()
	if yyc3678 {
		*v = yyv3678
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3682 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3683 := &yyv3682
		yy3683.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3684 := *v
	yyh3684, yyl3684 := z.DecSliceHelperStart()
	var yyc3684 bool
	if yyl3684 == 0 {
		if yyv3684 == nil {
			yyv3684 = []ContainerPort{}
			yyc3684 = true
		} else if len(yyv3684) != 0 {
			yyv3684 = yyv3684[:0]
			yyc3684 = true
		}
	} else if yyl3684 > 0 {
		var yyrr3684, yyrl3684 int
		var yyrt3684 bool
		if yyl3684 > cap(yyv3684) {

			yyrg3684 := len(yyv3684) > 0
			yyv23684 := yyv3684
			yyrl3684, yyrt3684 = z.DecInferLen(yyl3684, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3684 {
				if yyrl3684 <= cap(yyv3684) {
					yyv3684 = yyv3684[:yyrl3684]
				} else {
					yyv3684 = make([]ContainerPort, yyrl3684)
				}
			} else {
				yyv3684 = make([]ContainerPort, yyrl3684)
			}
			yyc3684 = true
			yyrr3684 = len(yyv3684)
			if yyrg3684 {
				copy(yyv3684, yyv23684)
			}
		} else if yyl3684 != len(yyv3684) {
			yyv3684 = yyv3684[:yyl3684]
			yyc3684 = true
		}
		yyj3684 := 0
		for ; yyj3684 < yyrr3684; yyj3684++ {
			yyh3684.ElemContainerState(yyj3684)
			if r.TryDecodeAsNil() {
				yyv3684[yyj3684] = ContainerPort{}
			} else {
				yyv3685 := &yyv3684[yyj3684]
				yyv3685.CodecDecodeSelf(d)
			}

		}
		if yyrt3684 {
			for ; yyj3684 < yyl3684; yyj3684++ {
				yyv3684 = append(yyv3684, ContainerPort{})
				yyh3684.ElemContainerState(yyj3684)
				if r.TryDecodeAsNil() {
					yyv3684[yyj3684] = ContainerPort{}
				} else {
					yyv3686 := &yyv3684[yyj3684]
					yyv3686.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3684 := 0
		for ; !r.CheckBreak(); yyj3684++ {

			if yyj3684 >= len(yyv3684) {
				yyv3684 = append(yyv3684, ContainerPort{}) // var yyz3684 ContainerPort
				yyc3684 = true
			}
			yyh3684.ElemContainerState(yyj3684)
			if yyj3684 < len(yyv3684) {
				if r.TryDecodeAsNil() {
					yyv3684[yyj3684] = ContainerPort{}
				} else {
					yyv3687 := &yyv3684[yyj3684]
					yyv3687.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3684 < len(yyv3684) {
			yyv3684 = yyv3684[:yyj3684]
			yyc3684 = true
		} else if yyj3684 == 0 && yyv3684 == nil {
			yyv3684 = []ContainerPort{}
			yyc3684 = true
		}
	}
	yyh3684.End()
	if yyc3684 {
		*v = yyv3684
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3688 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3689 := &yyv3688
		yy3689.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3690 := *v
	yyh3690, yyl3690 := z.DecSliceHelperStart()
	var yyc3690 bool
	if yyl3690 == 0 {
		if yyv3690 == nil {
			yyv3690 = []EnvVar{}
			yyc3690 = true
		} else if len(yyv3690) != 0 {
			yyv3690 = yyv3690[:0]
			yyc3690 = true
		}
	} else if yyl3690 > 0 {
		var yyrr3690, yyrl3690 int
		var yyrt3690 bool
		if yyl3690 > cap(yyv3690) {

			yyrg3690 := len(yyv3690) > 0
			yyv23690 := yyv3690
			yyrl3690, yyrt3690 = z.DecInferLen(yyl3690, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3690 {
				if yyrl3690 <= cap(yyv3690) {
					yyv3690 = yyv3690[:yyrl3690]
				} else {
					yyv3690 = make([]EnvVar, yyrl3690)
				}
			} else {
				yyv3690 = make([]EnvVar, yyrl3690)
			}
			yyc3690 = true
			yyrr3690 = len(yyv3690)
			if yyrg3690 {
				copy(yyv3690, yyv23690)
			}
		} else if yyl3690 != len(yyv3690) {
			yyv3690 = yyv3690[:yyl3690]
			yyc3690 = true
		}
		yyj3690 := 0
		for ; yyj3690 < yyrr3690; yyj3690++ {
			yyh3690.ElemContainerState(yyj3690)
			if r.TryDecodeAsNil() {
				yyv3690[yyj3690] = EnvVar{}
			} else {
				yyv3691 := &yyv3690[yyj3690]
				yyv3691.CodecDecodeSelf(d)
			}

		}
		if yyrt3690 {
			for ; yyj3690 < yyl3690; yyj3690++ {
				yyv3690 = append(yyv3690, EnvVar{})
				yyh3690.ElemContainerState(yyj3690)
				if r.TryDecodeAsNil() {
					yyv3690[yyj3690] = EnvVar{}
				} else {
					yyv3692 := &yyv3690[yyj3690]
					yyv3692.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3690 := 0
		for ; !r.CheckBreak(); yyj3690++ {

			if yyj3690 >= len(yyv3690) {
				yyv3690 = append(yyv3690, EnvVar{}) // var yyz3690 EnvVar
				yyc3690 = true
			}
			yyh3690.ElemContainerState(yyj3690)
			if yyj3690 < len(yyv3690) {
				if r.TryDecodeAsNil() {
					yyv3690[yyj3690] = EnvVar{}
				} else {
					yyv3693 := &yyv3690[yyj3690]
					yyv3693.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3690 < len(yyv3690) {
			yyv3690 = yyv3690[:yyj3690]
			yyc3690 = true
		} else if yyj3690 == 0 && yyv3690 == nil {
			yyv3690 = []EnvVar{}
			yyc3690 = true
		}
	}
	yyh3690.End()
	if yyc3690 {
		*v = yyv3690
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3694 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3695 := &yyv3694
		yy3695.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3696 := *v
	yyh3696, yyl3696 := z.DecSliceHelperStart()
	var yyc3696 bool
	if yyl3696 == 0 {
		if yyv3696 == nil {
			yyv3696 = []VolumeMount{}
			yyc3696 = true
		} else if len(yyv3696) != 0 {
			yyv3696 = yyv3696[:0]
			yyc3696 = true
		}
	} else if yyl3696 > 0 {
		var yyrr3696, yyrl3696 int
		var yyrt3696 bool
		if yyl3696 > cap(yyv3696) {

			yyrg3696 := len(yyv3696) > 0
			yyv23696 := yyv3696
			yyrl3696, yyrt3696 = z.DecInferLen(yyl3696, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3696 {
				if yyrl3696 <= cap(yyv3696) {
					yyv3696 = yyv3696[:yyrl3696]
				} else {
					yyv3696 = make([]VolumeMount, yyrl3696)
				}
			} else {
				yyv3696 = make([]VolumeMount, yyrl3696)
			}
			yyc3696 = true
			yyrr3696 = len(yyv3696)
			if yyrg3696 {
				copy(yyv3696, yyv23696)
			}
		} else if yyl3696 != len(yyv3696) {
			yyv3696 = yyv3696[:yyl3696]
			yyc3696 = true
		}
		yyj3696 := 0
		for ; yyj3696 < yyrr3696; yyj3696++ {
			yyh3696.ElemContainerState(yyj3696)
			if r.TryDecodeAsNil() {
				yyv3696[yyj3696] = VolumeMount{}
			} else {
				yyv3697 := &yyv3696[yyj3696]
				yyv3697.CodecDecodeSelf(d)
			}

		}
		if yyrt3696 {
			for ; yyj3696 < yyl3696; yyj3696++ {
				yyv3696 = append(yyv3696, VolumeMount{})
				yyh3696.ElemContainerState(yyj3696)
				if r.TryDecodeAsNil() {
					yyv3696[yyj3696] = VolumeMount{}
				} else {
					yyv3698 := &yyv3696[yyj3696]
					yyv3698.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3696 := 0
		for ; !r.CheckBreak(); yyj3696++ {

			if yyj3696 >= len(yyv3696) {
				yyv3696 = append(yyv3696, VolumeMount{}) // var yyz3696 VolumeMount
				yyc3696 = true
			}
			yyh3696.ElemContainerState(yyj3696)
			if yyj3696 < len(yyv3696) {
				if r.TryDecodeAsNil() {
					yyv3696[yyj3696] = VolumeMount{}
				} else {
					yyv3699 := &yyv3696[yyj3696]
					yyv3699.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3696 < len(yyv3696) {
			yyv3696 = yyv3696[:yyj3696]
			yyc3696 = true
		} else if yyj3696 == 0 && yyv3696 == nil {
			yyv3696 = []VolumeMount{}
			yyc3696 = true
		}
	}
	yyh3696.End()
	if yyc3696 {
		*v = yyv3696
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3700 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3701 := &yyv3700
		yy3701.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3702 := *v
	yyh3702, yyl3702 := z.DecSliceHelperStart()
	var yyc3702 bool
	if yyl3702 == 0 {
		if yyv3702 == nil {
			yyv3702 = []Pod{}
			yyc3702 = true
		} else if len(yyv3702) != 0 {
			yyv3702 = yyv3702[:0]
			yyc3702 = true
		}
	} else if yyl3702 > 0 {
		var yyrr3702, yyrl3702 int
		var yyrt3702 bool
		if yyl3702 > cap(yyv3702) {

			yyrg3702 := len(yyv3702) > 0
			yyv23702 := yyv3702
			yyrl3702, yyrt3702 = z.DecInferLen(yyl3702, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt3702 {
				if yyrl3702 <= cap(yyv3702) {
					yyv3702 = yyv3702[:yyrl3702]
				} else {
					yyv3702 = make([]Pod, yyrl3702)
				}
			} else {
				yyv3702 = make([]Pod, yyrl3702)
			}
			yyc3702 = true
			yyrr3702 = len(yyv3702)
			if yyrg3702 {
				copy(yyv3702, yyv23702)
			}
		} else if yyl3702 != len(yyv3702) {
			yyv3702 = yyv3702[:yyl3702]
			yyc3702 = true
		}
		yyj3702 := 0
		for ; yyj3702 < yyrr3702; yyj3702++ {
			yyh3702.ElemContainerState(yyj3702)
			if r.TryDecodeAsNil() {
				yyv3702[yyj3702] = Pod{}
			} else {
				yyv3703 := &yyv3702[yyj3702]
				yyv3703.CodecDecodeSelf(d)
			}

		}
		if yyrt3702 {
			for ; yyj3702 < yyl3702; yyj3702++ {
				yyv3702 = append(yyv3702, Pod{})
				yyh3702.ElemContainerState(yyj3702)
				if r.TryDecodeAsNil() {
					yyv3702[yyj3702] = Pod{}
				} else {
					yyv3704 := &yyv3702[yyj3702]
					yyv3704.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3702 := 0
		for ; !r.CheckBreak(); yyj3702++ {

			if yyj3702 >= len(yyv3702) {
				yyv3702 = append(yyv3702, Pod{}) // var yyz3702 Pod
				yyc3702 = true
			}
			yyh3702.ElemContainerState(yyj3702)
			if yyj3702 < len(yyv3702) {
				if r.TryDecodeAsNil() {
					yyv3702[yyj3702] = Pod{}
				} else {
					yyv3705 := &yyv3702[yyj3702]
					yyv3705.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3702 < len(yyv3702) {
			yyv3702 = yyv3702[:yyj3702]
			yyc3702 = true
		} else if yyj3702 == 0 && yyv3702 == nil {
			yyv3702 = []Pod{}
			yyc3702 = true
		}
	}
	yyh3702.End()
	if yyc3702 {
		*v = yyv3702
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3706 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3707 := &yyv3706
		yy3707.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3708 := *v
	yyh3708, yyl3708 := z.DecSliceHelperStart()
	var yyc3708 bool
	if yyl3708 == 0 {
		if yyv3708 == nil {
			yyv3708 = []NodeSelectorTerm{}
			yyc3708 = true
		} else if len(yyv3708) != 0 {
			yyv3708 = yyv3708[:0]
			yyc3708 = true
		}
	} else if yyl3708 > 0 {
		var yyrr3708, yyrl3708 int
		var yyrt3708 bool
		if yyl3708 > cap(yyv3708) {

			yyrg3708 := len(yyv3708) > 0
			yyv23708 := yyv3708
			yyrl3708, yyrt3708 = z.DecInferLen(yyl3708, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3708 {
				if yyrl3708 <= cap(yyv3708) {
					yyv3708 = yyv3708[:yyrl3708]
				} else {
					yyv3708 = make([]NodeSelectorTerm, yyrl3708)
				}
			} else {
				yyv3708 = make([]NodeSelectorTerm, yyrl3708)
			}
			yyc3708 = true
			yyrr3708 = len(yyv3708)
			if yyrg3708 {
				copy(yyv3708, yyv23708)
			}
		} else if yyl3708 != len(yyv3708) {
			yyv3708 = yyv3708[:yyl3708]
			yyc3708 = true
		}
		yyj3708 := 0
		for ; yyj3708 < yyrr3708; yyj3708++ {
			yyh3708.ElemContainerState(yyj3708)
			if r.TryDecodeAsNil() {
				yyv3708[yyj3708] = NodeSelectorTerm{}
			} else {
				yyv3709 := &yyv3708[yyj3708]
				yyv3709.CodecDecodeSelf(d)
			}

		}
		if yyrt3708 {
			for ; yyj3708 < yyl3708; yyj3708++ {
				yyv3708 = append(yyv3708, NodeSelectorTerm{})
				yyh3708.ElemContainerState(yyj3708)
				if r.TryDecodeAsNil() {
					yyv3708[yyj3708] = NodeSelectorTerm{}
				} else {
					yyv3710 := &yyv3708[yyj3708]
					yyv3710.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3708 := 0
		for ; !r.CheckBreak(); yyj3708++ {

			if yyj3708 >= len(yyv3708) {
				yyv3708 = append(yyv3708, NodeSelectorTerm{}) // var yyz3708 NodeSelectorTerm
				yyc3708 = true
			}
			yyh3708.ElemContainerState(yyj3708)
			if yyj3708 < len(yyv3708) {
				if r.TryDecodeAsNil() {
					yyv3708[yyj3708] = NodeSelectorTerm{}
				} else {
					yyv3711 := &yyv3708[yyj3708]
					yyv3711.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3708 < len(yyv3708) {
			yyv3708 = yyv3708[:yyj3708]
			yyc3708 = true
		} else if yyj3708 == 0 && yyv3708 == nil {
			yyv3708 = []NodeSelectorTerm{}
			yyc3708 = true
		}
	}
	yyh3708.End()
	if yyc3708 {
		*v = yyv3708
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3712 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3713 := &yyv3712
		yy3713.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3714 := *v
	yyh3714, yyl3714 := z.DecSliceHelperStart()
	var yyc3714 bool
	if yyl3714 == 0 {
		if yyv3714 == nil {
			yyv3714 = []NodeSelectorRequirement{}
			yyc3714 = true
		} else if len(yyv3714) != 0 {
			yyv3714 = yyv3714[:0]
			yyc3714 = true
		}
	} else if yyl3714 > 0 {
		var yyrr3714, yyrl3714 int
		var yyrt3714 bool
		if yyl3714 > cap(yyv3714) {

			yyrg3714 := len(yyv3714) > 0
			yyv23714 := yyv3714
			yyrl3714, yyrt3714 = z.DecInferLen(yyl3714, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3714 {
				if yyrl3714 <= cap(yyv3714) {
					yyv3714 = yyv3714[:yyrl3714]
				} else {
					yyv3714 = make([]NodeSelectorRequirement, yyrl3714)
				}
			} else {
				yyv3714 = make([]NodeSelectorRequirement, yyrl3714)
			}
			yyc3714 = true
			yyrr3714 = len(yyv3714)
			if yyrg3714 {
				copy(yyv3714, yyv23714)
			}
		} else if yyl3714 != len(yyv3714) {
			yyv3714 = yyv3714[:yyl3714]
			yyc3714 = true
		}
		yyj3714 := 0
		for ; yyj3714 < yyrr3714; yyj3714++ {
			yyh3714.ElemContainerState(yyj3714)
			if r.TryDecodeAsNil() {
				yyv3714[yyj3714] = NodeSelectorRequirement{}
			} else {
				yyv3715 := &yyv3714[yyj3714]
				yyv3715.CodecDecodeSelf(d)
			}

		}
		if yyrt3714 {
			for ; yyj3714 < yyl3714; yyj3714++ {
				yyv3714 = append(yyv3714, NodeSelectorRequirement{})
				yyh3714.ElemContainerState(yyj3714)
				if r.TryDecodeAsNil() {
					yyv3714[yyj3714] = NodeSelectorRequirement{}
				} else {
					yyv3716 := &yyv3714[yyj3714]
					yyv3716.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3714 := 0
		for ; !r.CheckBreak(); yyj3714++ {

			if yyj3714 >= len(yyv3714) {
				yyv3714 = append(yyv3714, NodeSelectorRequirement{}) // var yyz3714 NodeSelectorRequirement
				yyc3714 = true
			}
			yyh3714.ElemContainerState(yyj3714)
			if yyj3714 < len(yyv3714) {
				if r.TryDecodeAsNil() {
					yyv3714[yyj3714] = NodeSelectorRequirement{}
				} else {
					yyv3717 := &yyv3714[yyj3714]
					yyv3717.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3714 < len(yyv3714) {
			yyv3714 = yyv3714[:yyj3714]
			yyc3714 = true
		} else if yyj3714 == 0 && yyv3714 == nil {
			yyv3714 = []NodeSelectorRequirement{}
			yyc3714 = true
		}
	}
	yyh3714.End()
	if yyc3714 {
		*v = yyv3714
	}
}

func (x codecSelfer1234) encSliceSoftNodeAffinityTerm(v []SoftNodeAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3718 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3719 := &yyv3718
		yy3719.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSoftNodeAffinityTerm(v *[]SoftNodeAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3720 := *v
	yyh3720, yyl3720 := z.DecSliceHelperStart()
	var yyc3720 bool
	if yyl3720 == 0 {
		if yyv3720 == nil {
			yyv3720 = []SoftNodeAffinityTerm{}
			yyc3720 = true
		} else if len(yyv3720) != 0 {
			yyv3720 = yyv3720[:0]
			yyc3720 = true
		}
	} else if yyl3720 > 0 {
		var yyrr3720, yyrl3720 int
		var yyrt3720 bool
		if yyl3720 > cap(yyv3720) {

			yyrg3720 := len(yyv3720) > 0
			yyv23720 := yyv3720
			yyrl3720, yyrt3720 = z.DecInferLen(yyl3720, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3720 {
				if yyrl3720 <= cap(yyv3720) {
					yyv3720 = yyv3720[:yyrl3720]
				} else {
					yyv3720 = make([]SoftNodeAffinityTerm, yyrl3720)
				}
			} else {
				yyv3720 = make([]SoftNodeAffinityTerm, yyrl3720)
			}
			yyc3720 = true
			yyrr3720 = len(yyv3720)
			if yyrg3720 {
				copy(yyv3720, yyv23720)
			}
		} else if yyl3720 != len(yyv3720) {
			yyv3720 = yyv3720[:yyl3720]
			yyc3720 = true
		}
		yyj3720 := 0
		for ; yyj3720 < yyrr3720; yyj3720++ {
			yyh3720.ElemContainerState(yyj3720)
			if r.TryDecodeAsNil() {
				yyv3720[yyj3720] = SoftNodeAffinityTerm{}
			} else {
				yyv3721 := &yyv3720[yyj3720]
				yyv3721.CodecDecodeSelf(d)
			}

		}
		if yyrt3720 {
			for ; yyj3720 < yyl3720; yyj3720++ {
				yyv3720 = append(yyv3720, SoftNodeAffinityTerm{})
				yyh3720.ElemContainerState(yyj3720)
				if r.TryDecodeAsNil() {
					yyv3720[yyj3720] = SoftNodeAffinityTerm{}
				} else {
					yyv3722 := &yyv3720[yyj3720]
					yyv3722.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3720 := 0
		for ; !r.CheckBreak(); yyj3720++ {

			if yyj3720 >= len(yyv3720) {
				yyv3720 = append(yyv3720, SoftNodeAffinityTerm{}) // var yyz3720 SoftNodeAffinityTerm
				yyc3720 = true
			}
			yyh3720.ElemContainerState(yyj3720)
			if yyj3720 < len(yyv3720) {
				if r.TryDecodeAsNil() {
					yyv3720[yyj3720] = SoftNodeAffinityTerm{}
				} else {
					yyv3723 := &yyv3720[yyj3720]
					yyv3723.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3720 < len(yyv3720) {
			yyv3720 = yyv3720[:yyj3720]
			yyc3720 = true
		} else if yyj3720 == 0 && yyv3720 == nil {
			yyv3720 = []SoftNodeAffinityTerm{}
			yyc3720 = true
		}
	}
	yyh3720.End()
	if yyc3720 {
		*v = yyv3720
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3724 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3725 := &yyv3724
		yy3725.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3726 := *v
	yyh3726, yyl3726 := z.DecSliceHelperStart()
	var yyc3726 bool
	if yyl3726 == 0 {
		if yyv3726 == nil {
			yyv3726 = []Volume{}
			yyc3726 = true
		} else if len(yyv3726) != 0 {
			yyv3726 = yyv3726[:0]
			yyc3726 = true
		}
	} else if yyl3726 > 0 {
		var yyrr3726, yyrl3726 int
		var yyrt3726 bool
		if yyl3726 > cap(yyv3726) {

			yyrg3726 := len(yyv3726) > 0
			yyv23726 := yyv3726
			yyrl3726, yyrt3726 = z.DecInferLen(yyl3726, z.DecBasicHandle().MaxInitLen, 152)
			if yyrt3726 {
				if yyrl3726 <= cap(yyv3726) {
					yyv3726 = yyv3726[:yyrl3726]
				} else {
					yyv3726 = make([]Volume, yyrl3726)
				}
			} else {
				yyv3726 = make([]Volume, yyrl3726)
			}
			yyc3726 = true
			yyrr3726 = len(yyv3726)
			if yyrg3726 {
				copy(yyv3726, yyv23726)
			}
		} else if yyl3726 != len(yyv3726) {
			yyv3726 = yyv3726[:yyl3726]
			yyc3726 = true
		}
		yyj3726 := 0
		for ; yyj3726 < yyrr3726; yyj3726++ {
			yyh3726.ElemContainerState(yyj3726)
			if r.TryDecodeAsNil() {
				yyv3726[yyj3726] = Volume{}
			} else {
				yyv3727 := &yyv3726[yyj3726]
				yyv3727.CodecDecodeSelf(d)
			}

		}
		if yyrt3726 {
			for ; yyj3726 < yyl3726; yyj3726++ {
				yyv3726 = append(yyv3726, Volume{})
				yyh3726.ElemContainerState(yyj3726)
				if r.TryDecodeAsNil() {
					yyv3726[yyj3726] = Volume{}
				} else {
					yyv3728 := &yyv3726[yyj3726]
					yyv3728.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3726 := 0
		for ; !r.CheckBreak(); yyj3726++ {

			if yyj3726 >= len(yyv3726) {
				yyv3726 = append(yyv3726, Volume{}) // var yyz3726 Volume
				yyc3726 = true
			}
			yyh3726.ElemContainerState(yyj3726)
			if yyj3726 < len(yyv3726) {
				if r.TryDecodeAsNil() {
					yyv3726[yyj3726] = Volume{}
				} else {
					yyv3729 := &yyv3726[yyj3726]
					yyv3729.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3726 < len(yyv3726) {
			yyv3726 = yyv3726[:yyj3726]
			yyc3726 = true
		} else if yyj3726 == 0 && yyv3726 == nil {
			yyv3726 = []Volume{}
			yyc3726 = true
		}
	}
	yyh3726.End()
	if yyc3726 {
		*v = yyv3726
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3730 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3731 := &yyv3730
		yy3731.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3732 := *v
	yyh3732, yyl3732 := z.DecSliceHelperStart()
	var yyc3732 bool
	if yyl3732 == 0 {
		if yyv3732 == nil {
			yyv3732 = []Container{}
			yyc3732 = true
		} else if len(yyv3732) != 0 {
			yyv3732 = yyv3732[:0]
			yyc3732 = true
		}
	} else if yyl3732 > 0 {
		var yyrr3732, yyrl3732 int
		var yyrt3732 bool
		if yyl3732 > cap(yyv3732) {

			yyrg3732 := len(yyv3732) > 0
			yyv23732 := yyv3732
			yyrl3732, yyrt3732 = z.DecInferLen(yyl3732, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt3732 {
				if yyrl3732 <= cap(yyv3732) {
					yyv3732 = yyv3732[:yyrl3732]
				} else {
					yyv3732 = make([]Container, yyrl3732)
				}
			} else {
				yyv3732 = make([]Container, yyrl3732)
			}
			yyc3732 = true
			yyrr3732 = len(yyv3732)
			if yyrg3732 {
				copy(yyv3732, yyv23732)
			}
		} else if yyl3732 != len(yyv3732) {
			yyv3732 = yyv3732[:yyl3732]
			yyc3732 = true
		}
		yyj3732 := 0
		for ; yyj3732 < yyrr3732; yyj3732++ {
			yyh3732.ElemContainerState(yyj3732)
			if r.TryDecodeAsNil() {
				yyv3732[yyj3732] = Container{}
			} else {
				yyv3733 := &yyv3732[yyj3732]
				yyv3733.CodecDecodeSelf(d)
			}

		}
		if yyrt3732 {
			for ; yyj3732 < yyl3732; yyj3732++ {
				yyv3732 = append(yyv3732, Container{})
				yyh3732.ElemContainerState(yyj3732)
				if r.TryDecodeAsNil() {
					yyv3732[yyj3732] = Container{}
				} else {
					yyv3734 := &yyv3732[yyj3732]
					yyv3734.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3732 := 0
		for ; !r.CheckBreak(); yyj3732++ {

			if yyj3732 >= len(yyv3732) {
				yyv3732 = append(yyv3732, Container{}) // var yyz3732 Container
				yyc3732 = true
			}
			yyh3732.ElemContainerState(yyj3732)
			if yyj3732 < len(yyv3732) {
				if r.TryDecodeAsNil() {
					yyv3732[yyj3732] = Container{}
				} else {
					yyv3735 := &yyv3732[yyj3732]
					yyv3735.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3732 < len(yyv3732) {
			yyv3732 = yyv3732[:yyj3732]
			yyc3732 = true
		} else if yyj3732 == 0 && yyv3732 == nil {
			yyv3732 = []Container{}
			yyc3732 = true
		}
	}
	yyh3732.End()
	if yyc3732 {
		*v = yyv3732
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3736 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3737 := &yyv3736
		yy3737.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3738 := *v
	yyh3738, yyl3738 := z.DecSliceHelperStart()
	var yyc3738 bool
	if yyl3738 == 0 {
		if yyv3738 == nil {
			yyv3738 = []LocalObjectReference{}
			yyc3738 = true
		} else if len(yyv3738) != 0 {
			yyv3738 = yyv3738[:0]
			yyc3738 = true
		}
	} else if yyl3738 > 0 {
		var yyrr3738, yyrl3738 int
		var yyrt3738 bool
		if yyl3738 > cap(yyv3738) {

			yyrg3738 := len(yyv3738) > 0
			yyv23738 := yyv3738
			yyrl3738, yyrt3738 = z.DecInferLen(yyl3738, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3738 {
				if yyrl3738 <= cap(yyv3738) {
					yyv3738 = yyv3738[:yyrl3738]
				} else {
					yyv3738 = make([]LocalObjectReference, yyrl3738)
				}
			} else {
				yyv3738 = make([]LocalObjectReference, yyrl3738)
			}
			yyc3738 = true
			yyrr3738 = len(yyv3738)
			if yyrg3738 {
				copy(yyv3738, yyv23738)
			}
		} else if yyl3738 != len(yyv3738) {
			yyv3738 = yyv3738[:yyl3738]
			yyc3738 = true
		}
		yyj3738 := 0
		for ; yyj3738 < yyrr3738; yyj3738++ {
			yyh3738.ElemContainerState(yyj3738)
			if r.TryDecodeAsNil() {
				yyv3738[yyj3738] = LocalObjectReference{}
			} else {
				yyv3739 := &yyv3738[yyj3738]
				yyv3739.CodecDecodeSelf(d)
			}

		}
		if yyrt3738 {
			for ; yyj3738 < yyl3738; yyj3738++ {
				yyv3738 = append(yyv3738, LocalObjectReference{})
				yyh3738.ElemContainerState(yyj3738)
				if r.TryDecodeAsNil() {
					yyv3738[yyj3738] = LocalObjectReference{}
				} else {
					yyv3740 := &yyv3738[yyj3738]
					yyv3740.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3738 := 0
		for ; !r.CheckBreak(); yyj3738++ {

			if yyj3738 >= len(yyv3738) {
				yyv3738 = append(yyv3738, LocalObjectReference{}) // var yyz3738 LocalObjectReference
				yyc3738 = true
			}
			yyh3738.ElemContainerState(yyj3738)
			if yyj3738 < len(yyv3738) {
				if r.TryDecodeAsNil() {
					yyv3738[yyj3738] = LocalObjectReference{}
				} else {
					yyv3741 := &yyv3738[yyj3738]
					yyv3741.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3738 < len(yyv3738) {
			yyv3738 = yyv3738[:yyj3738]
			yyc3738 = true
		} else if yyj3738 == 0 && yyv3738 == nil {
			yyv3738 = []LocalObjectReference{}
			yyc3738 = true
		}
	}
	yyh3738.End()
	if yyc3738 {
		*v = yyv3738
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3742 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3743 := &yyv3742
		yy3743.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3744 := *v
	yyh3744, yyl3744 := z.DecSliceHelperStart()
	var yyc3744 bool
	if yyl3744 == 0 {
		if yyv3744 == nil {
			yyv3744 = []PodCondition{}
			yyc3744 = true
		} else if len(yyv3744) != 0 {
			yyv3744 = yyv3744[:0]
			yyc3744 = true
		}
	} else if yyl3744 > 0 {
		var yyrr3744, yyrl3744 int
		var yyrt3744 bool
		if yyl3744 > cap(yyv3744) {

			yyrg3744 := len(yyv3744) > 0
			yyv23744 := yyv3744
			yyrl3744, yyrt3744 = z.DecInferLen(yyl3744, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3744 {
				if yyrl3744 <= cap(yyv3744) {
					yyv3744 = yyv3744[:yyrl3744]
				} else {
					yyv3744 = make([]PodCondition, yyrl3744)
				}
			} else {
				yyv3744 = make([]PodCondition, yyrl3744)
			}
			yyc3744 = true
			yyrr3744 = len(yyv3744)
			if yyrg3744 {
				copy(yyv3744, yyv23744)
			}
		} else if yyl3744 != len(yyv3744) {
			yyv3744 = yyv3744[:yyl3744]
			yyc3744 = true
		}
		yyj3744 := 0
		for ; yyj3744 < yyrr3744; yyj3744++ {
			yyh3744.ElemContainerState(yyj3744)
			if r.TryDecodeAsNil() {
				yyv3744[yyj3744] = PodCondition{}
			} else {
				yyv3745 := &yyv3744[yyj3744]
				yyv3745.CodecDecodeSelf(d)
			}

		}
		if yyrt3744 {
			for ; yyj3744 < yyl3744; yyj3744++ {
				yyv3744 = append(yyv3744, PodCondition{})
				yyh3744.ElemContainerState(yyj3744)
				if r.TryDecodeAsNil() {
					yyv3744[yyj3744] = PodCondition{}
				} else {
					yyv3746 := &yyv3744[yyj3744]
					yyv3746.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3744 := 0
		for ; !r.CheckBreak(); yyj3744++ {

			if yyj3744 >= len(yyv3744) {
				yyv3744 = append(yyv3744, PodCondition{}) // var yyz3744 PodCondition
				yyc3744 = true
			}
			yyh3744.ElemContainerState(yyj3744)
			if yyj3744 < len(yyv3744) {
				if r.TryDecodeAsNil() {
					yyv3744[yyj3744] = PodCondition{}
				} else {
					yyv3747 := &yyv3744[yyj3744]
					yyv3747.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3744 < len(yyv3744) {
			yyv3744 = yyv3744[:yyj3744]
			yyc3744 = true
		} else if yyj3744 == 0 && yyv3744 == nil {
			yyv3744 = []PodCondition{}
			yyc3744 = true
		}
	}
	yyh3744.End()
	if yyc3744 {
		*v = yyv3744
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3748 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3749 := &yyv3748
		yy3749.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3750 := *v
	yyh3750, yyl3750 := z.DecSliceHelperStart()
	var yyc3750 bool
	if yyl3750 == 0 {
		if yyv3750 == nil {
			yyv3750 = []ContainerStatus{}
			yyc3750 = true
		} else if len(yyv3750) != 0 {
			yyv3750 = yyv3750[:0]
			yyc3750 = true
		}
	} else if yyl3750 > 0 {
		var yyrr3750, yyrl3750 int
		var yyrt3750 bool
		if yyl3750 > cap(yyv3750) {

			yyrg3750 := len(yyv3750) > 0
			yyv23750 := yyv3750
			yyrl3750, yyrt3750 = z.DecInferLen(yyl3750, z.DecBasicHandle().MaxInitLen, 128)
			if yyrt3750 {
				if yyrl3750 <= cap(yyv3750) {
					yyv3750 = yyv3750[:yyrl3750]
				} else {
					yyv3750 = make([]ContainerStatus, yyrl3750)
				}
			} else {
				yyv3750 = make([]ContainerStatus, yyrl3750)
			}
			yyc3750 = true
			yyrr3750 = len(yyv3750)
			if yyrg3750 {
				copy(yyv3750, yyv23750)
			}
		} else if yyl3750 != len(yyv3750) {
			yyv3750 = yyv3750[:yyl3750]
			yyc3750 = true
		}
		yyj3750 := 0
		for ; yyj3750 < yyrr3750; yyj3750++ {
			yyh3750.ElemContainerState(yyj3750)
			if r.TryDecodeAsNil() {
				yyv3750[yyj3750] = ContainerStatus{}
			} else {
				yyv3751 := &yyv3750[yyj3750]
				yyv3751.CodecDecodeSelf(d)
			}

		}
		if yyrt3750 {
			for ; yyj3750 < yyl3750; yyj3750++ {
				yyv3750 = append(yyv3750, ContainerStatus{})
				yyh3750.ElemContainerState(yyj3750)
				if r.TryDecodeAsNil() {
					yyv3750[yyj3750] = ContainerStatus{}
				} else {
					yyv3752 := &yyv3750[yyj3750]
					yyv3752.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3750 := 0
		for ; !r.CheckBreak(); yyj3750++ {

			if yyj3750 >= len(yyv3750) {
				yyv3750 = append(yyv3750, ContainerStatus{}) // var yyz3750 ContainerStatus
				yyc3750 = true
			}
			yyh3750.ElemContainerState(yyj3750)
			if yyj3750 < len(yyv3750) {
				if r.TryDecodeAsNil() {
					yyv3750[yyj3750] = ContainerStatus{}
				} else {
					yyv3753 := &yyv3750[yyj3750]
					yyv3753.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3750 < len(yyv3750) {
			yyv3750 = yyv3750[:yyj3750]
			yyc3750 = true
		} else if yyj3750 == 0 && yyv3750 == nil {
			yyv3750 = []ContainerStatus{}
			yyc3750 = true
		}
	}
	yyh3750.End()
	if yyc3750 {
		*v = yyv3750
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3754 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3755 := &yyv3754
		yy3755.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3756 := *v
	yyh3756, yyl3756 := z.DecSliceHelperStart()
	var yyc3756 bool
	if yyl3756 == 0 {
		if yyv3756 == nil {
			yyv3756 = []PodTemplate{}
			yyc3756 = true
		} else if len(yyv3756) != 0 {
			yyv3756 = yyv3756[:0]
			yyc3756 = true
		}
	} else if yyl3756 > 0 {
		var yyrr3756, yyrl3756 int
		var yyrt3756 bool
		if yyl3756 > cap(yyv3756) {

			yyrg3756 := len(yyv3756) > 0
			yyv23756 := yyv3756
			yyrl3756, yyrt3756 = z.DecInferLen(yyl3756, z.DecBasicHandle().MaxInitLen, 528)
			if yyrt3756 {
				if yyrl3756 <= cap(yyv3756) {
					yyv3756 = yyv3756[:yyrl3756]
				} else {
					yyv3756 = make([]PodTemplate, yyrl3756)
				}
			} else {
				yyv3756 = make([]PodTemplate, yyrl3756)
			}
			yyc3756 = true
			yyrr3756 = len(yyv3756)
			if yyrg3756 {
				copy(yyv3756, yyv23756)
			}
		} else if yyl3756 != len(yyv3756) {
			yyv3756 = yyv3756[:yyl3756]
			yyc3756 = true
		}
		yyj3756 := 0
		for ; yyj3756 < yyrr3756; yyj3756++ {
			yyh3756.ElemContainerState(yyj3756)
			if r.TryDecodeAsNil() {
				yyv3756[yyj3756] = PodTemplate{}
			} else {
				yyv3757 := &yyv3756[yyj3756]
				yyv3757.CodecDecodeSelf(d)
			}

		}
		if yyrt3756 {
			for ; yyj3756 < yyl3756; yyj3756++ {
				yyv3756 = append(yyv3756, PodTemplate{})
				yyh3756.ElemContainerState(yyj3756)
				if r.TryDecodeAsNil() {
					yyv3756[yyj3756] = PodTemplate{}
				} else {
					yyv3758 := &yyv3756[yyj3756]
					yyv3758.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3756 := 0
		for ; !r.CheckBreak(); yyj3756++ {

			if yyj3756 >= len(yyv3756) {
				yyv3756 = append(yyv3756, PodTemplate{}) // var yyz3756 PodTemplate
				yyc3756 = true
			}
			yyh3756.ElemContainerState(yyj3756)
			if yyj3756 < len(yyv3756) {
				if r.TryDecodeAsNil() {
					yyv3756[yyj3756] = PodTemplate{}
				} else {
					yyv3759 := &yyv3756[yyj3756]
					yyv3759.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3756 < len(yyv3756) {
			yyv3756 = yyv3756[:yyj3756]
			yyc3756 = true
		} else if yyj3756 == 0 && yyv3756 == nil {
			yyv3756 = []PodTemplate{}
			yyc3756 = true
		}
	}
	yyh3756.End()
	if yyc3756 {
		*v = yyv3756
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3760 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3761 := &yyv3760
		yy3761.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3762 := *v
	yyh3762, yyl3762 := z.DecSliceHelperStart()
	var yyc3762 bool
	if yyl3762 == 0 {
		if yyv3762 == nil {
			yyv3762 = []ReplicationController{}
			yyc3762 = true
		} else if len(yyv3762) != 0 {
			yyv3762 = yyv3762[:0]
			yyc3762 = true
		}
	} else if yyl3762 > 0 {
		var yyrr3762, yyrl3762 int
		var yyrt3762 bool
		if yyl3762 > cap(yyv3762) {

			yyrg3762 := len(yyv3762) > 0
			yyv23762 := yyv3762
			yyrl3762, yyrt3762 = z.DecInferLen(yyl3762, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3762 {
				if yyrl3762 <= cap(yyv3762) {
					yyv3762 = yyv3762[:yyrl3762]
				} else {
					yyv3762 = make([]ReplicationController, yyrl3762)
				}
			} else {
				yyv3762 = make([]ReplicationController, yyrl3762)
			}
			yyc3762 = true
			yyrr3762 = len(yyv3762)
			if yyrg3762 {
				copy(yyv3762, yyv23762)
			}
		} else if yyl3762 != len(yyv3762) {
			yyv3762 = yyv3762[:yyl3762]
			yyc3762 = true
		}
		yyj3762 := 0
		for ; yyj3762 < yyrr3762; yyj3762++ {
			yyh3762.ElemContainerState(yyj3762)
			if r.TryDecodeAsNil() {
				yyv3762[yyj3762] = ReplicationController{}
			} else {
				yyv3763 := &yyv3762[yyj3762]
				yyv3763.CodecDecodeSelf(d)
			}

		}
		if yyrt3762 {
			for ; yyj3762 < yyl3762; yyj3762++ {
				yyv3762 = append(yyv3762, ReplicationController{})
				yyh3762.ElemContainerState(yyj3762)
				if r.TryDecodeAsNil() {
					yyv3762[yyj3762] = ReplicationController{}
				} else {
					yyv3764 := &yyv3762[yyj3762]
					yyv3764.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3762 := 0
		for ; !r.CheckBreak(); yyj3762++ {

			if yyj3762 >= len(yyv3762) {
				yyv3762 = append(yyv3762, ReplicationController{}) // var yyz3762 ReplicationController
				yyc3762 = true
			}
			yyh3762.ElemContainerState(yyj3762)
			if yyj3762 < len(yyv3762) {
				if r.TryDecodeAsNil() {
					yyv3762[yyj3762] = ReplicationController{}
				} else {
					yyv3765 := &yyv3762[yyj3762]
					yyv3765.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3762 < len(yyv3762) {
			yyv3762 = yyv3762[:yyj3762]
			yyc3762 = true
		} else if yyj3762 == 0 && yyv3762 == nil {
			yyv3762 = []ReplicationController{}
			yyc3762 = true
		}
	}
	yyh3762.End()
	if yyc3762 {
		*v = yyv3762
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3766 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3767 := &yyv3766
		yy3767.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3768 := *v
	yyh3768, yyl3768 := z.DecSliceHelperStart()
	var yyc3768 bool
	if yyl3768 == 0 {
		if yyv3768 == nil {
			yyv3768 = []Service{}
			yyc3768 = true
		} else if len(yyv3768) != 0 {
			yyv3768 = yyv3768[:0]
			yyc3768 = true
		}
	} else if yyl3768 > 0 {
		var yyrr3768, yyrl3768 int
		var yyrt3768 bool
		if yyl3768 > cap(yyv3768) {

			yyrg3768 := len(yyv3768) > 0
			yyv23768 := yyv3768
			yyrl3768, yyrt3768 = z.DecInferLen(yyl3768, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt3768 {
				if yyrl3768 <= cap(yyv3768) {
					yyv3768 = yyv3768[:yyrl3768]
				} else {
					yyv3768 = make([]Service, yyrl3768)
				}
			} else {
				yyv3768 = make([]Service, yyrl3768)
			}
			yyc3768 = true
			yyrr3768 = len(yyv3768)
			if yyrg3768 {
				copy(yyv3768, yyv23768)
			}
		} else if yyl3768 != len(yyv3768) {
			yyv3768 = yyv3768[:yyl3768]
			yyc3768 = true
		}
		yyj3768 := 0
		for ; yyj3768 < yyrr3768; yyj3768++ {
			yyh3768.ElemContainerState(yyj3768)
			if r.TryDecodeAsNil() {
				yyv3768[yyj3768] = Service{}
			} else {
				yyv3769 := &yyv3768[yyj3768]
				yyv3769.CodecDecodeSelf(d)
			}

		}
		if yyrt3768 {
			for ; yyj3768 < yyl3768; yyj3768++ {
				yyv3768 = append(yyv3768, Service{})
				yyh3768.ElemContainerState(yyj3768)
				if r.TryDecodeAsNil() {
					yyv3768[yyj3768] = Service{}
				} else {
					yyv3770 := &yyv3768[yyj3768]
					yyv3770.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3768 := 0
		for ; !r.CheckBreak(); yyj3768++ {

			if yyj3768 >= len(yyv3768) {
				yyv3768 = append(yyv3768, Service{}) // var yyz3768 Service
				yyc3768 = true
			}
			yyh3768.ElemContainerState(yyj3768)
			if yyj3768 < len(yyv3768) {
				if r.TryDecodeAsNil() {
					yyv3768[yyj3768] = Service{}
				} else {
					yyv3771 := &yyv3768[yyj3768]
					yyv3771.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3768 < len(yyv3768) {
			yyv3768 = yyv3768[:yyj3768]
			yyc3768 = true
		} else if yyj3768 == 0 && yyv3768 == nil {
			yyv3768 = []Service{}
			yyc3768 = true
		}
	}
	yyh3768.End()
	if yyc3768 {
		*v = yyv3768
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3772 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3773 := &yyv3772
		yy3773.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3774 := *v
	yyh3774, yyl3774 := z.DecSliceHelperStart()
	var yyc3774 bool
	if yyl3774 == 0 {
		if yyv3774 == nil {
			yyv3774 = []LoadBalancerIngress{}
			yyc3774 = true
		} else if len(yyv3774) != 0 {
			yyv3774 = yyv3774[:0]
			yyc3774 = true
		}
	} else if yyl3774 > 0 {
		var yyrr3774, yyrl3774 int
		var yyrt3774 bool
		if yyl3774 > cap(yyv3774) {

			yyrg3774 := len(yyv3774) > 0
			yyv23774 := yyv3774
			yyrl3774, yyrt3774 = z.DecInferLen(yyl3774, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3774 {
				if yyrl3774 <= cap(yyv3774) {
					yyv3774 = yyv3774[:yyrl3774]
				} else {
					yyv3774 = make([]LoadBalancerIngress, yyrl3774)
				}
			} else {
				yyv3774 = make([]LoadBalancerIngress, yyrl3774)
			}
			yyc3774 = true
			yyrr3774 = len(yyv3774)
			if yyrg3774 {
				copy(yyv3774, yyv23774)
			}
		} else if yyl3774 != len(yyv3774) {
			yyv3774 = yyv3774[:yyl3774]
			yyc3774 = true
		}
		yyj3774 := 0
		for ; yyj3774 < yyrr3774; yyj3774++ {
			yyh3774.ElemContainerState(yyj3774)
			if r.TryDecodeAsNil() {
				yyv3774[yyj3774] = LoadBalancerIngress{}
			} else {
				yyv3775 := &yyv3774[yyj3774]
				yyv3775.CodecDecodeSelf(d)
			}

		}
		if yyrt3774 {
			for ; yyj3774 < yyl3774; yyj3774++ {
				yyv3774 = append(yyv3774, LoadBalancerIngress{})
				yyh3774.ElemContainerState(yyj3774)
				if r.TryDecodeAsNil() {
					yyv3774[yyj3774] = LoadBalancerIngress{}
				} else {
					yyv3776 := &yyv3774[yyj3774]
					yyv3776.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3774 := 0
		for ; !r.CheckBreak(); yyj3774++ {

			if yyj3774 >= len(yyv3774) {
				yyv3774 = append(yyv3774, LoadBalancerIngress{}) // var yyz3774 LoadBalancerIngress
				yyc3774 = true
			}
			yyh3774.ElemContainerState(yyj3774)
			if yyj3774 < len(yyv3774) {
				if r.TryDecodeAsNil() {
					yyv3774[yyj3774] = LoadBalancerIngress{}
				} else {
					yyv3777 := &yyv3774[yyj3774]
					yyv3777.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3774 < len(yyv3774) {
			yyv3774 = yyv3774[:yyj3774]
			yyc3774 = true
		} else if yyj3774 == 0 && yyv3774 == nil {
			yyv3774 = []LoadBalancerIngress{}
			yyc3774 = true
		}
	}
	yyh3774.End()
	if yyc3774 {
		*v = yyv3774
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3778 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3779 := &yyv3778
		yy3779.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3780 := *v
	yyh3780, yyl3780 := z.DecSliceHelperStart()
	var yyc3780 bool
	if yyl3780 == 0 {
		if yyv3780 == nil {
			yyv3780 = []ServicePort{}
			yyc3780 = true
		} else if len(yyv3780) != 0 {
			yyv3780 = yyv3780[:0]
			yyc3780 = true
		}
	} else if yyl3780 > 0 {
		var yyrr3780, yyrl3780 int
		var yyrt3780 bool
		if yyl3780 > cap(yyv3780) {

			yyrg3780 := len(yyv3780) > 0
			yyv23780 := yyv3780
			yyrl3780, yyrt3780 = z.DecInferLen(yyl3780, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt3780 {
				if yyrl3780 <= cap(yyv3780) {
					yyv3780 = yyv3780[:yyrl3780]
				} else {
					yyv3780 = make([]ServicePort, yyrl3780)
				}
			} else {
				yyv3780 = make([]ServicePort, yyrl3780)
			}
			yyc3780 = true
			yyrr3780 = len(yyv3780)
			if yyrg3780 {
				copy(yyv3780, yyv23780)
			}
		} else if yyl3780 != len(yyv3780) {
			yyv3780 = yyv3780[:yyl3780]
			yyc3780 = true
		}
		yyj3780 := 0
		for ; yyj3780 < yyrr3780; yyj3780++ {
			yyh3780.ElemContainerState(yyj3780)
			if r.TryDecodeAsNil() {
				yyv3780[yyj3780] = ServicePort{}
			} else {
				yyv3781 := &yyv3780[yyj3780]
				yyv3781.CodecDecodeSelf(d)
			}

		}
		if yyrt3780 {
			for ; yyj3780 < yyl3780; yyj3780++ {
				yyv3780 = append(yyv3780, ServicePort{})
				yyh3780.ElemContainerState(yyj3780)
				if r.TryDecodeAsNil() {
					yyv3780[yyj3780] = ServicePort{}
				} else {
					yyv3782 := &yyv3780[yyj3780]
					yyv3782.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3780 := 0
		for ; !r.CheckBreak(); yyj3780++ {

			if yyj3780 >= len(yyv3780) {
				yyv3780 = append(yyv3780, ServicePort{}) // var yyz3780 ServicePort
				yyc3780 = true
			}
			yyh3780.ElemContainerState(yyj3780)
			if yyj3780 < len(yyv3780) {
				if r.TryDecodeAsNil() {
					yyv3780[yyj3780] = ServicePort{}
				} else {
					yyv3783 := &yyv3780[yyj3780]
					yyv3783.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3780 < len(yyv3780) {
			yyv3780 = yyv3780[:yyj3780]
			yyc3780 = true
		} else if yyj3780 == 0 && yyv3780 == nil {
			yyv3780 = []ServicePort{}
			yyc3780 = true
		}
	}
	yyh3780.End()
	if yyc3780 {
		*v = yyv3780
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3784 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3785 := &yyv3784
		yy3785.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3786 := *v
	yyh3786, yyl3786 := z.DecSliceHelperStart()
	var yyc3786 bool
	if yyl3786 == 0 {
		if yyv3786 == nil {
			yyv3786 = []ObjectReference{}
			yyc3786 = true
		} else if len(yyv3786) != 0 {
			yyv3786 = yyv3786[:0]
			yyc3786 = true
		}
	} else if yyl3786 > 0 {
		var yyrr3786, yyrl3786 int
		var yyrt3786 bool
		if yyl3786 > cap(yyv3786) {

			yyrg3786 := len(yyv3786) > 0
			yyv23786 := yyv3786
			yyrl3786, yyrt3786 = z.DecInferLen(yyl3786, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3786 {
				if yyrl3786 <= cap(yyv3786) {
					yyv3786 = yyv3786[:yyrl3786]
				} else {
					yyv3786 = make([]ObjectReference, yyrl3786)
				}
			} else {
				yyv3786 = make([]ObjectReference, yyrl3786)
			}
			yyc3786 = true
			yyrr3786 = len(yyv3786)
			if yyrg3786 {
				copy(yyv3786, yyv23786)
			}
		} else if yyl3786 != len(yyv3786) {
			yyv3786 = yyv3786[:yyl3786]
			yyc3786 = true
		}
		yyj3786 := 0
		for ; yyj3786 < yyrr3786; yyj3786++ {
			yyh3786.ElemContainerState(yyj3786)
			if r.TryDecodeAsNil() {
				yyv3786[yyj3786] = ObjectReference{}
			} else {
				yyv3787 := &yyv3786[yyj3786]
				yyv3787.CodecDecodeSelf(d)
			}

		}
		if yyrt3786 {
			for ; yyj3786 < yyl3786; yyj3786++ {
				yyv3786 = append(yyv3786, ObjectReference{})
				yyh3786.ElemContainerState(yyj3786)
				if r.TryDecodeAsNil() {
					yyv3786[yyj3786] = ObjectReference{}
				} else {
					yyv3788 := &yyv3786[yyj3786]
					yyv3788.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3786 := 0
		for ; !r.CheckBreak(); yyj3786++ {

			if yyj3786 >= len(yyv3786) {
				yyv3786 = append(yyv3786, ObjectReference{}) // var yyz3786 ObjectReference
				yyc3786 = true
			}
			yyh3786.ElemContainerState(yyj3786)
			if yyj3786 < len(yyv3786) {
				if r.TryDecodeAsNil() {
					yyv3786[yyj3786] = ObjectReference{}
				} else {
					yyv3789 := &yyv3786[yyj3786]
					yyv3789.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3786 < len(yyv3786) {
			yyv3786 = yyv3786[:yyj3786]
			yyc3786 = true
		} else if yyj3786 == 0 && yyv3786 == nil {
			yyv3786 = []ObjectReference{}
			yyc3786 = true
		}
	}
	yyh3786.End()
	if yyc3786 {
		*v = yyv3786
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3790 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3791 := &yyv3790
		yy3791.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3792 := *v
	yyh3792, yyl3792 := z.DecSliceHelperStart()
	var yyc3792 bool
	if yyl3792 == 0 {
		if yyv3792 == nil {
			yyv3792 = []ServiceAccount{}
			yyc3792 = true
		} else if len(yyv3792) != 0 {
			yyv3792 = yyv3792[:0]
			yyc3792 = true
		}
	} else if yyl3792 > 0 {
		var yyrr3792, yyrl3792 int
		var yyrt3792 bool
		if yyl3792 > cap(yyv3792) {

			yyrg3792 := len(yyv3792) > 0
			yyv23792 := yyv3792
			yyrl3792, yyrt3792 = z.DecInferLen(yyl3792, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt3792 {
				if yyrl3792 <= cap(yyv3792) {
					yyv3792 = yyv3792[:yyrl3792]
				} else {
					yyv3792 = make([]ServiceAccount, yyrl3792)
				}
			} else {
				yyv3792 = make([]ServiceAccount, yyrl3792)
			}
			yyc3792 = true
			yyrr3792 = len(yyv3792)
			if yyrg3792 {
				copy(yyv3792, yyv23792)
			}
		} else if yyl3792 != len(yyv3792) {
			yyv3792 = yyv3792[:yyl3792]
			yyc3792 = true
		}
		yyj3792 := 0
		for ; yyj3792 < yyrr3792; yyj3792++ {
			yyh3792.ElemContainerState(yyj3792)
			if r.TryDecodeAsNil() {
				yyv3792[yyj3792] = ServiceAccount{}
			} else {
				yyv3793 := &yyv3792[yyj3792]
				yyv3793.CodecDecodeSelf(d)
			}

		}
		if yyrt3792 {
			for ; yyj3792 < yyl3792; yyj3792++ {
				yyv3792 = append(yyv3792, ServiceAccount{})
				yyh3792.ElemContainerState(yyj3792)
				if r.TryDecodeAsNil() {
					yyv3792[yyj3792] = ServiceAccount{}
				} else {
					yyv3794 := &yyv3792[yyj3792]
					yyv3794.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3792 := 0
		for ; !r.CheckBreak(); yyj3792++ {

			if yyj3792 >= len(yyv3792) {
				yyv3792 = append(yyv3792, ServiceAccount{}) // var yyz3792 ServiceAccount
				yyc3792 = true
			}
			yyh3792.ElemContainerState(yyj3792)
			if yyj3792 < len(yyv3792) {
				if r.TryDecodeAsNil() {
					yyv3792[yyj3792] = ServiceAccount{}
				} else {
					yyv3795 := &yyv3792[yyj3792]
					yyv3795.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3792 < len(yyv3792) {
			yyv3792 = yyv3792[:yyj3792]
			yyc3792 = true
		} else if yyj3792 == 0 && yyv3792 == nil {
			yyv3792 = []ServiceAccount{}
			yyc3792 = true
		}
	}
	yyh3792.End()
	if yyc3792 {
		*v = yyv3792
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3796 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3797 := &yyv3796
		yy3797.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3798 := *v
	yyh3798, yyl3798 := z.DecSliceHelperStart()
	var yyc3798 bool
	if yyl3798 == 0 {
		if yyv3798 == nil {
			yyv3798 = []EndpointSubset{}
			yyc3798 = true
		} else if len(yyv3798) != 0 {
			yyv3798 = yyv3798[:0]
			yyc3798 = true
		}
	} else if yyl3798 > 0 {
		var yyrr3798, yyrl3798 int
		var yyrt3798 bool
		if yyl3798 > cap(yyv3798) {

			yyrg3798 := len(yyv3798) > 0
			yyv23798 := yyv3798
			yyrl3798, yyrt3798 = z.DecInferLen(yyl3798, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt3798 {
				if yyrl3798 <= cap(yyv3798) {
					yyv3798 = yyv3798[:yyrl3798]
				} else {
					yyv3798 = make([]EndpointSubset, yyrl3798)
				}
			} else {
				yyv3798 = make([]EndpointSubset, yyrl3798)
			}
			yyc3798 = true
			yyrr3798 = len(yyv3798)
			if yyrg3798 {
				copy(yyv3798, yyv23798)
			}
		} else if yyl3798 != len(yyv3798) {
			yyv3798 = yyv3798[:yyl3798]
			yyc3798 = true
		}
		yyj3798 := 0
		for ; yyj3798 < yyrr3798; yyj3798++ {
			yyh3798.ElemContainerState(yyj3798)
			if r.TryDecodeAsNil() {
				yyv3798[yyj3798] = EndpointSubset{}
			} else {
				yyv3799 := &yyv3798[yyj3798]
				yyv3799.CodecDecodeSelf(d)
			}

		}
		if yyrt3798 {
			for ; yyj3798 < yyl3798; yyj3798++ {
				yyv3798 = append(yyv3798, EndpointSubset{})
				yyh3798.ElemContainerState(yyj3798)
				if r.TryDecodeAsNil() {
					yyv3798[yyj3798] = EndpointSubset{}
				} else {
					yyv3800 := &yyv3798[yyj3798]
					yyv3800.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3798 := 0
		for ; !r.CheckBreak(); yyj3798++ {

			if yyj3798 >= len(yyv3798) {
				yyv3798 = append(yyv3798, EndpointSubset{}) // var yyz3798 EndpointSubset
				yyc3798 = true
			}
			yyh3798.ElemContainerState(yyj3798)
			if yyj3798 < len(yyv3798) {
				if r.TryDecodeAsNil() {
					yyv3798[yyj3798] = EndpointSubset{}
				} else {
					yyv3801 := &yyv3798[yyj3798]
					yyv3801.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3798 < len(yyv3798) {
			yyv3798 = yyv3798[:yyj3798]
			yyc3798 = true
		} else if yyj3798 == 0 && yyv3798 == nil {
			yyv3798 = []EndpointSubset{}
			yyc3798 = true
		}
	}
	yyh3798.End()
	if yyc3798 {
		*v = yyv3798
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3802 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3803 := &yyv3802
		yy3803.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3804 := *v
	yyh3804, yyl3804 := z.DecSliceHelperStart()
	var yyc3804 bool
	if yyl3804 == 0 {
		if yyv3804 == nil {
			yyv3804 = []EndpointAddress{}
			yyc3804 = true
		} else if len(yyv3804) != 0 {
			yyv3804 = yyv3804[:0]
			yyc3804 = true
		}
	} else if yyl3804 > 0 {
		var yyrr3804, yyrl3804 int
		var yyrt3804 bool
		if yyl3804 > cap(yyv3804) {

			yyrg3804 := len(yyv3804) > 0
			yyv23804 := yyv3804
			yyrl3804, yyrt3804 = z.DecInferLen(yyl3804, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3804 {
				if yyrl3804 <= cap(yyv3804) {
					yyv3804 = yyv3804[:yyrl3804]
				} else {
					yyv3804 = make([]EndpointAddress, yyrl3804)
				}
			} else {
				yyv3804 = make([]EndpointAddress, yyrl3804)
			}
			yyc3804 = true
			yyrr3804 = len(yyv3804)
			if yyrg3804 {
				copy(yyv3804, yyv23804)
			}
		} else if yyl3804 != len(yyv3804) {
			yyv3804 = yyv3804[:yyl3804]
			yyc3804 = true
		}
		yyj3804 := 0
		for ; yyj3804 < yyrr3804; yyj3804++ {
			yyh3804.ElemContainerState(yyj3804)
			if r.TryDecodeAsNil() {
				yyv3804[yyj3804] = EndpointAddress{}
			} else {
				yyv3805 := &yyv3804[yyj3804]
				yyv3805.CodecDecodeSelf(d)
			}

		}
		if yyrt3804 {
			for ; yyj3804 < yyl3804; yyj3804++ {
				yyv3804 = append(yyv3804, EndpointAddress{})
				yyh3804.ElemContainerState(yyj3804)
				if r.TryDecodeAsNil() {
					yyv3804[yyj3804] = EndpointAddress{}
				} else {
					yyv3806 := &yyv3804[yyj3804]
					yyv3806.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3804 := 0
		for ; !r.CheckBreak(); yyj3804++ {

			if yyj3804 >= len(yyv3804) {
				yyv3804 = append(yyv3804, EndpointAddress{}) // var yyz3804 EndpointAddress
				yyc3804 = true
			}
			yyh3804.ElemContainerState(yyj3804)
			if yyj3804 < len(yyv3804) {
				if r.TryDecodeAsNil() {
					yyv3804[yyj3804] = EndpointAddress{}
				} else {
					yyv3807 := &yyv3804[yyj3804]
					yyv3807.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3804 < len(yyv3804) {
			yyv3804 = yyv3804[:yyj3804]
			yyc3804 = true
		} else if yyj3804 == 0 && yyv3804 == nil {
			yyv3804 = []EndpointAddress{}
			yyc3804 = true
		}
	}
	yyh3804.End()
	if yyc3804 {
		*v = yyv3804
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3808 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3809 := &yyv3808
		yy3809.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3810 := *v
	yyh3810, yyl3810 := z.DecSliceHelperStart()
	var yyc3810 bool
	if yyl3810 == 0 {
		if yyv3810 == nil {
			yyv3810 = []EndpointPort{}
			yyc3810 = true
		} else if len(yyv3810) != 0 {
			yyv3810 = yyv3810[:0]
			yyc3810 = true
		}
	} else if yyl3810 > 0 {
		var yyrr3810, yyrl3810 int
		var yyrt3810 bool
		if yyl3810 > cap(yyv3810) {

			yyrg3810 := len(yyv3810) > 0
			yyv23810 := yyv3810
			yyrl3810, yyrt3810 = z.DecInferLen(yyl3810, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3810 {
				if yyrl3810 <= cap(yyv3810) {
					yyv3810 = yyv3810[:yyrl3810]
				} else {
					yyv3810 = make([]EndpointPort, yyrl3810)
				}
			} else {
				yyv3810 = make([]EndpointPort, yyrl3810)
			}
			yyc3810 = true
			yyrr3810 = len(yyv3810)
			if yyrg3810 {
				copy(yyv3810, yyv23810)
			}
		} else if yyl3810 != len(yyv3810) {
			yyv3810 = yyv3810[:yyl3810]
			yyc3810 = true
		}
		yyj3810 := 0
		for ; yyj3810 < yyrr3810; yyj3810++ {
			yyh3810.ElemContainerState(yyj3810)
			if r.TryDecodeAsNil() {
				yyv3810[yyj3810] = EndpointPort{}
			} else {
				yyv3811 := &yyv3810[yyj3810]
				yyv3811.CodecDecodeSelf(d)
			}

		}
		if yyrt3810 {
			for ; yyj3810 < yyl3810; yyj3810++ {
				yyv3810 = append(yyv3810, EndpointPort{})
				yyh3810.ElemContainerState(yyj3810)
				if r.TryDecodeAsNil() {
					yyv3810[yyj3810] = EndpointPort{}
				} else {
					yyv3812 := &yyv3810[yyj3810]
					yyv3812.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3810 := 0
		for ; !r.CheckBreak(); yyj3810++ {

			if yyj3810 >= len(yyv3810) {
				yyv3810 = append(yyv3810, EndpointPort{}) // var yyz3810 EndpointPort
				yyc3810 = true
			}
			yyh3810.ElemContainerState(yyj3810)
			if yyj3810 < len(yyv3810) {
				if r.TryDecodeAsNil() {
					yyv3810[yyj3810] = EndpointPort{}
				} else {
					yyv3813 := &yyv3810[yyj3810]
					yyv3813.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3810 < len(yyv3810) {
			yyv3810 = yyv3810[:yyj3810]
			yyc3810 = true
		} else if yyj3810 == 0 && yyv3810 == nil {
			yyv3810 = []EndpointPort{}
			yyc3810 = true
		}
	}
	yyh3810.End()
	if yyc3810 {
		*v = yyv3810
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3814 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3815 := &yyv3814
		yy3815.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3816 := *v
	yyh3816, yyl3816 := z.DecSliceHelperStart()
	var yyc3816 bool
	if yyl3816 == 0 {
		if yyv3816 == nil {
			yyv3816 = []Endpoints{}
			yyc3816 = true
		} else if len(yyv3816) != 0 {
			yyv3816 = yyv3816[:0]
			yyc3816 = true
		}
	} else if yyl3816 > 0 {
		var yyrr3816, yyrl3816 int
		var yyrt3816 bool
		if yyl3816 > cap(yyv3816) {

			yyrg3816 := len(yyv3816) > 0
			yyv23816 := yyv3816
			yyrl3816, yyrt3816 = z.DecInferLen(yyl3816, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3816 {
				if yyrl3816 <= cap(yyv3816) {
					yyv3816 = yyv3816[:yyrl3816]
				} else {
					yyv3816 = make([]Endpoints, yyrl3816)
				}
			} else {
				yyv3816 = make([]Endpoints, yyrl3816)
			}
			yyc3816 = true
			yyrr3816 = len(yyv3816)
			if yyrg3816 {
				copy(yyv3816, yyv23816)
			}
		} else if yyl3816 != len(yyv3816) {
			yyv3816 = yyv3816[:yyl3816]
			yyc3816 = true
		}
		yyj3816 := 0
		for ; yyj3816 < yyrr3816; yyj3816++ {
			yyh3816.ElemContainerState(yyj3816)
			if r.TryDecodeAsNil() {
				yyv3816[yyj3816] = Endpoints{}
			} else {
				yyv3817 := &yyv3816[yyj3816]
				yyv3817.CodecDecodeSelf(d)
			}

		}
		if yyrt3816 {
			for ; yyj3816 < yyl3816; yyj3816++ {
				yyv3816 = append(yyv3816, Endpoints{})
				yyh3816.ElemContainerState(yyj3816)
				if r.TryDecodeAsNil() {
					yyv3816[yyj3816] = Endpoints{}
				} else {
					yyv3818 := &yyv3816[yyj3816]
					yyv3818.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3816 := 0
		for ; !r.CheckBreak(); yyj3816++ {

			if yyj3816 >= len(yyv3816) {
				yyv3816 = append(yyv3816, Endpoints{}) // var yyz3816 Endpoints
				yyc3816 = true
			}
			yyh3816.ElemContainerState(yyj3816)
			if yyj3816 < len(yyv3816) {
				if r.TryDecodeAsNil() {
					yyv3816[yyj3816] = Endpoints{}
				} else {
					yyv3819 := &yyv3816[yyj3816]
					yyv3819.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3816 < len(yyv3816) {
			yyv3816 = yyv3816[:yyj3816]
			yyc3816 = true
		} else if yyj3816 == 0 && yyv3816 == nil {
			yyv3816 = []Endpoints{}
			yyc3816 = true
		}
	}
	yyh3816.End()
	if yyc3816 {
		*v = yyv3816
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3820 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3821 := &yyv3820
		yy3821.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3822 := *v
	yyh3822, yyl3822 := z.DecSliceHelperStart()
	var yyc3822 bool
	if yyl3822 == 0 {
		if yyv3822 == nil {
			yyv3822 = []NodeCondition{}
			yyc3822 = true
		} else if len(yyv3822) != 0 {
			yyv3822 = yyv3822[:0]
			yyc3822 = true
		}
	} else if yyl3822 > 0 {
		var yyrr3822, yyrl3822 int
		var yyrt3822 bool
		if yyl3822 > cap(yyv3822) {

			yyrg3822 := len(yyv3822) > 0
			yyv23822 := yyv3822
			yyrl3822, yyrt3822 = z.DecInferLen(yyl3822, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3822 {
				if yyrl3822 <= cap(yyv3822) {
					yyv3822 = yyv3822[:yyrl3822]
				} else {
					yyv3822 = make([]NodeCondition, yyrl3822)
				}
			} else {
				yyv3822 = make([]NodeCondition, yyrl3822)
			}
			yyc3822 = true
			yyrr3822 = len(yyv3822)
			if yyrg3822 {
				copy(yyv3822, yyv23822)
			}
		} else if yyl3822 != len(yyv3822) {
			yyv3822 = yyv3822[:yyl3822]
			yyc3822 = true
		}
		yyj3822 := 0
		for ; yyj3822 < yyrr3822; yyj3822++ {
			yyh3822.ElemContainerState(yyj3822)
			if r.TryDecodeAsNil() {
				yyv3822[yyj3822] = NodeCondition{}
			} else {
				yyv3823 := &yyv3822[yyj3822]
				yyv3823.CodecDecodeSelf(d)
			}

		}
		if yyrt3822 {
			for ; yyj3822 < yyl3822; yyj3822++ {
				yyv3822 = append(yyv3822, NodeCondition{})
				yyh3822.ElemContainerState(yyj3822)
				if r.TryDecodeAsNil() {
					yyv3822[yyj3822] = NodeCondition{}
				} else {
					yyv3824 := &yyv3822[yyj3822]
					yyv3824.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3822 := 0
		for ; !r.CheckBreak(); yyj3822++ {

			if yyj3822 >= len(yyv3822) {
				yyv3822 = append(yyv3822, NodeCondition{}) // var yyz3822 NodeCondition
				yyc3822 = true
			}
			yyh3822.ElemContainerState(yyj3822)
			if yyj3822 < len(yyv3822) {
				if r.TryDecodeAsNil() {
					yyv3822[yyj3822] = NodeCondition{}
				} else {
					yyv3825 := &yyv3822[yyj3822]
					yyv3825.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3822 < len(yyv3822) {
			yyv3822 = yyv3822[:yyj3822]
			yyc3822 = true
		} else if yyj3822 == 0 && yyv3822 == nil {
			yyv3822 = []NodeCondition{}
			yyc3822 = true
		}
	}
	yyh3822.End()
	if yyc3822 {
		*v = yyv3822
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3826 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3827 := &yyv3826
		yy3827.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3828 := *v
	yyh3828, yyl3828 := z.DecSliceHelperStart()
	var yyc3828 bool
	if yyl3828 == 0 {
		if yyv3828 == nil {
			yyv3828 = []NodeAddress{}
			yyc3828 = true
		} else if len(yyv3828) != 0 {
			yyv3828 = yyv3828[:0]
			yyc3828 = true
		}
	} else if yyl3828 > 0 {
		var yyrr3828, yyrl3828 int
		var yyrt3828 bool
		if yyl3828 > cap(yyv3828) {

			yyrg3828 := len(yyv3828) > 0
			yyv23828 := yyv3828
			yyrl3828, yyrt3828 = z.DecInferLen(yyl3828, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3828 {
				if yyrl3828 <= cap(yyv3828) {
					yyv3828 = yyv3828[:yyrl3828]
				} else {
					yyv3828 = make([]NodeAddress, yyrl3828)
				}
			} else {
				yyv3828 = make([]NodeAddress, yyrl3828)
			}
			yyc3828 = true
			yyrr3828 = len(yyv3828)
			if yyrg3828 {
				copy(yyv3828, yyv23828)
			}
		} else if yyl3828 != len(yyv3828) {
			yyv3828 = yyv3828[:yyl3828]
			yyc3828 = true
		}
		yyj3828 := 0
		for ; yyj3828 < yyrr3828; yyj3828++ {
			yyh3828.ElemContainerState(yyj3828)
			if r.TryDecodeAsNil() {
				yyv3828[yyj3828] = NodeAddress{}
			} else {
				yyv3829 := &yyv3828[yyj3828]
				yyv3829.CodecDecodeSelf(d)
			}

		}
		if yyrt3828 {
			for ; yyj3828 < yyl3828; yyj3828++ {
				yyv3828 = append(yyv3828, NodeAddress{})
				yyh3828.ElemContainerState(yyj3828)
				if r.TryDecodeAsNil() {
					yyv3828[yyj3828] = NodeAddress{}
				} else {
					yyv3830 := &yyv3828[yyj3828]
					yyv3830.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3828 := 0
		for ; !r.CheckBreak(); yyj3828++ {

			if yyj3828 >= len(yyv3828) {
				yyv3828 = append(yyv3828, NodeAddress{}) // var yyz3828 NodeAddress
				yyc3828 = true
			}
			yyh3828.ElemContainerState(yyj3828)
			if yyj3828 < len(yyv3828) {
				if r.TryDecodeAsNil() {
					yyv3828[yyj3828] = NodeAddress{}
				} else {
					yyv3831 := &yyv3828[yyj3828]
					yyv3831.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3828 < len(yyv3828) {
			yyv3828 = yyv3828[:yyj3828]
			yyc3828 = true
		} else if yyj3828 == 0 && yyv3828 == nil {
			yyv3828 = []NodeAddress{}
			yyc3828 = true
		}
	}
	yyh3828.End()
	if yyc3828 {
		*v = yyv3828
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3832, yyv3832 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk3832.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy3833 := &yyv3832
		yym3834 := z.EncBinary()
		_ = yym3834
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3833) {
		} else if !yym3834 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3833)
		} else {
			z.EncFallback(yy3833)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3835 := *v
	yyl3835 := r.ReadMapStart()
	yybh3835 := z.DecBasicHandle()
	if yyv3835 == nil {
		yyrl3835, _ := z.DecInferLen(yyl3835, yybh3835.MaxInitLen, 40)
		yyv3835 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3835)
		*v = yyv3835
	}
	var yymk3835 ResourceName
	var yymv3835 pkg3_resource.Quantity
	var yymg3835 bool
	if yybh3835.MapValueReset {
		yymg3835 = true
	}
	if yyl3835 > 0 {
		for yyj3835 := 0; yyj3835 < yyl3835; yyj3835++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3835 = ""
			} else {
				yymk3835 = ResourceName(r.DecodeString())
			}

			if yymg3835 {
				yymv3835 = yyv3835[yymk3835]
			} else {
				yymv3835 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3835 = pkg3_resource.Quantity{}
			} else {
				yyv3837 := &yymv3835
				yym3838 := z.DecBinary()
				_ = yym3838
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3837) {
				} else if !yym3838 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3837)
				} else {
					z.DecFallback(yyv3837, false)
				}
			}

			if yyv3835 != nil {
				yyv3835[yymk3835] = yymv3835
			}
		}
	} else if yyl3835 < 0 {
		for yyj3835 := 0; !r.CheckBreak(); yyj3835++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3835 = ""
			} else {
				yymk3835 = ResourceName(r.DecodeString())
			}

			if yymg3835 {
				yymv3835 = yyv3835[yymk3835]
			} else {
				yymv3835 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3835 = pkg3_resource.Quantity{}
			} else {
				yyv3840 := &yymv3835
				yym3841 := z.DecBinary()
				_ = yym3841
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3840) {
				} else if !yym3841 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3840)
				} else {
					z.DecFallback(yyv3840, false)
				}
			}

			if yyv3835 != nil {
				yyv3835[yymk3835] = yymv3835
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3842 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3843 := &yyv3842
		yy3843.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3844 := *v
	yyh3844, yyl3844 := z.DecSliceHelperStart()
	var yyc3844 bool
	if yyl3844 == 0 {
		if yyv3844 == nil {
			yyv3844 = []Node{}
			yyc3844 = true
		} else if len(yyv3844) != 0 {
			yyv3844 = yyv3844[:0]
			yyc3844 = true
		}
	} else if yyl3844 > 0 {
		var yyrr3844, yyrl3844 int
		var yyrt3844 bool
		if yyl3844 > cap(yyv3844) {

			yyrg3844 := len(yyv3844) > 0
			yyv23844 := yyv3844
			yyrl3844, yyrt3844 = z.DecInferLen(yyl3844, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt3844 {
				if yyrl3844 <= cap(yyv3844) {
					yyv3844 = yyv3844[:yyrl3844]
				} else {
					yyv3844 = make([]Node, yyrl3844)
				}
			} else {
				yyv3844 = make([]Node, yyrl3844)
			}
			yyc3844 = true
			yyrr3844 = len(yyv3844)
			if yyrg3844 {
				copy(yyv3844, yyv23844)
			}
		} else if yyl3844 != len(yyv3844) {
			yyv3844 = yyv3844[:yyl3844]
			yyc3844 = true
		}
		yyj3844 := 0
		for ; yyj3844 < yyrr3844; yyj3844++ {
			yyh3844.ElemContainerState(yyj3844)
			if r.TryDecodeAsNil() {
				yyv3844[yyj3844] = Node{}
			} else {
				yyv3845 := &yyv3844[yyj3844]
				yyv3845.CodecDecodeSelf(d)
			}

		}
		if yyrt3844 {
			for ; yyj3844 < yyl3844; yyj3844++ {
				yyv3844 = append(yyv3844, Node{})
				yyh3844.ElemContainerState(yyj3844)
				if r.TryDecodeAsNil() {
					yyv3844[yyj3844] = Node{}
				} else {
					yyv3846 := &yyv3844[yyj3844]
					yyv3846.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3844 := 0
		for ; !r.CheckBreak(); yyj3844++ {

			if yyj3844 >= len(yyv3844) {
				yyv3844 = append(yyv3844, Node{}) // var yyz3844 Node
				yyc3844 = true
			}
			yyh3844.ElemContainerState(yyj3844)
			if yyj3844 < len(yyv3844) {
				if r.TryDecodeAsNil() {
					yyv3844[yyj3844] = Node{}
				} else {
					yyv3847 := &yyv3844[yyj3844]
					yyv3847.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3844 < len(yyv3844) {
			yyv3844 = yyv3844[:yyj3844]
			yyc3844 = true
		} else if yyj3844 == 0 && yyv3844 == nil {
			yyv3844 = []Node{}
			yyc3844 = true
		}
	}
	yyh3844.End()
	if yyc3844 {
		*v = yyv3844
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3848 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3848.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3849 := *v
	yyh3849, yyl3849 := z.DecSliceHelperStart()
	var yyc3849 bool
	if yyl3849 == 0 {
		if yyv3849 == nil {
			yyv3849 = []FinalizerName{}
			yyc3849 = true
		} else if len(yyv3849) != 0 {
			yyv3849 = yyv3849[:0]
			yyc3849 = true
		}
	} else if yyl3849 > 0 {
		var yyrr3849, yyrl3849 int
		var yyrt3849 bool
		if yyl3849 > cap(yyv3849) {

			yyrl3849, yyrt3849 = z.DecInferLen(yyl3849, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3849 {
				if yyrl3849 <= cap(yyv3849) {
					yyv3849 = yyv3849[:yyrl3849]
				} else {
					yyv3849 = make([]FinalizerName, yyrl3849)
				}
			} else {
				yyv3849 = make([]FinalizerName, yyrl3849)
			}
			yyc3849 = true
			yyrr3849 = len(yyv3849)
		} else if yyl3849 != len(yyv3849) {
			yyv3849 = yyv3849[:yyl3849]
			yyc3849 = true
		}
		yyj3849 := 0
		for ; yyj3849 < yyrr3849; yyj3849++ {
			yyh3849.ElemContainerState(yyj3849)
			if r.TryDecodeAsNil() {
				yyv3849[yyj3849] = ""
			} else {
				yyv3849[yyj3849] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3849 {
			for ; yyj3849 < yyl3849; yyj3849++ {
				yyv3849 = append(yyv3849, "")
				yyh3849.ElemContainerState(yyj3849)
				if r.TryDecodeAsNil() {
					yyv3849[yyj3849] = ""
				} else {
					yyv3849[yyj3849] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj3849 := 0
		for ; !r.CheckBreak(); yyj3849++ {

			if yyj3849 >= len(yyv3849) {
				yyv3849 = append(yyv3849, "") // var yyz3849 FinalizerName
				yyc3849 = true
			}
			yyh3849.ElemContainerState(yyj3849)
			if yyj3849 < len(yyv3849) {
				if r.TryDecodeAsNil() {
					yyv3849[yyj3849] = ""
				} else {
					yyv3849[yyj3849] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3849 < len(yyv3849) {
			yyv3849 = yyv3849[:yyj3849]
			yyc3849 = true
		} else if yyj3849 == 0 && yyv3849 == nil {
			yyv3849 = []FinalizerName{}
			yyc3849 = true
		}
	}
	yyh3849.End()
	if yyc3849 {
		*v = yyv3849
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3853 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3854 := &yyv3853
		yy3854.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3855 := *v
	yyh3855, yyl3855 := z.DecSliceHelperStart()
	var yyc3855 bool
	if yyl3855 == 0 {
		if yyv3855 == nil {
			yyv3855 = []Namespace{}
			yyc3855 = true
		} else if len(yyv3855) != 0 {
			yyv3855 = yyv3855[:0]
			yyc3855 = true
		}
	} else if yyl3855 > 0 {
		var yyrr3855, yyrl3855 int
		var yyrt3855 bool
		if yyl3855 > cap(yyv3855) {

			yyrg3855 := len(yyv3855) > 0
			yyv23855 := yyv3855
			yyrl3855, yyrt3855 = z.DecInferLen(yyl3855, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3855 {
				if yyrl3855 <= cap(yyv3855) {
					yyv3855 = yyv3855[:yyrl3855]
				} else {
					yyv3855 = make([]Namespace, yyrl3855)
				}
			} else {
				yyv3855 = make([]Namespace, yyrl3855)
			}
			yyc3855 = true
			yyrr3855 = len(yyv3855)
			if yyrg3855 {
				copy(yyv3855, yyv23855)
			}
		} else if yyl3855 != len(yyv3855) {
			yyv3855 = yyv3855[:yyl3855]
			yyc3855 = true
		}
		yyj3855 := 0
		for ; yyj3855 < yyrr3855; yyj3855++ {
			yyh3855.ElemContainerState(yyj3855)
			if r.TryDecodeAsNil() {
				yyv3855[yyj3855] = Namespace{}
			} else {
				yyv3856 := &yyv3855[yyj3855]
				yyv3856.CodecDecodeSelf(d)
			}

		}
		if yyrt3855 {
			for ; yyj3855 < yyl3855; yyj3855++ {
				yyv3855 = append(yyv3855, Namespace{})
				yyh3855.ElemContainerState(yyj3855)
				if r.TryDecodeAsNil() {
					yyv3855[yyj3855] = Namespace{}
				} else {
					yyv3857 := &yyv3855[yyj3855]
					yyv3857.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3855 := 0
		for ; !r.CheckBreak(); yyj3855++ {

			if yyj3855 >= len(yyv3855) {
				yyv3855 = append(yyv3855, Namespace{}) // var yyz3855 Namespace
				yyc3855 = true
			}
			yyh3855.ElemContainerState(yyj3855)
			if yyj3855 < len(yyv3855) {
				if r.TryDecodeAsNil() {
					yyv3855[yyj3855] = Namespace{}
				} else {
					yyv3858 := &yyv3855[yyj3855]
					yyv3858.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3855 < len(yyv3855) {
			yyv3855 = yyv3855[:yyj3855]
			yyc3855 = true
		} else if yyj3855 == 0 && yyv3855 == nil {
			yyv3855 = []Namespace{}
			yyc3855 = true
		}
	}
	yyh3855.End()
	if yyc3855 {
		*v = yyv3855
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3859 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3860 := &yyv3859
		yy3860.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3861 := *v
	yyh3861, yyl3861 := z.DecSliceHelperStart()
	var yyc3861 bool
	if yyl3861 == 0 {
		if yyv3861 == nil {
			yyv3861 = []Event{}
			yyc3861 = true
		} else if len(yyv3861) != 0 {
			yyv3861 = yyv3861[:0]
			yyc3861 = true
		}
	} else if yyl3861 > 0 {
		var yyrr3861, yyrl3861 int
		var yyrt3861 bool
		if yyl3861 > cap(yyv3861) {

			yyrg3861 := len(yyv3861) > 0
			yyv23861 := yyv3861
			yyrl3861, yyrt3861 = z.DecInferLen(yyl3861, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt3861 {
				if yyrl3861 <= cap(yyv3861) {
					yyv3861 = yyv3861[:yyrl3861]
				} else {
					yyv3861 = make([]Event, yyrl3861)
				}
			} else {
				yyv3861 = make([]Event, yyrl3861)
			}
			yyc3861 = true
			yyrr3861 = len(yyv3861)
			if yyrg3861 {
				copy(yyv3861, yyv23861)
			}
		} else if yyl3861 != len(yyv3861) {
			yyv3861 = yyv3861[:yyl3861]
			yyc3861 = true
		}
		yyj3861 := 0
		for ; yyj3861 < yyrr3861; yyj3861++ {
			yyh3861.ElemContainerState(yyj3861)
			if r.TryDecodeAsNil() {
				yyv3861[yyj3861] = Event{}
			} else {
				yyv3862 := &yyv3861[yyj3861]
				yyv3862.CodecDecodeSelf(d)
			}

		}
		if yyrt3861 {
			for ; yyj3861 < yyl3861; yyj3861++ {
				yyv3861 = append(yyv3861, Event{})
				yyh3861.ElemContainerState(yyj3861)
				if r.TryDecodeAsNil() {
					yyv3861[yyj3861] = Event{}
				} else {
					yyv3863 := &yyv3861[yyj3861]
					yyv3863.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3861 := 0
		for ; !r.CheckBreak(); yyj3861++ {

			if yyj3861 >= len(yyv3861) {
				yyv3861 = append(yyv3861, Event{}) // var yyz3861 Event
				yyc3861 = true
			}
			yyh3861.ElemContainerState(yyj3861)
			if yyj3861 < len(yyv3861) {
				if r.TryDecodeAsNil() {
					yyv3861[yyj3861] = Event{}
				} else {
					yyv3864 := &yyv3861[yyj3861]
					yyv3864.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3861 < len(yyv3861) {
			yyv3861 = yyv3861[:yyj3861]
			yyc3861 = true
		} else if yyj3861 == 0 && yyv3861 == nil {
			yyv3861 = []Event{}
			yyc3861 = true
		}
	}
	yyh3861.End()
	if yyc3861 {
		*v = yyv3861
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg8_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3865 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv3865 == nil {
			r.EncodeNil()
		} else {
			yym3866 := z.EncBinary()
			_ = yym3866
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3865) {
			} else {
				z.EncFallback(yyv3865)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg8_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3867 := *v
	yyh3867, yyl3867 := z.DecSliceHelperStart()
	var yyc3867 bool
	if yyl3867 == 0 {
		if yyv3867 == nil {
			yyv3867 = []pkg8_runtime.Object{}
			yyc3867 = true
		} else if len(yyv3867) != 0 {
			yyv3867 = yyv3867[:0]
			yyc3867 = true
		}
	} else if yyl3867 > 0 {
		var yyrr3867, yyrl3867 int
		var yyrt3867 bool
		if yyl3867 > cap(yyv3867) {

			yyrg3867 := len(yyv3867) > 0
			yyv23867 := yyv3867
			yyrl3867, yyrt3867 = z.DecInferLen(yyl3867, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3867 {
				if yyrl3867 <= cap(yyv3867) {
					yyv3867 = yyv3867[:yyrl3867]
				} else {
					yyv3867 = make([]pkg8_runtime.Object, yyrl3867)
				}
			} else {
				yyv3867 = make([]pkg8_runtime.Object, yyrl3867)
			}
			yyc3867 = true
			yyrr3867 = len(yyv3867)
			if yyrg3867 {
				copy(yyv3867, yyv23867)
			}
		} else if yyl3867 != len(yyv3867) {
			yyv3867 = yyv3867[:yyl3867]
			yyc3867 = true
		}
		yyj3867 := 0
		for ; yyj3867 < yyrr3867; yyj3867++ {
			yyh3867.ElemContainerState(yyj3867)
			if r.TryDecodeAsNil() {
				yyv3867[yyj3867] = nil
			} else {
				yyv3868 := &yyv3867[yyj3867]
				yym3869 := z.DecBinary()
				_ = yym3869
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3868) {
				} else {
					z.DecFallback(yyv3868, true)
				}
			}

		}
		if yyrt3867 {
			for ; yyj3867 < yyl3867; yyj3867++ {
				yyv3867 = append(yyv3867, nil)
				yyh3867.ElemContainerState(yyj3867)
				if r.TryDecodeAsNil() {
					yyv3867[yyj3867] = nil
				} else {
					yyv3870 := &yyv3867[yyj3867]
					yym3871 := z.DecBinary()
					_ = yym3871
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3870) {
					} else {
						z.DecFallback(yyv3870, true)
					}
				}

			}
		}

	} else {
		yyj3867 := 0
		for ; !r.CheckBreak(); yyj3867++ {

			if yyj3867 >= len(yyv3867) {
				yyv3867 = append(yyv3867, nil) // var yyz3867 pkg8_runtime.Object
				yyc3867 = true
			}
			yyh3867.ElemContainerState(yyj3867)
			if yyj3867 < len(yyv3867) {
				if r.TryDecodeAsNil() {
					yyv3867[yyj3867] = nil
				} else {
					yyv3872 := &yyv3867[yyj3867]
					yym3873 := z.DecBinary()
					_ = yym3873
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3872) {
					} else {
						z.DecFallback(yyv3872, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3867 < len(yyv3867) {
			yyv3867 = yyv3867[:yyj3867]
			yyc3867 = true
		} else if yyj3867 == 0 && yyv3867 == nil {
			yyv3867 = []pkg8_runtime.Object{}
			yyc3867 = true
		}
	}
	yyh3867.End()
	if yyc3867 {
		*v = yyv3867
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3874 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3875 := &yyv3874
		yy3875.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3876 := *v
	yyh3876, yyl3876 := z.DecSliceHelperStart()
	var yyc3876 bool
	if yyl3876 == 0 {
		if yyv3876 == nil {
			yyv3876 = []LimitRangeItem{}
			yyc3876 = true
		} else if len(yyv3876) != 0 {
			yyv3876 = yyv3876[:0]
			yyc3876 = true
		}
	} else if yyl3876 > 0 {
		var yyrr3876, yyrl3876 int
		var yyrt3876 bool
		if yyl3876 > cap(yyv3876) {

			yyrg3876 := len(yyv3876) > 0
			yyv23876 := yyv3876
			yyrl3876, yyrt3876 = z.DecInferLen(yyl3876, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3876 {
				if yyrl3876 <= cap(yyv3876) {
					yyv3876 = yyv3876[:yyrl3876]
				} else {
					yyv3876 = make([]LimitRangeItem, yyrl3876)
				}
			} else {
				yyv3876 = make([]LimitRangeItem, yyrl3876)
			}
			yyc3876 = true
			yyrr3876 = len(yyv3876)
			if yyrg3876 {
				copy(yyv3876, yyv23876)
			}
		} else if yyl3876 != len(yyv3876) {
			yyv3876 = yyv3876[:yyl3876]
			yyc3876 = true
		}
		yyj3876 := 0
		for ; yyj3876 < yyrr3876; yyj3876++ {
			yyh3876.ElemContainerState(yyj3876)
			if r.TryDecodeAsNil() {
				yyv3876[yyj3876] = LimitRangeItem{}
			} else {
				yyv3877 := &yyv3876[yyj3876]
				yyv3877.CodecDecodeSelf(d)
			}

		}
		if yyrt3876 {
			for ; yyj3876 < yyl3876; yyj3876++ {
				yyv3876 = append(yyv3876, LimitRangeItem{})
				yyh3876.ElemContainerState(yyj3876)
				if r.TryDecodeAsNil() {
					yyv3876[yyj3876] = LimitRangeItem{}
				} else {
					yyv3878 := &yyv3876[yyj3876]
					yyv3878.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3876 := 0
		for ; !r.CheckBreak(); yyj3876++ {

			if yyj3876 >= len(yyv3876) {
				yyv3876 = append(yyv3876, LimitRangeItem{}) // var yyz3876 LimitRangeItem
				yyc3876 = true
			}
			yyh3876.ElemContainerState(yyj3876)
			if yyj3876 < len(yyv3876) {
				if r.TryDecodeAsNil() {
					yyv3876[yyj3876] = LimitRangeItem{}
				} else {
					yyv3879 := &yyv3876[yyj3876]
					yyv3879.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3876 < len(yyv3876) {
			yyv3876 = yyv3876[:yyj3876]
			yyc3876 = true
		} else if yyj3876 == 0 && yyv3876 == nil {
			yyv3876 = []LimitRangeItem{}
			yyc3876 = true
		}
	}
	yyh3876.End()
	if yyc3876 {
		*v = yyv3876
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3880 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3881 := &yyv3880
		yy3881.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3882 := *v
	yyh3882, yyl3882 := z.DecSliceHelperStart()
	var yyc3882 bool
	if yyl3882 == 0 {
		if yyv3882 == nil {
			yyv3882 = []LimitRange{}
			yyc3882 = true
		} else if len(yyv3882) != 0 {
			yyv3882 = yyv3882[:0]
			yyc3882 = true
		}
	} else if yyl3882 > 0 {
		var yyrr3882, yyrl3882 int
		var yyrt3882 bool
		if yyl3882 > cap(yyv3882) {

			yyrg3882 := len(yyv3882) > 0
			yyv23882 := yyv3882
			yyrl3882, yyrt3882 = z.DecInferLen(yyl3882, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3882 {
				if yyrl3882 <= cap(yyv3882) {
					yyv3882 = yyv3882[:yyrl3882]
				} else {
					yyv3882 = make([]LimitRange, yyrl3882)
				}
			} else {
				yyv3882 = make([]LimitRange, yyrl3882)
			}
			yyc3882 = true
			yyrr3882 = len(yyv3882)
			if yyrg3882 {
				copy(yyv3882, yyv23882)
			}
		} else if yyl3882 != len(yyv3882) {
			yyv3882 = yyv3882[:yyl3882]
			yyc3882 = true
		}
		yyj3882 := 0
		for ; yyj3882 < yyrr3882; yyj3882++ {
			yyh3882.ElemContainerState(yyj3882)
			if r.TryDecodeAsNil() {
				yyv3882[yyj3882] = LimitRange{}
			} else {
				yyv3883 := &yyv3882[yyj3882]
				yyv3883.CodecDecodeSelf(d)
			}

		}
		if yyrt3882 {
			for ; yyj3882 < yyl3882; yyj3882++ {
				yyv3882 = append(yyv3882, LimitRange{})
				yyh3882.ElemContainerState(yyj3882)
				if r.TryDecodeAsNil() {
					yyv3882[yyj3882] = LimitRange{}
				} else {
					yyv3884 := &yyv3882[yyj3882]
					yyv3884.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3882 := 0
		for ; !r.CheckBreak(); yyj3882++ {

			if yyj3882 >= len(yyv3882) {
				yyv3882 = append(yyv3882, LimitRange{}) // var yyz3882 LimitRange
				yyc3882 = true
			}
			yyh3882.ElemContainerState(yyj3882)
			if yyj3882 < len(yyv3882) {
				if r.TryDecodeAsNil() {
					yyv3882[yyj3882] = LimitRange{}
				} else {
					yyv3885 := &yyv3882[yyj3882]
					yyv3885.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3882 < len(yyv3882) {
			yyv3882 = yyv3882[:yyj3882]
			yyc3882 = true
		} else if yyj3882 == 0 && yyv3882 == nil {
			yyv3882 = []LimitRange{}
			yyc3882 = true
		}
	}
	yyh3882.End()
	if yyc3882 {
		*v = yyv3882
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3886 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3887 := &yyv3886
		yy3887.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3888 := *v
	yyh3888, yyl3888 := z.DecSliceHelperStart()
	var yyc3888 bool
	if yyl3888 == 0 {
		if yyv3888 == nil {
			yyv3888 = []ResourceQuota{}
			yyc3888 = true
		} else if len(yyv3888) != 0 {
			yyv3888 = yyv3888[:0]
			yyc3888 = true
		}
	} else if yyl3888 > 0 {
		var yyrr3888, yyrl3888 int
		var yyrt3888 bool
		if yyl3888 > cap(yyv3888) {

			yyrg3888 := len(yyv3888) > 0
			yyv23888 := yyv3888
			yyrl3888, yyrt3888 = z.DecInferLen(yyl3888, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3888 {
				if yyrl3888 <= cap(yyv3888) {
					yyv3888 = yyv3888[:yyrl3888]
				} else {
					yyv3888 = make([]ResourceQuota, yyrl3888)
				}
			} else {
				yyv3888 = make([]ResourceQuota, yyrl3888)
			}
			yyc3888 = true
			yyrr3888 = len(yyv3888)
			if yyrg3888 {
				copy(yyv3888, yyv23888)
			}
		} else if yyl3888 != len(yyv3888) {
			yyv3888 = yyv3888[:yyl3888]
			yyc3888 = true
		}
		yyj3888 := 0
		for ; yyj3888 < yyrr3888; yyj3888++ {
			yyh3888.ElemContainerState(yyj3888)
			if r.TryDecodeAsNil() {
				yyv3888[yyj3888] = ResourceQuota{}
			} else {
				yyv3889 := &yyv3888[yyj3888]
				yyv3889.CodecDecodeSelf(d)
			}

		}
		if yyrt3888 {
			for ; yyj3888 < yyl3888; yyj3888++ {
				yyv3888 = append(yyv3888, ResourceQuota{})
				yyh3888.ElemContainerState(yyj3888)
				if r.TryDecodeAsNil() {
					yyv3888[yyj3888] = ResourceQuota{}
				} else {
					yyv3890 := &yyv3888[yyj3888]
					yyv3890.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3888 := 0
		for ; !r.CheckBreak(); yyj3888++ {

			if yyj3888 >= len(yyv3888) {
				yyv3888 = append(yyv3888, ResourceQuota{}) // var yyz3888 ResourceQuota
				yyc3888 = true
			}
			yyh3888.ElemContainerState(yyj3888)
			if yyj3888 < len(yyv3888) {
				if r.TryDecodeAsNil() {
					yyv3888[yyj3888] = ResourceQuota{}
				} else {
					yyv3891 := &yyv3888[yyj3888]
					yyv3891.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3888 < len(yyv3888) {
			yyv3888 = yyv3888[:yyj3888]
			yyc3888 = true
		} else if yyj3888 == 0 && yyv3888 == nil {
			yyv3888 = []ResourceQuota{}
			yyc3888 = true
		}
	}
	yyh3888.End()
	if yyc3888 {
		*v = yyv3888
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3892, yyv3892 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym3893 := z.EncBinary()
		_ = yym3893
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3892))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv3892 == nil {
			r.EncodeNil()
		} else {
			yym3894 := z.EncBinary()
			_ = yym3894
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3892))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3895 := *v
	yyl3895 := r.ReadMapStart()
	yybh3895 := z.DecBasicHandle()
	if yyv3895 == nil {
		yyrl3895, _ := z.DecInferLen(yyl3895, yybh3895.MaxInitLen, 40)
		yyv3895 = make(map[string][]uint8, yyrl3895)
		*v = yyv3895
	}
	var yymk3895 string
	var yymv3895 []uint8
	var yymg3895 bool
	if yybh3895.MapValueReset {
		yymg3895 = true
	}
	if yyl3895 > 0 {
		for yyj3895 := 0; yyj3895 < yyl3895; yyj3895++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3895 = ""
			} else {
				yymk3895 = string(r.DecodeString())
			}

			if yymg3895 {
				yymv3895 = yyv3895[yymk3895]
			} else {
				yymv3895 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3895 = nil
			} else {
				yyv3897 := &yymv3895
				yym3898 := z.DecBinary()
				_ = yym3898
				if false {
				} else {
					*yyv3897 = r.DecodeBytes(*(*[]byte)(yyv3897), false, false)
				}
			}

			if yyv3895 != nil {
				yyv3895[yymk3895] = yymv3895
			}
		}
	} else if yyl3895 < 0 {
		for yyj3895 := 0; !r.CheckBreak(); yyj3895++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3895 = ""
			} else {
				yymk3895 = string(r.DecodeString())
			}

			if yymg3895 {
				yymv3895 = yyv3895[yymk3895]
			} else {
				yymv3895 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3895 = nil
			} else {
				yyv3900 := &yymv3895
				yym3901 := z.DecBinary()
				_ = yym3901
				if false {
				} else {
					*yyv3900 = r.DecodeBytes(*(*[]byte)(yyv3900), false, false)
				}
			}

			if yyv3895 != nil {
				yyv3895[yymk3895] = yymv3895
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3902 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3903 := &yyv3902
		yy3903.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3904 := *v
	yyh3904, yyl3904 := z.DecSliceHelperStart()
	var yyc3904 bool
	if yyl3904 == 0 {
		if yyv3904 == nil {
			yyv3904 = []Secret{}
			yyc3904 = true
		} else if len(yyv3904) != 0 {
			yyv3904 = yyv3904[:0]
			yyc3904 = true
		}
	} else if yyl3904 > 0 {
		var yyrr3904, yyrl3904 int
		var yyrt3904 bool
		if yyl3904 > cap(yyv3904) {

			yyrg3904 := len(yyv3904) > 0
			yyv23904 := yyv3904
			yyrl3904, yyrt3904 = z.DecInferLen(yyl3904, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3904 {
				if yyrl3904 <= cap(yyv3904) {
					yyv3904 = yyv3904[:yyrl3904]
				} else {
					yyv3904 = make([]Secret, yyrl3904)
				}
			} else {
				yyv3904 = make([]Secret, yyrl3904)
			}
			yyc3904 = true
			yyrr3904 = len(yyv3904)
			if yyrg3904 {
				copy(yyv3904, yyv23904)
			}
		} else if yyl3904 != len(yyv3904) {
			yyv3904 = yyv3904[:yyl3904]
			yyc3904 = true
		}
		yyj3904 := 0
		for ; yyj3904 < yyrr3904; yyj3904++ {
			yyh3904.ElemContainerState(yyj3904)
			if r.TryDecodeAsNil() {
				yyv3904[yyj3904] = Secret{}
			} else {
				yyv3905 := &yyv3904[yyj3904]
				yyv3905.CodecDecodeSelf(d)
			}

		}
		if yyrt3904 {
			for ; yyj3904 < yyl3904; yyj3904++ {
				yyv3904 = append(yyv3904, Secret{})
				yyh3904.ElemContainerState(yyj3904)
				if r.TryDecodeAsNil() {
					yyv3904[yyj3904] = Secret{}
				} else {
					yyv3906 := &yyv3904[yyj3904]
					yyv3906.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3904 := 0
		for ; !r.CheckBreak(); yyj3904++ {

			if yyj3904 >= len(yyv3904) {
				yyv3904 = append(yyv3904, Secret{}) // var yyz3904 Secret
				yyc3904 = true
			}
			yyh3904.ElemContainerState(yyj3904)
			if yyj3904 < len(yyv3904) {
				if r.TryDecodeAsNil() {
					yyv3904[yyj3904] = Secret{}
				} else {
					yyv3907 := &yyv3904[yyj3904]
					yyv3907.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3904 < len(yyv3904) {
			yyv3904 = yyv3904[:yyj3904]
			yyc3904 = true
		} else if yyj3904 == 0 && yyv3904 == nil {
			yyv3904 = []Secret{}
			yyc3904 = true
		}
	}
	yyh3904.End()
	if yyc3904 {
		*v = yyv3904
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3908 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3909 := &yyv3908
		yy3909.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3910 := *v
	yyh3910, yyl3910 := z.DecSliceHelperStart()
	var yyc3910 bool
	if yyl3910 == 0 {
		if yyv3910 == nil {
			yyv3910 = []ComponentCondition{}
			yyc3910 = true
		} else if len(yyv3910) != 0 {
			yyv3910 = yyv3910[:0]
			yyc3910 = true
		}
	} else if yyl3910 > 0 {
		var yyrr3910, yyrl3910 int
		var yyrt3910 bool
		if yyl3910 > cap(yyv3910) {

			yyrg3910 := len(yyv3910) > 0
			yyv23910 := yyv3910
			yyrl3910, yyrt3910 = z.DecInferLen(yyl3910, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3910 {
				if yyrl3910 <= cap(yyv3910) {
					yyv3910 = yyv3910[:yyrl3910]
				} else {
					yyv3910 = make([]ComponentCondition, yyrl3910)
				}
			} else {
				yyv3910 = make([]ComponentCondition, yyrl3910)
			}
			yyc3910 = true
			yyrr3910 = len(yyv3910)
			if yyrg3910 {
				copy(yyv3910, yyv23910)
			}
		} else if yyl3910 != len(yyv3910) {
			yyv3910 = yyv3910[:yyl3910]
			yyc3910 = true
		}
		yyj3910 := 0
		for ; yyj3910 < yyrr3910; yyj3910++ {
			yyh3910.ElemContainerState(yyj3910)
			if r.TryDecodeAsNil() {
				yyv3910[yyj3910] = ComponentCondition{}
			} else {
				yyv3911 := &yyv3910[yyj3910]
				yyv3911.CodecDecodeSelf(d)
			}

		}
		if yyrt3910 {
			for ; yyj3910 < yyl3910; yyj3910++ {
				yyv3910 = append(yyv3910, ComponentCondition{})
				yyh3910.ElemContainerState(yyj3910)
				if r.TryDecodeAsNil() {
					yyv3910[yyj3910] = ComponentCondition{}
				} else {
					yyv3912 := &yyv3910[yyj3910]
					yyv3912.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3910 := 0
		for ; !r.CheckBreak(); yyj3910++ {

			if yyj3910 >= len(yyv3910) {
				yyv3910 = append(yyv3910, ComponentCondition{}) // var yyz3910 ComponentCondition
				yyc3910 = true
			}
			yyh3910.ElemContainerState(yyj3910)
			if yyj3910 < len(yyv3910) {
				if r.TryDecodeAsNil() {
					yyv3910[yyj3910] = ComponentCondition{}
				} else {
					yyv3913 := &yyv3910[yyj3910]
					yyv3913.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3910 < len(yyv3910) {
			yyv3910 = yyv3910[:yyj3910]
			yyc3910 = true
		} else if yyj3910 == 0 && yyv3910 == nil {
			yyv3910 = []ComponentCondition{}
			yyc3910 = true
		}
	}
	yyh3910.End()
	if yyc3910 {
		*v = yyv3910
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3914 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3915 := &yyv3914
		yy3915.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3916 := *v
	yyh3916, yyl3916 := z.DecSliceHelperStart()
	var yyc3916 bool
	if yyl3916 == 0 {
		if yyv3916 == nil {
			yyv3916 = []ComponentStatus{}
			yyc3916 = true
		} else if len(yyv3916) != 0 {
			yyv3916 = yyv3916[:0]
			yyc3916 = true
		}
	} else if yyl3916 > 0 {
		var yyrr3916, yyrl3916 int
		var yyrt3916 bool
		if yyl3916 > cap(yyv3916) {

			yyrg3916 := len(yyv3916) > 0
			yyv23916 := yyv3916
			yyrl3916, yyrt3916 = z.DecInferLen(yyl3916, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3916 {
				if yyrl3916 <= cap(yyv3916) {
					yyv3916 = yyv3916[:yyrl3916]
				} else {
					yyv3916 = make([]ComponentStatus, yyrl3916)
				}
			} else {
				yyv3916 = make([]ComponentStatus, yyrl3916)
			}
			yyc3916 = true
			yyrr3916 = len(yyv3916)
			if yyrg3916 {
				copy(yyv3916, yyv23916)
			}
		} else if yyl3916 != len(yyv3916) {
			yyv3916 = yyv3916[:yyl3916]
			yyc3916 = true
		}
		yyj3916 := 0
		for ; yyj3916 < yyrr3916; yyj3916++ {
			yyh3916.ElemContainerState(yyj3916)
			if r.TryDecodeAsNil() {
				yyv3916[yyj3916] = ComponentStatus{}
			} else {
				yyv3917 := &yyv3916[yyj3916]
				yyv3917.CodecDecodeSelf(d)
			}

		}
		if yyrt3916 {
			for ; yyj3916 < yyl3916; yyj3916++ {
				yyv3916 = append(yyv3916, ComponentStatus{})
				yyh3916.ElemContainerState(yyj3916)
				if r.TryDecodeAsNil() {
					yyv3916[yyj3916] = ComponentStatus{}
				} else {
					yyv3918 := &yyv3916[yyj3916]
					yyv3918.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3916 := 0
		for ; !r.CheckBreak(); yyj3916++ {

			if yyj3916 >= len(yyv3916) {
				yyv3916 = append(yyv3916, ComponentStatus{}) // var yyz3916 ComponentStatus
				yyc3916 = true
			}
			yyh3916.ElemContainerState(yyj3916)
			if yyj3916 < len(yyv3916) {
				if r.TryDecodeAsNil() {
					yyv3916[yyj3916] = ComponentStatus{}
				} else {
					yyv3919 := &yyv3916[yyj3916]
					yyv3919.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3916 < len(yyv3916) {
			yyv3916 = yyv3916[:yyj3916]
			yyc3916 = true
		} else if yyj3916 == 0 && yyv3916 == nil {
			yyv3916 = []ComponentStatus{}
			yyc3916 = true
		}
	}
	yyh3916.End()
	if yyc3916 {
		*v = yyv3916
	}
}
