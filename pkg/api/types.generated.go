/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg7_fields "k8s.io/kubernetes/pkg/fields"
	pkg6_labels "k8s.io/kubernetes/pkg/labels"
	pkg8_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg7_fields.Selector
		var v3 pkg6_labels.Selector
		var v4 pkg8_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg5_intstr.IntOrString
		var v7 pkg4_inf.Dec
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [18]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq82[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[17] = x.VolumeSource.FC != nil && x.FC != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(18)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.Cinder == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.CephFS == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.Flocker == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.FC == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr82 || yy2arr82 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym103 := z.DecBinary()
	_ = yym103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct104 := r.ContainerType()
		if yyct104 == codecSelferValueTypeMap1234 {
			yyl104 := r.ReadMapStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl104, d)
			}
		} else if yyct104 == codecSelferValueTypeArray1234 {
			yyl104 := r.ReadArrayStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys105Slc
	var yyhl105 bool = l >= 0
	for yyj105 := 0; ; yyj105++ {
		if yyhl105 {
			if yyj105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys105Slc = r.DecodeBytes(yys105Slc, true, true)
		yys105 := string(yys105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys105 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys105)
		} // end switch yys105
	} // end for yyj105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj124 int
	var yyb124 bool
	var yyhl124 bool = l >= 0
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj124++
		if yyhl124 {
			yyb124 = yyj124 > l
		} else {
			yyb124 = r.CheckBreak()
		}
		if yyb124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [17]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			yyq144[0] = x.HostPath != nil
			yyq144[1] = x.EmptyDir != nil
			yyq144[2] = x.GCEPersistentDisk != nil
			yyq144[3] = x.AWSElasticBlockStore != nil
			yyq144[4] = x.GitRepo != nil
			yyq144[5] = x.Secret != nil
			yyq144[6] = x.NFS != nil
			yyq144[7] = x.ISCSI != nil
			yyq144[8] = x.Glusterfs != nil
			yyq144[9] = x.PersistentVolumeClaim != nil
			yyq144[10] = x.RBD != nil
			yyq144[11] = x.FlexVolume != nil
			yyq144[12] = x.Cinder != nil
			yyq144[13] = x.CephFS != nil
			yyq144[14] = x.Flocker != nil
			yyq144[15] = x.DownwardAPI != nil
			yyq144[16] = x.FC != nil
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(17)
			} else {
				yynn144 = 0
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym162 := z.DecBinary()
	_ = yym162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct163 := r.ContainerType()
		if yyct163 == codecSelferValueTypeMap1234 {
			yyl163 := r.ReadMapStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl163, d)
			}
		} else if yyct163 == codecSelferValueTypeArray1234 {
			yyl163 := r.ReadArrayStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys164Slc
	var yyhl164 bool = l >= 0
	for yyj164 := 0; ; yyj164++ {
		if yyhl164 {
			if yyj164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys164Slc = r.DecodeBytes(yys164Slc, true, true)
		yys164 := string(yys164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys164 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys164)
		} // end switch yys164
	} // end for yyj164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj182 int
	var yyb182 bool
	var yyhl182 bool = l >= 0
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj182++
		if yyhl182 {
			yyb182 = yyj182 > l
		} else {
			yyb182 = r.CheckBreak()
		}
		if yyb182 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj182-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym200 := z.EncBinary()
		_ = yym200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep201 := !z.EncBinary()
			yy2arr201 := z.EncBasicHandle().StructToArray
			var yyq201 [12]bool
			_, _, _ = yysep201, yyq201, yy2arr201
			const yyr201 bool = false
			yyq201[0] = x.GCEPersistentDisk != nil
			yyq201[1] = x.AWSElasticBlockStore != nil
			yyq201[2] = x.HostPath != nil
			yyq201[3] = x.Glusterfs != nil
			yyq201[4] = x.NFS != nil
			yyq201[5] = x.RBD != nil
			yyq201[6] = x.ISCSI != nil
			yyq201[7] = x.FlexVolume != nil
			yyq201[8] = x.Cinder != nil
			yyq201[9] = x.CephFS != nil
			yyq201[10] = x.FC != nil
			yyq201[11] = x.Flocker != nil
			var yynn201 int
			if yyr201 || yy2arr201 {
				r.EncodeArrayStart(12)
			} else {
				yynn201 = 0
				for _, b := range yyq201 {
					if b {
						yynn201++
					}
				}
				r.EncodeMapStart(yynn201)
				yynn201 = 0
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[7] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[8] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[9] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[10] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[11] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym214 := z.DecBinary()
	_ = yym214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct215 := r.ContainerType()
		if yyct215 == codecSelferValueTypeMap1234 {
			yyl215 := r.ReadMapStart()
			if yyl215 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl215, d)
			}
		} else if yyct215 == codecSelferValueTypeArray1234 {
			yyl215 := r.ReadArrayStart()
			if yyl215 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl215, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys216Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys216Slc
	var yyhl216 bool = l >= 0
	for yyj216 := 0; ; yyj216++ {
		if yyhl216 {
			if yyj216 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys216Slc = r.DecodeBytes(yys216Slc, true, true)
		yys216 := string(yys216Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys216 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys216)
		} // end switch yys216
	} // end for yyj216
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj229 int
	var yyb229 bool
	var yyhl229 bool = l >= 0
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj229++
		if yyhl229 {
			yyb229 = yyj229 > l
		} else {
			yyb229 = r.CheckBreak()
		}
		if yyb229 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj229-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym242 := z.EncBinary()
		_ = yym242
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep243 := !z.EncBinary()
			yy2arr243 := z.EncBasicHandle().StructToArray
			var yyq243 [2]bool
			_, _, _ = yysep243, yyq243, yy2arr243
			const yyr243 bool = false
			yyq243[1] = x.ReadOnly != false
			var yynn243 int
			if yyr243 || yy2arr243 {
				r.EncodeArrayStart(2)
			} else {
				yynn243 = 1
				for _, b := range yyq243 {
					if b {
						yynn243++
					}
				}
				r.EncodeMapStart(yynn243)
				yynn243 = 0
			}
			if yyr243 || yy2arr243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym245 := z.EncBinary()
				_ = yym245
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym246 := z.EncBinary()
				_ = yym246
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr243 || yy2arr243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq243[1] {
					yym248 := z.EncBinary()
					_ = yym248
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq243[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym249 := z.EncBinary()
					_ = yym249
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr243 || yy2arr243 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym250 := z.DecBinary()
	_ = yym250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct251 := r.ContainerType()
		if yyct251 == codecSelferValueTypeMap1234 {
			yyl251 := r.ReadMapStart()
			if yyl251 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl251, d)
			}
		} else if yyct251 == codecSelferValueTypeArray1234 {
			yyl251 := r.ReadArrayStart()
			if yyl251 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl251, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys252Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys252Slc
	var yyhl252 bool = l >= 0
	for yyj252 := 0; ; yyj252++ {
		if yyhl252 {
			if yyj252 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys252Slc = r.DecodeBytes(yys252Slc, true, true)
		yys252 := string(yys252Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys252 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys252)
		} // end switch yys252
	} // end for yyj252
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj255 int
	var yyb255 bool
	var yyhl255 bool = l >= 0
	yyj255++
	if yyhl255 {
		yyb255 = yyj255 > l
	} else {
		yyb255 = r.CheckBreak()
	}
	if yyb255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj255++
	if yyhl255 {
		yyb255 = yyj255 > l
	} else {
		yyb255 = r.CheckBreak()
	}
	if yyb255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj255++
		if yyhl255 {
			yyb255 = yyj255 > l
		} else {
			yyb255 = r.CheckBreak()
		}
		if yyb255 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj255-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym258 := z.EncBinary()
		_ = yym258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep259 := !z.EncBinary()
			yy2arr259 := z.EncBasicHandle().StructToArray
			var yyq259 [5]bool
			_, _, _ = yysep259, yyq259, yy2arr259
			const yyr259 bool = false
			yyq259[0] = x.Kind != ""
			yyq259[1] = x.APIVersion != ""
			yyq259[2] = true
			yyq259[3] = true
			yyq259[4] = true
			var yynn259 int
			if yyr259 || yy2arr259 {
				r.EncodeArrayStart(5)
			} else {
				yynn259 = 0
				for _, b := range yyq259 {
					if b {
						yynn259++
					}
				}
				r.EncodeMapStart(yynn259)
				yynn259 = 0
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[0] {
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[1] {
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[2] {
					yy267 := &x.ObjectMeta
					yy267.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy268 := &x.ObjectMeta
					yy268.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[3] {
					yy270 := &x.Spec
					yy270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy271 := &x.Spec
					yy271.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[4] {
					yy273 := &x.Status
					yy273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy274 := &x.Status
					yy274.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym275 := z.DecBinary()
	_ = yym275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct276 := r.ContainerType()
		if yyct276 == codecSelferValueTypeMap1234 {
			yyl276 := r.ReadMapStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl276, d)
			}
		} else if yyct276 == codecSelferValueTypeArray1234 {
			yyl276 := r.ReadArrayStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys277Slc
	var yyhl277 bool = l >= 0
	for yyj277 := 0; ; yyj277++ {
		if yyhl277 {
			if yyj277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys277Slc = r.DecodeBytes(yys277Slc, true, true)
		yys277 := string(yys277Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys277 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv280 := &x.ObjectMeta
				yyv280.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv281 := &x.Spec
				yyv281.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv282 := &x.Status
				yyv282.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys277)
		} // end switch yys277
	} // end for yyj277
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj283 int
	var yyb283 bool
	var yyhl283 bool = l >= 0
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv286 := &x.ObjectMeta
		yyv286.CodecDecodeSelf(d)
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv287 := &x.Spec
		yyv287.CodecDecodeSelf(d)
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv288 := &x.Status
		yyv288.CodecDecodeSelf(d)
	}
	for {
		yyj283++
		if yyhl283 {
			yyb283 = yyj283 > l
		} else {
			yyb283 = r.CheckBreak()
		}
		if yyb283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym289 := z.EncBinary()
		_ = yym289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep290 := !z.EncBinary()
			yy2arr290 := z.EncBasicHandle().StructToArray
			var yyq290 [16]bool
			_, _, _ = yysep290, yyq290, yy2arr290
			const yyr290 bool = false
			yyq290[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq290[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq290[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq290[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq290[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq290[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq290[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq290[8] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq290[9] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq290[10] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq290[11] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq290[12] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq290[13] = len(x.AccessModes) != 0
			yyq290[14] = x.ClaimRef != nil
			yyq290[15] = x.PersistentVolumeReclaimPolicy != ""
			var yynn290 int
			if yyr290 || yy2arr290 {
				r.EncodeArrayStart(16)
			} else {
				yynn290 = 1
				for _, b := range yyq290 {
					if b {
						yynn290++
					}
				}
				r.EncodeMapStart(yynn290)
				yynn290 = 0
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr290 || yy2arr290 {
				if yyn292 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr290 || yy2arr290 {
				if yyn293 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn294 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn294 = true
				goto LABEL294
			}
		LABEL294:
			if yyr290 || yy2arr290 {
				if yyn294 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn294 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn295 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn295 = true
				goto LABEL295
			}
		LABEL295:
			if yyr290 || yy2arr290 {
				if yyn295 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn295 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn296 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn296 = true
				goto LABEL296
			}
		LABEL296:
			if yyr290 || yy2arr290 {
				if yyn296 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn296 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn297 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn297 = true
				goto LABEL297
			}
		LABEL297:
			if yyr290 || yy2arr290 {
				if yyn297 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn297 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn298 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn298 = true
				goto LABEL298
			}
		LABEL298:
			if yyr290 || yy2arr290 {
				if yyn298 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn298 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn299 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn299 = true
				goto LABEL299
			}
		LABEL299:
			if yyr290 || yy2arr290 {
				if yyn299 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[8] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn299 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn300 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn300 = true
				goto LABEL300
			}
		LABEL300:
			if yyr290 || yy2arr290 {
				if yyn300 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[9] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn300 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn301 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn301 = true
				goto LABEL301
			}
		LABEL301:
			if yyr290 || yy2arr290 {
				if yyn301 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[10] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn301 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn302 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn302 = true
				goto LABEL302
			}
		LABEL302:
			if yyr290 || yy2arr290 {
				if yyn302 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[11] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn302 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn303 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn303 = true
				goto LABEL303
			}
		LABEL303:
			if yyr290 || yy2arr290 {
				if yyn303 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[12] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn303 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[13] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym305 := z.EncBinary()
						_ = yym305
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym306 := z.EncBinary()
						_ = yym306
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[14] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[15] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq290[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym309 := z.DecBinary()
	_ = yym309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct310 := r.ContainerType()
		if yyct310 == codecSelferValueTypeMap1234 {
			yyl310 := r.ReadMapStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl310, d)
			}
		} else if yyct310 == codecSelferValueTypeArray1234 {
			yyl310 := r.ReadArrayStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys311Slc
	var yyhl311 bool = l >= 0
	for yyj311 := 0; ; yyj311++ {
		if yyhl311 {
			if yyj311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys311Slc = r.DecodeBytes(yys311Slc, true, true)
		yys311 := string(yys311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys311 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv312 := &x.Capacity
				yyv312.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv325 := &x.AccessModes
				yym326 := z.DecBinary()
				_ = yym326
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv325), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys311)
		} // end switch yys311
	} // end for yyj311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj329 int
	var yyb329 bool
	var yyhl329 bool = l >= 0
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv330 := &x.Capacity
		yyv330.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv343 := &x.AccessModes
		yym344 := z.DecBinary()
		_ = yym344
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv343), d)
		}
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj329++
		if yyhl329 {
			yyb329 = yyj329 > l
		} else {
			yyb329 = r.CheckBreak()
		}
		if yyb329 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj329-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym347 := z.EncBinary()
	_ = yym347
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym348 := z.DecBinary()
	_ = yym348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym349 := z.EncBinary()
		_ = yym349
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep350 := !z.EncBinary()
			yy2arr350 := z.EncBasicHandle().StructToArray
			var yyq350 [3]bool
			_, _, _ = yysep350, yyq350, yy2arr350
			const yyr350 bool = false
			yyq350[0] = x.Phase != ""
			yyq350[1] = x.Message != ""
			yyq350[2] = x.Reason != ""
			var yynn350 int
			if yyr350 || yy2arr350 {
				r.EncodeArrayStart(3)
			} else {
				yynn350 = 0
				for _, b := range yyq350 {
					if b {
						yynn350++
					}
				}
				r.EncodeMapStart(yynn350)
				yynn350 = 0
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[1] {
					yym353 := z.EncBinary()
					_ = yym353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym354 := z.EncBinary()
					_ = yym354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[2] {
					yym356 := z.EncBinary()
					_ = yym356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym357 := z.EncBinary()
					_ = yym357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym358 := z.DecBinary()
	_ = yym358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct359 := r.ContainerType()
		if yyct359 == codecSelferValueTypeMap1234 {
			yyl359 := r.ReadMapStart()
			if yyl359 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl359, d)
			}
		} else if yyct359 == codecSelferValueTypeArray1234 {
			yyl359 := r.ReadArrayStart()
			if yyl359 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl359, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys360Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys360Slc
	var yyhl360 bool = l >= 0
	for yyj360 := 0; ; yyj360++ {
		if yyhl360 {
			if yyj360 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys360Slc = r.DecodeBytes(yys360Slc, true, true)
		yys360 := string(yys360Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys360 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys360)
		} // end switch yys360
	} // end for yyj360
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj364 int
	var yyb364 bool
	var yyhl364 bool = l >= 0
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj364++
		if yyhl364 {
			yyb364 = yyj364 > l
		} else {
			yyb364 = r.CheckBreak()
		}
		if yyb364 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj364-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym368 := z.EncBinary()
		_ = yym368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep369 := !z.EncBinary()
			yy2arr369 := z.EncBasicHandle().StructToArray
			var yyq369 [4]bool
			_, _, _ = yysep369, yyq369, yy2arr369
			const yyr369 bool = false
			yyq369[0] = x.Kind != ""
			yyq369[1] = x.APIVersion != ""
			yyq369[2] = true
			var yynn369 int
			if yyr369 || yy2arr369 {
				r.EncodeArrayStart(4)
			} else {
				yynn369 = 1
				for _, b := range yyq369 {
					if b {
						yynn369++
					}
				}
				r.EncodeMapStart(yynn369)
				yynn369 = 0
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[0] {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[1] {
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym375 := z.EncBinary()
					_ = yym375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[2] {
					yy377 := &x.ListMeta
					yym378 := z.EncBinary()
					_ = yym378
					if false {
					} else if z.HasExtensions() && z.EncExt(yy377) {
					} else {
						z.EncFallback(yy377)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy379 := &x.ListMeta
					yym380 := z.EncBinary()
					_ = yym380
					if false {
					} else if z.HasExtensions() && z.EncExt(yy379) {
					} else {
						z.EncFallback(yy379)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym382 := z.EncBinary()
					_ = yym382
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym383 := z.EncBinary()
					_ = yym383
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym384 := z.DecBinary()
	_ = yym384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct385 := r.ContainerType()
		if yyct385 == codecSelferValueTypeMap1234 {
			yyl385 := r.ReadMapStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl385, d)
			}
		} else if yyct385 == codecSelferValueTypeArray1234 {
			yyl385 := r.ReadArrayStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys386Slc
	var yyhl386 bool = l >= 0
	for yyj386 := 0; ; yyj386++ {
		if yyhl386 {
			if yyj386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys386Slc = r.DecodeBytes(yys386Slc, true, true)
		yys386 := string(yys386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys386 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv389 := &x.ListMeta
				yym390 := z.DecBinary()
				_ = yym390
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv389) {
				} else {
					z.DecFallback(yyv389, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv391 := &x.Items
				yym392 := z.DecBinary()
				_ = yym392
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv391), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys386)
		} // end switch yys386
	} // end for yyj386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj393 int
	var yyb393 bool
	var yyhl393 bool = l >= 0
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv396 := &x.ListMeta
		yym397 := z.DecBinary()
		_ = yym397
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv396) {
		} else {
			z.DecFallback(yyv396, false)
		}
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv398 := &x.Items
		yym399 := z.DecBinary()
		_ = yym399
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv398), d)
		}
	}
	for {
		yyj393++
		if yyhl393 {
			yyb393 = yyj393 > l
		} else {
			yyb393 = r.CheckBreak()
		}
		if yyb393 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj393-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym400 := z.EncBinary()
		_ = yym400
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep401 := !z.EncBinary()
			yy2arr401 := z.EncBasicHandle().StructToArray
			var yyq401 [5]bool
			_, _, _ = yysep401, yyq401, yy2arr401
			const yyr401 bool = false
			yyq401[0] = x.Kind != ""
			yyq401[1] = x.APIVersion != ""
			yyq401[2] = true
			yyq401[3] = true
			yyq401[4] = true
			var yynn401 int
			if yyr401 || yy2arr401 {
				r.EncodeArrayStart(5)
			} else {
				yynn401 = 0
				for _, b := range yyq401 {
					if b {
						yynn401++
					}
				}
				r.EncodeMapStart(yynn401)
				yynn401 = 0
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[0] {
					yym403 := z.EncBinary()
					_ = yym403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq401[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym404 := z.EncBinary()
					_ = yym404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[1] {
					yym406 := z.EncBinary()
					_ = yym406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq401[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym407 := z.EncBinary()
					_ = yym407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[2] {
					yy409 := &x.ObjectMeta
					yy409.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy410 := &x.ObjectMeta
					yy410.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[3] {
					yy412 := &x.Spec
					yy412.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy413 := &x.Spec
					yy413.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[4] {
					yy415 := &x.Status
					yy415.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy416 := &x.Status
					yy416.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym417 := z.DecBinary()
	_ = yym417
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct418 := r.ContainerType()
		if yyct418 == codecSelferValueTypeMap1234 {
			yyl418 := r.ReadMapStart()
			if yyl418 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl418, d)
			}
		} else if yyct418 == codecSelferValueTypeArray1234 {
			yyl418 := r.ReadArrayStart()
			if yyl418 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl418, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys419Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys419Slc
	var yyhl419 bool = l >= 0
	for yyj419 := 0; ; yyj419++ {
		if yyhl419 {
			if yyj419 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys419Slc = r.DecodeBytes(yys419Slc, true, true)
		yys419 := string(yys419Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys419 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv422 := &x.ObjectMeta
				yyv422.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv423 := &x.Spec
				yyv423.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv424 := &x.Status
				yyv424.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys419)
		} // end switch yys419
	} // end for yyj419
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj425 int
	var yyb425 bool
	var yyhl425 bool = l >= 0
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv428 := &x.ObjectMeta
		yyv428.CodecDecodeSelf(d)
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv429 := &x.Spec
		yyv429.CodecDecodeSelf(d)
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv430 := &x.Status
		yyv430.CodecDecodeSelf(d)
	}
	for {
		yyj425++
		if yyhl425 {
			yyb425 = yyj425 > l
		} else {
			yyb425 = r.CheckBreak()
		}
		if yyb425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym431 := z.EncBinary()
		_ = yym431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep432 := !z.EncBinary()
			yy2arr432 := z.EncBasicHandle().StructToArray
			var yyq432 [4]bool
			_, _, _ = yysep432, yyq432, yy2arr432
			const yyr432 bool = false
			yyq432[0] = x.Kind != ""
			yyq432[1] = x.APIVersion != ""
			yyq432[2] = true
			var yynn432 int
			if yyr432 || yy2arr432 {
				r.EncodeArrayStart(4)
			} else {
				yynn432 = 1
				for _, b := range yyq432 {
					if b {
						yynn432++
					}
				}
				r.EncodeMapStart(yynn432)
				yynn432 = 0
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[0] {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[1] {
					yym437 := z.EncBinary()
					_ = yym437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[2] {
					yy440 := &x.ListMeta
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else if z.HasExtensions() && z.EncExt(yy440) {
					} else {
						z.EncFallback(yy440)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq432[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy442 := &x.ListMeta
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else if z.HasExtensions() && z.EncExt(yy442) {
					} else {
						z.EncFallback(yy442)
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym446 := z.EncBinary()
					_ = yym446
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym447 := z.DecBinary()
	_ = yym447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct448 := r.ContainerType()
		if yyct448 == codecSelferValueTypeMap1234 {
			yyl448 := r.ReadMapStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl448, d)
			}
		} else if yyct448 == codecSelferValueTypeArray1234 {
			yyl448 := r.ReadArrayStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl448, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys449Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys449Slc
	var yyhl449 bool = l >= 0
	for yyj449 := 0; ; yyj449++ {
		if yyhl449 {
			if yyj449 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys449Slc = r.DecodeBytes(yys449Slc, true, true)
		yys449 := string(yys449Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys449 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv452 := &x.ListMeta
				yym453 := z.DecBinary()
				_ = yym453
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv452) {
				} else {
					z.DecFallback(yyv452, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv454 := &x.Items
				yym455 := z.DecBinary()
				_ = yym455
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv454), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys449)
		} // end switch yys449
	} // end for yyj449
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj456 int
	var yyb456 bool
	var yyhl456 bool = l >= 0
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv459 := &x.ListMeta
		yym460 := z.DecBinary()
		_ = yym460
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv459) {
		} else {
			z.DecFallback(yyv459, false)
		}
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv461 := &x.Items
		yym462 := z.DecBinary()
		_ = yym462
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv461), d)
		}
	}
	for {
		yyj456++
		if yyhl456 {
			yyb456 = yyj456 > l
		} else {
			yyb456 = r.CheckBreak()
		}
		if yyb456 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj456-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym463 := z.EncBinary()
		_ = yym463
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep464 := !z.EncBinary()
			yy2arr464 := z.EncBasicHandle().StructToArray
			var yyq464 [3]bool
			_, _, _ = yysep464, yyq464, yy2arr464
			const yyr464 bool = false
			yyq464[0] = len(x.AccessModes) != 0
			yyq464[1] = true
			yyq464[2] = x.VolumeName != ""
			var yynn464 int
			if yyr464 || yy2arr464 {
				r.EncodeArrayStart(3)
			} else {
				yynn464 = 0
				for _, b := range yyq464 {
					if b {
						yynn464++
					}
				}
				r.EncodeMapStart(yynn464)
				yynn464 = 0
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym466 := z.EncBinary()
						_ = yym466
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq464[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym467 := z.EncBinary()
						_ = yym467
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[1] {
					yy469 := &x.Resources
					yy469.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq464[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy470 := &x.Resources
					yy470.CodecEncodeSelf(e)
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[2] {
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq464[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym473 := z.EncBinary()
					_ = yym473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym474 := z.DecBinary()
	_ = yym474
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct475 := r.ContainerType()
		if yyct475 == codecSelferValueTypeMap1234 {
			yyl475 := r.ReadMapStart()
			if yyl475 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl475, d)
			}
		} else if yyct475 == codecSelferValueTypeArray1234 {
			yyl475 := r.ReadArrayStart()
			if yyl475 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl475, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys476Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys476Slc
	var yyhl476 bool = l >= 0
	for yyj476 := 0; ; yyj476++ {
		if yyhl476 {
			if yyj476 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys476Slc = r.DecodeBytes(yys476Slc, true, true)
		yys476 := string(yys476Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys476 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv477 := &x.AccessModes
				yym478 := z.DecBinary()
				_ = yym478
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv477), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv479 := &x.Resources
				yyv479.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys476)
		} // end switch yys476
	} // end for yyj476
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj481 int
	var yyb481 bool
	var yyhl481 bool = l >= 0
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv482 := &x.AccessModes
		yym483 := z.DecBinary()
		_ = yym483
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv482), d)
		}
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv484 := &x.Resources
		yyv484.CodecDecodeSelf(d)
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj481++
		if yyhl481 {
			yyb481 = yyj481 > l
		} else {
			yyb481 = r.CheckBreak()
		}
		if yyb481 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj481-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym486 := z.EncBinary()
		_ = yym486
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep487 := !z.EncBinary()
			yy2arr487 := z.EncBasicHandle().StructToArray
			var yyq487 [3]bool
			_, _, _ = yysep487, yyq487, yy2arr487
			const yyr487 bool = false
			yyq487[0] = x.Phase != ""
			yyq487[1] = len(x.AccessModes) != 0
			yyq487[2] = len(x.Capacity) != 0
			var yynn487 int
			if yyr487 || yy2arr487 {
				r.EncodeArrayStart(3)
			} else {
				yynn487 = 0
				for _, b := range yyq487 {
					if b {
						yynn487++
					}
				}
				r.EncodeMapStart(yynn487)
				yynn487 = 0
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq487[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym490 := z.EncBinary()
						_ = yym490
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq487[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym491 := z.EncBinary()
						_ = yym491
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq487[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym493 := z.DecBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct494 := r.ContainerType()
		if yyct494 == codecSelferValueTypeMap1234 {
			yyl494 := r.ReadMapStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl494, d)
			}
		} else if yyct494 == codecSelferValueTypeArray1234 {
			yyl494 := r.ReadArrayStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys495Slc
	var yyhl495 bool = l >= 0
	for yyj495 := 0; ; yyj495++ {
		if yyhl495 {
			if yyj495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys495Slc = r.DecodeBytes(yys495Slc, true, true)
		yys495 := string(yys495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys495 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv497 := &x.AccessModes
				yym498 := z.DecBinary()
				_ = yym498
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv497), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv499 := &x.Capacity
				yyv499.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys495)
		} // end switch yys495
	} // end for yyj495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj500 int
	var yyb500 bool
	var yyhl500 bool = l >= 0
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv502 := &x.AccessModes
		yym503 := z.DecBinary()
		_ = yym503
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv502), d)
		}
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv504 := &x.Capacity
		yyv504.CodecDecodeSelf(d)
	}
	for {
		yyj500++
		if yyhl500 {
			yyb500 = yyj500 > l
		} else {
			yyb500 = r.CheckBreak()
		}
		if yyb500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym505 := z.EncBinary()
	_ = yym505
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym506 := z.DecBinary()
	_ = yym506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym507 := z.EncBinary()
	_ = yym507
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym508 := z.DecBinary()
	_ = yym508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym509 := z.EncBinary()
	_ = yym509
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym510 := z.DecBinary()
	_ = yym510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym511 := z.EncBinary()
		_ = yym511
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep512 := !z.EncBinary()
			yy2arr512 := z.EncBasicHandle().StructToArray
			var yyq512 [1]bool
			_, _, _ = yysep512, yyq512, yy2arr512
			const yyr512 bool = false
			var yynn512 int
			if yyr512 || yy2arr512 {
				r.EncodeArrayStart(1)
			} else {
				yynn512 = 1
				for _, b := range yyq512 {
					if b {
						yynn512++
					}
				}
				r.EncodeMapStart(yynn512)
				yynn512 = 0
			}
			if yyr512 || yy2arr512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym514 := z.EncBinary()
				_ = yym514
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym515 := z.EncBinary()
				_ = yym515
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr512 || yy2arr512 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym516 := z.DecBinary()
	_ = yym516
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct517 := r.ContainerType()
		if yyct517 == codecSelferValueTypeMap1234 {
			yyl517 := r.ReadMapStart()
			if yyl517 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl517, d)
			}
		} else if yyct517 == codecSelferValueTypeArray1234 {
			yyl517 := r.ReadArrayStart()
			if yyl517 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl517, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys518Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys518Slc
	var yyhl518 bool = l >= 0
	for yyj518 := 0; ; yyj518++ {
		if yyhl518 {
			if yyj518 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys518Slc = r.DecodeBytes(yys518Slc, true, true)
		yys518 := string(yys518Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys518 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys518)
		} // end switch yys518
	} // end for yyj518
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj520 int
	var yyb520 bool
	var yyhl520 bool = l >= 0
	yyj520++
	if yyhl520 {
		yyb520 = yyj520 > l
	} else {
		yyb520 = r.CheckBreak()
	}
	if yyb520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj520++
		if yyhl520 {
			yyb520 = yyj520 > l
		} else {
			yyb520 = r.CheckBreak()
		}
		if yyb520 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj520-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym522 := z.EncBinary()
		_ = yym522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep523 := !z.EncBinary()
			yy2arr523 := z.EncBasicHandle().StructToArray
			var yyq523 [1]bool
			_, _, _ = yysep523, yyq523, yy2arr523
			const yyr523 bool = false
			yyq523[0] = x.Medium != ""
			var yynn523 int
			if yyr523 || yy2arr523 {
				r.EncodeArrayStart(1)
			} else {
				yynn523 = 0
				for _, b := range yyq523 {
					if b {
						yynn523++
					}
				}
				r.EncodeMapStart(yynn523)
				yynn523 = 0
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq523[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq523[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym525 := z.DecBinary()
	_ = yym525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct526 := r.ContainerType()
		if yyct526 == codecSelferValueTypeMap1234 {
			yyl526 := r.ReadMapStart()
			if yyl526 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl526, d)
			}
		} else if yyct526 == codecSelferValueTypeArray1234 {
			yyl526 := r.ReadArrayStart()
			if yyl526 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl526, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys527Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys527Slc
	var yyhl527 bool = l >= 0
	for yyj527 := 0; ; yyj527++ {
		if yyhl527 {
			if yyj527 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys527Slc = r.DecodeBytes(yys527Slc, true, true)
		yys527 := string(yys527Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys527 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys527)
		} // end switch yys527
	} // end for yyj527
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj529 int
	var yyb529 bool
	var yyhl529 bool = l >= 0
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj529++
		if yyhl529 {
			yyb529 = yyj529 > l
		} else {
			yyb529 = r.CheckBreak()
		}
		if yyb529 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj529-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym531 := z.EncBinary()
	_ = yym531
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym533 := z.EncBinary()
	_ = yym533
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym534 := z.DecBinary()
	_ = yym534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym535 := z.EncBinary()
		_ = yym535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep536 := !z.EncBinary()
			yy2arr536 := z.EncBasicHandle().StructToArray
			var yyq536 [4]bool
			_, _, _ = yysep536, yyq536, yy2arr536
			const yyr536 bool = false
			yyq536[1] = x.FSType != ""
			yyq536[2] = x.Partition != 0
			yyq536[3] = x.ReadOnly != false
			var yynn536 int
			if yyr536 || yy2arr536 {
				r.EncodeArrayStart(4)
			} else {
				yynn536 = 1
				for _, b := range yyq536 {
					if b {
						yynn536++
					}
				}
				r.EncodeMapStart(yynn536)
				yynn536 = 0
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym538 := z.EncBinary()
				_ = yym538
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym539 := z.EncBinary()
				_ = yym539
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[1] {
					yym541 := z.EncBinary()
					_ = yym541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq536[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[2] {
					yym544 := z.EncBinary()
					_ = yym544
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq536[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[3] {
					yym547 := z.EncBinary()
					_ = yym547
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq536[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym548 := z.EncBinary()
					_ = yym548
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym549 := z.DecBinary()
	_ = yym549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct550 := r.ContainerType()
		if yyct550 == codecSelferValueTypeMap1234 {
			yyl550 := r.ReadMapStart()
			if yyl550 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl550, d)
			}
		} else if yyct550 == codecSelferValueTypeArray1234 {
			yyl550 := r.ReadArrayStart()
			if yyl550 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys551Slc
	var yyhl551 bool = l >= 0
	for yyj551 := 0; ; yyj551++ {
		if yyhl551 {
			if yyj551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys551Slc = r.DecodeBytes(yys551Slc, true, true)
		yys551 := string(yys551Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys551 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys551)
		} // end switch yys551
	} // end for yyj551
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj556 int
	var yyb556 bool
	var yyhl556 bool = l >= 0
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj556++
		if yyhl556 {
			yyb556 = yyj556 > l
		} else {
			yyb556 = r.CheckBreak()
		}
		if yyb556 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj556-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym561 := z.EncBinary()
		_ = yym561
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep562 := !z.EncBinary()
			yy2arr562 := z.EncBasicHandle().StructToArray
			var yyq562 [6]bool
			_, _, _ = yysep562, yyq562, yy2arr562
			const yyr562 bool = false
			yyq562[0] = x.TargetPortal != ""
			yyq562[1] = x.IQN != ""
			yyq562[2] = x.Lun != 0
			yyq562[3] = x.ISCSIInterface != ""
			yyq562[4] = x.FSType != ""
			yyq562[5] = x.ReadOnly != false
			var yynn562 int
			if yyr562 || yy2arr562 {
				r.EncodeArrayStart(6)
			} else {
				yynn562 = 0
				for _, b := range yyq562 {
					if b {
						yynn562++
					}
				}
				r.EncodeMapStart(yynn562)
				yynn562 = 0
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[0] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[1] {
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[2] {
					yym570 := z.EncBinary()
					_ = yym570
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq562[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym571 := z.EncBinary()
					_ = yym571
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[3] {
					yym573 := z.EncBinary()
					_ = yym573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym574 := z.EncBinary()
					_ = yym574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[4] {
					yym576 := z.EncBinary()
					_ = yym576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym577 := z.EncBinary()
					_ = yym577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[5] {
					yym579 := z.EncBinary()
					_ = yym579
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq562[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym580 := z.EncBinary()
					_ = yym580
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym581 := z.DecBinary()
	_ = yym581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct582 := r.ContainerType()
		if yyct582 == codecSelferValueTypeMap1234 {
			yyl582 := r.ReadMapStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl582, d)
			}
		} else if yyct582 == codecSelferValueTypeArray1234 {
			yyl582 := r.ReadArrayStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys583Slc
	var yyhl583 bool = l >= 0
	for yyj583 := 0; ; yyj583++ {
		if yyhl583 {
			if yyj583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys583Slc = r.DecodeBytes(yys583Slc, true, true)
		yys583 := string(yys583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys583 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys583)
		} // end switch yys583
	} // end for yyj583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj590 int
	var yyb590 bool
	var yyhl590 bool = l >= 0
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj590++
		if yyhl590 {
			yyb590 = yyj590 > l
		} else {
			yyb590 = r.CheckBreak()
		}
		if yyb590 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj590-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym597 := z.EncBinary()
		_ = yym597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep598 := !z.EncBinary()
			yy2arr598 := z.EncBasicHandle().StructToArray
			var yyq598 [4]bool
			_, _, _ = yysep598, yyq598, yy2arr598
			const yyr598 bool = false
			yyq598[3] = x.ReadOnly != false
			var yynn598 int
			if yyr598 || yy2arr598 {
				r.EncodeArrayStart(4)
			} else {
				yynn598 = 3
				for _, b := range yyq598 {
					if b {
						yynn598++
					}
				}
				r.EncodeMapStart(yynn598)
				yynn598 = 0
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym600 := z.EncBinary()
					_ = yym600
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym601 := z.EncBinary()
					_ = yym601
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy603 := *x.Lun
					yym604 := z.EncBinary()
					_ = yym604
					if false {
					} else {
						r.EncodeInt(int64(yy603))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy605 := *x.Lun
					yym606 := z.EncBinary()
					_ = yym606
					if false {
					} else {
						r.EncodeInt(int64(yy605))
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym608 := z.EncBinary()
				_ = yym608
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym609 := z.EncBinary()
				_ = yym609
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq598[3] {
					yym611 := z.EncBinary()
					_ = yym611
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq598[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym613 := z.DecBinary()
	_ = yym613
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct614 := r.ContainerType()
		if yyct614 == codecSelferValueTypeMap1234 {
			yyl614 := r.ReadMapStart()
			if yyl614 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl614, d)
			}
		} else if yyct614 == codecSelferValueTypeArray1234 {
			yyl614 := r.ReadArrayStart()
			if yyl614 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl614, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys615Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys615Slc
	var yyhl615 bool = l >= 0
	for yyj615 := 0; ; yyj615++ {
		if yyhl615 {
			if yyj615 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys615Slc = r.DecodeBytes(yys615Slc, true, true)
		yys615 := string(yys615Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys615 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv616 := &x.TargetWWNs
				yym617 := z.DecBinary()
				_ = yym617
				if false {
				} else {
					z.F.DecSliceStringX(yyv616, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym619 := z.DecBinary()
				_ = yym619
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys615)
		} // end switch yys615
	} // end for yyj615
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj622 int
	var yyb622 bool
	var yyhl622 bool = l >= 0
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv623 := &x.TargetWWNs
		yym624 := z.DecBinary()
		_ = yym624
		if false {
		} else {
			z.F.DecSliceStringX(yyv623, false, d)
		}
	}
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym626 := z.DecBinary()
		_ = yym626
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj622++
		if yyhl622 {
			yyb622 = yyj622 > l
		} else {
			yyb622 = r.CheckBreak()
		}
		if yyb622 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj622-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym629 := z.EncBinary()
		_ = yym629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep630 := !z.EncBinary()
			yy2arr630 := z.EncBasicHandle().StructToArray
			var yyq630 [5]bool
			_, _, _ = yysep630, yyq630, yy2arr630
			const yyr630 bool = false
			yyq630[1] = x.FSType != ""
			yyq630[2] = x.SecretRef != nil
			yyq630[3] = x.ReadOnly != false
			yyq630[4] = len(x.Options) != 0
			var yynn630 int
			if yyr630 || yy2arr630 {
				r.EncodeArrayStart(5)
			} else {
				yynn630 = 1
				for _, b := range yyq630 {
					if b {
						yynn630++
					}
				}
				r.EncodeMapStart(yynn630)
				yynn630 = 0
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym632 := z.EncBinary()
				_ = yym632
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym633 := z.EncBinary()
				_ = yym633
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[1] {
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq630[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[3] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq630[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym642 := z.EncBinary()
						_ = yym642
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq630[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym643 := z.EncBinary()
						_ = yym643
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym644 := z.DecBinary()
	_ = yym644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct645 := r.ContainerType()
		if yyct645 == codecSelferValueTypeMap1234 {
			yyl645 := r.ReadMapStart()
			if yyl645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl645, d)
			}
		} else if yyct645 == codecSelferValueTypeArray1234 {
			yyl645 := r.ReadArrayStart()
			if yyl645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys646Slc
	var yyhl646 bool = l >= 0
	for yyj646 := 0; ; yyj646++ {
		if yyhl646 {
			if yyj646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys646Slc = r.DecodeBytes(yys646Slc, true, true)
		yys646 := string(yys646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys646 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv651 := &x.Options
				yym652 := z.DecBinary()
				_ = yym652
				if false {
				} else {
					z.F.DecMapStringStringX(yyv651, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys646)
		} // end switch yys646
	} // end for yyj646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj653 int
	var yyb653 bool
	var yyhl653 bool = l >= 0
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv658 := &x.Options
		yym659 := z.DecBinary()
		_ = yym659
		if false {
		} else {
			z.F.DecMapStringStringX(yyv658, false, d)
		}
	}
	for {
		yyj653++
		if yyhl653 {
			yyb653 = yyj653 > l
		} else {
			yyb653 = r.CheckBreak()
		}
		if yyb653 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj653-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym660 := z.EncBinary()
		_ = yym660
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep661 := !z.EncBinary()
			yy2arr661 := z.EncBasicHandle().StructToArray
			var yyq661 [4]bool
			_, _, _ = yysep661, yyq661, yy2arr661
			const yyr661 bool = false
			yyq661[1] = x.FSType != ""
			yyq661[2] = x.Partition != 0
			yyq661[3] = x.ReadOnly != false
			var yynn661 int
			if yyr661 || yy2arr661 {
				r.EncodeArrayStart(4)
			} else {
				yynn661 = 1
				for _, b := range yyq661 {
					if b {
						yynn661++
					}
				}
				r.EncodeMapStart(yynn661)
				yynn661 = 0
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym663 := z.EncBinary()
				_ = yym663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym664 := z.EncBinary()
				_ = yym664
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[1] {
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq661[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[2] {
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq661[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym670 := z.EncBinary()
					_ = yym670
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[3] {
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq661[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym674 := z.DecBinary()
	_ = yym674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct675 := r.ContainerType()
		if yyct675 == codecSelferValueTypeMap1234 {
			yyl675 := r.ReadMapStart()
			if yyl675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl675, d)
			}
		} else if yyct675 == codecSelferValueTypeArray1234 {
			yyl675 := r.ReadArrayStart()
			if yyl675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys676Slc
	var yyhl676 bool = l >= 0
	for yyj676 := 0; ; yyj676++ {
		if yyhl676 {
			if yyj676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys676Slc = r.DecodeBytes(yys676Slc, true, true)
		yys676 := string(yys676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys676 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys676)
		} // end switch yys676
	} // end for yyj676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj681 int
	var yyb681 bool
	var yyhl681 bool = l >= 0
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj681++
		if yyhl681 {
			yyb681 = yyj681 > l
		} else {
			yyb681 = r.CheckBreak()
		}
		if yyb681 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj681-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym686 := z.EncBinary()
		_ = yym686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep687 := !z.EncBinary()
			yy2arr687 := z.EncBasicHandle().StructToArray
			var yyq687 [3]bool
			_, _, _ = yysep687, yyq687, yy2arr687
			const yyr687 bool = false
			yyq687[1] = x.Revision != ""
			yyq687[2] = x.Directory != ""
			var yynn687 int
			if yyr687 || yy2arr687 {
				r.EncodeArrayStart(3)
			} else {
				yynn687 = 1
				for _, b := range yyq687 {
					if b {
						yynn687++
					}
				}
				r.EncodeMapStart(yynn687)
				yynn687 = 0
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym689 := z.EncBinary()
				_ = yym689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym690 := z.EncBinary()
				_ = yym690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq687[1] {
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq687[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq687[2] {
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq687[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym697 := z.DecBinary()
	_ = yym697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct698 := r.ContainerType()
		if yyct698 == codecSelferValueTypeMap1234 {
			yyl698 := r.ReadMapStart()
			if yyl698 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl698, d)
			}
		} else if yyct698 == codecSelferValueTypeArray1234 {
			yyl698 := r.ReadArrayStart()
			if yyl698 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys699Slc
	var yyhl699 bool = l >= 0
	for yyj699 := 0; ; yyj699++ {
		if yyhl699 {
			if yyj699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys699Slc = r.DecodeBytes(yys699Slc, true, true)
		yys699 := string(yys699Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys699 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys699)
		} // end switch yys699
	} // end for yyj699
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj703 int
	var yyb703 bool
	var yyhl703 bool = l >= 0
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj703++
		if yyhl703 {
			yyb703 = yyj703 > l
		} else {
			yyb703 = r.CheckBreak()
		}
		if yyb703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym707 := z.EncBinary()
		_ = yym707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep708 := !z.EncBinary()
			yy2arr708 := z.EncBasicHandle().StructToArray
			var yyq708 [1]bool
			_, _, _ = yysep708, yyq708, yy2arr708
			const yyr708 bool = false
			yyq708[0] = x.SecretName != ""
			var yynn708 int
			if yyr708 || yy2arr708 {
				r.EncodeArrayStart(1)
			} else {
				yynn708 = 0
				for _, b := range yyq708 {
					if b {
						yynn708++
					}
				}
				r.EncodeMapStart(yynn708)
				yynn708 = 0
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq708[0] {
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq708[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym712 := z.DecBinary()
	_ = yym712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct713 := r.ContainerType()
		if yyct713 == codecSelferValueTypeMap1234 {
			yyl713 := r.ReadMapStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl713, d)
			}
		} else if yyct713 == codecSelferValueTypeArray1234 {
			yyl713 := r.ReadArrayStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl713, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys714Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys714Slc
	var yyhl714 bool = l >= 0
	for yyj714 := 0; ; yyj714++ {
		if yyhl714 {
			if yyj714 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys714Slc = r.DecodeBytes(yys714Slc, true, true)
		yys714 := string(yys714Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys714 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys714)
		} // end switch yys714
	} // end for yyj714
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj716 int
	var yyb716 bool
	var yyhl716 bool = l >= 0
	yyj716++
	if yyhl716 {
		yyb716 = yyj716 > l
	} else {
		yyb716 = r.CheckBreak()
	}
	if yyb716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj716++
		if yyhl716 {
			yyb716 = yyj716 > l
		} else {
			yyb716 = r.CheckBreak()
		}
		if yyb716 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj716-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym718 := z.EncBinary()
		_ = yym718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep719 := !z.EncBinary()
			yy2arr719 := z.EncBasicHandle().StructToArray
			var yyq719 [3]bool
			_, _, _ = yysep719, yyq719, yy2arr719
			const yyr719 bool = false
			yyq719[2] = x.ReadOnly != false
			var yynn719 int
			if yyr719 || yy2arr719 {
				r.EncodeArrayStart(3)
			} else {
				yynn719 = 2
				for _, b := range yyq719 {
					if b {
						yynn719++
					}
				}
				r.EncodeMapStart(yynn719)
				yynn719 = 0
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym721 := z.EncBinary()
				_ = yym721
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym722 := z.EncBinary()
				_ = yym722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq719[2] {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym729 := z.DecBinary()
	_ = yym729
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct730 := r.ContainerType()
		if yyct730 == codecSelferValueTypeMap1234 {
			yyl730 := r.ReadMapStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl730, d)
			}
		} else if yyct730 == codecSelferValueTypeArray1234 {
			yyl730 := r.ReadArrayStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl730, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys731Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys731Slc
	var yyhl731 bool = l >= 0
	for yyj731 := 0; ; yyj731++ {
		if yyhl731 {
			if yyj731 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys731Slc = r.DecodeBytes(yys731Slc, true, true)
		yys731 := string(yys731Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys731 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys731)
		} // end switch yys731
	} // end for yyj731
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj735 int
	var yyb735 bool
	var yyhl735 bool = l >= 0
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj735++
		if yyhl735 {
			yyb735 = yyj735 > l
		} else {
			yyb735 = r.CheckBreak()
		}
		if yyb735 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj735-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym739 := z.EncBinary()
		_ = yym739
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep740 := !z.EncBinary()
			yy2arr740 := z.EncBasicHandle().StructToArray
			var yyq740 [3]bool
			_, _, _ = yysep740, yyq740, yy2arr740
			const yyr740 bool = false
			yyq740[2] = x.ReadOnly != false
			var yynn740 int
			if yyr740 || yy2arr740 {
				r.EncodeArrayStart(3)
			} else {
				yynn740 = 2
				for _, b := range yyq740 {
					if b {
						yynn740++
					}
				}
				r.EncodeMapStart(yynn740)
				yynn740 = 0
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym742 := z.EncBinary()
				_ = yym742
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym743 := z.EncBinary()
				_ = yym743
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym745 := z.EncBinary()
				_ = yym745
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym746 := z.EncBinary()
				_ = yym746
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq740[2] {
					yym748 := z.EncBinary()
					_ = yym748
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq740[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym749 := z.EncBinary()
					_ = yym749
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym750 := z.DecBinary()
	_ = yym750
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct751 := r.ContainerType()
		if yyct751 == codecSelferValueTypeMap1234 {
			yyl751 := r.ReadMapStart()
			if yyl751 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl751, d)
			}
		} else if yyct751 == codecSelferValueTypeArray1234 {
			yyl751 := r.ReadArrayStart()
			if yyl751 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl751, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys752Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys752Slc
	var yyhl752 bool = l >= 0
	for yyj752 := 0; ; yyj752++ {
		if yyhl752 {
			if yyj752 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys752Slc = r.DecodeBytes(yys752Slc, true, true)
		yys752 := string(yys752Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys752 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys752)
		} // end switch yys752
	} // end for yyj752
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj756 int
	var yyb756 bool
	var yyhl756 bool = l >= 0
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj756++
		if yyhl756 {
			yyb756 = yyj756 > l
		} else {
			yyb756 = r.CheckBreak()
		}
		if yyb756 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj756-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym760 := z.EncBinary()
		_ = yym760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep761 := !z.EncBinary()
			yy2arr761 := z.EncBasicHandle().StructToArray
			var yyq761 [8]bool
			_, _, _ = yysep761, yyq761, yy2arr761
			const yyr761 bool = false
			yyq761[2] = x.FSType != ""
			yyq761[7] = x.ReadOnly != false
			var yynn761 int
			if yyr761 || yy2arr761 {
				r.EncodeArrayStart(8)
			} else {
				yynn761 = 6
				for _, b := range yyq761 {
					if b {
						yynn761++
					}
				}
				r.EncodeMapStart(yynn761)
				yynn761 = 0
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym767 := z.EncBinary()
				_ = yym767
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[2] {
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq761[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym772 := z.EncBinary()
				_ = yym772
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym773 := z.EncBinary()
				_ = yym773
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym775 := z.EncBinary()
				_ = yym775
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym776 := z.EncBinary()
				_ = yym776
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym778 := z.EncBinary()
				_ = yym778
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym779 := z.EncBinary()
				_ = yym779
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[7] {
					yym782 := z.EncBinary()
					_ = yym782
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq761[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym784 := z.DecBinary()
	_ = yym784
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct785 := r.ContainerType()
		if yyct785 == codecSelferValueTypeMap1234 {
			yyl785 := r.ReadMapStart()
			if yyl785 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl785, d)
			}
		} else if yyct785 == codecSelferValueTypeArray1234 {
			yyl785 := r.ReadArrayStart()
			if yyl785 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl785, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys786Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys786Slc
	var yyhl786 bool = l >= 0
	for yyj786 := 0; ; yyj786++ {
		if yyhl786 {
			if yyj786 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys786Slc = r.DecodeBytes(yys786Slc, true, true)
		yys786 := string(yys786Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys786 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv787 := &x.CephMonitors
				yym788 := z.DecBinary()
				_ = yym788
				if false {
				} else {
					z.F.DecSliceStringX(yyv787, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys786)
		} // end switch yys786
	} // end for yyj786
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj796 int
	var yyb796 bool
	var yyhl796 bool = l >= 0
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv797 := &x.CephMonitors
		yym798 := z.DecBinary()
		_ = yym798
		if false {
		} else {
			z.F.DecSliceStringX(yyv797, false, d)
		}
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj796++
		if yyhl796 {
			yyb796 = yyj796 > l
		} else {
			yyb796 = r.CheckBreak()
		}
		if yyb796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym806 := z.EncBinary()
		_ = yym806
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep807 := !z.EncBinary()
			yy2arr807 := z.EncBasicHandle().StructToArray
			var yyq807 [3]bool
			_, _, _ = yysep807, yyq807, yy2arr807
			const yyr807 bool = false
			yyq807[1] = x.FSType != ""
			yyq807[2] = x.ReadOnly != false
			var yynn807 int
			if yyr807 || yy2arr807 {
				r.EncodeArrayStart(3)
			} else {
				yynn807 = 1
				for _, b := range yyq807 {
					if b {
						yynn807++
					}
				}
				r.EncodeMapStart(yynn807)
				yynn807 = 0
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym809 := z.EncBinary()
				_ = yym809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym810 := z.EncBinary()
				_ = yym810
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq807[1] {
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq807[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq807[2] {
					yym815 := z.EncBinary()
					_ = yym815
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq807[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym816 := z.EncBinary()
					_ = yym816
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym817 := z.DecBinary()
	_ = yym817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct818 := r.ContainerType()
		if yyct818 == codecSelferValueTypeMap1234 {
			yyl818 := r.ReadMapStart()
			if yyl818 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl818, d)
			}
		} else if yyct818 == codecSelferValueTypeArray1234 {
			yyl818 := r.ReadArrayStart()
			if yyl818 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl818, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys819Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys819Slc
	var yyhl819 bool = l >= 0
	for yyj819 := 0; ; yyj819++ {
		if yyhl819 {
			if yyj819 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys819Slc = r.DecodeBytes(yys819Slc, true, true)
		yys819 := string(yys819Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys819 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys819)
		} // end switch yys819
	} // end for yyj819
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj823 int
	var yyb823 bool
	var yyhl823 bool = l >= 0
	yyj823++
	if yyhl823 {
		yyb823 = yyj823 > l
	} else {
		yyb823 = r.CheckBreak()
	}
	if yyb823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj823++
	if yyhl823 {
		yyb823 = yyj823 > l
	} else {
		yyb823 = r.CheckBreak()
	}
	if yyb823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj823++
	if yyhl823 {
		yyb823 = yyj823 > l
	} else {
		yyb823 = r.CheckBreak()
	}
	if yyb823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj823++
		if yyhl823 {
			yyb823 = yyj823 > l
		} else {
			yyb823 = r.CheckBreak()
		}
		if yyb823 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj823-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym827 := z.EncBinary()
		_ = yym827
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep828 := !z.EncBinary()
			yy2arr828 := z.EncBasicHandle().StructToArray
			var yyq828 [5]bool
			_, _, _ = yysep828, yyq828, yy2arr828
			const yyr828 bool = false
			yyq828[1] = x.User != ""
			yyq828[2] = x.SecretFile != ""
			yyq828[3] = x.SecretRef != nil
			yyq828[4] = x.ReadOnly != false
			var yynn828 int
			if yyr828 || yy2arr828 {
				r.EncodeArrayStart(5)
			} else {
				yynn828 = 1
				for _, b := range yyq828 {
					if b {
						yynn828++
					}
				}
				r.EncodeMapStart(yynn828)
				yynn828 = 0
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[1] {
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq828[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[2] {
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq828[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq828[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[4] {
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq828[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym842 := z.DecBinary()
	_ = yym842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct843 := r.ContainerType()
		if yyct843 == codecSelferValueTypeMap1234 {
			yyl843 := r.ReadMapStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl843, d)
			}
		} else if yyct843 == codecSelferValueTypeArray1234 {
			yyl843 := r.ReadArrayStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys844Slc
	var yyhl844 bool = l >= 0
	for yyj844 := 0; ; yyj844++ {
		if yyhl844 {
			if yyj844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys844Slc = r.DecodeBytes(yys844Slc, true, true)
		yys844 := string(yys844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys844 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv845 := &x.Monitors
				yym846 := z.DecBinary()
				_ = yym846
				if false {
				} else {
					z.F.DecSliceStringX(yyv845, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys844)
		} // end switch yys844
	} // end for yyj844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj851 int
	var yyb851 bool
	var yyhl851 bool = l >= 0
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv852 := &x.Monitors
		yym853 := z.DecBinary()
		_ = yym853
		if false {
		} else {
			z.F.DecSliceStringX(yyv852, false, d)
		}
	}
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj851++
		if yyhl851 {
			yyb851 = yyj851 > l
		} else {
			yyb851 = r.CheckBreak()
		}
		if yyb851 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj851-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym858 := z.EncBinary()
		_ = yym858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep859 := !z.EncBinary()
			yy2arr859 := z.EncBasicHandle().StructToArray
			var yyq859 [1]bool
			_, _, _ = yysep859, yyq859, yy2arr859
			const yyr859 bool = false
			var yynn859 int
			if yyr859 || yy2arr859 {
				r.EncodeArrayStart(1)
			} else {
				yynn859 = 1
				for _, b := range yyq859 {
					if b {
						yynn859++
					}
				}
				r.EncodeMapStart(yynn859)
				yynn859 = 0
			}
			if yyr859 || yy2arr859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym861 := z.EncBinary()
				_ = yym861
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym862 := z.EncBinary()
				_ = yym862
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr859 || yy2arr859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym863 := z.DecBinary()
	_ = yym863
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct864 := r.ContainerType()
		if yyct864 == codecSelferValueTypeMap1234 {
			yyl864 := r.ReadMapStart()
			if yyl864 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl864, d)
			}
		} else if yyct864 == codecSelferValueTypeArray1234 {
			yyl864 := r.ReadArrayStart()
			if yyl864 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl864, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys865Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys865Slc
	var yyhl865 bool = l >= 0
	for yyj865 := 0; ; yyj865++ {
		if yyhl865 {
			if yyj865 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys865Slc = r.DecodeBytes(yys865Slc, true, true)
		yys865 := string(yys865Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys865 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys865)
		} // end switch yys865
	} // end for yyj865
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj867 int
	var yyb867 bool
	var yyhl867 bool = l >= 0
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj867++
		if yyhl867 {
			yyb867 = yyj867 > l
		} else {
			yyb867 = r.CheckBreak()
		}
		if yyb867 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj867-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym869 := z.EncBinary()
		_ = yym869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep870 := !z.EncBinary()
			yy2arr870 := z.EncBasicHandle().StructToArray
			var yyq870 [1]bool
			_, _, _ = yysep870, yyq870, yy2arr870
			const yyr870 bool = false
			yyq870[0] = len(x.Items) != 0
			var yynn870 int
			if yyr870 || yy2arr870 {
				r.EncodeArrayStart(1)
			} else {
				yynn870 = 0
				for _, b := range yyq870 {
					if b {
						yynn870++
					}
				}
				r.EncodeMapStart(yynn870)
				yynn870 = 0
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym872 := z.EncBinary()
						_ = yym872
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq870[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym873 := z.EncBinary()
						_ = yym873
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym874 := z.DecBinary()
	_ = yym874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct875 := r.ContainerType()
		if yyct875 == codecSelferValueTypeMap1234 {
			yyl875 := r.ReadMapStart()
			if yyl875 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl875, d)
			}
		} else if yyct875 == codecSelferValueTypeArray1234 {
			yyl875 := r.ReadArrayStart()
			if yyl875 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys876Slc
	var yyhl876 bool = l >= 0
	for yyj876 := 0; ; yyj876++ {
		if yyhl876 {
			if yyj876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys876Slc = r.DecodeBytes(yys876Slc, true, true)
		yys876 := string(yys876Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys876 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv877 := &x.Items
				yym878 := z.DecBinary()
				_ = yym878
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv877), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys876)
		} // end switch yys876
	} // end for yyj876
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj879 int
	var yyb879 bool
	var yyhl879 bool = l >= 0
	yyj879++
	if yyhl879 {
		yyb879 = yyj879 > l
	} else {
		yyb879 = r.CheckBreak()
	}
	if yyb879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv880 := &x.Items
		yym881 := z.DecBinary()
		_ = yym881
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv880), d)
		}
	}
	for {
		yyj879++
		if yyhl879 {
			yyb879 = yyj879 > l
		} else {
			yyb879 = r.CheckBreak()
		}
		if yyb879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym882 := z.EncBinary()
		_ = yym882
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep883 := !z.EncBinary()
			yy2arr883 := z.EncBasicHandle().StructToArray
			var yyq883 [2]bool
			_, _, _ = yysep883, yyq883, yy2arr883
			const yyr883 bool = false
			var yynn883 int
			if yyr883 || yy2arr883 {
				r.EncodeArrayStart(2)
			} else {
				yynn883 = 2
				for _, b := range yyq883 {
					if b {
						yynn883++
					}
				}
				r.EncodeMapStart(yynn883)
				yynn883 = 0
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym885 := z.EncBinary()
				_ = yym885
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym886 := z.EncBinary()
				_ = yym886
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy888 := &x.FieldRef
				yy888.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy889 := &x.FieldRef
				yy889.CodecEncodeSelf(e)
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym890 := z.DecBinary()
	_ = yym890
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct891 := r.ContainerType()
		if yyct891 == codecSelferValueTypeMap1234 {
			yyl891 := r.ReadMapStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl891, d)
			}
		} else if yyct891 == codecSelferValueTypeArray1234 {
			yyl891 := r.ReadArrayStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl891, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys892Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys892Slc
	var yyhl892 bool = l >= 0
	for yyj892 := 0; ; yyj892++ {
		if yyhl892 {
			if yyj892 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys892Slc = r.DecodeBytes(yys892Slc, true, true)
		yys892 := string(yys892Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys892 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv894 := &x.FieldRef
				yyv894.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys892)
		} // end switch yys892
	} // end for yyj892
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj895 int
	var yyb895 bool
	var yyhl895 bool = l >= 0
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv897 := &x.FieldRef
		yyv897.CodecDecodeSelf(d)
	}
	for {
		yyj895++
		if yyhl895 {
			yyb895 = yyj895 > l
		} else {
			yyb895 = r.CheckBreak()
		}
		if yyb895 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj895-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym898 := z.EncBinary()
		_ = yym898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep899 := !z.EncBinary()
			yy2arr899 := z.EncBasicHandle().StructToArray
			var yyq899 [5]bool
			_, _, _ = yysep899, yyq899, yy2arr899
			const yyr899 bool = false
			yyq899[0] = x.Name != ""
			yyq899[1] = x.HostPort != 0
			yyq899[3] = x.Protocol != ""
			yyq899[4] = x.HostIP != ""
			var yynn899 int
			if yyr899 || yy2arr899 {
				r.EncodeArrayStart(5)
			} else {
				yynn899 = 1
				for _, b := range yyq899 {
					if b {
						yynn899++
					}
				}
				r.EncodeMapStart(yynn899)
				yynn899 = 0
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq899[0] {
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq899[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq899[1] {
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq899[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym907 := z.EncBinary()
				_ = yym907
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym908 := z.EncBinary()
				_ = yym908
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq899[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq899[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq899[4] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq899[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym913 := z.DecBinary()
	_ = yym913
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct914 := r.ContainerType()
		if yyct914 == codecSelferValueTypeMap1234 {
			yyl914 := r.ReadMapStart()
			if yyl914 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl914, d)
			}
		} else if yyct914 == codecSelferValueTypeArray1234 {
			yyl914 := r.ReadArrayStart()
			if yyl914 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl914, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys915Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys915Slc
	var yyhl915 bool = l >= 0
	for yyj915 := 0; ; yyj915++ {
		if yyhl915 {
			if yyj915 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys915Slc = r.DecodeBytes(yys915Slc, true, true)
		yys915 := string(yys915Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys915 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys915)
		} // end switch yys915
	} // end for yyj915
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj921 int
	var yyb921 bool
	var yyhl921 bool = l >= 0
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj921++
		if yyhl921 {
			yyb921 = yyj921 > l
		} else {
			yyb921 = r.CheckBreak()
		}
		if yyb921 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj921-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym927 := z.EncBinary()
		_ = yym927
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep928 := !z.EncBinary()
			yy2arr928 := z.EncBasicHandle().StructToArray
			var yyq928 [3]bool
			_, _, _ = yysep928, yyq928, yy2arr928
			const yyr928 bool = false
			yyq928[1] = x.ReadOnly != false
			var yynn928 int
			if yyr928 || yy2arr928 {
				r.EncodeArrayStart(3)
			} else {
				yynn928 = 2
				for _, b := range yyq928 {
					if b {
						yynn928++
					}
				}
				r.EncodeMapStart(yynn928)
				yynn928 = 0
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym930 := z.EncBinary()
				_ = yym930
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym931 := z.EncBinary()
				_ = yym931
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq928[1] {
					yym933 := z.EncBinary()
					_ = yym933
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq928[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym934 := z.EncBinary()
					_ = yym934
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym936 := z.EncBinary()
				_ = yym936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym937 := z.EncBinary()
				_ = yym937
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym938 := z.DecBinary()
	_ = yym938
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct939 := r.ContainerType()
		if yyct939 == codecSelferValueTypeMap1234 {
			yyl939 := r.ReadMapStart()
			if yyl939 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl939, d)
			}
		} else if yyct939 == codecSelferValueTypeArray1234 {
			yyl939 := r.ReadArrayStart()
			if yyl939 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl939, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys940Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys940Slc
	var yyhl940 bool = l >= 0
	for yyj940 := 0; ; yyj940++ {
		if yyhl940 {
			if yyj940 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys940Slc = r.DecodeBytes(yys940Slc, true, true)
		yys940 := string(yys940Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys940 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys940)
		} // end switch yys940
	} // end for yyj940
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj944 int
	var yyb944 bool
	var yyhl944 bool = l >= 0
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj944++
		if yyhl944 {
			yyb944 = yyj944 > l
		} else {
			yyb944 = r.CheckBreak()
		}
		if yyb944 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj944-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym948 := z.EncBinary()
		_ = yym948
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep949 := !z.EncBinary()
			yy2arr949 := z.EncBasicHandle().StructToArray
			var yyq949 [3]bool
			_, _, _ = yysep949, yyq949, yy2arr949
			const yyr949 bool = false
			yyq949[1] = x.Value != ""
			yyq949[2] = x.ValueFrom != nil
			var yynn949 int
			if yyr949 || yy2arr949 {
				r.EncodeArrayStart(3)
			} else {
				yynn949 = 1
				for _, b := range yyq949 {
					if b {
						yynn949++
					}
				}
				r.EncodeMapStart(yynn949)
				yynn949 = 0
			}
			if yyr949 || yy2arr949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym951 := z.EncBinary()
				_ = yym951
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym952 := z.EncBinary()
				_ = yym952
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr949 || yy2arr949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq949[1] {
					yym954 := z.EncBinary()
					_ = yym954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq949[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr949 || yy2arr949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq949[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq949[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr949 || yy2arr949 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym957 := z.DecBinary()
	_ = yym957
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct958 := r.ContainerType()
		if yyct958 == codecSelferValueTypeMap1234 {
			yyl958 := r.ReadMapStart()
			if yyl958 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl958, d)
			}
		} else if yyct958 == codecSelferValueTypeArray1234 {
			yyl958 := r.ReadArrayStart()
			if yyl958 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl958, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys959Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys959Slc
	var yyhl959 bool = l >= 0
	for yyj959 := 0; ; yyj959++ {
		if yyhl959 {
			if yyj959 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys959Slc = r.DecodeBytes(yys959Slc, true, true)
		yys959 := string(yys959Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys959 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys959)
		} // end switch yys959
	} // end for yyj959
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj963 int
	var yyb963 bool
	var yyhl963 bool = l >= 0
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj963++
		if yyhl963 {
			yyb963 = yyj963 > l
		} else {
			yyb963 = r.CheckBreak()
		}
		if yyb963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym967 := z.EncBinary()
		_ = yym967
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep968 := !z.EncBinary()
			yy2arr968 := z.EncBasicHandle().StructToArray
			var yyq968 [3]bool
			_, _, _ = yysep968, yyq968, yy2arr968
			const yyr968 bool = false
			yyq968[0] = x.FieldRef != nil
			yyq968[1] = x.ConfigMapKeyRef != nil
			yyq968[2] = x.SecretKeyRef != nil
			var yynn968 int
			if yyr968 || yy2arr968 {
				r.EncodeArrayStart(3)
			} else {
				yynn968 = 0
				for _, b := range yyq968 {
					if b {
						yynn968++
					}
				}
				r.EncodeMapStart(yynn968)
				yynn968 = 0
			}
			if yyr968 || yy2arr968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq968[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq968[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr968 || yy2arr968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq968[1] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq968[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr968 || yy2arr968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq968[2] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq968[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr968 || yy2arr968 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym972 := z.DecBinary()
	_ = yym972
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct973 := r.ContainerType()
		if yyct973 == codecSelferValueTypeMap1234 {
			yyl973 := r.ReadMapStart()
			if yyl973 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl973, d)
			}
		} else if yyct973 == codecSelferValueTypeArray1234 {
			yyl973 := r.ReadArrayStart()
			if yyl973 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl973, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys974Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys974Slc
	var yyhl974 bool = l >= 0
	for yyj974 := 0; ; yyj974++ {
		if yyhl974 {
			if yyj974 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys974Slc = r.DecodeBytes(yys974Slc, true, true)
		yys974 := string(yys974Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys974 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys974)
		} // end switch yys974
	} // end for yyj974
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj978 int
	var yyb978 bool
	var yyhl978 bool = l >= 0
	yyj978++
	if yyhl978 {
		yyb978 = yyj978 > l
	} else {
		yyb978 = r.CheckBreak()
	}
	if yyb978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj978++
	if yyhl978 {
		yyb978 = yyj978 > l
	} else {
		yyb978 = r.CheckBreak()
	}
	if yyb978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj978++
	if yyhl978 {
		yyb978 = yyj978 > l
	} else {
		yyb978 = r.CheckBreak()
	}
	if yyb978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj978++
		if yyhl978 {
			yyb978 = yyj978 > l
		} else {
			yyb978 = r.CheckBreak()
		}
		if yyb978 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj978-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym982 := z.EncBinary()
		_ = yym982
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep983 := !z.EncBinary()
			yy2arr983 := z.EncBasicHandle().StructToArray
			var yyq983 [2]bool
			_, _, _ = yysep983, yyq983, yy2arr983
			const yyr983 bool = false
			var yynn983 int
			if yyr983 || yy2arr983 {
				r.EncodeArrayStart(2)
			} else {
				yynn983 = 2
				for _, b := range yyq983 {
					if b {
						yynn983++
					}
				}
				r.EncodeMapStart(yynn983)
				yynn983 = 0
			}
			if yyr983 || yy2arr983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym985 := z.EncBinary()
				_ = yym985
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym986 := z.EncBinary()
				_ = yym986
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr983 || yy2arr983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym988 := z.EncBinary()
				_ = yym988
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym989 := z.EncBinary()
				_ = yym989
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr983 || yy2arr983 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym990 := z.DecBinary()
	_ = yym990
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct991 := r.ContainerType()
		if yyct991 == codecSelferValueTypeMap1234 {
			yyl991 := r.ReadMapStart()
			if yyl991 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl991, d)
			}
		} else if yyct991 == codecSelferValueTypeArray1234 {
			yyl991 := r.ReadArrayStart()
			if yyl991 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl991, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys992Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys992Slc
	var yyhl992 bool = l >= 0
	for yyj992 := 0; ; yyj992++ {
		if yyhl992 {
			if yyj992 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys992Slc = r.DecodeBytes(yys992Slc, true, true)
		yys992 := string(yys992Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys992 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys992)
		} // end switch yys992
	} // end for yyj992
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj995 int
	var yyb995 bool
	var yyhl995 bool = l >= 0
	yyj995++
	if yyhl995 {
		yyb995 = yyj995 > l
	} else {
		yyb995 = r.CheckBreak()
	}
	if yyb995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj995++
	if yyhl995 {
		yyb995 = yyj995 > l
	} else {
		yyb995 = r.CheckBreak()
	}
	if yyb995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj995++
		if yyhl995 {
			yyb995 = yyj995 > l
		} else {
			yyb995 = r.CheckBreak()
		}
		if yyb995 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj995-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym998 := z.EncBinary()
		_ = yym998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep999 := !z.EncBinary()
			yy2arr999 := z.EncBasicHandle().StructToArray
			var yyq999 [2]bool
			_, _, _ = yysep999, yyq999, yy2arr999
			const yyr999 bool = false
			var yynn999 int
			if yyr999 || yy2arr999 {
				r.EncodeArrayStart(2)
			} else {
				yynn999 = 2
				for _, b := range yyq999 {
					if b {
						yynn999++
					}
				}
				r.EncodeMapStart(yynn999)
				yynn999 = 0
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1001 := z.EncBinary()
				_ = yym1001
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1002 := z.EncBinary()
				_ = yym1002
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1004 := z.EncBinary()
				_ = yym1004
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1005 := z.EncBinary()
				_ = yym1005
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1006 := z.DecBinary()
	_ = yym1006
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1007 := r.ContainerType()
		if yyct1007 == codecSelferValueTypeMap1234 {
			yyl1007 := r.ReadMapStart()
			if yyl1007 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1007, d)
			}
		} else if yyct1007 == codecSelferValueTypeArray1234 {
			yyl1007 := r.ReadArrayStart()
			if yyl1007 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1007, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1008Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1008Slc
	var yyhl1008 bool = l >= 0
	for yyj1008 := 0; ; yyj1008++ {
		if yyhl1008 {
			if yyj1008 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1008Slc = r.DecodeBytes(yys1008Slc, true, true)
		yys1008 := string(yys1008Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1008 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1008)
		} // end switch yys1008
	} // end for yyj1008
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1011 int
	var yyb1011 bool
	var yyhl1011 bool = l >= 0
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1011++
		if yyhl1011 {
			yyb1011 = yyj1011 > l
		} else {
			yyb1011 = r.CheckBreak()
		}
		if yyb1011 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1011-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1014 := z.EncBinary()
		_ = yym1014
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1015 := !z.EncBinary()
			yy2arr1015 := z.EncBasicHandle().StructToArray
			var yyq1015 [2]bool
			_, _, _ = yysep1015, yyq1015, yy2arr1015
			const yyr1015 bool = false
			var yynn1015 int
			if yyr1015 || yy2arr1015 {
				r.EncodeArrayStart(2)
			} else {
				yynn1015 = 2
				for _, b := range yyq1015 {
					if b {
						yynn1015++
					}
				}
				r.EncodeMapStart(yynn1015)
				yynn1015 = 0
			}
			if yyr1015 || yy2arr1015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1017 := z.EncBinary()
				_ = yym1017
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1018 := z.EncBinary()
				_ = yym1018
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1015 || yy2arr1015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1020 := z.EncBinary()
				_ = yym1020
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1021 := z.EncBinary()
				_ = yym1021
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1015 || yy2arr1015 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1022 := z.DecBinary()
	_ = yym1022
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1023 := r.ContainerType()
		if yyct1023 == codecSelferValueTypeMap1234 {
			yyl1023 := r.ReadMapStart()
			if yyl1023 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1023, d)
			}
		} else if yyct1023 == codecSelferValueTypeArray1234 {
			yyl1023 := r.ReadArrayStart()
			if yyl1023 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1023, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1024Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1024Slc
	var yyhl1024 bool = l >= 0
	for yyj1024 := 0; ; yyj1024++ {
		if yyhl1024 {
			if yyj1024 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1024Slc = r.DecodeBytes(yys1024Slc, true, true)
		yys1024 := string(yys1024Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1024 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1024)
		} // end switch yys1024
	} // end for yyj1024
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1027 int
	var yyb1027 bool
	var yyhl1027 bool = l >= 0
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1027++
		if yyhl1027 {
			yyb1027 = yyj1027 > l
		} else {
			yyb1027 = r.CheckBreak()
		}
		if yyb1027 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1027-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1030 := z.EncBinary()
		_ = yym1030
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1031 := !z.EncBinary()
			yy2arr1031 := z.EncBasicHandle().StructToArray
			var yyq1031 [4]bool
			_, _, _ = yysep1031, yyq1031, yy2arr1031
			const yyr1031 bool = false
			yyq1031[0] = x.Path != ""
			yyq1031[1] = true
			yyq1031[2] = x.Host != ""
			yyq1031[3] = x.Scheme != ""
			var yynn1031 int
			if yyr1031 || yy2arr1031 {
				r.EncodeArrayStart(4)
			} else {
				yynn1031 = 0
				for _, b := range yyq1031 {
					if b {
						yynn1031++
					}
				}
				r.EncodeMapStart(yynn1031)
				yynn1031 = 0
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[0] {
					yym1033 := z.EncBinary()
					_ = yym1033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1031[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1034 := z.EncBinary()
					_ = yym1034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[1] {
					yy1036 := &x.Port
					yym1037 := z.EncBinary()
					_ = yym1037
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1036) {
					} else if !yym1037 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1036)
					} else {
						z.EncFallback(yy1036)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1031[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1038 := &x.Port
					yym1039 := z.EncBinary()
					_ = yym1039
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1038) {
					} else if !yym1039 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1038)
					} else {
						z.EncFallback(yy1038)
					}
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[2] {
					yym1041 := z.EncBinary()
					_ = yym1041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1031[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1042 := z.EncBinary()
					_ = yym1042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1031[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1044 := z.DecBinary()
	_ = yym1044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1045 := r.ContainerType()
		if yyct1045 == codecSelferValueTypeMap1234 {
			yyl1045 := r.ReadMapStart()
			if yyl1045 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1045, d)
			}
		} else if yyct1045 == codecSelferValueTypeArray1234 {
			yyl1045 := r.ReadArrayStart()
			if yyl1045 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1045, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1046Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1046Slc
	var yyhl1046 bool = l >= 0
	for yyj1046 := 0; ; yyj1046++ {
		if yyhl1046 {
			if yyj1046 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1046Slc = r.DecodeBytes(yys1046Slc, true, true)
		yys1046 := string(yys1046Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1046 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1048 := &x.Port
				yym1049 := z.DecBinary()
				_ = yym1049
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1048) {
				} else if !yym1049 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1048)
				} else {
					z.DecFallback(yyv1048, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1046)
		} // end switch yys1046
	} // end for yyj1046
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1052 int
	var yyb1052 bool
	var yyhl1052 bool = l >= 0
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1054 := &x.Port
		yym1055 := z.DecBinary()
		_ = yym1055
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1054) {
		} else if !yym1055 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1054)
		} else {
			z.DecFallback(yyv1054, false)
		}
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj1052++
		if yyhl1052 {
			yyb1052 = yyj1052 > l
		} else {
			yyb1052 = r.CheckBreak()
		}
		if yyb1052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1058 := z.EncBinary()
	_ = yym1058
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1059 := z.DecBinary()
	_ = yym1059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1060 := z.EncBinary()
		_ = yym1060
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1061 := !z.EncBinary()
			yy2arr1061 := z.EncBasicHandle().StructToArray
			var yyq1061 [1]bool
			_, _, _ = yysep1061, yyq1061, yy2arr1061
			const yyr1061 bool = false
			yyq1061[0] = true
			var yynn1061 int
			if yyr1061 || yy2arr1061 {
				r.EncodeArrayStart(1)
			} else {
				yynn1061 = 0
				for _, b := range yyq1061 {
					if b {
						yynn1061++
					}
				}
				r.EncodeMapStart(yynn1061)
				yynn1061 = 0
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1061[0] {
					yy1063 := &x.Port
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1063) {
					} else if !yym1064 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1063)
					} else {
						z.EncFallback(yy1063)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1065 := &x.Port
					yym1066 := z.EncBinary()
					_ = yym1066
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1065) {
					} else if !yym1066 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1065)
					} else {
						z.EncFallback(yy1065)
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1067 := z.DecBinary()
	_ = yym1067
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1068 := r.ContainerType()
		if yyct1068 == codecSelferValueTypeMap1234 {
			yyl1068 := r.ReadMapStart()
			if yyl1068 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1068, d)
			}
		} else if yyct1068 == codecSelferValueTypeArray1234 {
			yyl1068 := r.ReadArrayStart()
			if yyl1068 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1068, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1069Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1069Slc
	var yyhl1069 bool = l >= 0
	for yyj1069 := 0; ; yyj1069++ {
		if yyhl1069 {
			if yyj1069 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1069Slc = r.DecodeBytes(yys1069Slc, true, true)
		yys1069 := string(yys1069Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1069 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1070 := &x.Port
				yym1071 := z.DecBinary()
				_ = yym1071
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1070) {
				} else if !yym1071 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1070)
				} else {
					z.DecFallback(yyv1070, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1069)
		} // end switch yys1069
	} // end for yyj1069
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1072 int
	var yyb1072 bool
	var yyhl1072 bool = l >= 0
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1073 := &x.Port
		yym1074 := z.DecBinary()
		_ = yym1074
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1073) {
		} else if !yym1074 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1073)
		} else {
			z.DecFallback(yyv1073, false)
		}
	}
	for {
		yyj1072++
		if yyhl1072 {
			yyb1072 = yyj1072 > l
		} else {
			yyb1072 = r.CheckBreak()
		}
		if yyb1072 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1072-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1075 := z.EncBinary()
		_ = yym1075
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1076 := !z.EncBinary()
			yy2arr1076 := z.EncBasicHandle().StructToArray
			var yyq1076 [1]bool
			_, _, _ = yysep1076, yyq1076, yy2arr1076
			const yyr1076 bool = false
			yyq1076[0] = len(x.Command) != 0
			var yynn1076 int
			if yyr1076 || yy2arr1076 {
				r.EncodeArrayStart(1)
			} else {
				yynn1076 = 0
				for _, b := range yyq1076 {
					if b {
						yynn1076++
					}
				}
				r.EncodeMapStart(yynn1076)
				yynn1076 = 0
			}
			if yyr1076 || yy2arr1076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1076[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1078 := z.EncBinary()
						_ = yym1078
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1076[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1079 := z.EncBinary()
						_ = yym1079
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1076 || yy2arr1076 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1080 := z.DecBinary()
	_ = yym1080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1081 := r.ContainerType()
		if yyct1081 == codecSelferValueTypeMap1234 {
			yyl1081 := r.ReadMapStart()
			if yyl1081 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1081, d)
			}
		} else if yyct1081 == codecSelferValueTypeArray1234 {
			yyl1081 := r.ReadArrayStart()
			if yyl1081 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1081, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1082Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1082Slc
	var yyhl1082 bool = l >= 0
	for yyj1082 := 0; ; yyj1082++ {
		if yyhl1082 {
			if yyj1082 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1082Slc = r.DecodeBytes(yys1082Slc, true, true)
		yys1082 := string(yys1082Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1082 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1083 := &x.Command
				yym1084 := z.DecBinary()
				_ = yym1084
				if false {
				} else {
					z.F.DecSliceStringX(yyv1083, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1082)
		} // end switch yys1082
	} // end for yyj1082
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1085 int
	var yyb1085 bool
	var yyhl1085 bool = l >= 0
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1086 := &x.Command
		yym1087 := z.DecBinary()
		_ = yym1087
		if false {
		} else {
			z.F.DecSliceStringX(yyv1086, false, d)
		}
	}
	for {
		yyj1085++
		if yyhl1085 {
			yyb1085 = yyj1085 > l
		} else {
			yyb1085 = r.CheckBreak()
		}
		if yyb1085 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1085-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1088 := z.EncBinary()
		_ = yym1088
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1089 := !z.EncBinary()
			yy2arr1089 := z.EncBasicHandle().StructToArray
			var yyq1089 [8]bool
			_, _, _ = yysep1089, yyq1089, yy2arr1089
			const yyr1089 bool = false
			yyq1089[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1089[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1089[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1089[3] = x.InitialDelaySeconds != 0
			yyq1089[4] = x.TimeoutSeconds != 0
			yyq1089[5] = x.PeriodSeconds != 0
			yyq1089[6] = x.SuccessThreshold != 0
			yyq1089[7] = x.FailureThreshold != 0
			var yynn1089 int
			if yyr1089 || yy2arr1089 {
				r.EncodeArrayStart(8)
			} else {
				yynn1089 = 0
				for _, b := range yyq1089 {
					if b {
						yynn1089++
					}
				}
				r.EncodeMapStart(yynn1089)
				yynn1089 = 0
			}
			var yyn1090 bool
			if x.Handler.Exec == nil {
				yyn1090 = true
				goto LABEL1090
			}
		LABEL1090:
			if yyr1089 || yy2arr1089 {
				if yyn1090 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1089[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1089[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1090 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1091 bool
			if x.Handler.HTTPGet == nil {
				yyn1091 = true
				goto LABEL1091
			}
		LABEL1091:
			if yyr1089 || yy2arr1089 {
				if yyn1091 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1089[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1089[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1091 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1092 bool
			if x.Handler.TCPSocket == nil {
				yyn1092 = true
				goto LABEL1092
			}
		LABEL1092:
			if yyr1089 || yy2arr1089 {
				if yyn1092 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1089[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1089[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1092 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[3] {
					yym1094 := z.EncBinary()
					_ = yym1094
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1089[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[4] {
					yym1097 := z.EncBinary()
					_ = yym1097
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1089[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[5] {
					yym1100 := z.EncBinary()
					_ = yym1100
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1089[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1101 := z.EncBinary()
					_ = yym1101
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[6] {
					yym1103 := z.EncBinary()
					_ = yym1103
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1089[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1104 := z.EncBinary()
					_ = yym1104
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[7] {
					yym1106 := z.EncBinary()
					_ = yym1106
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1089[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1107 := z.EncBinary()
					_ = yym1107
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1108 := z.DecBinary()
	_ = yym1108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1109 := r.ContainerType()
		if yyct1109 == codecSelferValueTypeMap1234 {
			yyl1109 := r.ReadMapStart()
			if yyl1109 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1109, d)
			}
		} else if yyct1109 == codecSelferValueTypeArray1234 {
			yyl1109 := r.ReadArrayStart()
			if yyl1109 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1110Slc
	var yyhl1110 bool = l >= 0
	for yyj1110 := 0; ; yyj1110++ {
		if yyhl1110 {
			if yyj1110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1110Slc = r.DecodeBytes(yys1110Slc, true, true)
		yys1110 := string(yys1110Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1110 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1110)
		} // end switch yys1110
	} // end for yyj1110
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1119 int
	var yyb1119 bool
	var yyhl1119 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1119++
		if yyhl1119 {
			yyb1119 = yyj1119 > l
		} else {
			yyb1119 = r.CheckBreak()
		}
		if yyb1119 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1119-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1128 := z.EncBinary()
	_ = yym1128
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1129 := z.DecBinary()
	_ = yym1129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1130 := z.EncBinary()
	_ = yym1130
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1131 := z.DecBinary()
	_ = yym1131
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1132 := z.EncBinary()
		_ = yym1132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1133 := !z.EncBinary()
			yy2arr1133 := z.EncBasicHandle().StructToArray
			var yyq1133 [2]bool
			_, _, _ = yysep1133, yyq1133, yy2arr1133
			const yyr1133 bool = false
			yyq1133[0] = len(x.Add) != 0
			yyq1133[1] = len(x.Drop) != 0
			var yynn1133 int
			if yyr1133 || yy2arr1133 {
				r.EncodeArrayStart(2)
			} else {
				yynn1133 = 0
				for _, b := range yyq1133 {
					if b {
						yynn1133++
					}
				}
				r.EncodeMapStart(yynn1133)
				yynn1133 = 0
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1133[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1135 := z.EncBinary()
						_ = yym1135
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1133[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1136 := z.EncBinary()
						_ = yym1136
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1133[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1138 := z.EncBinary()
						_ = yym1138
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1133[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1139 := z.EncBinary()
						_ = yym1139
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1140 := z.DecBinary()
	_ = yym1140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1141 := r.ContainerType()
		if yyct1141 == codecSelferValueTypeMap1234 {
			yyl1141 := r.ReadMapStart()
			if yyl1141 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1141, d)
			}
		} else if yyct1141 == codecSelferValueTypeArray1234 {
			yyl1141 := r.ReadArrayStart()
			if yyl1141 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1141, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1142Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1142Slc
	var yyhl1142 bool = l >= 0
	for yyj1142 := 0; ; yyj1142++ {
		if yyhl1142 {
			if yyj1142 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1142Slc = r.DecodeBytes(yys1142Slc, true, true)
		yys1142 := string(yys1142Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1142 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1143 := &x.Add
				yym1144 := z.DecBinary()
				_ = yym1144
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1143), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1145 := &x.Drop
				yym1146 := z.DecBinary()
				_ = yym1146
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1145), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1142)
		} // end switch yys1142
	} // end for yyj1142
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1147 int
	var yyb1147 bool
	var yyhl1147 bool = l >= 0
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1148 := &x.Add
		yym1149 := z.DecBinary()
		_ = yym1149
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1148), d)
		}
	}
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1150 := &x.Drop
		yym1151 := z.DecBinary()
		_ = yym1151
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1150), d)
		}
	}
	for {
		yyj1147++
		if yyhl1147 {
			yyb1147 = yyj1147 > l
		} else {
			yyb1147 = r.CheckBreak()
		}
		if yyb1147 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1147-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1152 := z.EncBinary()
		_ = yym1152
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1153 := !z.EncBinary()
			yy2arr1153 := z.EncBasicHandle().StructToArray
			var yyq1153 [2]bool
			_, _, _ = yysep1153, yyq1153, yy2arr1153
			const yyr1153 bool = false
			yyq1153[0] = len(x.Limits) != 0
			yyq1153[1] = len(x.Requests) != 0
			var yynn1153 int
			if yyr1153 || yy2arr1153 {
				r.EncodeArrayStart(2)
			} else {
				yynn1153 = 0
				for _, b := range yyq1153 {
					if b {
						yynn1153++
					}
				}
				r.EncodeMapStart(yynn1153)
				yynn1153 = 0
			}
			if yyr1153 || yy2arr1153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1153[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1153[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1153 || yy2arr1153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1153[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1153[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1153 || yy2arr1153 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1156 := z.DecBinary()
	_ = yym1156
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1157 := r.ContainerType()
		if yyct1157 == codecSelferValueTypeMap1234 {
			yyl1157 := r.ReadMapStart()
			if yyl1157 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1157, d)
			}
		} else if yyct1157 == codecSelferValueTypeArray1234 {
			yyl1157 := r.ReadArrayStart()
			if yyl1157 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1157, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1158Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1158Slc
	var yyhl1158 bool = l >= 0
	for yyj1158 := 0; ; yyj1158++ {
		if yyhl1158 {
			if yyj1158 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1158Slc = r.DecodeBytes(yys1158Slc, true, true)
		yys1158 := string(yys1158Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1158 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1159 := &x.Limits
				yyv1159.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1160 := &x.Requests
				yyv1160.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1158)
		} // end switch yys1158
	} // end for yyj1158
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1161 int
	var yyb1161 bool
	var yyhl1161 bool = l >= 0
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1162 := &x.Limits
		yyv1162.CodecDecodeSelf(d)
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1163 := &x.Requests
		yyv1163.CodecDecodeSelf(d)
	}
	for {
		yyj1161++
		if yyhl1161 {
			yyb1161 = yyj1161 > l
		} else {
			yyb1161 = r.CheckBreak()
		}
		if yyb1161 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1161-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1164 := z.EncBinary()
		_ = yym1164
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1165 := !z.EncBinary()
			yy2arr1165 := z.EncBasicHandle().StructToArray
			var yyq1165 [18]bool
			_, _, _ = yysep1165, yyq1165, yy2arr1165
			const yyr1165 bool = false
			yyq1165[2] = len(x.Command) != 0
			yyq1165[3] = len(x.Args) != 0
			yyq1165[4] = x.WorkingDir != ""
			yyq1165[5] = len(x.Ports) != 0
			yyq1165[6] = len(x.Env) != 0
			yyq1165[7] = true
			yyq1165[8] = len(x.VolumeMounts) != 0
			yyq1165[9] = x.LivenessProbe != nil
			yyq1165[10] = x.ReadinessProbe != nil
			yyq1165[11] = x.Lifecycle != nil
			yyq1165[12] = x.TerminationMessagePath != ""
			yyq1165[14] = x.SecurityContext != nil
			yyq1165[15] = x.Stdin != false
			yyq1165[16] = x.StdinOnce != false
			yyq1165[17] = x.TTY != false
			var yynn1165 int
			if yyr1165 || yy2arr1165 {
				r.EncodeArrayStart(18)
			} else {
				yynn1165 = 3
				for _, b := range yyq1165 {
					if b {
						yynn1165++
					}
				}
				r.EncodeMapStart(yynn1165)
				yynn1165 = 0
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1167 := z.EncBinary()
				_ = yym1167
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1168 := z.EncBinary()
				_ = yym1168
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1170 := z.EncBinary()
				_ = yym1170
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1171 := z.EncBinary()
				_ = yym1171
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1173 := z.EncBinary()
						_ = yym1173
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1174 := z.EncBinary()
						_ = yym1174
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1176 := z.EncBinary()
						_ = yym1176
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1177 := z.EncBinary()
						_ = yym1177
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[4] {
					yym1179 := z.EncBinary()
					_ = yym1179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1180 := z.EncBinary()
					_ = yym1180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1182 := z.EncBinary()
						_ = yym1182
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1183 := z.EncBinary()
						_ = yym1183
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1185 := z.EncBinary()
						_ = yym1185
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1186 := z.EncBinary()
						_ = yym1186
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[7] {
					yy1188 := &x.Resources
					yy1188.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1189 := &x.Resources
					yy1189.CodecEncodeSelf(e)
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1191 := z.EncBinary()
						_ = yym1191
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1192 := z.EncBinary()
						_ = yym1192
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[12] {
					yym1197 := z.EncBinary()
					_ = yym1197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1198 := z.EncBinary()
					_ = yym1198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[15] {
					yym1202 := z.EncBinary()
					_ = yym1202
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1165[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[16] {
					yym1205 := z.EncBinary()
					_ = yym1205
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1165[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[17] {
					yym1208 := z.EncBinary()
					_ = yym1208
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1165[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1209 := z.EncBinary()
					_ = yym1209
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1210 := z.DecBinary()
	_ = yym1210
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1211 := r.ContainerType()
		if yyct1211 == codecSelferValueTypeMap1234 {
			yyl1211 := r.ReadMapStart()
			if yyl1211 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1211, d)
			}
		} else if yyct1211 == codecSelferValueTypeArray1234 {
			yyl1211 := r.ReadArrayStart()
			if yyl1211 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1211, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1212Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1212Slc
	var yyhl1212 bool = l >= 0
	for yyj1212 := 0; ; yyj1212++ {
		if yyhl1212 {
			if yyj1212 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1212Slc = r.DecodeBytes(yys1212Slc, true, true)
		yys1212 := string(yys1212Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1212 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1215 := &x.Command
				yym1216 := z.DecBinary()
				_ = yym1216
				if false {
				} else {
					z.F.DecSliceStringX(yyv1215, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1217 := &x.Args
				yym1218 := z.DecBinary()
				_ = yym1218
				if false {
				} else {
					z.F.DecSliceStringX(yyv1217, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1220 := &x.Ports
				yym1221 := z.DecBinary()
				_ = yym1221
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1220), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1222 := &x.Env
				yym1223 := z.DecBinary()
				_ = yym1223
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1222), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1224 := &x.Resources
				yyv1224.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1225 := &x.VolumeMounts
				yym1226 := z.DecBinary()
				_ = yym1226
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1225), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1212)
		} // end switch yys1212
	} // end for yyj1212
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1236 int
	var yyb1236 bool
	var yyhl1236 bool = l >= 0
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1239 := &x.Command
		yym1240 := z.DecBinary()
		_ = yym1240
		if false {
		} else {
			z.F.DecSliceStringX(yyv1239, false, d)
		}
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1241 := &x.Args
		yym1242 := z.DecBinary()
		_ = yym1242
		if false {
		} else {
			z.F.DecSliceStringX(yyv1241, false, d)
		}
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1244 := &x.Ports
		yym1245 := z.DecBinary()
		_ = yym1245
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1244), d)
		}
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1246 := &x.Env
		yym1247 := z.DecBinary()
		_ = yym1247
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1246), d)
		}
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1248 := &x.Resources
		yyv1248.CodecDecodeSelf(d)
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1249 := &x.VolumeMounts
		yym1250 := z.DecBinary()
		_ = yym1250
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1249), d)
		}
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1236++
		if yyhl1236 {
			yyb1236 = yyj1236 > l
		} else {
			yyb1236 = r.CheckBreak()
		}
		if yyb1236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1260 := z.EncBinary()
		_ = yym1260
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1261 := !z.EncBinary()
			yy2arr1261 := z.EncBasicHandle().StructToArray
			var yyq1261 [3]bool
			_, _, _ = yysep1261, yyq1261, yy2arr1261
			const yyr1261 bool = false
			yyq1261[0] = x.Exec != nil
			yyq1261[1] = x.HTTPGet != nil
			yyq1261[2] = x.TCPSocket != nil
			var yynn1261 int
			if yyr1261 || yy2arr1261 {
				r.EncodeArrayStart(3)
			} else {
				yynn1261 = 0
				for _, b := range yyq1261 {
					if b {
						yynn1261++
					}
				}
				r.EncodeMapStart(yynn1261)
				yynn1261 = 0
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1261[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1261[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1261[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1265 := z.DecBinary()
	_ = yym1265
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1266 := r.ContainerType()
		if yyct1266 == codecSelferValueTypeMap1234 {
			yyl1266 := r.ReadMapStart()
			if yyl1266 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1266, d)
			}
		} else if yyct1266 == codecSelferValueTypeArray1234 {
			yyl1266 := r.ReadArrayStart()
			if yyl1266 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1266, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1267Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1267Slc
	var yyhl1267 bool = l >= 0
	for yyj1267 := 0; ; yyj1267++ {
		if yyhl1267 {
			if yyj1267 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1267Slc = r.DecodeBytes(yys1267Slc, true, true)
		yys1267 := string(yys1267Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1267 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1267)
		} // end switch yys1267
	} // end for yyj1267
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1271 int
	var yyb1271 bool
	var yyhl1271 bool = l >= 0
	yyj1271++
	if yyhl1271 {
		yyb1271 = yyj1271 > l
	} else {
		yyb1271 = r.CheckBreak()
	}
	if yyb1271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1271++
	if yyhl1271 {
		yyb1271 = yyj1271 > l
	} else {
		yyb1271 = r.CheckBreak()
	}
	if yyb1271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1271++
	if yyhl1271 {
		yyb1271 = yyj1271 > l
	} else {
		yyb1271 = r.CheckBreak()
	}
	if yyb1271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1271++
		if yyhl1271 {
			yyb1271 = yyj1271 > l
		} else {
			yyb1271 = r.CheckBreak()
		}
		if yyb1271 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1271-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1275 := z.EncBinary()
		_ = yym1275
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1276 := !z.EncBinary()
			yy2arr1276 := z.EncBasicHandle().StructToArray
			var yyq1276 [2]bool
			_, _, _ = yysep1276, yyq1276, yy2arr1276
			const yyr1276 bool = false
			yyq1276[0] = x.PostStart != nil
			yyq1276[1] = x.PreStop != nil
			var yynn1276 int
			if yyr1276 || yy2arr1276 {
				r.EncodeArrayStart(2)
			} else {
				yynn1276 = 0
				for _, b := range yyq1276 {
					if b {
						yynn1276++
					}
				}
				r.EncodeMapStart(yynn1276)
				yynn1276 = 0
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1276[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1276[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1279 := z.DecBinary()
	_ = yym1279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1280 := r.ContainerType()
		if yyct1280 == codecSelferValueTypeMap1234 {
			yyl1280 := r.ReadMapStart()
			if yyl1280 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1280, d)
			}
		} else if yyct1280 == codecSelferValueTypeArray1234 {
			yyl1280 := r.ReadArrayStart()
			if yyl1280 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1280, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1281Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1281Slc
	var yyhl1281 bool = l >= 0
	for yyj1281 := 0; ; yyj1281++ {
		if yyhl1281 {
			if yyj1281 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1281Slc = r.DecodeBytes(yys1281Slc, true, true)
		yys1281 := string(yys1281Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1281 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1281)
		} // end switch yys1281
	} // end for yyj1281
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1284 int
	var yyb1284 bool
	var yyhl1284 bool = l >= 0
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1284++
		if yyhl1284 {
			yyb1284 = yyj1284 > l
		} else {
			yyb1284 = r.CheckBreak()
		}
		if yyb1284 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1284-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1287 := z.EncBinary()
	_ = yym1287
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1288 := z.DecBinary()
	_ = yym1288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1289 := z.EncBinary()
		_ = yym1289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1290 := !z.EncBinary()
			yy2arr1290 := z.EncBasicHandle().StructToArray
			var yyq1290 [2]bool
			_, _, _ = yysep1290, yyq1290, yy2arr1290
			const yyr1290 bool = false
			yyq1290[0] = x.Reason != ""
			yyq1290[1] = x.Message != ""
			var yynn1290 int
			if yyr1290 || yy2arr1290 {
				r.EncodeArrayStart(2)
			} else {
				yynn1290 = 0
				for _, b := range yyq1290 {
					if b {
						yynn1290++
					}
				}
				r.EncodeMapStart(yynn1290)
				yynn1290 = 0
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1290[0] {
					yym1292 := z.EncBinary()
					_ = yym1292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1290[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1293 := z.EncBinary()
					_ = yym1293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1290[1] {
					yym1295 := z.EncBinary()
					_ = yym1295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1290[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1296 := z.EncBinary()
					_ = yym1296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1297 := z.DecBinary()
	_ = yym1297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1298 := r.ContainerType()
		if yyct1298 == codecSelferValueTypeMap1234 {
			yyl1298 := r.ReadMapStart()
			if yyl1298 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1298, d)
			}
		} else if yyct1298 == codecSelferValueTypeArray1234 {
			yyl1298 := r.ReadArrayStart()
			if yyl1298 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1299Slc
	var yyhl1299 bool = l >= 0
	for yyj1299 := 0; ; yyj1299++ {
		if yyhl1299 {
			if yyj1299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1299Slc = r.DecodeBytes(yys1299Slc, true, true)
		yys1299 := string(yys1299Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1299 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1299)
		} // end switch yys1299
	} // end for yyj1299
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1302 int
	var yyb1302 bool
	var yyhl1302 bool = l >= 0
	yyj1302++
	if yyhl1302 {
		yyb1302 = yyj1302 > l
	} else {
		yyb1302 = r.CheckBreak()
	}
	if yyb1302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1302++
	if yyhl1302 {
		yyb1302 = yyj1302 > l
	} else {
		yyb1302 = r.CheckBreak()
	}
	if yyb1302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1302++
		if yyhl1302 {
			yyb1302 = yyj1302 > l
		} else {
			yyb1302 = r.CheckBreak()
		}
		if yyb1302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1305 := z.EncBinary()
		_ = yym1305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1306 := !z.EncBinary()
			yy2arr1306 := z.EncBasicHandle().StructToArray
			var yyq1306 [1]bool
			_, _, _ = yysep1306, yyq1306, yy2arr1306
			const yyr1306 bool = false
			yyq1306[0] = true
			var yynn1306 int
			if yyr1306 || yy2arr1306 {
				r.EncodeArrayStart(1)
			} else {
				yynn1306 = 0
				for _, b := range yyq1306 {
					if b {
						yynn1306++
					}
				}
				r.EncodeMapStart(yynn1306)
				yynn1306 = 0
			}
			if yyr1306 || yy2arr1306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1306[0] {
					yy1308 := &x.StartedAt
					yym1309 := z.EncBinary()
					_ = yym1309
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1308) {
					} else if yym1309 {
						z.EncBinaryMarshal(yy1308)
					} else if !yym1309 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1308)
					} else {
						z.EncFallback(yy1308)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1306[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1310 := &x.StartedAt
					yym1311 := z.EncBinary()
					_ = yym1311
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1310) {
					} else if yym1311 {
						z.EncBinaryMarshal(yy1310)
					} else if !yym1311 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1310)
					} else {
						z.EncFallback(yy1310)
					}
				}
			}
			if yyr1306 || yy2arr1306 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1312 := z.DecBinary()
	_ = yym1312
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1313 := r.ContainerType()
		if yyct1313 == codecSelferValueTypeMap1234 {
			yyl1313 := r.ReadMapStart()
			if yyl1313 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1313, d)
			}
		} else if yyct1313 == codecSelferValueTypeArray1234 {
			yyl1313 := r.ReadArrayStart()
			if yyl1313 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1313, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1314Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1314Slc
	var yyhl1314 bool = l >= 0
	for yyj1314 := 0; ; yyj1314++ {
		if yyhl1314 {
			if yyj1314 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1314Slc = r.DecodeBytes(yys1314Slc, true, true)
		yys1314 := string(yys1314Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1314 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1315 := &x.StartedAt
				yym1316 := z.DecBinary()
				_ = yym1316
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1315) {
				} else if yym1316 {
					z.DecBinaryUnmarshal(yyv1315)
				} else if !yym1316 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1315)
				} else {
					z.DecFallback(yyv1315, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1314)
		} // end switch yys1314
	} // end for yyj1314
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1317 int
	var yyb1317 bool
	var yyhl1317 bool = l >= 0
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1318 := &x.StartedAt
		yym1319 := z.DecBinary()
		_ = yym1319
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1318) {
		} else if yym1319 {
			z.DecBinaryUnmarshal(yyv1318)
		} else if !yym1319 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1318)
		} else {
			z.DecFallback(yyv1318, false)
		}
	}
	for {
		yyj1317++
		if yyhl1317 {
			yyb1317 = yyj1317 > l
		} else {
			yyb1317 = r.CheckBreak()
		}
		if yyb1317 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1317-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1320 := z.EncBinary()
		_ = yym1320
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1321 := !z.EncBinary()
			yy2arr1321 := z.EncBasicHandle().StructToArray
			var yyq1321 [7]bool
			_, _, _ = yysep1321, yyq1321, yy2arr1321
			const yyr1321 bool = false
			yyq1321[1] = x.Signal != 0
			yyq1321[2] = x.Reason != ""
			yyq1321[3] = x.Message != ""
			yyq1321[4] = true
			yyq1321[5] = true
			yyq1321[6] = x.ContainerID != ""
			var yynn1321 int
			if yyr1321 || yy2arr1321 {
				r.EncodeArrayStart(7)
			} else {
				yynn1321 = 1
				for _, b := range yyq1321 {
					if b {
						yynn1321++
					}
				}
				r.EncodeMapStart(yynn1321)
				yynn1321 = 0
			}
			if yyr1321 || yy2arr1321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1323 := z.EncBinary()
				_ = yym1323
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1324 := z.EncBinary()
				_ = yym1324
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1321 || yy2arr1321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1321[1] {
					yym1326 := z.EncBinary()
					_ = yym1326
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1321[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1327 := z.EncBinary()
					_ = yym1327
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1321 || yy2arr1321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1321[2] {
					yym1329 := z.EncBinary()
					_ = yym1329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1321[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1330 := z.EncBinary()
					_ = yym1330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1321 || yy2arr1321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1321[3] {
					yym1332 := z.EncBinary()
					_ = yym1332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1321[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1333 := z.EncBinary()
					_ = yym1333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1321 || yy2arr1321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1321[4] {
					yy1335 := &x.StartedAt
					yym1336 := z.EncBinary()
					_ = yym1336
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1335) {
					} else if yym1336 {
						z.EncBinaryMarshal(yy1335)
					} else if !yym1336 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1335)
					} else {
						z.EncFallback(yy1335)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1321[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1337 := &x.StartedAt
					yym1338 := z.EncBinary()
					_ = yym1338
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1337) {
					} else if yym1338 {
						z.EncBinaryMarshal(yy1337)
					} else if !yym1338 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1337)
					} else {
						z.EncFallback(yy1337)
					}
				}
			}
			if yyr1321 || yy2arr1321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1321[5] {
					yy1340 := &x.FinishedAt
					yym1341 := z.EncBinary()
					_ = yym1341
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1340) {
					} else if yym1341 {
						z.EncBinaryMarshal(yy1340)
					} else if !yym1341 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1340)
					} else {
						z.EncFallback(yy1340)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1321[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1342 := &x.FinishedAt
					yym1343 := z.EncBinary()
					_ = yym1343
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1342) {
					} else if yym1343 {
						z.EncBinaryMarshal(yy1342)
					} else if !yym1343 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1342)
					} else {
						z.EncFallback(yy1342)
					}
				}
			}
			if yyr1321 || yy2arr1321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1321[6] {
					yym1345 := z.EncBinary()
					_ = yym1345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1321[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1346 := z.EncBinary()
					_ = yym1346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1321 || yy2arr1321 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1347 := z.DecBinary()
	_ = yym1347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1348 := r.ContainerType()
		if yyct1348 == codecSelferValueTypeMap1234 {
			yyl1348 := r.ReadMapStart()
			if yyl1348 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1348, d)
			}
		} else if yyct1348 == codecSelferValueTypeArray1234 {
			yyl1348 := r.ReadArrayStart()
			if yyl1348 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1348, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1349Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1349Slc
	var yyhl1349 bool = l >= 0
	for yyj1349 := 0; ; yyj1349++ {
		if yyhl1349 {
			if yyj1349 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1349Slc = r.DecodeBytes(yys1349Slc, true, true)
		yys1349 := string(yys1349Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1349 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1354 := &x.StartedAt
				yym1355 := z.DecBinary()
				_ = yym1355
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1354) {
				} else if yym1355 {
					z.DecBinaryUnmarshal(yyv1354)
				} else if !yym1355 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1354)
				} else {
					z.DecFallback(yyv1354, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1356 := &x.FinishedAt
				yym1357 := z.DecBinary()
				_ = yym1357
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1356) {
				} else if yym1357 {
					z.DecBinaryUnmarshal(yyv1356)
				} else if !yym1357 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1356)
				} else {
					z.DecFallback(yyv1356, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1349)
		} // end switch yys1349
	} // end for yyj1349
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1359 int
	var yyb1359 bool
	var yyhl1359 bool = l >= 0
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1364 := &x.StartedAt
		yym1365 := z.DecBinary()
		_ = yym1365
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1364) {
		} else if yym1365 {
			z.DecBinaryUnmarshal(yyv1364)
		} else if !yym1365 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1364)
		} else {
			z.DecFallback(yyv1364, false)
		}
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1366 := &x.FinishedAt
		yym1367 := z.DecBinary()
		_ = yym1367
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1366) {
		} else if yym1367 {
			z.DecBinaryUnmarshal(yyv1366)
		} else if !yym1367 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1366)
		} else {
			z.DecFallback(yyv1366, false)
		}
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1359++
		if yyhl1359 {
			yyb1359 = yyj1359 > l
		} else {
			yyb1359 = r.CheckBreak()
		}
		if yyb1359 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1359-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1369 := z.EncBinary()
		_ = yym1369
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1370 := !z.EncBinary()
			yy2arr1370 := z.EncBasicHandle().StructToArray
			var yyq1370 [3]bool
			_, _, _ = yysep1370, yyq1370, yy2arr1370
			const yyr1370 bool = false
			yyq1370[0] = x.Waiting != nil
			yyq1370[1] = x.Running != nil
			yyq1370[2] = x.Terminated != nil
			var yynn1370 int
			if yyr1370 || yy2arr1370 {
				r.EncodeArrayStart(3)
			} else {
				yynn1370 = 0
				for _, b := range yyq1370 {
					if b {
						yynn1370++
					}
				}
				r.EncodeMapStart(yynn1370)
				yynn1370 = 0
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1374 := z.DecBinary()
	_ = yym1374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1375 := r.ContainerType()
		if yyct1375 == codecSelferValueTypeMap1234 {
			yyl1375 := r.ReadMapStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1375, d)
			}
		} else if yyct1375 == codecSelferValueTypeArray1234 {
			yyl1375 := r.ReadArrayStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1376Slc
	var yyhl1376 bool = l >= 0
	for yyj1376 := 0; ; yyj1376++ {
		if yyhl1376 {
			if yyj1376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1376Slc = r.DecodeBytes(yys1376Slc, true, true)
		yys1376 := string(yys1376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1376 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1376)
		} // end switch yys1376
	} // end for yyj1376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1380 int
	var yyb1380 bool
	var yyhl1380 bool = l >= 0
	yyj1380++
	if yyhl1380 {
		yyb1380 = yyj1380 > l
	} else {
		yyb1380 = r.CheckBreak()
	}
	if yyb1380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1380++
	if yyhl1380 {
		yyb1380 = yyj1380 > l
	} else {
		yyb1380 = r.CheckBreak()
	}
	if yyb1380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1380++
	if yyhl1380 {
		yyb1380 = yyj1380 > l
	} else {
		yyb1380 = r.CheckBreak()
	}
	if yyb1380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1380++
		if yyhl1380 {
			yyb1380 = yyj1380 > l
		} else {
			yyb1380 = r.CheckBreak()
		}
		if yyb1380 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1380-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1384 := z.EncBinary()
		_ = yym1384
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1385 := !z.EncBinary()
			yy2arr1385 := z.EncBasicHandle().StructToArray
			var yyq1385 [8]bool
			_, _, _ = yysep1385, yyq1385, yy2arr1385
			const yyr1385 bool = false
			yyq1385[1] = true
			yyq1385[2] = true
			yyq1385[7] = x.ContainerID != ""
			var yynn1385 int
			if yyr1385 || yy2arr1385 {
				r.EncodeArrayStart(8)
			} else {
				yynn1385 = 5
				for _, b := range yyq1385 {
					if b {
						yynn1385++
					}
				}
				r.EncodeMapStart(yynn1385)
				yynn1385 = 0
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1387 := z.EncBinary()
				_ = yym1387
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1388 := z.EncBinary()
				_ = yym1388
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1385[1] {
					yy1390 := &x.State
					yy1390.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1385[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1391 := &x.State
					yy1391.CodecEncodeSelf(e)
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1385[2] {
					yy1393 := &x.LastTerminationState
					yy1393.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1385[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1394 := &x.LastTerminationState
					yy1394.CodecEncodeSelf(e)
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1396 := z.EncBinary()
				_ = yym1396
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1397 := z.EncBinary()
				_ = yym1397
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1399 := z.EncBinary()
				_ = yym1399
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1400 := z.EncBinary()
				_ = yym1400
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1402 := z.EncBinary()
				_ = yym1402
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1403 := z.EncBinary()
				_ = yym1403
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1405 := z.EncBinary()
				_ = yym1405
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1406 := z.EncBinary()
				_ = yym1406
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1385[7] {
					yym1408 := z.EncBinary()
					_ = yym1408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1385[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1409 := z.EncBinary()
					_ = yym1409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1410 := z.DecBinary()
	_ = yym1410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1411 := r.ContainerType()
		if yyct1411 == codecSelferValueTypeMap1234 {
			yyl1411 := r.ReadMapStart()
			if yyl1411 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1411, d)
			}
		} else if yyct1411 == codecSelferValueTypeArray1234 {
			yyl1411 := r.ReadArrayStart()
			if yyl1411 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1411, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1412Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1412Slc
	var yyhl1412 bool = l >= 0
	for yyj1412 := 0; ; yyj1412++ {
		if yyhl1412 {
			if yyj1412 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1412Slc = r.DecodeBytes(yys1412Slc, true, true)
		yys1412 := string(yys1412Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1412 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1414 := &x.State
				yyv1414.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1415 := &x.LastTerminationState
				yyv1415.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1412)
		} // end switch yys1412
	} // end for yyj1412
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1421 int
	var yyb1421 bool
	var yyhl1421 bool = l >= 0
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1423 := &x.State
		yyv1423.CodecDecodeSelf(d)
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1424 := &x.LastTerminationState
		yyv1424.CodecDecodeSelf(d)
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1421++
		if yyhl1421 {
			yyb1421 = yyj1421 > l
		} else {
			yyb1421 = r.CheckBreak()
		}
		if yyb1421 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1421-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1430 := z.EncBinary()
	_ = yym1430
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1431 := z.DecBinary()
	_ = yym1431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1432 := z.EncBinary()
	_ = yym1432
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1433 := z.DecBinary()
	_ = yym1433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1434 := z.EncBinary()
		_ = yym1434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1435 := !z.EncBinary()
			yy2arr1435 := z.EncBasicHandle().StructToArray
			var yyq1435 [6]bool
			_, _, _ = yysep1435, yyq1435, yy2arr1435
			const yyr1435 bool = false
			yyq1435[2] = true
			yyq1435[3] = true
			yyq1435[4] = x.Reason != ""
			yyq1435[5] = x.Message != ""
			var yynn1435 int
			if yyr1435 || yy2arr1435 {
				r.EncodeArrayStart(6)
			} else {
				yynn1435 = 2
				for _, b := range yyq1435 {
					if b {
						yynn1435++
					}
				}
				r.EncodeMapStart(yynn1435)
				yynn1435 = 0
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1435[2] {
					yy1439 := &x.LastProbeTime
					yym1440 := z.EncBinary()
					_ = yym1440
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1439) {
					} else if yym1440 {
						z.EncBinaryMarshal(yy1439)
					} else if !yym1440 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1439)
					} else {
						z.EncFallback(yy1439)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1441 := &x.LastProbeTime
					yym1442 := z.EncBinary()
					_ = yym1442
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1441) {
					} else if yym1442 {
						z.EncBinaryMarshal(yy1441)
					} else if !yym1442 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1441)
					} else {
						z.EncFallback(yy1441)
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1435[3] {
					yy1444 := &x.LastTransitionTime
					yym1445 := z.EncBinary()
					_ = yym1445
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1444) {
					} else if yym1445 {
						z.EncBinaryMarshal(yy1444)
					} else if !yym1445 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1444)
					} else {
						z.EncFallback(yy1444)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1446 := &x.LastTransitionTime
					yym1447 := z.EncBinary()
					_ = yym1447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1446) {
					} else if yym1447 {
						z.EncBinaryMarshal(yy1446)
					} else if !yym1447 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1446)
					} else {
						z.EncFallback(yy1446)
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1435[4] {
					yym1449 := z.EncBinary()
					_ = yym1449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1435[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1450 := z.EncBinary()
					_ = yym1450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1435[5] {
					yym1452 := z.EncBinary()
					_ = yym1452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1435[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1453 := z.EncBinary()
					_ = yym1453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1454 := z.DecBinary()
	_ = yym1454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1455 := r.ContainerType()
		if yyct1455 == codecSelferValueTypeMap1234 {
			yyl1455 := r.ReadMapStart()
			if yyl1455 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1455, d)
			}
		} else if yyct1455 == codecSelferValueTypeArray1234 {
			yyl1455 := r.ReadArrayStart()
			if yyl1455 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1455, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1456Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1456Slc
	var yyhl1456 bool = l >= 0
	for yyj1456 := 0; ; yyj1456++ {
		if yyhl1456 {
			if yyj1456 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1456Slc = r.DecodeBytes(yys1456Slc, true, true)
		yys1456 := string(yys1456Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1456 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1459 := &x.LastProbeTime
				yym1460 := z.DecBinary()
				_ = yym1460
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1459) {
				} else if yym1460 {
					z.DecBinaryUnmarshal(yyv1459)
				} else if !yym1460 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1459)
				} else {
					z.DecFallback(yyv1459, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1461 := &x.LastTransitionTime
				yym1462 := z.DecBinary()
				_ = yym1462
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1461) {
				} else if yym1462 {
					z.DecBinaryUnmarshal(yyv1461)
				} else if !yym1462 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1461)
				} else {
					z.DecFallback(yyv1461, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1456)
		} // end switch yys1456
	} // end for yyj1456
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1465 int
	var yyb1465 bool
	var yyhl1465 bool = l >= 0
	yyj1465++
	if yyhl1465 {
		yyb1465 = yyj1465 > l
	} else {
		yyb1465 = r.CheckBreak()
	}
	if yyb1465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1465++
	if yyhl1465 {
		yyb1465 = yyj1465 > l
	} else {
		yyb1465 = r.CheckBreak()
	}
	if yyb1465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1465++
	if yyhl1465 {
		yyb1465 = yyj1465 > l
	} else {
		yyb1465 = r.CheckBreak()
	}
	if yyb1465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1468 := &x.LastProbeTime
		yym1469 := z.DecBinary()
		_ = yym1469
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1468) {
		} else if yym1469 {
			z.DecBinaryUnmarshal(yyv1468)
		} else if !yym1469 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1468)
		} else {
			z.DecFallback(yyv1468, false)
		}
	}
	yyj1465++
	if yyhl1465 {
		yyb1465 = yyj1465 > l
	} else {
		yyb1465 = r.CheckBreak()
	}
	if yyb1465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1470 := &x.LastTransitionTime
		yym1471 := z.DecBinary()
		_ = yym1471
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1470) {
		} else if yym1471 {
			z.DecBinaryUnmarshal(yyv1470)
		} else if !yym1471 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1470)
		} else {
			z.DecFallback(yyv1470, false)
		}
	}
	yyj1465++
	if yyhl1465 {
		yyb1465 = yyj1465 > l
	} else {
		yyb1465 = r.CheckBreak()
	}
	if yyb1465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1465++
	if yyhl1465 {
		yyb1465 = yyj1465 > l
	} else {
		yyb1465 = r.CheckBreak()
	}
	if yyb1465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1465++
		if yyhl1465 {
			yyb1465 = yyj1465 > l
		} else {
			yyb1465 = r.CheckBreak()
		}
		if yyb1465 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1465-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1474 := z.EncBinary()
	_ = yym1474
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1475 := z.DecBinary()
	_ = yym1475
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1476 := z.EncBinary()
		_ = yym1476
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1477 := !z.EncBinary()
			yy2arr1477 := z.EncBasicHandle().StructToArray
			var yyq1477 [4]bool
			_, _, _ = yysep1477, yyq1477, yy2arr1477
			const yyr1477 bool = false
			yyq1477[0] = x.Kind != ""
			yyq1477[1] = x.APIVersion != ""
			yyq1477[2] = true
			var yynn1477 int
			if yyr1477 || yy2arr1477 {
				r.EncodeArrayStart(4)
			} else {
				yynn1477 = 1
				for _, b := range yyq1477 {
					if b {
						yynn1477++
					}
				}
				r.EncodeMapStart(yynn1477)
				yynn1477 = 0
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1477[0] {
					yym1479 := z.EncBinary()
					_ = yym1479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1477[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1480 := z.EncBinary()
					_ = yym1480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1477[1] {
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1477[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1483 := z.EncBinary()
					_ = yym1483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1477[2] {
					yy1485 := &x.ListMeta
					yym1486 := z.EncBinary()
					_ = yym1486
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1485) {
					} else {
						z.EncFallback(yy1485)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1477[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1487 := &x.ListMeta
					yym1488 := z.EncBinary()
					_ = yym1488
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1487) {
					} else {
						z.EncFallback(yy1487)
					}
				}
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1490 := z.EncBinary()
					_ = yym1490
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1491 := z.EncBinary()
					_ = yym1491
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1492 := z.DecBinary()
	_ = yym1492
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1493 := r.ContainerType()
		if yyct1493 == codecSelferValueTypeMap1234 {
			yyl1493 := r.ReadMapStart()
			if yyl1493 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1493, d)
			}
		} else if yyct1493 == codecSelferValueTypeArray1234 {
			yyl1493 := r.ReadArrayStart()
			if yyl1493 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1493, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1494Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1494Slc
	var yyhl1494 bool = l >= 0
	for yyj1494 := 0; ; yyj1494++ {
		if yyhl1494 {
			if yyj1494 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1494Slc = r.DecodeBytes(yys1494Slc, true, true)
		yys1494 := string(yys1494Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1494 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1497 := &x.ListMeta
				yym1498 := z.DecBinary()
				_ = yym1498
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1497) {
				} else {
					z.DecFallback(yyv1497, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1499 := &x.Items
				yym1500 := z.DecBinary()
				_ = yym1500
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1499), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1494)
		} // end switch yys1494
	} // end for yyj1494
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1501 int
	var yyb1501 bool
	var yyhl1501 bool = l >= 0
	yyj1501++
	if yyhl1501 {
		yyb1501 = yyj1501 > l
	} else {
		yyb1501 = r.CheckBreak()
	}
	if yyb1501 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1501++
	if yyhl1501 {
		yyb1501 = yyj1501 > l
	} else {
		yyb1501 = r.CheckBreak()
	}
	if yyb1501 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1501++
	if yyhl1501 {
		yyb1501 = yyj1501 > l
	} else {
		yyb1501 = r.CheckBreak()
	}
	if yyb1501 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1504 := &x.ListMeta
		yym1505 := z.DecBinary()
		_ = yym1505
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1504) {
		} else {
			z.DecFallback(yyv1504, false)
		}
	}
	yyj1501++
	if yyhl1501 {
		yyb1501 = yyj1501 > l
	} else {
		yyb1501 = r.CheckBreak()
	}
	if yyb1501 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1506 := &x.Items
		yym1507 := z.DecBinary()
		_ = yym1507
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1506), d)
		}
	}
	for {
		yyj1501++
		if yyhl1501 {
			yyb1501 = yyj1501 > l
		} else {
			yyb1501 = r.CheckBreak()
		}
		if yyb1501 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1501-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1508 := z.EncBinary()
	_ = yym1508
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1509 := z.DecBinary()
	_ = yym1509
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1510 := z.EncBinary()
		_ = yym1510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1511 := !z.EncBinary()
			yy2arr1511 := z.EncBasicHandle().StructToArray
			var yyq1511 [1]bool
			_, _, _ = yysep1511, yyq1511, yy2arr1511
			const yyr1511 bool = false
			var yynn1511 int
			if yyr1511 || yy2arr1511 {
				r.EncodeArrayStart(1)
			} else {
				yynn1511 = 1
				for _, b := range yyq1511 {
					if b {
						yynn1511++
					}
				}
				r.EncodeMapStart(yynn1511)
				yynn1511 = 0
			}
			if yyr1511 || yy2arr1511 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1513 := z.EncBinary()
					_ = yym1513
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1514 := z.EncBinary()
					_ = yym1514
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1511 || yy2arr1511 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1515 := z.DecBinary()
	_ = yym1515
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1516 := r.ContainerType()
		if yyct1516 == codecSelferValueTypeMap1234 {
			yyl1516 := r.ReadMapStart()
			if yyl1516 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1516, d)
			}
		} else if yyct1516 == codecSelferValueTypeArray1234 {
			yyl1516 := r.ReadArrayStart()
			if yyl1516 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1516, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1517Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1517Slc
	var yyhl1517 bool = l >= 0
	for yyj1517 := 0; ; yyj1517++ {
		if yyhl1517 {
			if yyj1517 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1517Slc = r.DecodeBytes(yys1517Slc, true, true)
		yys1517 := string(yys1517Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1517 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1518 := &x.NodeSelectorTerms
				yym1519 := z.DecBinary()
				_ = yym1519
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1518), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1517)
		} // end switch yys1517
	} // end for yyj1517
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1520 int
	var yyb1520 bool
	var yyhl1520 bool = l >= 0
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1521 := &x.NodeSelectorTerms
		yym1522 := z.DecBinary()
		_ = yym1522
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1521), d)
		}
	}
	for {
		yyj1520++
		if yyhl1520 {
			yyb1520 = yyj1520 > l
		} else {
			yyb1520 = r.CheckBreak()
		}
		if yyb1520 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1520-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1523 := z.EncBinary()
		_ = yym1523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1524 := !z.EncBinary()
			yy2arr1524 := z.EncBasicHandle().StructToArray
			var yyq1524 [1]bool
			_, _, _ = yysep1524, yyq1524, yy2arr1524
			const yyr1524 bool = false
			var yynn1524 int
			if yyr1524 || yy2arr1524 {
				r.EncodeArrayStart(1)
			} else {
				yynn1524 = 1
				for _, b := range yyq1524 {
					if b {
						yynn1524++
					}
				}
				r.EncodeMapStart(yynn1524)
				yynn1524 = 0
			}
			if yyr1524 || yy2arr1524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1526 := z.EncBinary()
					_ = yym1526
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1527 := z.EncBinary()
					_ = yym1527
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1524 || yy2arr1524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1528 := z.DecBinary()
	_ = yym1528
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1529 := r.ContainerType()
		if yyct1529 == codecSelferValueTypeMap1234 {
			yyl1529 := r.ReadMapStart()
			if yyl1529 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1529, d)
			}
		} else if yyct1529 == codecSelferValueTypeArray1234 {
			yyl1529 := r.ReadArrayStart()
			if yyl1529 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1529, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1530Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1530Slc
	var yyhl1530 bool = l >= 0
	for yyj1530 := 0; ; yyj1530++ {
		if yyhl1530 {
			if yyj1530 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1530Slc = r.DecodeBytes(yys1530Slc, true, true)
		yys1530 := string(yys1530Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1530 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1531 := &x.MatchExpressions
				yym1532 := z.DecBinary()
				_ = yym1532
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1531), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1530)
		} // end switch yys1530
	} // end for yyj1530
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1533 int
	var yyb1533 bool
	var yyhl1533 bool = l >= 0
	yyj1533++
	if yyhl1533 {
		yyb1533 = yyj1533 > l
	} else {
		yyb1533 = r.CheckBreak()
	}
	if yyb1533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1534 := &x.MatchExpressions
		yym1535 := z.DecBinary()
		_ = yym1535
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1534), d)
		}
	}
	for {
		yyj1533++
		if yyhl1533 {
			yyb1533 = yyj1533 > l
		} else {
			yyb1533 = r.CheckBreak()
		}
		if yyb1533 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1533-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1536 := z.EncBinary()
		_ = yym1536
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1537 := !z.EncBinary()
			yy2arr1537 := z.EncBasicHandle().StructToArray
			var yyq1537 [3]bool
			_, _, _ = yysep1537, yyq1537, yy2arr1537
			const yyr1537 bool = false
			yyq1537[2] = len(x.Values) != 0
			var yynn1537 int
			if yyr1537 || yy2arr1537 {
				r.EncodeArrayStart(3)
			} else {
				yynn1537 = 2
				for _, b := range yyq1537 {
					if b {
						yynn1537++
					}
				}
				r.EncodeMapStart(yynn1537)
				yynn1537 = 0
			}
			if yyr1537 || yy2arr1537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1539 := z.EncBinary()
				_ = yym1539
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1540 := z.EncBinary()
				_ = yym1540
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1537 || yy2arr1537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1537 || yy2arr1537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1537[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1543 := z.EncBinary()
						_ = yym1543
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1537[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1544 := z.EncBinary()
						_ = yym1544
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1537 || yy2arr1537 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1545 := z.DecBinary()
	_ = yym1545
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1546 := r.ContainerType()
		if yyct1546 == codecSelferValueTypeMap1234 {
			yyl1546 := r.ReadMapStart()
			if yyl1546 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1546, d)
			}
		} else if yyct1546 == codecSelferValueTypeArray1234 {
			yyl1546 := r.ReadArrayStart()
			if yyl1546 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1546, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1547Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1547Slc
	var yyhl1547 bool = l >= 0
	for yyj1547 := 0; ; yyj1547++ {
		if yyhl1547 {
			if yyj1547 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1547Slc = r.DecodeBytes(yys1547Slc, true, true)
		yys1547 := string(yys1547Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1547 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1550 := &x.Values
				yym1551 := z.DecBinary()
				_ = yym1551
				if false {
				} else {
					z.F.DecSliceStringX(yyv1550, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1547)
		} // end switch yys1547
	} // end for yyj1547
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1552 int
	var yyb1552 bool
	var yyhl1552 bool = l >= 0
	yyj1552++
	if yyhl1552 {
		yyb1552 = yyj1552 > l
	} else {
		yyb1552 = r.CheckBreak()
	}
	if yyb1552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1552++
	if yyhl1552 {
		yyb1552 = yyj1552 > l
	} else {
		yyb1552 = r.CheckBreak()
	}
	if yyb1552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1552++
	if yyhl1552 {
		yyb1552 = yyj1552 > l
	} else {
		yyb1552 = r.CheckBreak()
	}
	if yyb1552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1555 := &x.Values
		yym1556 := z.DecBinary()
		_ = yym1556
		if false {
		} else {
			z.F.DecSliceStringX(yyv1555, false, d)
		}
	}
	for {
		yyj1552++
		if yyhl1552 {
			yyb1552 = yyj1552 > l
		} else {
			yyb1552 = r.CheckBreak()
		}
		if yyb1552 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1552-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1557 := z.EncBinary()
	_ = yym1557
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1558 := z.DecBinary()
	_ = yym1558
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1559 := z.EncBinary()
		_ = yym1559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1560 := !z.EncBinary()
			yy2arr1560 := z.EncBasicHandle().StructToArray
			var yyq1560 [1]bool
			_, _, _ = yysep1560, yyq1560, yy2arr1560
			const yyr1560 bool = false
			yyq1560[0] = x.NodeAffinity != nil
			var yynn1560 int
			if yyr1560 || yy2arr1560 {
				r.EncodeArrayStart(1)
			} else {
				yynn1560 = 0
				for _, b := range yyq1560 {
					if b {
						yynn1560++
					}
				}
				r.EncodeMapStart(yynn1560)
				yynn1560 = 0
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1560[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1562 := z.DecBinary()
	_ = yym1562
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1563 := r.ContainerType()
		if yyct1563 == codecSelferValueTypeMap1234 {
			yyl1563 := r.ReadMapStart()
			if yyl1563 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1563, d)
			}
		} else if yyct1563 == codecSelferValueTypeArray1234 {
			yyl1563 := r.ReadArrayStart()
			if yyl1563 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1563, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1564Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1564Slc
	var yyhl1564 bool = l >= 0
	for yyj1564 := 0; ; yyj1564++ {
		if yyhl1564 {
			if yyj1564 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1564Slc = r.DecodeBytes(yys1564Slc, true, true)
		yys1564 := string(yys1564Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1564 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1564)
		} // end switch yys1564
	} // end for yyj1564
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1566 int
	var yyb1566 bool
	var yyhl1566 bool = l >= 0
	yyj1566++
	if yyhl1566 {
		yyb1566 = yyj1566 > l
	} else {
		yyb1566 = r.CheckBreak()
	}
	if yyb1566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1566++
		if yyhl1566 {
			yyb1566 = yyj1566 > l
		} else {
			yyb1566 = r.CheckBreak()
		}
		if yyb1566 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1566-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1568 := z.EncBinary()
		_ = yym1568
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1569 := !z.EncBinary()
			yy2arr1569 := z.EncBasicHandle().StructToArray
			var yyq1569 [3]bool
			_, _, _ = yysep1569, yyq1569, yy2arr1569
			const yyr1569 bool = false
			yyq1569[0] = x.RequiredDuringSchedulingRequiredDuringExecution != nil
			yyq1569[1] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1569[2] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1569 int
			if yyr1569 || yy2arr1569 {
				r.EncodeArrayStart(3)
			} else {
				yynn1569 = 0
				for _, b := range yyq1569 {
					if b {
						yynn1569++
					}
				}
				r.EncodeMapStart(yynn1569)
				yynn1569 = 0
			}
			if yyr1569 || yy2arr1569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1569[0] {
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingRequiredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1569[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingRequiredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingRequiredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1569 || yy2arr1569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1569[1] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1569[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1569 || yy2arr1569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1569[2] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1573 := z.EncBinary()
						_ = yym1573
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1569[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1574 := z.EncBinary()
						_ = yym1574
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1569 || yy2arr1569 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1575 := z.DecBinary()
	_ = yym1575
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1576 := r.ContainerType()
		if yyct1576 == codecSelferValueTypeMap1234 {
			yyl1576 := r.ReadMapStart()
			if yyl1576 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1576, d)
			}
		} else if yyct1576 == codecSelferValueTypeArray1234 {
			yyl1576 := r.ReadArrayStart()
			if yyl1576 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1576, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1577Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1577Slc
	var yyhl1577 bool = l >= 0
	for yyj1577 := 0; ; yyj1577++ {
		if yyhl1577 {
			if yyj1577 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1577Slc = r.DecodeBytes(yys1577Slc, true, true)
		yys1577 := string(yys1577Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1577 {
		case "requiredDuringSchedulingRequiredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingRequiredDuringExecution != nil {
					x.RequiredDuringSchedulingRequiredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
					x.RequiredDuringSchedulingRequiredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingRequiredDuringExecution.CodecDecodeSelf(d)
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1580 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1581 := z.DecBinary()
				_ = yym1581
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1580), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1577)
		} // end switch yys1577
	} // end for yyj1577
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1582 int
	var yyb1582 bool
	var yyhl1582 bool = l >= 0
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingRequiredDuringExecution != nil {
			x.RequiredDuringSchedulingRequiredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
			x.RequiredDuringSchedulingRequiredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingRequiredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1585 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1586 := z.DecBinary()
		_ = yym1586
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1585), d)
		}
	}
	for {
		yyj1582++
		if yyhl1582 {
			yyb1582 = yyj1582 > l
		} else {
			yyb1582 = r.CheckBreak()
		}
		if yyb1582 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1582-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1587 := z.EncBinary()
		_ = yym1587
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1588 := !z.EncBinary()
			yy2arr1588 := z.EncBasicHandle().StructToArray
			var yyq1588 [2]bool
			_, _, _ = yysep1588, yyq1588, yy2arr1588
			const yyr1588 bool = false
			var yynn1588 int
			if yyr1588 || yy2arr1588 {
				r.EncodeArrayStart(2)
			} else {
				yynn1588 = 2
				for _, b := range yyq1588 {
					if b {
						yynn1588++
					}
				}
				r.EncodeMapStart(yynn1588)
				yynn1588 = 0
			}
			if yyr1588 || yy2arr1588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1590 := z.EncBinary()
				_ = yym1590
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1591 := z.EncBinary()
				_ = yym1591
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1588 || yy2arr1588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1593 := &x.Preference
				yy1593.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1594 := &x.Preference
				yy1594.CodecEncodeSelf(e)
			}
			if yyr1588 || yy2arr1588 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1595 := z.DecBinary()
	_ = yym1595
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1596 := r.ContainerType()
		if yyct1596 == codecSelferValueTypeMap1234 {
			yyl1596 := r.ReadMapStart()
			if yyl1596 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1596, d)
			}
		} else if yyct1596 == codecSelferValueTypeArray1234 {
			yyl1596 := r.ReadArrayStart()
			if yyl1596 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1596, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1597Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1597Slc
	var yyhl1597 bool = l >= 0
	for yyj1597 := 0; ; yyj1597++ {
		if yyhl1597 {
			if yyj1597 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1597Slc = r.DecodeBytes(yys1597Slc, true, true)
		yys1597 := string(yys1597Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1597 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1599 := &x.Preference
				yyv1599.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1597)
		} // end switch yys1597
	} // end for yyj1597
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1600 int
	var yyb1600 bool
	var yyhl1600 bool = l >= 0
	yyj1600++
	if yyhl1600 {
		yyb1600 = yyj1600 > l
	} else {
		yyb1600 = r.CheckBreak()
	}
	if yyb1600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1600++
	if yyhl1600 {
		yyb1600 = yyj1600 > l
	} else {
		yyb1600 = r.CheckBreak()
	}
	if yyb1600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1602 := &x.Preference
		yyv1602.CodecDecodeSelf(d)
	}
	for {
		yyj1600++
		if yyhl1600 {
			yyb1600 = yyj1600 > l
		} else {
			yyb1600 = r.CheckBreak()
		}
		if yyb1600 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1600-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1603 := z.EncBinary()
		_ = yym1603
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1604 := !z.EncBinary()
			yy2arr1604 := z.EncBasicHandle().StructToArray
			var yyq1604 [11]bool
			_, _, _ = yysep1604, yyq1604, yy2arr1604
			const yyr1604 bool = false
			yyq1604[2] = x.RestartPolicy != ""
			yyq1604[3] = x.TerminationGracePeriodSeconds != nil
			yyq1604[4] = x.ActiveDeadlineSeconds != nil
			yyq1604[5] = x.DNSPolicy != ""
			yyq1604[6] = len(x.NodeSelector) != 0
			yyq1604[8] = x.NodeName != ""
			yyq1604[9] = x.SecurityContext != nil
			yyq1604[10] = len(x.ImagePullSecrets) != 0
			var yynn1604 int
			if yyr1604 || yy2arr1604 {
				r.EncodeArrayStart(11)
			} else {
				yynn1604 = 3
				for _, b := range yyq1604 {
					if b {
						yynn1604++
					}
				}
				r.EncodeMapStart(yynn1604)
				yynn1604 = 0
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1606 := z.EncBinary()
					_ = yym1606
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1607 := z.EncBinary()
					_ = yym1607
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1609 := z.EncBinary()
					_ = yym1609
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1610 := z.EncBinary()
					_ = yym1610
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1604[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1613 := *x.TerminationGracePeriodSeconds
						yym1614 := z.EncBinary()
						_ = yym1614
						if false {
						} else {
							r.EncodeInt(int64(yy1613))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1604[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1615 := *x.TerminationGracePeriodSeconds
						yym1616 := z.EncBinary()
						_ = yym1616
						if false {
						} else {
							r.EncodeInt(int64(yy1615))
						}
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1618 := *x.ActiveDeadlineSeconds
						yym1619 := z.EncBinary()
						_ = yym1619
						if false {
						} else {
							r.EncodeInt(int64(yy1618))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1604[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1620 := *x.ActiveDeadlineSeconds
						yym1621 := z.EncBinary()
						_ = yym1621
						if false {
						} else {
							r.EncodeInt(int64(yy1620))
						}
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1604[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1624 := z.EncBinary()
						_ = yym1624
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1604[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1625 := z.EncBinary()
						_ = yym1625
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1627 := z.EncBinary()
				_ = yym1627
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1628 := z.EncBinary()
				_ = yym1628
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[8] {
					yym1630 := z.EncBinary()
					_ = yym1630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1604[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1631 := z.EncBinary()
					_ = yym1631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1604[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1634 := z.EncBinary()
						_ = yym1634
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1604[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1635 := z.EncBinary()
						_ = yym1635
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1636 := z.DecBinary()
	_ = yym1636
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1637 := r.ContainerType()
		if yyct1637 == codecSelferValueTypeMap1234 {
			yyl1637 := r.ReadMapStart()
			if yyl1637 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1637, d)
			}
		} else if yyct1637 == codecSelferValueTypeArray1234 {
			yyl1637 := r.ReadArrayStart()
			if yyl1637 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1637, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1638Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1638Slc
	var yyhl1638 bool = l >= 0
	for yyj1638 := 0; ; yyj1638++ {
		if yyhl1638 {
			if yyj1638 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1638Slc = r.DecodeBytes(yys1638Slc, true, true)
		yys1638 := string(yys1638Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1638 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1639 := &x.Volumes
				yym1640 := z.DecBinary()
				_ = yym1640
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1639), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1641 := &x.Containers
				yym1642 := z.DecBinary()
				_ = yym1642
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1641), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1645 := z.DecBinary()
				_ = yym1645
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1647 := z.DecBinary()
				_ = yym1647
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1649 := &x.NodeSelector
				yym1650 := z.DecBinary()
				_ = yym1650
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1649, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1654 := &x.ImagePullSecrets
				yym1655 := z.DecBinary()
				_ = yym1655
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1654), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1638)
		} // end switch yys1638
	} // end for yyj1638
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1656 int
	var yyb1656 bool
	var yyhl1656 bool = l >= 0
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1657 := &x.Volumes
		yym1658 := z.DecBinary()
		_ = yym1658
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1657), d)
		}
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1659 := &x.Containers
		yym1660 := z.DecBinary()
		_ = yym1660
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1659), d)
		}
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1663 := z.DecBinary()
		_ = yym1663
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1665 := z.DecBinary()
		_ = yym1665
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1667 := &x.NodeSelector
		yym1668 := z.DecBinary()
		_ = yym1668
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1667, false, d)
		}
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1672 := &x.ImagePullSecrets
		yym1673 := z.DecBinary()
		_ = yym1673
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1672), d)
		}
	}
	for {
		yyj1656++
		if yyhl1656 {
			yyb1656 = yyj1656 > l
		} else {
			yyb1656 = r.CheckBreak()
		}
		if yyb1656 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1656-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1674 := z.EncBinary()
		_ = yym1674
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1675 := !z.EncBinary()
			yy2arr1675 := z.EncBasicHandle().StructToArray
			var yyq1675 [8]bool
			_, _, _ = yysep1675, yyq1675, yy2arr1675
			const yyr1675 bool = false
			yyq1675[0] = x.HostNetwork != false
			yyq1675[1] = x.HostPID != false
			yyq1675[2] = x.HostIPC != false
			yyq1675[3] = x.SELinuxOptions != nil
			yyq1675[4] = x.RunAsUser != nil
			yyq1675[5] = x.RunAsNonRoot != nil
			yyq1675[6] = len(x.SupplementalGroups) != 0
			yyq1675[7] = x.FSGroup != nil
			var yynn1675 int
			if yyr1675 || yy2arr1675 {
				r.EncodeArrayStart(8)
			} else {
				yynn1675 = 0
				for _, b := range yyq1675 {
					if b {
						yynn1675++
					}
				}
				r.EncodeMapStart(yynn1675)
				yynn1675 = 0
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[0] {
					yym1677 := z.EncBinary()
					_ = yym1677
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1675[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1678 := z.EncBinary()
					_ = yym1678
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[1] {
					yym1680 := z.EncBinary()
					_ = yym1680
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1675[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1681 := z.EncBinary()
					_ = yym1681
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[2] {
					yym1683 := z.EncBinary()
					_ = yym1683
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1675[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1675[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1687 := *x.RunAsUser
						yym1688 := z.EncBinary()
						_ = yym1688
						if false {
						} else {
							r.EncodeInt(int64(yy1687))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1675[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1689 := *x.RunAsUser
						yym1690 := z.EncBinary()
						_ = yym1690
						if false {
						} else {
							r.EncodeInt(int64(yy1689))
						}
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1692 := *x.RunAsNonRoot
						yym1693 := z.EncBinary()
						_ = yym1693
						if false {
						} else {
							r.EncodeBool(bool(yy1692))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1675[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1694 := *x.RunAsNonRoot
						yym1695 := z.EncBinary()
						_ = yym1695
						if false {
						} else {
							r.EncodeBool(bool(yy1694))
						}
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1697 := z.EncBinary()
						_ = yym1697
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1675[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1698 := z.EncBinary()
						_ = yym1698
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1675[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1700 := *x.FSGroup
						yym1701 := z.EncBinary()
						_ = yym1701
						if false {
						} else {
							r.EncodeInt(int64(yy1700))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1675[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1702 := *x.FSGroup
						yym1703 := z.EncBinary()
						_ = yym1703
						if false {
						} else {
							r.EncodeInt(int64(yy1702))
						}
					}
				}
			}
			if yyr1675 || yy2arr1675 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1704 := z.DecBinary()
	_ = yym1704
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1705 := r.ContainerType()
		if yyct1705 == codecSelferValueTypeMap1234 {
			yyl1705 := r.ReadMapStart()
			if yyl1705 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1705, d)
			}
		} else if yyct1705 == codecSelferValueTypeArray1234 {
			yyl1705 := r.ReadArrayStart()
			if yyl1705 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1705, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1706Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1706Slc
	var yyhl1706 bool = l >= 0
	for yyj1706 := 0; ; yyj1706++ {
		if yyhl1706 {
			if yyj1706 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1706Slc = r.DecodeBytes(yys1706Slc, true, true)
		yys1706 := string(yys1706Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1706 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1712 := z.DecBinary()
				_ = yym1712
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1714 := z.DecBinary()
				_ = yym1714
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1715 := &x.SupplementalGroups
				yym1716 := z.DecBinary()
				_ = yym1716
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1715, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1718 := z.DecBinary()
				_ = yym1718
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1706)
		} // end switch yys1706
	} // end for yyj1706
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1719 int
	var yyb1719 bool
	var yyhl1719 bool = l >= 0
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1725 := z.DecBinary()
		_ = yym1725
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1727 := z.DecBinary()
		_ = yym1727
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1728 := &x.SupplementalGroups
		yym1729 := z.DecBinary()
		_ = yym1729
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1728, false, d)
		}
	}
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1731 := z.DecBinary()
		_ = yym1731
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1719++
		if yyhl1719 {
			yyb1719 = yyj1719 > l
		} else {
			yyb1719 = r.CheckBreak()
		}
		if yyb1719 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1719-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1732 := z.EncBinary()
		_ = yym1732
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1733 := !z.EncBinary()
			yy2arr1733 := z.EncBasicHandle().StructToArray
			var yyq1733 [8]bool
			_, _, _ = yysep1733, yyq1733, yy2arr1733
			const yyr1733 bool = false
			yyq1733[0] = x.Phase != ""
			yyq1733[1] = len(x.Conditions) != 0
			yyq1733[2] = x.Message != ""
			yyq1733[3] = x.Reason != ""
			yyq1733[4] = x.HostIP != ""
			yyq1733[5] = x.PodIP != ""
			yyq1733[6] = x.StartTime != nil
			yyq1733[7] = len(x.ContainerStatuses) != 0
			var yynn1733 int
			if yyr1733 || yy2arr1733 {
				r.EncodeArrayStart(8)
			} else {
				yynn1733 = 0
				for _, b := range yyq1733 {
					if b {
						yynn1733++
					}
				}
				r.EncodeMapStart(yynn1733)
				yynn1733 = 0
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1733[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1733[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1733[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1736 := z.EncBinary()
						_ = yym1736
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1733[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1737 := z.EncBinary()
						_ = yym1737
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1733[2] {
					yym1739 := z.EncBinary()
					_ = yym1739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1733[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1740 := z.EncBinary()
					_ = yym1740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1733[3] {
					yym1742 := z.EncBinary()
					_ = yym1742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1733[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1743 := z.EncBinary()
					_ = yym1743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1733[4] {
					yym1745 := z.EncBinary()
					_ = yym1745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1733[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1733[5] {
					yym1748 := z.EncBinary()
					_ = yym1748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1733[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1749 := z.EncBinary()
					_ = yym1749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1733[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1751 := z.EncBinary()
						_ = yym1751
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1751 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1751 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1733[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1752 := z.EncBinary()
						_ = yym1752
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1752 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1752 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1733[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1754 := z.EncBinary()
						_ = yym1754
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1733[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1755 := z.EncBinary()
						_ = yym1755
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1756 := z.DecBinary()
	_ = yym1756
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1757 := r.ContainerType()
		if yyct1757 == codecSelferValueTypeMap1234 {
			yyl1757 := r.ReadMapStart()
			if yyl1757 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1757, d)
			}
		} else if yyct1757 == codecSelferValueTypeArray1234 {
			yyl1757 := r.ReadArrayStart()
			if yyl1757 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1757, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1758Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1758Slc
	var yyhl1758 bool = l >= 0
	for yyj1758 := 0; ; yyj1758++ {
		if yyhl1758 {
			if yyj1758 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1758Slc = r.DecodeBytes(yys1758Slc, true, true)
		yys1758 := string(yys1758Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1758 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1760 := &x.Conditions
				yym1761 := z.DecBinary()
				_ = yym1761
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1760), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1767 := z.DecBinary()
				_ = yym1767
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1767 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1767 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1768 := &x.ContainerStatuses
				yym1769 := z.DecBinary()
				_ = yym1769
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1768), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1758)
		} // end switch yys1758
	} // end for yyj1758
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1770 int
	var yyb1770 bool
	var yyhl1770 bool = l >= 0
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1772 := &x.Conditions
		yym1773 := z.DecBinary()
		_ = yym1773
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1772), d)
		}
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1779 := z.DecBinary()
		_ = yym1779
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1779 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1779 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1780 := &x.ContainerStatuses
		yym1781 := z.DecBinary()
		_ = yym1781
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1780), d)
		}
	}
	for {
		yyj1770++
		if yyhl1770 {
			yyb1770 = yyj1770 > l
		} else {
			yyb1770 = r.CheckBreak()
		}
		if yyb1770 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1770-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1782 := z.EncBinary()
		_ = yym1782
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1783 := !z.EncBinary()
			yy2arr1783 := z.EncBasicHandle().StructToArray
			var yyq1783 [4]bool
			_, _, _ = yysep1783, yyq1783, yy2arr1783
			const yyr1783 bool = false
			yyq1783[0] = x.Kind != ""
			yyq1783[1] = x.APIVersion != ""
			yyq1783[2] = true
			yyq1783[3] = true
			var yynn1783 int
			if yyr1783 || yy2arr1783 {
				r.EncodeArrayStart(4)
			} else {
				yynn1783 = 0
				for _, b := range yyq1783 {
					if b {
						yynn1783++
					}
				}
				r.EncodeMapStart(yynn1783)
				yynn1783 = 0
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1783[0] {
					yym1785 := z.EncBinary()
					_ = yym1785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1783[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1786 := z.EncBinary()
					_ = yym1786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1783[1] {
					yym1788 := z.EncBinary()
					_ = yym1788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1783[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1789 := z.EncBinary()
					_ = yym1789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1783[2] {
					yy1791 := &x.ObjectMeta
					yy1791.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1783[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1792 := &x.ObjectMeta
					yy1792.CodecEncodeSelf(e)
				}
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1783[3] {
					yy1794 := &x.Status
					yy1794.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1783[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1795 := &x.Status
					yy1795.CodecEncodeSelf(e)
				}
			}
			if yyr1783 || yy2arr1783 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1796 := z.DecBinary()
	_ = yym1796
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1797 := r.ContainerType()
		if yyct1797 == codecSelferValueTypeMap1234 {
			yyl1797 := r.ReadMapStart()
			if yyl1797 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1797, d)
			}
		} else if yyct1797 == codecSelferValueTypeArray1234 {
			yyl1797 := r.ReadArrayStart()
			if yyl1797 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1797, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1798Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1798Slc
	var yyhl1798 bool = l >= 0
	for yyj1798 := 0; ; yyj1798++ {
		if yyhl1798 {
			if yyj1798 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1798Slc = r.DecodeBytes(yys1798Slc, true, true)
		yys1798 := string(yys1798Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1798 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1801 := &x.ObjectMeta
				yyv1801.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1802 := &x.Status
				yyv1802.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1798)
		} // end switch yys1798
	} // end for yyj1798
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1803 int
	var yyb1803 bool
	var yyhl1803 bool = l >= 0
	yyj1803++
	if yyhl1803 {
		yyb1803 = yyj1803 > l
	} else {
		yyb1803 = r.CheckBreak()
	}
	if yyb1803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1803++
	if yyhl1803 {
		yyb1803 = yyj1803 > l
	} else {
		yyb1803 = r.CheckBreak()
	}
	if yyb1803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1803++
	if yyhl1803 {
		yyb1803 = yyj1803 > l
	} else {
		yyb1803 = r.CheckBreak()
	}
	if yyb1803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1806 := &x.ObjectMeta
		yyv1806.CodecDecodeSelf(d)
	}
	yyj1803++
	if yyhl1803 {
		yyb1803 = yyj1803 > l
	} else {
		yyb1803 = r.CheckBreak()
	}
	if yyb1803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1807 := &x.Status
		yyv1807.CodecDecodeSelf(d)
	}
	for {
		yyj1803++
		if yyhl1803 {
			yyb1803 = yyj1803 > l
		} else {
			yyb1803 = r.CheckBreak()
		}
		if yyb1803 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1803-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1808 := z.EncBinary()
		_ = yym1808
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1809 := !z.EncBinary()
			yy2arr1809 := z.EncBasicHandle().StructToArray
			var yyq1809 [5]bool
			_, _, _ = yysep1809, yyq1809, yy2arr1809
			const yyr1809 bool = false
			yyq1809[0] = x.Kind != ""
			yyq1809[1] = x.APIVersion != ""
			yyq1809[2] = true
			yyq1809[3] = true
			yyq1809[4] = true
			var yynn1809 int
			if yyr1809 || yy2arr1809 {
				r.EncodeArrayStart(5)
			} else {
				yynn1809 = 0
				for _, b := range yyq1809 {
					if b {
						yynn1809++
					}
				}
				r.EncodeMapStart(yynn1809)
				yynn1809 = 0
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1809[0] {
					yym1811 := z.EncBinary()
					_ = yym1811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1809[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1812 := z.EncBinary()
					_ = yym1812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1809[1] {
					yym1814 := z.EncBinary()
					_ = yym1814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1809[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1815 := z.EncBinary()
					_ = yym1815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1809[2] {
					yy1817 := &x.ObjectMeta
					yy1817.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1809[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1818 := &x.ObjectMeta
					yy1818.CodecEncodeSelf(e)
				}
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1809[3] {
					yy1820 := &x.Spec
					yy1820.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1809[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1821 := &x.Spec
					yy1821.CodecEncodeSelf(e)
				}
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1809[4] {
					yy1823 := &x.Status
					yy1823.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1809[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1824 := &x.Status
					yy1824.CodecEncodeSelf(e)
				}
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1825 := z.DecBinary()
	_ = yym1825
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1826 := r.ContainerType()
		if yyct1826 == codecSelferValueTypeMap1234 {
			yyl1826 := r.ReadMapStart()
			if yyl1826 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1826, d)
			}
		} else if yyct1826 == codecSelferValueTypeArray1234 {
			yyl1826 := r.ReadArrayStart()
			if yyl1826 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1826, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1827Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1827Slc
	var yyhl1827 bool = l >= 0
	for yyj1827 := 0; ; yyj1827++ {
		if yyhl1827 {
			if yyj1827 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1827Slc = r.DecodeBytes(yys1827Slc, true, true)
		yys1827 := string(yys1827Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1827 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1830 := &x.ObjectMeta
				yyv1830.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1831 := &x.Spec
				yyv1831.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1832 := &x.Status
				yyv1832.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1827)
		} // end switch yys1827
	} // end for yyj1827
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1833 int
	var yyb1833 bool
	var yyhl1833 bool = l >= 0
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1836 := &x.ObjectMeta
		yyv1836.CodecDecodeSelf(d)
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1837 := &x.Spec
		yyv1837.CodecDecodeSelf(d)
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1838 := &x.Status
		yyv1838.CodecDecodeSelf(d)
	}
	for {
		yyj1833++
		if yyhl1833 {
			yyb1833 = yyj1833 > l
		} else {
			yyb1833 = r.CheckBreak()
		}
		if yyb1833 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1833-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1839 := z.EncBinary()
		_ = yym1839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1840 := !z.EncBinary()
			yy2arr1840 := z.EncBasicHandle().StructToArray
			var yyq1840 [2]bool
			_, _, _ = yysep1840, yyq1840, yy2arr1840
			const yyr1840 bool = false
			yyq1840[0] = true
			yyq1840[1] = true
			var yynn1840 int
			if yyr1840 || yy2arr1840 {
				r.EncodeArrayStart(2)
			} else {
				yynn1840 = 0
				for _, b := range yyq1840 {
					if b {
						yynn1840++
					}
				}
				r.EncodeMapStart(yynn1840)
				yynn1840 = 0
			}
			if yyr1840 || yy2arr1840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1840[0] {
					yy1842 := &x.ObjectMeta
					yy1842.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1840[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1843 := &x.ObjectMeta
					yy1843.CodecEncodeSelf(e)
				}
			}
			if yyr1840 || yy2arr1840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1840[1] {
					yy1845 := &x.Spec
					yy1845.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1840[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1846 := &x.Spec
					yy1846.CodecEncodeSelf(e)
				}
			}
			if yyr1840 || yy2arr1840 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1847 := z.DecBinary()
	_ = yym1847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1848 := r.ContainerType()
		if yyct1848 == codecSelferValueTypeMap1234 {
			yyl1848 := r.ReadMapStart()
			if yyl1848 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1848, d)
			}
		} else if yyct1848 == codecSelferValueTypeArray1234 {
			yyl1848 := r.ReadArrayStart()
			if yyl1848 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1848, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1849Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1849Slc
	var yyhl1849 bool = l >= 0
	for yyj1849 := 0; ; yyj1849++ {
		if yyhl1849 {
			if yyj1849 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1849Slc = r.DecodeBytes(yys1849Slc, true, true)
		yys1849 := string(yys1849Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1849 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1850 := &x.ObjectMeta
				yyv1850.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1851 := &x.Spec
				yyv1851.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1849)
		} // end switch yys1849
	} // end for yyj1849
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1852 int
	var yyb1852 bool
	var yyhl1852 bool = l >= 0
	yyj1852++
	if yyhl1852 {
		yyb1852 = yyj1852 > l
	} else {
		yyb1852 = r.CheckBreak()
	}
	if yyb1852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1853 := &x.ObjectMeta
		yyv1853.CodecDecodeSelf(d)
	}
	yyj1852++
	if yyhl1852 {
		yyb1852 = yyj1852 > l
	} else {
		yyb1852 = r.CheckBreak()
	}
	if yyb1852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1854 := &x.Spec
		yyv1854.CodecDecodeSelf(d)
	}
	for {
		yyj1852++
		if yyhl1852 {
			yyb1852 = yyj1852 > l
		} else {
			yyb1852 = r.CheckBreak()
		}
		if yyb1852 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1852-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1855 := z.EncBinary()
		_ = yym1855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1856 := !z.EncBinary()
			yy2arr1856 := z.EncBasicHandle().StructToArray
			var yyq1856 [4]bool
			_, _, _ = yysep1856, yyq1856, yy2arr1856
			const yyr1856 bool = false
			yyq1856[0] = x.Kind != ""
			yyq1856[1] = x.APIVersion != ""
			yyq1856[2] = true
			yyq1856[3] = true
			var yynn1856 int
			if yyr1856 || yy2arr1856 {
				r.EncodeArrayStart(4)
			} else {
				yynn1856 = 0
				for _, b := range yyq1856 {
					if b {
						yynn1856++
					}
				}
				r.EncodeMapStart(yynn1856)
				yynn1856 = 0
			}
			if yyr1856 || yy2arr1856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1856[0] {
					yym1858 := z.EncBinary()
					_ = yym1858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1856[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1859 := z.EncBinary()
					_ = yym1859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1856 || yy2arr1856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1856[1] {
					yym1861 := z.EncBinary()
					_ = yym1861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1856[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1862 := z.EncBinary()
					_ = yym1862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1856 || yy2arr1856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1856[2] {
					yy1864 := &x.ObjectMeta
					yy1864.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1856[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1865 := &x.ObjectMeta
					yy1865.CodecEncodeSelf(e)
				}
			}
			if yyr1856 || yy2arr1856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1856[3] {
					yy1867 := &x.Template
					yy1867.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1856[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1868 := &x.Template
					yy1868.CodecEncodeSelf(e)
				}
			}
			if yyr1856 || yy2arr1856 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1869 := z.DecBinary()
	_ = yym1869
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1870 := r.ContainerType()
		if yyct1870 == codecSelferValueTypeMap1234 {
			yyl1870 := r.ReadMapStart()
			if yyl1870 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1870, d)
			}
		} else if yyct1870 == codecSelferValueTypeArray1234 {
			yyl1870 := r.ReadArrayStart()
			if yyl1870 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1870, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1871Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1871Slc
	var yyhl1871 bool = l >= 0
	for yyj1871 := 0; ; yyj1871++ {
		if yyhl1871 {
			if yyj1871 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1871Slc = r.DecodeBytes(yys1871Slc, true, true)
		yys1871 := string(yys1871Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1871 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1874 := &x.ObjectMeta
				yyv1874.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1875 := &x.Template
				yyv1875.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1871)
		} // end switch yys1871
	} // end for yyj1871
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1876 int
	var yyb1876 bool
	var yyhl1876 bool = l >= 0
	yyj1876++
	if yyhl1876 {
		yyb1876 = yyj1876 > l
	} else {
		yyb1876 = r.CheckBreak()
	}
	if yyb1876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1876++
	if yyhl1876 {
		yyb1876 = yyj1876 > l
	} else {
		yyb1876 = r.CheckBreak()
	}
	if yyb1876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1876++
	if yyhl1876 {
		yyb1876 = yyj1876 > l
	} else {
		yyb1876 = r.CheckBreak()
	}
	if yyb1876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1879 := &x.ObjectMeta
		yyv1879.CodecDecodeSelf(d)
	}
	yyj1876++
	if yyhl1876 {
		yyb1876 = yyj1876 > l
	} else {
		yyb1876 = r.CheckBreak()
	}
	if yyb1876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1880 := &x.Template
		yyv1880.CodecDecodeSelf(d)
	}
	for {
		yyj1876++
		if yyhl1876 {
			yyb1876 = yyj1876 > l
		} else {
			yyb1876 = r.CheckBreak()
		}
		if yyb1876 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1876-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1881 := z.EncBinary()
		_ = yym1881
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1882 := !z.EncBinary()
			yy2arr1882 := z.EncBasicHandle().StructToArray
			var yyq1882 [4]bool
			_, _, _ = yysep1882, yyq1882, yy2arr1882
			const yyr1882 bool = false
			yyq1882[0] = x.Kind != ""
			yyq1882[1] = x.APIVersion != ""
			yyq1882[2] = true
			var yynn1882 int
			if yyr1882 || yy2arr1882 {
				r.EncodeArrayStart(4)
			} else {
				yynn1882 = 1
				for _, b := range yyq1882 {
					if b {
						yynn1882++
					}
				}
				r.EncodeMapStart(yynn1882)
				yynn1882 = 0
			}
			if yyr1882 || yy2arr1882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1882[0] {
					yym1884 := z.EncBinary()
					_ = yym1884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1882[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1885 := z.EncBinary()
					_ = yym1885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1882 || yy2arr1882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1882[1] {
					yym1887 := z.EncBinary()
					_ = yym1887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1882[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1888 := z.EncBinary()
					_ = yym1888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1882 || yy2arr1882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1882[2] {
					yy1890 := &x.ListMeta
					yym1891 := z.EncBinary()
					_ = yym1891
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1890) {
					} else {
						z.EncFallback(yy1890)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1882[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1892 := &x.ListMeta
					yym1893 := z.EncBinary()
					_ = yym1893
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1892) {
					} else {
						z.EncFallback(yy1892)
					}
				}
			}
			if yyr1882 || yy2arr1882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1895 := z.EncBinary()
					_ = yym1895
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1896 := z.EncBinary()
					_ = yym1896
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr1882 || yy2arr1882 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1897 := z.DecBinary()
	_ = yym1897
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1898 := r.ContainerType()
		if yyct1898 == codecSelferValueTypeMap1234 {
			yyl1898 := r.ReadMapStart()
			if yyl1898 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1898, d)
			}
		} else if yyct1898 == codecSelferValueTypeArray1234 {
			yyl1898 := r.ReadArrayStart()
			if yyl1898 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1898, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1899Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1899Slc
	var yyhl1899 bool = l >= 0
	for yyj1899 := 0; ; yyj1899++ {
		if yyhl1899 {
			if yyj1899 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1899Slc = r.DecodeBytes(yys1899Slc, true, true)
		yys1899 := string(yys1899Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1899 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1902 := &x.ListMeta
				yym1903 := z.DecBinary()
				_ = yym1903
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1902) {
				} else {
					z.DecFallback(yyv1902, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1904 := &x.Items
				yym1905 := z.DecBinary()
				_ = yym1905
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1904), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1899)
		} // end switch yys1899
	} // end for yyj1899
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1906 int
	var yyb1906 bool
	var yyhl1906 bool = l >= 0
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1909 := &x.ListMeta
		yym1910 := z.DecBinary()
		_ = yym1910
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1909) {
		} else {
			z.DecFallback(yyv1909, false)
		}
	}
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1911 := &x.Items
		yym1912 := z.DecBinary()
		_ = yym1912
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1911), d)
		}
	}
	for {
		yyj1906++
		if yyhl1906 {
			yyb1906 = yyj1906 > l
		} else {
			yyb1906 = r.CheckBreak()
		}
		if yyb1906 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1906-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1913 := z.EncBinary()
		_ = yym1913
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1914 := !z.EncBinary()
			yy2arr1914 := z.EncBasicHandle().StructToArray
			var yyq1914 [3]bool
			_, _, _ = yysep1914, yyq1914, yy2arr1914
			const yyr1914 bool = false
			yyq1914[2] = x.Template != nil
			var yynn1914 int
			if yyr1914 || yy2arr1914 {
				r.EncodeArrayStart(3)
			} else {
				yynn1914 = 2
				for _, b := range yyq1914 {
					if b {
						yynn1914++
					}
				}
				r.EncodeMapStart(yynn1914)
				yynn1914 = 0
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1916 := z.EncBinary()
				_ = yym1916
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1917 := z.EncBinary()
				_ = yym1917
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1920 := z.EncBinary()
					_ = yym1920
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1914[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1914[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1922 := z.DecBinary()
	_ = yym1922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1923 := r.ContainerType()
		if yyct1923 == codecSelferValueTypeMap1234 {
			yyl1923 := r.ReadMapStart()
			if yyl1923 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1923, d)
			}
		} else if yyct1923 == codecSelferValueTypeArray1234 {
			yyl1923 := r.ReadArrayStart()
			if yyl1923 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1923, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1924Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1924Slc
	var yyhl1924 bool = l >= 0
	for yyj1924 := 0; ; yyj1924++ {
		if yyhl1924 {
			if yyj1924 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1924Slc = r.DecodeBytes(yys1924Slc, true, true)
		yys1924 := string(yys1924Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1924 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1926 := &x.Selector
				yym1927 := z.DecBinary()
				_ = yym1927
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1926, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1924)
		} // end switch yys1924
	} // end for yyj1924
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1929 int
	var yyb1929 bool
	var yyhl1929 bool = l >= 0
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1931 := &x.Selector
		yym1932 := z.DecBinary()
		_ = yym1932
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1931, false, d)
		}
	}
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1929++
		if yyhl1929 {
			yyb1929 = yyj1929 > l
		} else {
			yyb1929 = r.CheckBreak()
		}
		if yyb1929 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1929-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1934 := z.EncBinary()
		_ = yym1934
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1935 := !z.EncBinary()
			yy2arr1935 := z.EncBasicHandle().StructToArray
			var yyq1935 [2]bool
			_, _, _ = yysep1935, yyq1935, yy2arr1935
			const yyr1935 bool = false
			yyq1935[1] = x.ObservedGeneration != 0
			var yynn1935 int
			if yyr1935 || yy2arr1935 {
				r.EncodeArrayStart(2)
			} else {
				yynn1935 = 1
				for _, b := range yyq1935 {
					if b {
						yynn1935++
					}
				}
				r.EncodeMapStart(yynn1935)
				yynn1935 = 0
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1937 := z.EncBinary()
				_ = yym1937
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1938 := z.EncBinary()
				_ = yym1938
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1935[1] {
					yym1940 := z.EncBinary()
					_ = yym1940
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1935[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1941 := z.EncBinary()
					_ = yym1941
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1942 := z.DecBinary()
	_ = yym1942
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1943 := r.ContainerType()
		if yyct1943 == codecSelferValueTypeMap1234 {
			yyl1943 := r.ReadMapStart()
			if yyl1943 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1943, d)
			}
		} else if yyct1943 == codecSelferValueTypeArray1234 {
			yyl1943 := r.ReadArrayStart()
			if yyl1943 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1943, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1944Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1944Slc
	var yyhl1944 bool = l >= 0
	for yyj1944 := 0; ; yyj1944++ {
		if yyhl1944 {
			if yyj1944 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1944Slc = r.DecodeBytes(yys1944Slc, true, true)
		yys1944 := string(yys1944Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1944 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1944)
		} // end switch yys1944
	} // end for yyj1944
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1947 int
	var yyb1947 bool
	var yyhl1947 bool = l >= 0
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1947++
		if yyhl1947 {
			yyb1947 = yyj1947 > l
		} else {
			yyb1947 = r.CheckBreak()
		}
		if yyb1947 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1947-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1950 := z.EncBinary()
		_ = yym1950
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1951 := !z.EncBinary()
			yy2arr1951 := z.EncBasicHandle().StructToArray
			var yyq1951 [5]bool
			_, _, _ = yysep1951, yyq1951, yy2arr1951
			const yyr1951 bool = false
			yyq1951[0] = x.Kind != ""
			yyq1951[1] = x.APIVersion != ""
			yyq1951[2] = true
			yyq1951[3] = true
			yyq1951[4] = true
			var yynn1951 int
			if yyr1951 || yy2arr1951 {
				r.EncodeArrayStart(5)
			} else {
				yynn1951 = 0
				for _, b := range yyq1951 {
					if b {
						yynn1951++
					}
				}
				r.EncodeMapStart(yynn1951)
				yynn1951 = 0
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1951[0] {
					yym1953 := z.EncBinary()
					_ = yym1953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1951[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1954 := z.EncBinary()
					_ = yym1954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1951[1] {
					yym1956 := z.EncBinary()
					_ = yym1956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1951[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1957 := z.EncBinary()
					_ = yym1957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1951[2] {
					yy1959 := &x.ObjectMeta
					yy1959.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1951[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1960 := &x.ObjectMeta
					yy1960.CodecEncodeSelf(e)
				}
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1951[3] {
					yy1962 := &x.Spec
					yy1962.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1951[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1963 := &x.Spec
					yy1963.CodecEncodeSelf(e)
				}
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1951[4] {
					yy1965 := &x.Status
					yy1965.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1951[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1966 := &x.Status
					yy1966.CodecEncodeSelf(e)
				}
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1967 := z.DecBinary()
	_ = yym1967
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1968 := r.ContainerType()
		if yyct1968 == codecSelferValueTypeMap1234 {
			yyl1968 := r.ReadMapStart()
			if yyl1968 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1968, d)
			}
		} else if yyct1968 == codecSelferValueTypeArray1234 {
			yyl1968 := r.ReadArrayStart()
			if yyl1968 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1968, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1969Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1969Slc
	var yyhl1969 bool = l >= 0
	for yyj1969 := 0; ; yyj1969++ {
		if yyhl1969 {
			if yyj1969 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1969Slc = r.DecodeBytes(yys1969Slc, true, true)
		yys1969 := string(yys1969Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1969 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1972 := &x.ObjectMeta
				yyv1972.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1973 := &x.Spec
				yyv1973.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1974 := &x.Status
				yyv1974.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1969)
		} // end switch yys1969
	} // end for yyj1969
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1975 int
	var yyb1975 bool
	var yyhl1975 bool = l >= 0
	yyj1975++
	if yyhl1975 {
		yyb1975 = yyj1975 > l
	} else {
		yyb1975 = r.CheckBreak()
	}
	if yyb1975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1975++
	if yyhl1975 {
		yyb1975 = yyj1975 > l
	} else {
		yyb1975 = r.CheckBreak()
	}
	if yyb1975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1975++
	if yyhl1975 {
		yyb1975 = yyj1975 > l
	} else {
		yyb1975 = r.CheckBreak()
	}
	if yyb1975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1978 := &x.ObjectMeta
		yyv1978.CodecDecodeSelf(d)
	}
	yyj1975++
	if yyhl1975 {
		yyb1975 = yyj1975 > l
	} else {
		yyb1975 = r.CheckBreak()
	}
	if yyb1975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1979 := &x.Spec
		yyv1979.CodecDecodeSelf(d)
	}
	yyj1975++
	if yyhl1975 {
		yyb1975 = yyj1975 > l
	} else {
		yyb1975 = r.CheckBreak()
	}
	if yyb1975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1980 := &x.Status
		yyv1980.CodecDecodeSelf(d)
	}
	for {
		yyj1975++
		if yyhl1975 {
			yyb1975 = yyj1975 > l
		} else {
			yyb1975 = r.CheckBreak()
		}
		if yyb1975 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1975-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1981 := z.EncBinary()
		_ = yym1981
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1982 := !z.EncBinary()
			yy2arr1982 := z.EncBasicHandle().StructToArray
			var yyq1982 [4]bool
			_, _, _ = yysep1982, yyq1982, yy2arr1982
			const yyr1982 bool = false
			yyq1982[0] = x.Kind != ""
			yyq1982[1] = x.APIVersion != ""
			yyq1982[2] = true
			var yynn1982 int
			if yyr1982 || yy2arr1982 {
				r.EncodeArrayStart(4)
			} else {
				yynn1982 = 1
				for _, b := range yyq1982 {
					if b {
						yynn1982++
					}
				}
				r.EncodeMapStart(yynn1982)
				yynn1982 = 0
			}
			if yyr1982 || yy2arr1982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1982[0] {
					yym1984 := z.EncBinary()
					_ = yym1984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1982[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1985 := z.EncBinary()
					_ = yym1985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1982 || yy2arr1982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1982[1] {
					yym1987 := z.EncBinary()
					_ = yym1987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1982[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1988 := z.EncBinary()
					_ = yym1988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1982 || yy2arr1982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1982[2] {
					yy1990 := &x.ListMeta
					yym1991 := z.EncBinary()
					_ = yym1991
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1990) {
					} else {
						z.EncFallback(yy1990)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1982[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1992 := &x.ListMeta
					yym1993 := z.EncBinary()
					_ = yym1993
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1992) {
					} else {
						z.EncFallback(yy1992)
					}
				}
			}
			if yyr1982 || yy2arr1982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1995 := z.EncBinary()
					_ = yym1995
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1996 := z.EncBinary()
					_ = yym1996
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr1982 || yy2arr1982 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1997 := z.DecBinary()
	_ = yym1997
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1998 := r.ContainerType()
		if yyct1998 == codecSelferValueTypeMap1234 {
			yyl1998 := r.ReadMapStart()
			if yyl1998 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1998, d)
			}
		} else if yyct1998 == codecSelferValueTypeArray1234 {
			yyl1998 := r.ReadArrayStart()
			if yyl1998 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1998, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1999Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1999Slc
	var yyhl1999 bool = l >= 0
	for yyj1999 := 0; ; yyj1999++ {
		if yyhl1999 {
			if yyj1999 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1999Slc = r.DecodeBytes(yys1999Slc, true, true)
		yys1999 := string(yys1999Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1999 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2002 := &x.ListMeta
				yym2003 := z.DecBinary()
				_ = yym2003
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2002) {
				} else {
					z.DecFallback(yyv2002, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2004 := &x.Items
				yym2005 := z.DecBinary()
				_ = yym2005
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2004), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1999)
		} // end switch yys1999
	} // end for yyj1999
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2006 int
	var yyb2006 bool
	var yyhl2006 bool = l >= 0
	yyj2006++
	if yyhl2006 {
		yyb2006 = yyj2006 > l
	} else {
		yyb2006 = r.CheckBreak()
	}
	if yyb2006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2006++
	if yyhl2006 {
		yyb2006 = yyj2006 > l
	} else {
		yyb2006 = r.CheckBreak()
	}
	if yyb2006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2006++
	if yyhl2006 {
		yyb2006 = yyj2006 > l
	} else {
		yyb2006 = r.CheckBreak()
	}
	if yyb2006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2009 := &x.ListMeta
		yym2010 := z.DecBinary()
		_ = yym2010
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2009) {
		} else {
			z.DecFallback(yyv2009, false)
		}
	}
	yyj2006++
	if yyhl2006 {
		yyb2006 = yyj2006 > l
	} else {
		yyb2006 = r.CheckBreak()
	}
	if yyb2006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2011 := &x.Items
		yym2012 := z.DecBinary()
		_ = yym2012
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2011), d)
		}
	}
	for {
		yyj2006++
		if yyhl2006 {
			yyb2006 = yyj2006 > l
		} else {
			yyb2006 = r.CheckBreak()
		}
		if yyb2006 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2006-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2013 := z.EncBinary()
		_ = yym2013
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2014 := !z.EncBinary()
			yy2arr2014 := z.EncBasicHandle().StructToArray
			var yyq2014 [4]bool
			_, _, _ = yysep2014, yyq2014, yy2arr2014
			const yyr2014 bool = false
			yyq2014[0] = x.Kind != ""
			yyq2014[1] = x.APIVersion != ""
			yyq2014[2] = true
			var yynn2014 int
			if yyr2014 || yy2arr2014 {
				r.EncodeArrayStart(4)
			} else {
				yynn2014 = 1
				for _, b := range yyq2014 {
					if b {
						yynn2014++
					}
				}
				r.EncodeMapStart(yynn2014)
				yynn2014 = 0
			}
			if yyr2014 || yy2arr2014 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2014[0] {
					yym2016 := z.EncBinary()
					_ = yym2016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2014[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2017 := z.EncBinary()
					_ = yym2017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2014 || yy2arr2014 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2014[1] {
					yym2019 := z.EncBinary()
					_ = yym2019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2014[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2020 := z.EncBinary()
					_ = yym2020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2014 || yy2arr2014 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2014[2] {
					yy2022 := &x.ListMeta
					yym2023 := z.EncBinary()
					_ = yym2023
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2022) {
					} else {
						z.EncFallback(yy2022)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2014[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2024 := &x.ListMeta
					yym2025 := z.EncBinary()
					_ = yym2025
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2024) {
					} else {
						z.EncFallback(yy2024)
					}
				}
			}
			if yyr2014 || yy2arr2014 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2027 := z.EncBinary()
					_ = yym2027
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2028 := z.EncBinary()
					_ = yym2028
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2014 || yy2arr2014 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2029 := z.DecBinary()
	_ = yym2029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2030 := r.ContainerType()
		if yyct2030 == codecSelferValueTypeMap1234 {
			yyl2030 := r.ReadMapStart()
			if yyl2030 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2030, d)
			}
		} else if yyct2030 == codecSelferValueTypeArray1234 {
			yyl2030 := r.ReadArrayStart()
			if yyl2030 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2030, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2031Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2031Slc
	var yyhl2031 bool = l >= 0
	for yyj2031 := 0; ; yyj2031++ {
		if yyhl2031 {
			if yyj2031 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2031Slc = r.DecodeBytes(yys2031Slc, true, true)
		yys2031 := string(yys2031Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2031 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2034 := &x.ListMeta
				yym2035 := z.DecBinary()
				_ = yym2035
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2034) {
				} else {
					z.DecFallback(yyv2034, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2036 := &x.Items
				yym2037 := z.DecBinary()
				_ = yym2037
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2036), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2031)
		} // end switch yys2031
	} // end for yyj2031
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2038 int
	var yyb2038 bool
	var yyhl2038 bool = l >= 0
	yyj2038++
	if yyhl2038 {
		yyb2038 = yyj2038 > l
	} else {
		yyb2038 = r.CheckBreak()
	}
	if yyb2038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2038++
	if yyhl2038 {
		yyb2038 = yyj2038 > l
	} else {
		yyb2038 = r.CheckBreak()
	}
	if yyb2038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2038++
	if yyhl2038 {
		yyb2038 = yyj2038 > l
	} else {
		yyb2038 = r.CheckBreak()
	}
	if yyb2038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2041 := &x.ListMeta
		yym2042 := z.DecBinary()
		_ = yym2042
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2041) {
		} else {
			z.DecFallback(yyv2041, false)
		}
	}
	yyj2038++
	if yyhl2038 {
		yyb2038 = yyj2038 > l
	} else {
		yyb2038 = r.CheckBreak()
	}
	if yyb2038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2043 := &x.Items
		yym2044 := z.DecBinary()
		_ = yym2044
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2043), d)
		}
	}
	for {
		yyj2038++
		if yyhl2038 {
			yyb2038 = yyj2038 > l
		} else {
			yyb2038 = r.CheckBreak()
		}
		if yyb2038 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2038-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2045 := z.EncBinary()
	_ = yym2045
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2046 := z.DecBinary()
	_ = yym2046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2047 := z.EncBinary()
	_ = yym2047
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2048 := z.DecBinary()
	_ = yym2048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2049 := z.EncBinary()
		_ = yym2049
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2050 := !z.EncBinary()
			yy2arr2050 := z.EncBasicHandle().StructToArray
			var yyq2050 [1]bool
			_, _, _ = yysep2050, yyq2050, yy2arr2050
			const yyr2050 bool = false
			yyq2050[0] = true
			var yynn2050 int
			if yyr2050 || yy2arr2050 {
				r.EncodeArrayStart(1)
			} else {
				yynn2050 = 0
				for _, b := range yyq2050 {
					if b {
						yynn2050++
					}
				}
				r.EncodeMapStart(yynn2050)
				yynn2050 = 0
			}
			if yyr2050 || yy2arr2050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2050[0] {
					yy2052 := &x.LoadBalancer
					yy2052.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2050[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2053 := &x.LoadBalancer
					yy2053.CodecEncodeSelf(e)
				}
			}
			if yyr2050 || yy2arr2050 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2054 := z.DecBinary()
	_ = yym2054
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2055 := r.ContainerType()
		if yyct2055 == codecSelferValueTypeMap1234 {
			yyl2055 := r.ReadMapStart()
			if yyl2055 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2055, d)
			}
		} else if yyct2055 == codecSelferValueTypeArray1234 {
			yyl2055 := r.ReadArrayStart()
			if yyl2055 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2055, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2056Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2056Slc
	var yyhl2056 bool = l >= 0
	for yyj2056 := 0; ; yyj2056++ {
		if yyhl2056 {
			if yyj2056 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2056Slc = r.DecodeBytes(yys2056Slc, true, true)
		yys2056 := string(yys2056Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2056 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2057 := &x.LoadBalancer
				yyv2057.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2056)
		} // end switch yys2056
	} // end for yyj2056
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2058 int
	var yyb2058 bool
	var yyhl2058 bool = l >= 0
	yyj2058++
	if yyhl2058 {
		yyb2058 = yyj2058 > l
	} else {
		yyb2058 = r.CheckBreak()
	}
	if yyb2058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2059 := &x.LoadBalancer
		yyv2059.CodecDecodeSelf(d)
	}
	for {
		yyj2058++
		if yyhl2058 {
			yyb2058 = yyj2058 > l
		} else {
			yyb2058 = r.CheckBreak()
		}
		if yyb2058 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2058-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2060 := z.EncBinary()
		_ = yym2060
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2061 := !z.EncBinary()
			yy2arr2061 := z.EncBasicHandle().StructToArray
			var yyq2061 [1]bool
			_, _, _ = yysep2061, yyq2061, yy2arr2061
			const yyr2061 bool = false
			yyq2061[0] = len(x.Ingress) != 0
			var yynn2061 int
			if yyr2061 || yy2arr2061 {
				r.EncodeArrayStart(1)
			} else {
				yynn2061 = 0
				for _, b := range yyq2061 {
					if b {
						yynn2061++
					}
				}
				r.EncodeMapStart(yynn2061)
				yynn2061 = 0
			}
			if yyr2061 || yy2arr2061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2061[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2063 := z.EncBinary()
						_ = yym2063
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2061[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2064 := z.EncBinary()
						_ = yym2064
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2061 || yy2arr2061 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2065 := z.DecBinary()
	_ = yym2065
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2066 := r.ContainerType()
		if yyct2066 == codecSelferValueTypeMap1234 {
			yyl2066 := r.ReadMapStart()
			if yyl2066 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2066, d)
			}
		} else if yyct2066 == codecSelferValueTypeArray1234 {
			yyl2066 := r.ReadArrayStart()
			if yyl2066 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2066, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2067Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2067Slc
	var yyhl2067 bool = l >= 0
	for yyj2067 := 0; ; yyj2067++ {
		if yyhl2067 {
			if yyj2067 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2067Slc = r.DecodeBytes(yys2067Slc, true, true)
		yys2067 := string(yys2067Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2067 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2068 := &x.Ingress
				yym2069 := z.DecBinary()
				_ = yym2069
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2068), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2067)
		} // end switch yys2067
	} // end for yyj2067
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2070 int
	var yyb2070 bool
	var yyhl2070 bool = l >= 0
	yyj2070++
	if yyhl2070 {
		yyb2070 = yyj2070 > l
	} else {
		yyb2070 = r.CheckBreak()
	}
	if yyb2070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2071 := &x.Ingress
		yym2072 := z.DecBinary()
		_ = yym2072
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2071), d)
		}
	}
	for {
		yyj2070++
		if yyhl2070 {
			yyb2070 = yyj2070 > l
		} else {
			yyb2070 = r.CheckBreak()
		}
		if yyb2070 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2070-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2073 := z.EncBinary()
		_ = yym2073
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2074 := !z.EncBinary()
			yy2arr2074 := z.EncBasicHandle().StructToArray
			var yyq2074 [2]bool
			_, _, _ = yysep2074, yyq2074, yy2arr2074
			const yyr2074 bool = false
			yyq2074[0] = x.IP != ""
			yyq2074[1] = x.Hostname != ""
			var yynn2074 int
			if yyr2074 || yy2arr2074 {
				r.EncodeArrayStart(2)
			} else {
				yynn2074 = 0
				for _, b := range yyq2074 {
					if b {
						yynn2074++
					}
				}
				r.EncodeMapStart(yynn2074)
				yynn2074 = 0
			}
			if yyr2074 || yy2arr2074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2074[0] {
					yym2076 := z.EncBinary()
					_ = yym2076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2074[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2077 := z.EncBinary()
					_ = yym2077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2074 || yy2arr2074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2074[1] {
					yym2079 := z.EncBinary()
					_ = yym2079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2074[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2080 := z.EncBinary()
					_ = yym2080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2074 || yy2arr2074 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2081 := z.DecBinary()
	_ = yym2081
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2082 := r.ContainerType()
		if yyct2082 == codecSelferValueTypeMap1234 {
			yyl2082 := r.ReadMapStart()
			if yyl2082 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2082, d)
			}
		} else if yyct2082 == codecSelferValueTypeArray1234 {
			yyl2082 := r.ReadArrayStart()
			if yyl2082 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2082, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2083Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2083Slc
	var yyhl2083 bool = l >= 0
	for yyj2083 := 0; ; yyj2083++ {
		if yyhl2083 {
			if yyj2083 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2083Slc = r.DecodeBytes(yys2083Slc, true, true)
		yys2083 := string(yys2083Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2083 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2083)
		} // end switch yys2083
	} // end for yyj2083
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2086 int
	var yyb2086 bool
	var yyhl2086 bool = l >= 0
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2086++
		if yyhl2086 {
			yyb2086 = yyj2086 > l
		} else {
			yyb2086 = r.CheckBreak()
		}
		if yyb2086 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2086-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2089 := z.EncBinary()
		_ = yym2089
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2090 := !z.EncBinary()
			yy2arr2090 := z.EncBasicHandle().StructToArray
			var yyq2090 [7]bool
			_, _, _ = yysep2090, yyq2090, yy2arr2090
			const yyr2090 bool = false
			yyq2090[0] = x.Type != ""
			yyq2090[3] = x.ClusterIP != ""
			yyq2090[4] = len(x.ExternalIPs) != 0
			yyq2090[5] = x.LoadBalancerIP != ""
			yyq2090[6] = x.SessionAffinity != ""
			var yynn2090 int
			if yyr2090 || yy2arr2090 {
				r.EncodeArrayStart(7)
			} else {
				yynn2090 = 2
				for _, b := range yyq2090 {
					if b {
						yynn2090++
					}
				}
				r.EncodeMapStart(yynn2090)
				yynn2090 = 0
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2090[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2093 := z.EncBinary()
					_ = yym2093
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2094 := z.EncBinary()
					_ = yym2094
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2097 := z.EncBinary()
					_ = yym2097
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[3] {
					yym2099 := z.EncBinary()
					_ = yym2099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2090[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2100 := z.EncBinary()
					_ = yym2100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2102 := z.EncBinary()
						_ = yym2102
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2090[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2103 := z.EncBinary()
						_ = yym2103
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[5] {
					yym2105 := z.EncBinary()
					_ = yym2105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2090[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2106 := z.EncBinary()
					_ = yym2106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2090[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2108 := z.DecBinary()
	_ = yym2108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2109 := r.ContainerType()
		if yyct2109 == codecSelferValueTypeMap1234 {
			yyl2109 := r.ReadMapStart()
			if yyl2109 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2109, d)
			}
		} else if yyct2109 == codecSelferValueTypeArray1234 {
			yyl2109 := r.ReadArrayStart()
			if yyl2109 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2110Slc
	var yyhl2110 bool = l >= 0
	for yyj2110 := 0; ; yyj2110++ {
		if yyhl2110 {
			if yyj2110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2110Slc = r.DecodeBytes(yys2110Slc, true, true)
		yys2110 := string(yys2110Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2110 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2112 := &x.Ports
				yym2113 := z.DecBinary()
				_ = yym2113
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2112), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2114 := &x.Selector
				yym2115 := z.DecBinary()
				_ = yym2115
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2114, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2117 := &x.ExternalIPs
				yym2118 := z.DecBinary()
				_ = yym2118
				if false {
				} else {
					z.F.DecSliceStringX(yyv2117, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2110)
		} // end switch yys2110
	} // end for yyj2110
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2121 int
	var yyb2121 bool
	var yyhl2121 bool = l >= 0
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2123 := &x.Ports
		yym2124 := z.DecBinary()
		_ = yym2124
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2123), d)
		}
	}
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2125 := &x.Selector
		yym2126 := z.DecBinary()
		_ = yym2126
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2125, false, d)
		}
	}
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2128 := &x.ExternalIPs
		yym2129 := z.DecBinary()
		_ = yym2129
		if false {
		} else {
			z.F.DecSliceStringX(yyv2128, false, d)
		}
	}
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj2121++
		if yyhl2121 {
			yyb2121 = yyj2121 > l
		} else {
			yyb2121 = r.CheckBreak()
		}
		if yyb2121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2132 := z.EncBinary()
		_ = yym2132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2133 := !z.EncBinary()
			yy2arr2133 := z.EncBasicHandle().StructToArray
			var yyq2133 [5]bool
			_, _, _ = yysep2133, yyq2133, yy2arr2133
			const yyr2133 bool = false
			var yynn2133 int
			if yyr2133 || yy2arr2133 {
				r.EncodeArrayStart(5)
			} else {
				yynn2133 = 5
				for _, b := range yyq2133 {
					if b {
						yynn2133++
					}
				}
				r.EncodeMapStart(yynn2133)
				yynn2133 = 0
			}
			if yyr2133 || yy2arr2133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2135 := z.EncBinary()
				_ = yym2135
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2136 := z.EncBinary()
				_ = yym2136
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2133 || yy2arr2133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2133 || yy2arr2133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2139 := z.EncBinary()
				_ = yym2139
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2140 := z.EncBinary()
				_ = yym2140
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2133 || yy2arr2133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2142 := &x.TargetPort
				yym2143 := z.EncBinary()
				_ = yym2143
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2142) {
				} else if !yym2143 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2142)
				} else {
					z.EncFallback(yy2142)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2144 := &x.TargetPort
				yym2145 := z.EncBinary()
				_ = yym2145
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2144) {
				} else if !yym2145 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2144)
				} else {
					z.EncFallback(yy2144)
				}
			}
			if yyr2133 || yy2arr2133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2147 := z.EncBinary()
				_ = yym2147
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2148 := z.EncBinary()
				_ = yym2148
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2133 || yy2arr2133 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2149 := z.DecBinary()
	_ = yym2149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2150 := r.ContainerType()
		if yyct2150 == codecSelferValueTypeMap1234 {
			yyl2150 := r.ReadMapStart()
			if yyl2150 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2150, d)
			}
		} else if yyct2150 == codecSelferValueTypeArray1234 {
			yyl2150 := r.ReadArrayStart()
			if yyl2150 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2150, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2151Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2151Slc
	var yyhl2151 bool = l >= 0
	for yyj2151 := 0; ; yyj2151++ {
		if yyhl2151 {
			if yyj2151 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2151Slc = r.DecodeBytes(yys2151Slc, true, true)
		yys2151 := string(yys2151Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2151 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv2155 := &x.TargetPort
				yym2156 := z.DecBinary()
				_ = yym2156
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2155) {
				} else if !yym2156 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2155)
				} else {
					z.DecFallback(yyv2155, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2151)
		} // end switch yys2151
	} // end for yyj2151
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2158 int
	var yyb2158 bool
	var yyhl2158 bool = l >= 0
	yyj2158++
	if yyhl2158 {
		yyb2158 = yyj2158 > l
	} else {
		yyb2158 = r.CheckBreak()
	}
	if yyb2158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2158++
	if yyhl2158 {
		yyb2158 = yyj2158 > l
	} else {
		yyb2158 = r.CheckBreak()
	}
	if yyb2158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2158++
	if yyhl2158 {
		yyb2158 = yyj2158 > l
	} else {
		yyb2158 = r.CheckBreak()
	}
	if yyb2158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2158++
	if yyhl2158 {
		yyb2158 = yyj2158 > l
	} else {
		yyb2158 = r.CheckBreak()
	}
	if yyb2158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv2162 := &x.TargetPort
		yym2163 := z.DecBinary()
		_ = yym2163
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2162) {
		} else if !yym2163 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2162)
		} else {
			z.DecFallback(yyv2162, false)
		}
	}
	yyj2158++
	if yyhl2158 {
		yyb2158 = yyj2158 > l
	} else {
		yyb2158 = r.CheckBreak()
	}
	if yyb2158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2158++
		if yyhl2158 {
			yyb2158 = yyj2158 > l
		} else {
			yyb2158 = r.CheckBreak()
		}
		if yyb2158 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2158-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2165 := z.EncBinary()
		_ = yym2165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2166 := !z.EncBinary()
			yy2arr2166 := z.EncBasicHandle().StructToArray
			var yyq2166 [5]bool
			_, _, _ = yysep2166, yyq2166, yy2arr2166
			const yyr2166 bool = false
			yyq2166[0] = x.Kind != ""
			yyq2166[1] = x.APIVersion != ""
			yyq2166[2] = true
			yyq2166[3] = true
			yyq2166[4] = true
			var yynn2166 int
			if yyr2166 || yy2arr2166 {
				r.EncodeArrayStart(5)
			} else {
				yynn2166 = 0
				for _, b := range yyq2166 {
					if b {
						yynn2166++
					}
				}
				r.EncodeMapStart(yynn2166)
				yynn2166 = 0
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2166[0] {
					yym2168 := z.EncBinary()
					_ = yym2168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2166[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2169 := z.EncBinary()
					_ = yym2169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2166[1] {
					yym2171 := z.EncBinary()
					_ = yym2171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2166[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2172 := z.EncBinary()
					_ = yym2172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2166[2] {
					yy2174 := &x.ObjectMeta
					yy2174.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2166[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2175 := &x.ObjectMeta
					yy2175.CodecEncodeSelf(e)
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2166[3] {
					yy2177 := &x.Spec
					yy2177.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2166[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2178 := &x.Spec
					yy2178.CodecEncodeSelf(e)
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2166[4] {
					yy2180 := &x.Status
					yy2180.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2166[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2181 := &x.Status
					yy2181.CodecEncodeSelf(e)
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2182 := z.DecBinary()
	_ = yym2182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2183 := r.ContainerType()
		if yyct2183 == codecSelferValueTypeMap1234 {
			yyl2183 := r.ReadMapStart()
			if yyl2183 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2183, d)
			}
		} else if yyct2183 == codecSelferValueTypeArray1234 {
			yyl2183 := r.ReadArrayStart()
			if yyl2183 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2183, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2184Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2184Slc
	var yyhl2184 bool = l >= 0
	for yyj2184 := 0; ; yyj2184++ {
		if yyhl2184 {
			if yyj2184 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2184Slc = r.DecodeBytes(yys2184Slc, true, true)
		yys2184 := string(yys2184Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2184 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2187 := &x.ObjectMeta
				yyv2187.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2188 := &x.Spec
				yyv2188.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2189 := &x.Status
				yyv2189.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2184)
		} // end switch yys2184
	} // end for yyj2184
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2190 int
	var yyb2190 bool
	var yyhl2190 bool = l >= 0
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2193 := &x.ObjectMeta
		yyv2193.CodecDecodeSelf(d)
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2194 := &x.Spec
		yyv2194.CodecDecodeSelf(d)
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2195 := &x.Status
		yyv2195.CodecDecodeSelf(d)
	}
	for {
		yyj2190++
		if yyhl2190 {
			yyb2190 = yyj2190 > l
		} else {
			yyb2190 = r.CheckBreak()
		}
		if yyb2190 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2190-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2196 := z.EncBinary()
		_ = yym2196
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2197 := !z.EncBinary()
			yy2arr2197 := z.EncBasicHandle().StructToArray
			var yyq2197 [5]bool
			_, _, _ = yysep2197, yyq2197, yy2arr2197
			const yyr2197 bool = false
			yyq2197[0] = x.Kind != ""
			yyq2197[1] = x.APIVersion != ""
			yyq2197[2] = true
			yyq2197[4] = len(x.ImagePullSecrets) != 0
			var yynn2197 int
			if yyr2197 || yy2arr2197 {
				r.EncodeArrayStart(5)
			} else {
				yynn2197 = 1
				for _, b := range yyq2197 {
					if b {
						yynn2197++
					}
				}
				r.EncodeMapStart(yynn2197)
				yynn2197 = 0
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[0] {
					yym2199 := z.EncBinary()
					_ = yym2199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2197[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2200 := z.EncBinary()
					_ = yym2200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[1] {
					yym2202 := z.EncBinary()
					_ = yym2202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2197[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2203 := z.EncBinary()
					_ = yym2203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[2] {
					yy2205 := &x.ObjectMeta
					yy2205.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2197[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2206 := &x.ObjectMeta
					yy2206.CodecEncodeSelf(e)
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2208 := z.EncBinary()
					_ = yym2208
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2209 := z.EncBinary()
					_ = yym2209
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2211 := z.EncBinary()
						_ = yym2211
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2197[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2212 := z.EncBinary()
						_ = yym2212
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2213 := z.DecBinary()
	_ = yym2213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2214 := r.ContainerType()
		if yyct2214 == codecSelferValueTypeMap1234 {
			yyl2214 := r.ReadMapStart()
			if yyl2214 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2214, d)
			}
		} else if yyct2214 == codecSelferValueTypeArray1234 {
			yyl2214 := r.ReadArrayStart()
			if yyl2214 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2214, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2215Slc
	var yyhl2215 bool = l >= 0
	for yyj2215 := 0; ; yyj2215++ {
		if yyhl2215 {
			if yyj2215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2215Slc = r.DecodeBytes(yys2215Slc, true, true)
		yys2215 := string(yys2215Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2215 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2218 := &x.ObjectMeta
				yyv2218.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2219 := &x.Secrets
				yym2220 := z.DecBinary()
				_ = yym2220
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2219), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2221 := &x.ImagePullSecrets
				yym2222 := z.DecBinary()
				_ = yym2222
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2221), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2215)
		} // end switch yys2215
	} // end for yyj2215
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2223 int
	var yyb2223 bool
	var yyhl2223 bool = l >= 0
	yyj2223++
	if yyhl2223 {
		yyb2223 = yyj2223 > l
	} else {
		yyb2223 = r.CheckBreak()
	}
	if yyb2223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2223++
	if yyhl2223 {
		yyb2223 = yyj2223 > l
	} else {
		yyb2223 = r.CheckBreak()
	}
	if yyb2223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2223++
	if yyhl2223 {
		yyb2223 = yyj2223 > l
	} else {
		yyb2223 = r.CheckBreak()
	}
	if yyb2223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2226 := &x.ObjectMeta
		yyv2226.CodecDecodeSelf(d)
	}
	yyj2223++
	if yyhl2223 {
		yyb2223 = yyj2223 > l
	} else {
		yyb2223 = r.CheckBreak()
	}
	if yyb2223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2227 := &x.Secrets
		yym2228 := z.DecBinary()
		_ = yym2228
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2227), d)
		}
	}
	yyj2223++
	if yyhl2223 {
		yyb2223 = yyj2223 > l
	} else {
		yyb2223 = r.CheckBreak()
	}
	if yyb2223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2229 := &x.ImagePullSecrets
		yym2230 := z.DecBinary()
		_ = yym2230
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2229), d)
		}
	}
	for {
		yyj2223++
		if yyhl2223 {
			yyb2223 = yyj2223 > l
		} else {
			yyb2223 = r.CheckBreak()
		}
		if yyb2223 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2223-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2231 := z.EncBinary()
		_ = yym2231
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2232 := !z.EncBinary()
			yy2arr2232 := z.EncBasicHandle().StructToArray
			var yyq2232 [4]bool
			_, _, _ = yysep2232, yyq2232, yy2arr2232
			const yyr2232 bool = false
			yyq2232[0] = x.Kind != ""
			yyq2232[1] = x.APIVersion != ""
			yyq2232[2] = true
			var yynn2232 int
			if yyr2232 || yy2arr2232 {
				r.EncodeArrayStart(4)
			} else {
				yynn2232 = 1
				for _, b := range yyq2232 {
					if b {
						yynn2232++
					}
				}
				r.EncodeMapStart(yynn2232)
				yynn2232 = 0
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[0] {
					yym2234 := z.EncBinary()
					_ = yym2234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2232[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2235 := z.EncBinary()
					_ = yym2235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[1] {
					yym2237 := z.EncBinary()
					_ = yym2237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2232[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2238 := z.EncBinary()
					_ = yym2238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2232[2] {
					yy2240 := &x.ListMeta
					yym2241 := z.EncBinary()
					_ = yym2241
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2240) {
					} else {
						z.EncFallback(yy2240)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2232[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2242 := &x.ListMeta
					yym2243 := z.EncBinary()
					_ = yym2243
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2242) {
					} else {
						z.EncFallback(yy2242)
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2245 := z.EncBinary()
					_ = yym2245
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2246 := z.EncBinary()
					_ = yym2246
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2247 := z.DecBinary()
	_ = yym2247
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2248 := r.ContainerType()
		if yyct2248 == codecSelferValueTypeMap1234 {
			yyl2248 := r.ReadMapStart()
			if yyl2248 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2248, d)
			}
		} else if yyct2248 == codecSelferValueTypeArray1234 {
			yyl2248 := r.ReadArrayStart()
			if yyl2248 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2248, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2249Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2249Slc
	var yyhl2249 bool = l >= 0
	for yyj2249 := 0; ; yyj2249++ {
		if yyhl2249 {
			if yyj2249 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2249Slc = r.DecodeBytes(yys2249Slc, true, true)
		yys2249 := string(yys2249Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2249 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2252 := &x.ListMeta
				yym2253 := z.DecBinary()
				_ = yym2253
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2252) {
				} else {
					z.DecFallback(yyv2252, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2254 := &x.Items
				yym2255 := z.DecBinary()
				_ = yym2255
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2254), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2249)
		} // end switch yys2249
	} // end for yyj2249
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2256 int
	var yyb2256 bool
	var yyhl2256 bool = l >= 0
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2259 := &x.ListMeta
		yym2260 := z.DecBinary()
		_ = yym2260
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2259) {
		} else {
			z.DecFallback(yyv2259, false)
		}
	}
	yyj2256++
	if yyhl2256 {
		yyb2256 = yyj2256 > l
	} else {
		yyb2256 = r.CheckBreak()
	}
	if yyb2256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2261 := &x.Items
		yym2262 := z.DecBinary()
		_ = yym2262
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2261), d)
		}
	}
	for {
		yyj2256++
		if yyhl2256 {
			yyb2256 = yyj2256 > l
		} else {
			yyb2256 = r.CheckBreak()
		}
		if yyb2256 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2256-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2263 := z.EncBinary()
		_ = yym2263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2264 := !z.EncBinary()
			yy2arr2264 := z.EncBasicHandle().StructToArray
			var yyq2264 [4]bool
			_, _, _ = yysep2264, yyq2264, yy2arr2264
			const yyr2264 bool = false
			yyq2264[0] = x.Kind != ""
			yyq2264[1] = x.APIVersion != ""
			yyq2264[2] = true
			var yynn2264 int
			if yyr2264 || yy2arr2264 {
				r.EncodeArrayStart(4)
			} else {
				yynn2264 = 1
				for _, b := range yyq2264 {
					if b {
						yynn2264++
					}
				}
				r.EncodeMapStart(yynn2264)
				yynn2264 = 0
			}
			if yyr2264 || yy2arr2264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2264[0] {
					yym2266 := z.EncBinary()
					_ = yym2266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2264[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2267 := z.EncBinary()
					_ = yym2267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2264 || yy2arr2264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2264[1] {
					yym2269 := z.EncBinary()
					_ = yym2269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2264[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2270 := z.EncBinary()
					_ = yym2270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2264 || yy2arr2264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2264[2] {
					yy2272 := &x.ObjectMeta
					yy2272.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2264[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2273 := &x.ObjectMeta
					yy2273.CodecEncodeSelf(e)
				}
			}
			if yyr2264 || yy2arr2264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2275 := z.EncBinary()
					_ = yym2275
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2276 := z.EncBinary()
					_ = yym2276
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2264 || yy2arr2264 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2277 := z.DecBinary()
	_ = yym2277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2278 := r.ContainerType()
		if yyct2278 == codecSelferValueTypeMap1234 {
			yyl2278 := r.ReadMapStart()
			if yyl2278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2278, d)
			}
		} else if yyct2278 == codecSelferValueTypeArray1234 {
			yyl2278 := r.ReadArrayStart()
			if yyl2278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2279Slc
	var yyhl2279 bool = l >= 0
	for yyj2279 := 0; ; yyj2279++ {
		if yyhl2279 {
			if yyj2279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2279Slc = r.DecodeBytes(yys2279Slc, true, true)
		yys2279 := string(yys2279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2279 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2282 := &x.ObjectMeta
				yyv2282.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2283 := &x.Subsets
				yym2284 := z.DecBinary()
				_ = yym2284
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2283), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2279)
		} // end switch yys2279
	} // end for yyj2279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2285 int
	var yyb2285 bool
	var yyhl2285 bool = l >= 0
	yyj2285++
	if yyhl2285 {
		yyb2285 = yyj2285 > l
	} else {
		yyb2285 = r.CheckBreak()
	}
	if yyb2285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2285++
	if yyhl2285 {
		yyb2285 = yyj2285 > l
	} else {
		yyb2285 = r.CheckBreak()
	}
	if yyb2285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2285++
	if yyhl2285 {
		yyb2285 = yyj2285 > l
	} else {
		yyb2285 = r.CheckBreak()
	}
	if yyb2285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2288 := &x.ObjectMeta
		yyv2288.CodecDecodeSelf(d)
	}
	yyj2285++
	if yyhl2285 {
		yyb2285 = yyj2285 > l
	} else {
		yyb2285 = r.CheckBreak()
	}
	if yyb2285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2289 := &x.Subsets
		yym2290 := z.DecBinary()
		_ = yym2290
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2289), d)
		}
	}
	for {
		yyj2285++
		if yyhl2285 {
			yyb2285 = yyj2285 > l
		} else {
			yyb2285 = r.CheckBreak()
		}
		if yyb2285 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2285-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2291 := z.EncBinary()
		_ = yym2291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2292 := !z.EncBinary()
			yy2arr2292 := z.EncBasicHandle().StructToArray
			var yyq2292 [3]bool
			_, _, _ = yysep2292, yyq2292, yy2arr2292
			const yyr2292 bool = false
			var yynn2292 int
			if yyr2292 || yy2arr2292 {
				r.EncodeArrayStart(3)
			} else {
				yynn2292 = 3
				for _, b := range yyq2292 {
					if b {
						yynn2292++
					}
				}
				r.EncodeMapStart(yynn2292)
				yynn2292 = 0
			}
			if yyr2292 || yy2arr2292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2294 := z.EncBinary()
					_ = yym2294
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2295 := z.EncBinary()
					_ = yym2295
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2292 || yy2arr2292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2297 := z.EncBinary()
					_ = yym2297
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2298 := z.EncBinary()
					_ = yym2298
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2292 || yy2arr2292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2300 := z.EncBinary()
					_ = yym2300
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2301 := z.EncBinary()
					_ = yym2301
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2292 || yy2arr2292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2302 := z.DecBinary()
	_ = yym2302
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2303 := r.ContainerType()
		if yyct2303 == codecSelferValueTypeMap1234 {
			yyl2303 := r.ReadMapStart()
			if yyl2303 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2303, d)
			}
		} else if yyct2303 == codecSelferValueTypeArray1234 {
			yyl2303 := r.ReadArrayStart()
			if yyl2303 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2303, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2304Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2304Slc
	var yyhl2304 bool = l >= 0
	for yyj2304 := 0; ; yyj2304++ {
		if yyhl2304 {
			if yyj2304 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2304Slc = r.DecodeBytes(yys2304Slc, true, true)
		yys2304 := string(yys2304Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2304 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2305 := &x.Addresses
				yym2306 := z.DecBinary()
				_ = yym2306
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2305), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2307 := &x.NotReadyAddresses
				yym2308 := z.DecBinary()
				_ = yym2308
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2307), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2309 := &x.Ports
				yym2310 := z.DecBinary()
				_ = yym2310
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2309), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2304)
		} // end switch yys2304
	} // end for yyj2304
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2311 int
	var yyb2311 bool
	var yyhl2311 bool = l >= 0
	yyj2311++
	if yyhl2311 {
		yyb2311 = yyj2311 > l
	} else {
		yyb2311 = r.CheckBreak()
	}
	if yyb2311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2312 := &x.Addresses
		yym2313 := z.DecBinary()
		_ = yym2313
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2312), d)
		}
	}
	yyj2311++
	if yyhl2311 {
		yyb2311 = yyj2311 > l
	} else {
		yyb2311 = r.CheckBreak()
	}
	if yyb2311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2314 := &x.NotReadyAddresses
		yym2315 := z.DecBinary()
		_ = yym2315
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2314), d)
		}
	}
	yyj2311++
	if yyhl2311 {
		yyb2311 = yyj2311 > l
	} else {
		yyb2311 = r.CheckBreak()
	}
	if yyb2311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2316 := &x.Ports
		yym2317 := z.DecBinary()
		_ = yym2317
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2316), d)
		}
	}
	for {
		yyj2311++
		if yyhl2311 {
			yyb2311 = yyj2311 > l
		} else {
			yyb2311 = r.CheckBreak()
		}
		if yyb2311 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2311-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2318 := z.EncBinary()
		_ = yym2318
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2319 := !z.EncBinary()
			yy2arr2319 := z.EncBasicHandle().StructToArray
			var yyq2319 [2]bool
			_, _, _ = yysep2319, yyq2319, yy2arr2319
			const yyr2319 bool = false
			var yynn2319 int
			if yyr2319 || yy2arr2319 {
				r.EncodeArrayStart(2)
			} else {
				yynn2319 = 2
				for _, b := range yyq2319 {
					if b {
						yynn2319++
					}
				}
				r.EncodeMapStart(yynn2319)
				yynn2319 = 0
			}
			if yyr2319 || yy2arr2319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2321 := z.EncBinary()
				_ = yym2321
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2322 := z.EncBinary()
				_ = yym2322
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2319 || yy2arr2319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2319 || yy2arr2319 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2324 := z.DecBinary()
	_ = yym2324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2325 := r.ContainerType()
		if yyct2325 == codecSelferValueTypeMap1234 {
			yyl2325 := r.ReadMapStart()
			if yyl2325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2325, d)
			}
		} else if yyct2325 == codecSelferValueTypeArray1234 {
			yyl2325 := r.ReadArrayStart()
			if yyl2325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2326Slc
	var yyhl2326 bool = l >= 0
	for yyj2326 := 0; ; yyj2326++ {
		if yyhl2326 {
			if yyj2326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2326Slc = r.DecodeBytes(yys2326Slc, true, true)
		yys2326 := string(yys2326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2326 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2326)
		} // end switch yys2326
	} // end for yyj2326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2329 int
	var yyb2329 bool
	var yyhl2329 bool = l >= 0
	yyj2329++
	if yyhl2329 {
		yyb2329 = yyj2329 > l
	} else {
		yyb2329 = r.CheckBreak()
	}
	if yyb2329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2329++
	if yyhl2329 {
		yyb2329 = yyj2329 > l
	} else {
		yyb2329 = r.CheckBreak()
	}
	if yyb2329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2329++
		if yyhl2329 {
			yyb2329 = yyj2329 > l
		} else {
			yyb2329 = r.CheckBreak()
		}
		if yyb2329 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2329-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2332 := z.EncBinary()
		_ = yym2332
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2333 := !z.EncBinary()
			yy2arr2333 := z.EncBasicHandle().StructToArray
			var yyq2333 [3]bool
			_, _, _ = yysep2333, yyq2333, yy2arr2333
			const yyr2333 bool = false
			var yynn2333 int
			if yyr2333 || yy2arr2333 {
				r.EncodeArrayStart(3)
			} else {
				yynn2333 = 3
				for _, b := range yyq2333 {
					if b {
						yynn2333++
					}
				}
				r.EncodeMapStart(yynn2333)
				yynn2333 = 0
			}
			if yyr2333 || yy2arr2333 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2335 := z.EncBinary()
				_ = yym2335
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2336 := z.EncBinary()
				_ = yym2336
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2333 || yy2arr2333 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2338 := z.EncBinary()
				_ = yym2338
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2339 := z.EncBinary()
				_ = yym2339
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2333 || yy2arr2333 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2333 || yy2arr2333 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2341 := z.DecBinary()
	_ = yym2341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2342 := r.ContainerType()
		if yyct2342 == codecSelferValueTypeMap1234 {
			yyl2342 := r.ReadMapStart()
			if yyl2342 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2342, d)
			}
		} else if yyct2342 == codecSelferValueTypeArray1234 {
			yyl2342 := r.ReadArrayStart()
			if yyl2342 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2342, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2343Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2343Slc
	var yyhl2343 bool = l >= 0
	for yyj2343 := 0; ; yyj2343++ {
		if yyhl2343 {
			if yyj2343 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2343Slc = r.DecodeBytes(yys2343Slc, true, true)
		yys2343 := string(yys2343Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2343 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2343)
		} // end switch yys2343
	} // end for yyj2343
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2347 int
	var yyb2347 bool
	var yyhl2347 bool = l >= 0
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2347++
		if yyhl2347 {
			yyb2347 = yyj2347 > l
		} else {
			yyb2347 = r.CheckBreak()
		}
		if yyb2347 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2347-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2351 := z.EncBinary()
		_ = yym2351
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2352 := !z.EncBinary()
			yy2arr2352 := z.EncBasicHandle().StructToArray
			var yyq2352 [4]bool
			_, _, _ = yysep2352, yyq2352, yy2arr2352
			const yyr2352 bool = false
			yyq2352[0] = x.Kind != ""
			yyq2352[1] = x.APIVersion != ""
			yyq2352[2] = true
			var yynn2352 int
			if yyr2352 || yy2arr2352 {
				r.EncodeArrayStart(4)
			} else {
				yynn2352 = 1
				for _, b := range yyq2352 {
					if b {
						yynn2352++
					}
				}
				r.EncodeMapStart(yynn2352)
				yynn2352 = 0
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[0] {
					yym2354 := z.EncBinary()
					_ = yym2354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2352[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2355 := z.EncBinary()
					_ = yym2355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[1] {
					yym2357 := z.EncBinary()
					_ = yym2357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2352[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[2] {
					yy2360 := &x.ListMeta
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2360) {
					} else {
						z.EncFallback(yy2360)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2352[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2362 := &x.ListMeta
					yym2363 := z.EncBinary()
					_ = yym2363
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2362) {
					} else {
						z.EncFallback(yy2362)
					}
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2365 := z.EncBinary()
					_ = yym2365
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2366 := z.EncBinary()
					_ = yym2366
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2367 := z.DecBinary()
	_ = yym2367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2368 := r.ContainerType()
		if yyct2368 == codecSelferValueTypeMap1234 {
			yyl2368 := r.ReadMapStart()
			if yyl2368 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2368, d)
			}
		} else if yyct2368 == codecSelferValueTypeArray1234 {
			yyl2368 := r.ReadArrayStart()
			if yyl2368 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2369Slc
	var yyhl2369 bool = l >= 0
	for yyj2369 := 0; ; yyj2369++ {
		if yyhl2369 {
			if yyj2369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2369Slc = r.DecodeBytes(yys2369Slc, true, true)
		yys2369 := string(yys2369Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2369 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2372 := &x.ListMeta
				yym2373 := z.DecBinary()
				_ = yym2373
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2372) {
				} else {
					z.DecFallback(yyv2372, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2374 := &x.Items
				yym2375 := z.DecBinary()
				_ = yym2375
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2374), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2369)
		} // end switch yys2369
	} // end for yyj2369
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2376 int
	var yyb2376 bool
	var yyhl2376 bool = l >= 0
	yyj2376++
	if yyhl2376 {
		yyb2376 = yyj2376 > l
	} else {
		yyb2376 = r.CheckBreak()
	}
	if yyb2376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2376++
	if yyhl2376 {
		yyb2376 = yyj2376 > l
	} else {
		yyb2376 = r.CheckBreak()
	}
	if yyb2376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2376++
	if yyhl2376 {
		yyb2376 = yyj2376 > l
	} else {
		yyb2376 = r.CheckBreak()
	}
	if yyb2376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2379 := &x.ListMeta
		yym2380 := z.DecBinary()
		_ = yym2380
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2379) {
		} else {
			z.DecFallback(yyv2379, false)
		}
	}
	yyj2376++
	if yyhl2376 {
		yyb2376 = yyj2376 > l
	} else {
		yyb2376 = r.CheckBreak()
	}
	if yyb2376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2381 := &x.Items
		yym2382 := z.DecBinary()
		_ = yym2382
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2381), d)
		}
	}
	for {
		yyj2376++
		if yyhl2376 {
			yyb2376 = yyj2376 > l
		} else {
			yyb2376 = r.CheckBreak()
		}
		if yyb2376 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2376-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2383 := z.EncBinary()
		_ = yym2383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2384 := !z.EncBinary()
			yy2arr2384 := z.EncBasicHandle().StructToArray
			var yyq2384 [4]bool
			_, _, _ = yysep2384, yyq2384, yy2arr2384
			const yyr2384 bool = false
			yyq2384[0] = x.PodCIDR != ""
			yyq2384[1] = x.ExternalID != ""
			yyq2384[2] = x.ProviderID != ""
			yyq2384[3] = x.Unschedulable != false
			var yynn2384 int
			if yyr2384 || yy2arr2384 {
				r.EncodeArrayStart(4)
			} else {
				yynn2384 = 0
				for _, b := range yyq2384 {
					if b {
						yynn2384++
					}
				}
				r.EncodeMapStart(yynn2384)
				yynn2384 = 0
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[0] {
					yym2386 := z.EncBinary()
					_ = yym2386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2384[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2387 := z.EncBinary()
					_ = yym2387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[1] {
					yym2389 := z.EncBinary()
					_ = yym2389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2384[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2390 := z.EncBinary()
					_ = yym2390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[2] {
					yym2392 := z.EncBinary()
					_ = yym2392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2384[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2393 := z.EncBinary()
					_ = yym2393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[3] {
					yym2395 := z.EncBinary()
					_ = yym2395
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2384[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2396 := z.EncBinary()
					_ = yym2396
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2397 := z.DecBinary()
	_ = yym2397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2398 := r.ContainerType()
		if yyct2398 == codecSelferValueTypeMap1234 {
			yyl2398 := r.ReadMapStart()
			if yyl2398 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2398, d)
			}
		} else if yyct2398 == codecSelferValueTypeArray1234 {
			yyl2398 := r.ReadArrayStart()
			if yyl2398 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2398, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2399Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2399Slc
	var yyhl2399 bool = l >= 0
	for yyj2399 := 0; ; yyj2399++ {
		if yyhl2399 {
			if yyj2399 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2399Slc = r.DecodeBytes(yys2399Slc, true, true)
		yys2399 := string(yys2399Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2399 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2399)
		} // end switch yys2399
	} // end for yyj2399
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2404 int
	var yyb2404 bool
	var yyhl2404 bool = l >= 0
	yyj2404++
	if yyhl2404 {
		yyb2404 = yyj2404 > l
	} else {
		yyb2404 = r.CheckBreak()
	}
	if yyb2404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2404++
	if yyhl2404 {
		yyb2404 = yyj2404 > l
	} else {
		yyb2404 = r.CheckBreak()
	}
	if yyb2404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2404++
	if yyhl2404 {
		yyb2404 = yyj2404 > l
	} else {
		yyb2404 = r.CheckBreak()
	}
	if yyb2404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2404++
	if yyhl2404 {
		yyb2404 = yyj2404 > l
	} else {
		yyb2404 = r.CheckBreak()
	}
	if yyb2404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2404++
		if yyhl2404 {
			yyb2404 = yyj2404 > l
		} else {
			yyb2404 = r.CheckBreak()
		}
		if yyb2404 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2404-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2409 := z.EncBinary()
		_ = yym2409
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2410 := !z.EncBinary()
			yy2arr2410 := z.EncBasicHandle().StructToArray
			var yyq2410 [1]bool
			_, _, _ = yysep2410, yyq2410, yy2arr2410
			const yyr2410 bool = false
			var yynn2410 int
			if yyr2410 || yy2arr2410 {
				r.EncodeArrayStart(1)
			} else {
				yynn2410 = 1
				for _, b := range yyq2410 {
					if b {
						yynn2410++
					}
				}
				r.EncodeMapStart(yynn2410)
				yynn2410 = 0
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2412 := z.EncBinary()
				_ = yym2412
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2413 := z.EncBinary()
				_ = yym2413
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2414 := z.DecBinary()
	_ = yym2414
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2415 := r.ContainerType()
		if yyct2415 == codecSelferValueTypeMap1234 {
			yyl2415 := r.ReadMapStart()
			if yyl2415 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2415, d)
			}
		} else if yyct2415 == codecSelferValueTypeArray1234 {
			yyl2415 := r.ReadArrayStart()
			if yyl2415 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2415, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2416Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2416Slc
	var yyhl2416 bool = l >= 0
	for yyj2416 := 0; ; yyj2416++ {
		if yyhl2416 {
			if yyj2416 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2416Slc = r.DecodeBytes(yys2416Slc, true, true)
		yys2416 := string(yys2416Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2416 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2416)
		} // end switch yys2416
	} // end for yyj2416
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2418 int
	var yyb2418 bool
	var yyhl2418 bool = l >= 0
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2418++
		if yyhl2418 {
			yyb2418 = yyj2418 > l
		} else {
			yyb2418 = r.CheckBreak()
		}
		if yyb2418 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2418-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2420 := z.EncBinary()
		_ = yym2420
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2421 := !z.EncBinary()
			yy2arr2421 := z.EncBasicHandle().StructToArray
			var yyq2421 [1]bool
			_, _, _ = yysep2421, yyq2421, yy2arr2421
			const yyr2421 bool = false
			yyq2421[0] = true
			var yynn2421 int
			if yyr2421 || yy2arr2421 {
				r.EncodeArrayStart(1)
			} else {
				yynn2421 = 0
				for _, b := range yyq2421 {
					if b {
						yynn2421++
					}
				}
				r.EncodeMapStart(yynn2421)
				yynn2421 = 0
			}
			if yyr2421 || yy2arr2421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2421[0] {
					yy2423 := &x.KubeletEndpoint
					yy2423.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2421[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2424 := &x.KubeletEndpoint
					yy2424.CodecEncodeSelf(e)
				}
			}
			if yyr2421 || yy2arr2421 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2425 := z.DecBinary()
	_ = yym2425
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2426 := r.ContainerType()
		if yyct2426 == codecSelferValueTypeMap1234 {
			yyl2426 := r.ReadMapStart()
			if yyl2426 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2426, d)
			}
		} else if yyct2426 == codecSelferValueTypeArray1234 {
			yyl2426 := r.ReadArrayStart()
			if yyl2426 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2426, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2427Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2427Slc
	var yyhl2427 bool = l >= 0
	for yyj2427 := 0; ; yyj2427++ {
		if yyhl2427 {
			if yyj2427 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2427Slc = r.DecodeBytes(yys2427Slc, true, true)
		yys2427 := string(yys2427Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2427 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2428 := &x.KubeletEndpoint
				yyv2428.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2427)
		} // end switch yys2427
	} // end for yyj2427
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2429 int
	var yyb2429 bool
	var yyhl2429 bool = l >= 0
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2430 := &x.KubeletEndpoint
		yyv2430.CodecDecodeSelf(d)
	}
	for {
		yyj2429++
		if yyhl2429 {
			yyb2429 = yyj2429 > l
		} else {
			yyb2429 = r.CheckBreak()
		}
		if yyb2429 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2429-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2431 := z.EncBinary()
		_ = yym2431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2432 := !z.EncBinary()
			yy2arr2432 := z.EncBasicHandle().StructToArray
			var yyq2432 [8]bool
			_, _, _ = yysep2432, yyq2432, yy2arr2432
			const yyr2432 bool = false
			var yynn2432 int
			if yyr2432 || yy2arr2432 {
				r.EncodeArrayStart(8)
			} else {
				yynn2432 = 8
				for _, b := range yyq2432 {
					if b {
						yynn2432++
					}
				}
				r.EncodeMapStart(yynn2432)
				yynn2432 = 0
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2434 := z.EncBinary()
				_ = yym2434
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2435 := z.EncBinary()
				_ = yym2435
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2437 := z.EncBinary()
				_ = yym2437
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2438 := z.EncBinary()
				_ = yym2438
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2440 := z.EncBinary()
				_ = yym2440
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2441 := z.EncBinary()
				_ = yym2441
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2443 := z.EncBinary()
				_ = yym2443
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2444 := z.EncBinary()
				_ = yym2444
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2446 := z.EncBinary()
				_ = yym2446
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2447 := z.EncBinary()
				_ = yym2447
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2449 := z.EncBinary()
				_ = yym2449
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2450 := z.EncBinary()
				_ = yym2450
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2452 := z.EncBinary()
				_ = yym2452
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2453 := z.EncBinary()
				_ = yym2453
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2455 := z.EncBinary()
				_ = yym2455
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2456 := z.EncBinary()
				_ = yym2456
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2457 := z.DecBinary()
	_ = yym2457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2458 := r.ContainerType()
		if yyct2458 == codecSelferValueTypeMap1234 {
			yyl2458 := r.ReadMapStart()
			if yyl2458 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2458, d)
			}
		} else if yyct2458 == codecSelferValueTypeArray1234 {
			yyl2458 := r.ReadArrayStart()
			if yyl2458 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2458, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2459Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2459Slc
	var yyhl2459 bool = l >= 0
	for yyj2459 := 0; ; yyj2459++ {
		if yyhl2459 {
			if yyj2459 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2459Slc = r.DecodeBytes(yys2459Slc, true, true)
		yys2459 := string(yys2459Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2459 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2459)
		} // end switch yys2459
	} // end for yyj2459
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2468 int
	var yyb2468 bool
	var yyhl2468 bool = l >= 0
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2468++
		if yyhl2468 {
			yyb2468 = yyj2468 > l
		} else {
			yyb2468 = r.CheckBreak()
		}
		if yyb2468 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2468-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2477 := z.EncBinary()
		_ = yym2477
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2478 := !z.EncBinary()
			yy2arr2478 := z.EncBasicHandle().StructToArray
			var yyq2478 [8]bool
			_, _, _ = yysep2478, yyq2478, yy2arr2478
			const yyr2478 bool = false
			yyq2478[0] = len(x.Capacity) != 0
			yyq2478[1] = len(x.Allocatable) != 0
			yyq2478[2] = x.Phase != ""
			yyq2478[3] = len(x.Conditions) != 0
			yyq2478[4] = len(x.Addresses) != 0
			yyq2478[5] = true
			yyq2478[6] = true
			var yynn2478 int
			if yyr2478 || yy2arr2478 {
				r.EncodeArrayStart(8)
			} else {
				yynn2478 = 1
				for _, b := range yyq2478 {
					if b {
						yynn2478++
					}
				}
				r.EncodeMapStart(yynn2478)
				yynn2478 = 0
			}
			if yyr2478 || yy2arr2478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2478[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2478[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2478 || yy2arr2478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2478[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2478[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2478 || yy2arr2478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2478[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2478[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2478 || yy2arr2478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2478[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2483 := z.EncBinary()
						_ = yym2483
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2478[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2484 := z.EncBinary()
						_ = yym2484
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2478 || yy2arr2478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2478[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2486 := z.EncBinary()
						_ = yym2486
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2478[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2487 := z.EncBinary()
						_ = yym2487
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2478 || yy2arr2478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2478[5] {
					yy2489 := &x.DaemonEndpoints
					yy2489.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2478[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2490 := &x.DaemonEndpoints
					yy2490.CodecEncodeSelf(e)
				}
			}
			if yyr2478 || yy2arr2478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2478[6] {
					yy2492 := &x.NodeInfo
					yy2492.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2478[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2493 := &x.NodeInfo
					yy2493.CodecEncodeSelf(e)
				}
			}
			if yyr2478 || yy2arr2478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2495 := z.EncBinary()
					_ = yym2495
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("images"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2496 := z.EncBinary()
					_ = yym2496
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			}
			if yyr2478 || yy2arr2478 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2497 := z.DecBinary()
	_ = yym2497
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2498 := r.ContainerType()
		if yyct2498 == codecSelferValueTypeMap1234 {
			yyl2498 := r.ReadMapStart()
			if yyl2498 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2498, d)
			}
		} else if yyct2498 == codecSelferValueTypeArray1234 {
			yyl2498 := r.ReadArrayStart()
			if yyl2498 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2498, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2499Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2499Slc
	var yyhl2499 bool = l >= 0
	for yyj2499 := 0; ; yyj2499++ {
		if yyhl2499 {
			if yyj2499 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2499Slc = r.DecodeBytes(yys2499Slc, true, true)
		yys2499 := string(yys2499Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2499 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2500 := &x.Capacity
				yyv2500.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2501 := &x.Allocatable
				yyv2501.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2503 := &x.Conditions
				yym2504 := z.DecBinary()
				_ = yym2504
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2503), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2505 := &x.Addresses
				yym2506 := z.DecBinary()
				_ = yym2506
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2505), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2507 := &x.DaemonEndpoints
				yyv2507.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2508 := &x.NodeInfo
				yyv2508.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2509 := &x.Images
				yym2510 := z.DecBinary()
				_ = yym2510
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2509), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2499)
		} // end switch yys2499
	} // end for yyj2499
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2511 int
	var yyb2511 bool
	var yyhl2511 bool = l >= 0
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2512 := &x.Capacity
		yyv2512.CodecDecodeSelf(d)
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2513 := &x.Allocatable
		yyv2513.CodecDecodeSelf(d)
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2515 := &x.Conditions
		yym2516 := z.DecBinary()
		_ = yym2516
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2515), d)
		}
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2517 := &x.Addresses
		yym2518 := z.DecBinary()
		_ = yym2518
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2517), d)
		}
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2519 := &x.DaemonEndpoints
		yyv2519.CodecDecodeSelf(d)
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2520 := &x.NodeInfo
		yyv2520.CodecDecodeSelf(d)
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2521 := &x.Images
		yym2522 := z.DecBinary()
		_ = yym2522
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2521), d)
		}
	}
	for {
		yyj2511++
		if yyhl2511 {
			yyb2511 = yyj2511 > l
		} else {
			yyb2511 = r.CheckBreak()
		}
		if yyb2511 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2511-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2523 := z.EncBinary()
		_ = yym2523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2524 := !z.EncBinary()
			yy2arr2524 := z.EncBasicHandle().StructToArray
			var yyq2524 [2]bool
			_, _, _ = yysep2524, yyq2524, yy2arr2524
			const yyr2524 bool = false
			yyq2524[1] = x.Size != 0
			var yynn2524 int
			if yyr2524 || yy2arr2524 {
				r.EncodeArrayStart(2)
			} else {
				yynn2524 = 1
				for _, b := range yyq2524 {
					if b {
						yynn2524++
					}
				}
				r.EncodeMapStart(yynn2524)
				yynn2524 = 0
			}
			if yyr2524 || yy2arr2524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2526 := z.EncBinary()
					_ = yym2526
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repoTags"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2527 := z.EncBinary()
					_ = yym2527
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			}
			if yyr2524 || yy2arr2524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2524[1] {
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2524[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("size"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2530 := z.EncBinary()
					_ = yym2530
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				}
			}
			if yyr2524 || yy2arr2524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2531 := z.DecBinary()
	_ = yym2531
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2532 := r.ContainerType()
		if yyct2532 == codecSelferValueTypeMap1234 {
			yyl2532 := r.ReadMapStart()
			if yyl2532 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2532, d)
			}
		} else if yyct2532 == codecSelferValueTypeArray1234 {
			yyl2532 := r.ReadArrayStart()
			if yyl2532 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2532, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2533Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2533Slc
	var yyhl2533 bool = l >= 0
	for yyj2533 := 0; ; yyj2533++ {
		if yyhl2533 {
			if yyj2533 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2533Slc = r.DecodeBytes(yys2533Slc, true, true)
		yys2533 := string(yys2533Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2533 {
		case "repoTags":
			if r.TryDecodeAsNil() {
				x.RepoTags = nil
			} else {
				yyv2534 := &x.RepoTags
				yym2535 := z.DecBinary()
				_ = yym2535
				if false {
				} else {
					z.F.DecSliceStringX(yyv2534, false, d)
				}
			}
		case "size":
			if r.TryDecodeAsNil() {
				x.Size = 0
			} else {
				x.Size = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2533)
		} // end switch yys2533
	} // end for yyj2533
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2537 int
	var yyb2537 bool
	var yyhl2537 bool = l >= 0
	yyj2537++
	if yyhl2537 {
		yyb2537 = yyj2537 > l
	} else {
		yyb2537 = r.CheckBreak()
	}
	if yyb2537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RepoTags = nil
	} else {
		yyv2538 := &x.RepoTags
		yym2539 := z.DecBinary()
		_ = yym2539
		if false {
		} else {
			z.F.DecSliceStringX(yyv2538, false, d)
		}
	}
	yyj2537++
	if yyhl2537 {
		yyb2537 = yyj2537 > l
	} else {
		yyb2537 = r.CheckBreak()
	}
	if yyb2537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Size = 0
	} else {
		x.Size = int64(r.DecodeInt(64))
	}
	for {
		yyj2537++
		if yyhl2537 {
			yyb2537 = yyj2537 > l
		} else {
			yyb2537 = r.CheckBreak()
		}
		if yyb2537 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2537-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2541 := z.EncBinary()
	_ = yym2541
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2542 := z.DecBinary()
	_ = yym2542
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2543 := z.EncBinary()
	_ = yym2543
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2544 := z.DecBinary()
	_ = yym2544
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2545 := z.EncBinary()
		_ = yym2545
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2546 := !z.EncBinary()
			yy2arr2546 := z.EncBasicHandle().StructToArray
			var yyq2546 [6]bool
			_, _, _ = yysep2546, yyq2546, yy2arr2546
			const yyr2546 bool = false
			yyq2546[2] = true
			yyq2546[3] = true
			yyq2546[4] = x.Reason != ""
			yyq2546[5] = x.Message != ""
			var yynn2546 int
			if yyr2546 || yy2arr2546 {
				r.EncodeArrayStart(6)
			} else {
				yynn2546 = 2
				for _, b := range yyq2546 {
					if b {
						yynn2546++
					}
				}
				r.EncodeMapStart(yynn2546)
				yynn2546 = 0
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2546[2] {
					yy2550 := &x.LastHeartbeatTime
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2550) {
					} else if yym2551 {
						z.EncBinaryMarshal(yy2550)
					} else if !yym2551 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2550)
					} else {
						z.EncFallback(yy2550)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2546[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2552 := &x.LastHeartbeatTime
					yym2553 := z.EncBinary()
					_ = yym2553
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2552) {
					} else if yym2553 {
						z.EncBinaryMarshal(yy2552)
					} else if !yym2553 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2552)
					} else {
						z.EncFallback(yy2552)
					}
				}
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2546[3] {
					yy2555 := &x.LastTransitionTime
					yym2556 := z.EncBinary()
					_ = yym2556
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2555) {
					} else if yym2556 {
						z.EncBinaryMarshal(yy2555)
					} else if !yym2556 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2555)
					} else {
						z.EncFallback(yy2555)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2546[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2557 := &x.LastTransitionTime
					yym2558 := z.EncBinary()
					_ = yym2558
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2557) {
					} else if yym2558 {
						z.EncBinaryMarshal(yy2557)
					} else if !yym2558 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2557)
					} else {
						z.EncFallback(yy2557)
					}
				}
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2546[4] {
					yym2560 := z.EncBinary()
					_ = yym2560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2546[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2561 := z.EncBinary()
					_ = yym2561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2546[5] {
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2546[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2564 := z.EncBinary()
					_ = yym2564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2565 := z.DecBinary()
	_ = yym2565
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2566 := r.ContainerType()
		if yyct2566 == codecSelferValueTypeMap1234 {
			yyl2566 := r.ReadMapStart()
			if yyl2566 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2566, d)
			}
		} else if yyct2566 == codecSelferValueTypeArray1234 {
			yyl2566 := r.ReadArrayStart()
			if yyl2566 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2566, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2567Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2567Slc
	var yyhl2567 bool = l >= 0
	for yyj2567 := 0; ; yyj2567++ {
		if yyhl2567 {
			if yyj2567 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2567Slc = r.DecodeBytes(yys2567Slc, true, true)
		yys2567 := string(yys2567Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2567 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2570 := &x.LastHeartbeatTime
				yym2571 := z.DecBinary()
				_ = yym2571
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2570) {
				} else if yym2571 {
					z.DecBinaryUnmarshal(yyv2570)
				} else if !yym2571 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2570)
				} else {
					z.DecFallback(yyv2570, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2572 := &x.LastTransitionTime
				yym2573 := z.DecBinary()
				_ = yym2573
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2572) {
				} else if yym2573 {
					z.DecBinaryUnmarshal(yyv2572)
				} else if !yym2573 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2572)
				} else {
					z.DecFallback(yyv2572, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2567)
		} // end switch yys2567
	} // end for yyj2567
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2576 int
	var yyb2576 bool
	var yyhl2576 bool = l >= 0
	yyj2576++
	if yyhl2576 {
		yyb2576 = yyj2576 > l
	} else {
		yyb2576 = r.CheckBreak()
	}
	if yyb2576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2576++
	if yyhl2576 {
		yyb2576 = yyj2576 > l
	} else {
		yyb2576 = r.CheckBreak()
	}
	if yyb2576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2576++
	if yyhl2576 {
		yyb2576 = yyj2576 > l
	} else {
		yyb2576 = r.CheckBreak()
	}
	if yyb2576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2579 := &x.LastHeartbeatTime
		yym2580 := z.DecBinary()
		_ = yym2580
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2579) {
		} else if yym2580 {
			z.DecBinaryUnmarshal(yyv2579)
		} else if !yym2580 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2579)
		} else {
			z.DecFallback(yyv2579, false)
		}
	}
	yyj2576++
	if yyhl2576 {
		yyb2576 = yyj2576 > l
	} else {
		yyb2576 = r.CheckBreak()
	}
	if yyb2576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2581 := &x.LastTransitionTime
		yym2582 := z.DecBinary()
		_ = yym2582
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2581) {
		} else if yym2582 {
			z.DecBinaryUnmarshal(yyv2581)
		} else if !yym2582 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2581)
		} else {
			z.DecFallback(yyv2581, false)
		}
	}
	yyj2576++
	if yyhl2576 {
		yyb2576 = yyj2576 > l
	} else {
		yyb2576 = r.CheckBreak()
	}
	if yyb2576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2576++
	if yyhl2576 {
		yyb2576 = yyj2576 > l
	} else {
		yyb2576 = r.CheckBreak()
	}
	if yyb2576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2576++
		if yyhl2576 {
			yyb2576 = yyj2576 > l
		} else {
			yyb2576 = r.CheckBreak()
		}
		if yyb2576 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2576-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2585 := z.EncBinary()
	_ = yym2585
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2586 := z.DecBinary()
	_ = yym2586
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2587 := z.EncBinary()
		_ = yym2587
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2588 := !z.EncBinary()
			yy2arr2588 := z.EncBasicHandle().StructToArray
			var yyq2588 [2]bool
			_, _, _ = yysep2588, yyq2588, yy2arr2588
			const yyr2588 bool = false
			var yynn2588 int
			if yyr2588 || yy2arr2588 {
				r.EncodeArrayStart(2)
			} else {
				yynn2588 = 2
				for _, b := range yyq2588 {
					if b {
						yynn2588++
					}
				}
				r.EncodeMapStart(yynn2588)
				yynn2588 = 0
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2591 := z.EncBinary()
				_ = yym2591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2592 := z.EncBinary()
				_ = yym2592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2593 := z.DecBinary()
	_ = yym2593
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2594 := r.ContainerType()
		if yyct2594 == codecSelferValueTypeMap1234 {
			yyl2594 := r.ReadMapStart()
			if yyl2594 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2594, d)
			}
		} else if yyct2594 == codecSelferValueTypeArray1234 {
			yyl2594 := r.ReadArrayStart()
			if yyl2594 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2594, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2595Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2595Slc
	var yyhl2595 bool = l >= 0
	for yyj2595 := 0; ; yyj2595++ {
		if yyhl2595 {
			if yyj2595 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2595Slc = r.DecodeBytes(yys2595Slc, true, true)
		yys2595 := string(yys2595Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2595 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2595)
		} // end switch yys2595
	} // end for yyj2595
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2598 int
	var yyb2598 bool
	var yyhl2598 bool = l >= 0
	yyj2598++
	if yyhl2598 {
		yyb2598 = yyj2598 > l
	} else {
		yyb2598 = r.CheckBreak()
	}
	if yyb2598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2598++
	if yyhl2598 {
		yyb2598 = yyj2598 > l
	} else {
		yyb2598 = r.CheckBreak()
	}
	if yyb2598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2598++
		if yyhl2598 {
			yyb2598 = yyj2598 > l
		} else {
			yyb2598 = r.CheckBreak()
		}
		if yyb2598 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2598-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2601 := z.EncBinary()
		_ = yym2601
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2602 := !z.EncBinary()
			yy2arr2602 := z.EncBasicHandle().StructToArray
			var yyq2602 [1]bool
			_, _, _ = yysep2602, yyq2602, yy2arr2602
			const yyr2602 bool = false
			yyq2602[0] = len(x.Capacity) != 0
			var yynn2602 int
			if yyr2602 || yy2arr2602 {
				r.EncodeArrayStart(1)
			} else {
				yynn2602 = 0
				for _, b := range yyq2602 {
					if b {
						yynn2602++
					}
				}
				r.EncodeMapStart(yynn2602)
				yynn2602 = 0
			}
			if yyr2602 || yy2arr2602 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2602[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2602[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2602 || yy2arr2602 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2604 := z.DecBinary()
	_ = yym2604
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2605 := r.ContainerType()
		if yyct2605 == codecSelferValueTypeMap1234 {
			yyl2605 := r.ReadMapStart()
			if yyl2605 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2605, d)
			}
		} else if yyct2605 == codecSelferValueTypeArray1234 {
			yyl2605 := r.ReadArrayStart()
			if yyl2605 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2605, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2606Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2606Slc
	var yyhl2606 bool = l >= 0
	for yyj2606 := 0; ; yyj2606++ {
		if yyhl2606 {
			if yyj2606 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2606Slc = r.DecodeBytes(yys2606Slc, true, true)
		yys2606 := string(yys2606Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2606 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2607 := &x.Capacity
				yyv2607.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2606)
		} // end switch yys2606
	} // end for yyj2606
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2608 int
	var yyb2608 bool
	var yyhl2608 bool = l >= 0
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2609 := &x.Capacity
		yyv2609.CodecDecodeSelf(d)
	}
	for {
		yyj2608++
		if yyhl2608 {
			yyb2608 = yyj2608 > l
		} else {
			yyb2608 = r.CheckBreak()
		}
		if yyb2608 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2608-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2610 := z.EncBinary()
	_ = yym2610
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2611 := z.DecBinary()
	_ = yym2611
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2612 := z.EncBinary()
		_ = yym2612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2613 := z.DecBinary()
	_ = yym2613
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2614 := z.EncBinary()
		_ = yym2614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2615 := !z.EncBinary()
			yy2arr2615 := z.EncBasicHandle().StructToArray
			var yyq2615 [5]bool
			_, _, _ = yysep2615, yyq2615, yy2arr2615
			const yyr2615 bool = false
			yyq2615[0] = x.Kind != ""
			yyq2615[1] = x.APIVersion != ""
			yyq2615[2] = true
			yyq2615[3] = true
			yyq2615[4] = true
			var yynn2615 int
			if yyr2615 || yy2arr2615 {
				r.EncodeArrayStart(5)
			} else {
				yynn2615 = 0
				for _, b := range yyq2615 {
					if b {
						yynn2615++
					}
				}
				r.EncodeMapStart(yynn2615)
				yynn2615 = 0
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2615[0] {
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2615[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2615[1] {
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2615[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2615[2] {
					yy2623 := &x.ObjectMeta
					yy2623.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2615[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2624 := &x.ObjectMeta
					yy2624.CodecEncodeSelf(e)
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2615[3] {
					yy2626 := &x.Spec
					yy2626.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2615[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2627 := &x.Spec
					yy2627.CodecEncodeSelf(e)
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2615[4] {
					yy2629 := &x.Status
					yy2629.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2615[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2630 := &x.Status
					yy2630.CodecEncodeSelf(e)
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2631 := z.DecBinary()
	_ = yym2631
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2632 := r.ContainerType()
		if yyct2632 == codecSelferValueTypeMap1234 {
			yyl2632 := r.ReadMapStart()
			if yyl2632 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2632, d)
			}
		} else if yyct2632 == codecSelferValueTypeArray1234 {
			yyl2632 := r.ReadArrayStart()
			if yyl2632 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2632, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2633Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2633Slc
	var yyhl2633 bool = l >= 0
	for yyj2633 := 0; ; yyj2633++ {
		if yyhl2633 {
			if yyj2633 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2633Slc = r.DecodeBytes(yys2633Slc, true, true)
		yys2633 := string(yys2633Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2633 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2636 := &x.ObjectMeta
				yyv2636.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2637 := &x.Spec
				yyv2637.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2638 := &x.Status
				yyv2638.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2633)
		} // end switch yys2633
	} // end for yyj2633
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2639 int
	var yyb2639 bool
	var yyhl2639 bool = l >= 0
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2642 := &x.ObjectMeta
		yyv2642.CodecDecodeSelf(d)
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2643 := &x.Spec
		yyv2643.CodecDecodeSelf(d)
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2644 := &x.Status
		yyv2644.CodecDecodeSelf(d)
	}
	for {
		yyj2639++
		if yyhl2639 {
			yyb2639 = yyj2639 > l
		} else {
			yyb2639 = r.CheckBreak()
		}
		if yyb2639 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2639-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2645 := z.EncBinary()
		_ = yym2645
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2646 := !z.EncBinary()
			yy2arr2646 := z.EncBasicHandle().StructToArray
			var yyq2646 [4]bool
			_, _, _ = yysep2646, yyq2646, yy2arr2646
			const yyr2646 bool = false
			yyq2646[0] = x.Kind != ""
			yyq2646[1] = x.APIVersion != ""
			yyq2646[2] = true
			var yynn2646 int
			if yyr2646 || yy2arr2646 {
				r.EncodeArrayStart(4)
			} else {
				yynn2646 = 1
				for _, b := range yyq2646 {
					if b {
						yynn2646++
					}
				}
				r.EncodeMapStart(yynn2646)
				yynn2646 = 0
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[0] {
					yym2648 := z.EncBinary()
					_ = yym2648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2646[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[1] {
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2646[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[2] {
					yy2654 := &x.ListMeta
					yym2655 := z.EncBinary()
					_ = yym2655
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2654) {
					} else {
						z.EncFallback(yy2654)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2646[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2656 := &x.ListMeta
					yym2657 := z.EncBinary()
					_ = yym2657
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2656) {
					} else {
						z.EncFallback(yy2656)
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2659 := z.EncBinary()
					_ = yym2659
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2661 := z.DecBinary()
	_ = yym2661
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2662 := r.ContainerType()
		if yyct2662 == codecSelferValueTypeMap1234 {
			yyl2662 := r.ReadMapStart()
			if yyl2662 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2662, d)
			}
		} else if yyct2662 == codecSelferValueTypeArray1234 {
			yyl2662 := r.ReadArrayStart()
			if yyl2662 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2662, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2663Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2663Slc
	var yyhl2663 bool = l >= 0
	for yyj2663 := 0; ; yyj2663++ {
		if yyhl2663 {
			if yyj2663 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2663Slc = r.DecodeBytes(yys2663Slc, true, true)
		yys2663 := string(yys2663Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2663 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2666 := &x.ListMeta
				yym2667 := z.DecBinary()
				_ = yym2667
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2666) {
				} else {
					z.DecFallback(yyv2666, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2668 := &x.Items
				yym2669 := z.DecBinary()
				_ = yym2669
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2668), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2663)
		} // end switch yys2663
	} // end for yyj2663
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2670 int
	var yyb2670 bool
	var yyhl2670 bool = l >= 0
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2673 := &x.ListMeta
		yym2674 := z.DecBinary()
		_ = yym2674
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2673) {
		} else {
			z.DecFallback(yyv2673, false)
		}
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2675 := &x.Items
		yym2676 := z.DecBinary()
		_ = yym2676
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2675), d)
		}
	}
	for {
		yyj2670++
		if yyhl2670 {
			yyb2670 = yyj2670 > l
		} else {
			yyb2670 = r.CheckBreak()
		}
		if yyb2670 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2670-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2677 := z.EncBinary()
		_ = yym2677
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2678 := !z.EncBinary()
			yy2arr2678 := z.EncBasicHandle().StructToArray
			var yyq2678 [1]bool
			_, _, _ = yysep2678, yyq2678, yy2arr2678
			const yyr2678 bool = false
			var yynn2678 int
			if yyr2678 || yy2arr2678 {
				r.EncodeArrayStart(1)
			} else {
				yynn2678 = 1
				for _, b := range yyq2678 {
					if b {
						yynn2678++
					}
				}
				r.EncodeMapStart(yynn2678)
				yynn2678 = 0
			}
			if yyr2678 || yy2arr2678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2680 := z.EncBinary()
					_ = yym2680
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2681 := z.EncBinary()
					_ = yym2681
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr2678 || yy2arr2678 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2682 := z.DecBinary()
	_ = yym2682
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2683 := r.ContainerType()
		if yyct2683 == codecSelferValueTypeMap1234 {
			yyl2683 := r.ReadMapStart()
			if yyl2683 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2683, d)
			}
		} else if yyct2683 == codecSelferValueTypeArray1234 {
			yyl2683 := r.ReadArrayStart()
			if yyl2683 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2683, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2684Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2684Slc
	var yyhl2684 bool = l >= 0
	for yyj2684 := 0; ; yyj2684++ {
		if yyhl2684 {
			if yyj2684 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2684Slc = r.DecodeBytes(yys2684Slc, true, true)
		yys2684 := string(yys2684Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2684 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2685 := &x.Finalizers
				yym2686 := z.DecBinary()
				_ = yym2686
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2685), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2684)
		} // end switch yys2684
	} // end for yyj2684
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2687 int
	var yyb2687 bool
	var yyhl2687 bool = l >= 0
	yyj2687++
	if yyhl2687 {
		yyb2687 = yyj2687 > l
	} else {
		yyb2687 = r.CheckBreak()
	}
	if yyb2687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2688 := &x.Finalizers
		yym2689 := z.DecBinary()
		_ = yym2689
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2688), d)
		}
	}
	for {
		yyj2687++
		if yyhl2687 {
			yyb2687 = yyj2687 > l
		} else {
			yyb2687 = r.CheckBreak()
		}
		if yyb2687 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2687-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2690 := z.EncBinary()
	_ = yym2690
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2691 := z.DecBinary()
	_ = yym2691
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2692 := z.EncBinary()
		_ = yym2692
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2693 := !z.EncBinary()
			yy2arr2693 := z.EncBasicHandle().StructToArray
			var yyq2693 [1]bool
			_, _, _ = yysep2693, yyq2693, yy2arr2693
			const yyr2693 bool = false
			yyq2693[0] = x.Phase != ""
			var yynn2693 int
			if yyr2693 || yy2arr2693 {
				r.EncodeArrayStart(1)
			} else {
				yynn2693 = 0
				for _, b := range yyq2693 {
					if b {
						yynn2693++
					}
				}
				r.EncodeMapStart(yynn2693)
				yynn2693 = 0
			}
			if yyr2693 || yy2arr2693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2693[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2693[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2693 || yy2arr2693 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2695 := z.DecBinary()
	_ = yym2695
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2696 := r.ContainerType()
		if yyct2696 == codecSelferValueTypeMap1234 {
			yyl2696 := r.ReadMapStart()
			if yyl2696 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2696, d)
			}
		} else if yyct2696 == codecSelferValueTypeArray1234 {
			yyl2696 := r.ReadArrayStart()
			if yyl2696 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2696, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2697Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2697Slc
	var yyhl2697 bool = l >= 0
	for yyj2697 := 0; ; yyj2697++ {
		if yyhl2697 {
			if yyj2697 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2697Slc = r.DecodeBytes(yys2697Slc, true, true)
		yys2697 := string(yys2697Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2697 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2697)
		} // end switch yys2697
	} // end for yyj2697
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2699 int
	var yyb2699 bool
	var yyhl2699 bool = l >= 0
	yyj2699++
	if yyhl2699 {
		yyb2699 = yyj2699 > l
	} else {
		yyb2699 = r.CheckBreak()
	}
	if yyb2699 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2699++
		if yyhl2699 {
			yyb2699 = yyj2699 > l
		} else {
			yyb2699 = r.CheckBreak()
		}
		if yyb2699 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2699-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2701 := z.EncBinary()
	_ = yym2701
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2702 := z.DecBinary()
	_ = yym2702
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2703 := z.EncBinary()
		_ = yym2703
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2704 := !z.EncBinary()
			yy2arr2704 := z.EncBasicHandle().StructToArray
			var yyq2704 [5]bool
			_, _, _ = yysep2704, yyq2704, yy2arr2704
			const yyr2704 bool = false
			yyq2704[0] = x.Kind != ""
			yyq2704[1] = x.APIVersion != ""
			yyq2704[2] = true
			yyq2704[3] = true
			yyq2704[4] = true
			var yynn2704 int
			if yyr2704 || yy2arr2704 {
				r.EncodeArrayStart(5)
			} else {
				yynn2704 = 0
				for _, b := range yyq2704 {
					if b {
						yynn2704++
					}
				}
				r.EncodeMapStart(yynn2704)
				yynn2704 = 0
			}
			if yyr2704 || yy2arr2704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2704[0] {
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2704[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2707 := z.EncBinary()
					_ = yym2707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2704 || yy2arr2704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2704[1] {
					yym2709 := z.EncBinary()
					_ = yym2709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2704[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2704 || yy2arr2704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2704[2] {
					yy2712 := &x.ObjectMeta
					yy2712.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2704[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2713 := &x.ObjectMeta
					yy2713.CodecEncodeSelf(e)
				}
			}
			if yyr2704 || yy2arr2704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2704[3] {
					yy2715 := &x.Spec
					yy2715.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2704[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2716 := &x.Spec
					yy2716.CodecEncodeSelf(e)
				}
			}
			if yyr2704 || yy2arr2704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2704[4] {
					yy2718 := &x.Status
					yy2718.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2704[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2719 := &x.Status
					yy2719.CodecEncodeSelf(e)
				}
			}
			if yyr2704 || yy2arr2704 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2720 := z.DecBinary()
	_ = yym2720
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2721 := r.ContainerType()
		if yyct2721 == codecSelferValueTypeMap1234 {
			yyl2721 := r.ReadMapStart()
			if yyl2721 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2721, d)
			}
		} else if yyct2721 == codecSelferValueTypeArray1234 {
			yyl2721 := r.ReadArrayStart()
			if yyl2721 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2721, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2722Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2722Slc
	var yyhl2722 bool = l >= 0
	for yyj2722 := 0; ; yyj2722++ {
		if yyhl2722 {
			if yyj2722 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2722Slc = r.DecodeBytes(yys2722Slc, true, true)
		yys2722 := string(yys2722Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2722 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2725 := &x.ObjectMeta
				yyv2725.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2726 := &x.Spec
				yyv2726.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2727 := &x.Status
				yyv2727.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2722)
		} // end switch yys2722
	} // end for yyj2722
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2728 int
	var yyb2728 bool
	var yyhl2728 bool = l >= 0
	yyj2728++
	if yyhl2728 {
		yyb2728 = yyj2728 > l
	} else {
		yyb2728 = r.CheckBreak()
	}
	if yyb2728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2728++
	if yyhl2728 {
		yyb2728 = yyj2728 > l
	} else {
		yyb2728 = r.CheckBreak()
	}
	if yyb2728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2728++
	if yyhl2728 {
		yyb2728 = yyj2728 > l
	} else {
		yyb2728 = r.CheckBreak()
	}
	if yyb2728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2731 := &x.ObjectMeta
		yyv2731.CodecDecodeSelf(d)
	}
	yyj2728++
	if yyhl2728 {
		yyb2728 = yyj2728 > l
	} else {
		yyb2728 = r.CheckBreak()
	}
	if yyb2728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2732 := &x.Spec
		yyv2732.CodecDecodeSelf(d)
	}
	yyj2728++
	if yyhl2728 {
		yyb2728 = yyj2728 > l
	} else {
		yyb2728 = r.CheckBreak()
	}
	if yyb2728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2733 := &x.Status
		yyv2733.CodecDecodeSelf(d)
	}
	for {
		yyj2728++
		if yyhl2728 {
			yyb2728 = yyj2728 > l
		} else {
			yyb2728 = r.CheckBreak()
		}
		if yyb2728 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2728-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2734 := z.EncBinary()
		_ = yym2734
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2735 := !z.EncBinary()
			yy2arr2735 := z.EncBasicHandle().StructToArray
			var yyq2735 [4]bool
			_, _, _ = yysep2735, yyq2735, yy2arr2735
			const yyr2735 bool = false
			yyq2735[0] = x.Kind != ""
			yyq2735[1] = x.APIVersion != ""
			yyq2735[2] = true
			var yynn2735 int
			if yyr2735 || yy2arr2735 {
				r.EncodeArrayStart(4)
			} else {
				yynn2735 = 1
				for _, b := range yyq2735 {
					if b {
						yynn2735++
					}
				}
				r.EncodeMapStart(yynn2735)
				yynn2735 = 0
			}
			if yyr2735 || yy2arr2735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2735[0] {
					yym2737 := z.EncBinary()
					_ = yym2737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2735[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2735 || yy2arr2735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2735[1] {
					yym2740 := z.EncBinary()
					_ = yym2740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2735[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2741 := z.EncBinary()
					_ = yym2741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2735 || yy2arr2735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2735[2] {
					yy2743 := &x.ListMeta
					yym2744 := z.EncBinary()
					_ = yym2744
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2743) {
					} else {
						z.EncFallback(yy2743)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2735[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2745 := &x.ListMeta
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2745) {
					} else {
						z.EncFallback(yy2745)
					}
				}
			}
			if yyr2735 || yy2arr2735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2748 := z.EncBinary()
					_ = yym2748
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2735 || yy2arr2735 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2750 := z.DecBinary()
	_ = yym2750
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2751 := r.ContainerType()
		if yyct2751 == codecSelferValueTypeMap1234 {
			yyl2751 := r.ReadMapStart()
			if yyl2751 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2751, d)
			}
		} else if yyct2751 == codecSelferValueTypeArray1234 {
			yyl2751 := r.ReadArrayStart()
			if yyl2751 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2751, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2752Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2752Slc
	var yyhl2752 bool = l >= 0
	for yyj2752 := 0; ; yyj2752++ {
		if yyhl2752 {
			if yyj2752 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2752Slc = r.DecodeBytes(yys2752Slc, true, true)
		yys2752 := string(yys2752Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2752 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2755 := &x.ListMeta
				yym2756 := z.DecBinary()
				_ = yym2756
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2755) {
				} else {
					z.DecFallback(yyv2755, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2757 := &x.Items
				yym2758 := z.DecBinary()
				_ = yym2758
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2757), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2752)
		} // end switch yys2752
	} // end for yyj2752
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2759 int
	var yyb2759 bool
	var yyhl2759 bool = l >= 0
	yyj2759++
	if yyhl2759 {
		yyb2759 = yyj2759 > l
	} else {
		yyb2759 = r.CheckBreak()
	}
	if yyb2759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2759++
	if yyhl2759 {
		yyb2759 = yyj2759 > l
	} else {
		yyb2759 = r.CheckBreak()
	}
	if yyb2759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2759++
	if yyhl2759 {
		yyb2759 = yyj2759 > l
	} else {
		yyb2759 = r.CheckBreak()
	}
	if yyb2759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2762 := &x.ListMeta
		yym2763 := z.DecBinary()
		_ = yym2763
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2762) {
		} else {
			z.DecFallback(yyv2762, false)
		}
	}
	yyj2759++
	if yyhl2759 {
		yyb2759 = yyj2759 > l
	} else {
		yyb2759 = r.CheckBreak()
	}
	if yyb2759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2764 := &x.Items
		yym2765 := z.DecBinary()
		_ = yym2765
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2764), d)
		}
	}
	for {
		yyj2759++
		if yyhl2759 {
			yyb2759 = yyj2759 > l
		} else {
			yyb2759 = r.CheckBreak()
		}
		if yyb2759 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2759-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2766 := z.EncBinary()
		_ = yym2766
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2767 := !z.EncBinary()
			yy2arr2767 := z.EncBasicHandle().StructToArray
			var yyq2767 [4]bool
			_, _, _ = yysep2767, yyq2767, yy2arr2767
			const yyr2767 bool = false
			yyq2767[0] = x.Kind != ""
			yyq2767[1] = x.APIVersion != ""
			yyq2767[2] = true
			var yynn2767 int
			if yyr2767 || yy2arr2767 {
				r.EncodeArrayStart(4)
			} else {
				yynn2767 = 1
				for _, b := range yyq2767 {
					if b {
						yynn2767++
					}
				}
				r.EncodeMapStart(yynn2767)
				yynn2767 = 0
			}
			if yyr2767 || yy2arr2767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2767[0] {
					yym2769 := z.EncBinary()
					_ = yym2769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2767[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2770 := z.EncBinary()
					_ = yym2770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2767 || yy2arr2767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2767[1] {
					yym2772 := z.EncBinary()
					_ = yym2772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2767[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2773 := z.EncBinary()
					_ = yym2773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2767 || yy2arr2767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2767[2] {
					yy2775 := &x.ObjectMeta
					yy2775.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2767[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2776 := &x.ObjectMeta
					yy2776.CodecEncodeSelf(e)
				}
			}
			if yyr2767 || yy2arr2767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2778 := &x.Target
				yy2778.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2779 := &x.Target
				yy2779.CodecEncodeSelf(e)
			}
			if yyr2767 || yy2arr2767 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2780 := z.DecBinary()
	_ = yym2780
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2781 := r.ContainerType()
		if yyct2781 == codecSelferValueTypeMap1234 {
			yyl2781 := r.ReadMapStart()
			if yyl2781 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2781, d)
			}
		} else if yyct2781 == codecSelferValueTypeArray1234 {
			yyl2781 := r.ReadArrayStart()
			if yyl2781 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2781, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2782Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2782Slc
	var yyhl2782 bool = l >= 0
	for yyj2782 := 0; ; yyj2782++ {
		if yyhl2782 {
			if yyj2782 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2782Slc = r.DecodeBytes(yys2782Slc, true, true)
		yys2782 := string(yys2782Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2782 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2785 := &x.ObjectMeta
				yyv2785.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2786 := &x.Target
				yyv2786.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2782)
		} // end switch yys2782
	} // end for yyj2782
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2787 int
	var yyb2787 bool
	var yyhl2787 bool = l >= 0
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2790 := &x.ObjectMeta
		yyv2790.CodecDecodeSelf(d)
	}
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2791 := &x.Target
		yyv2791.CodecDecodeSelf(d)
	}
	for {
		yyj2787++
		if yyhl2787 {
			yyb2787 = yyj2787 > l
		} else {
			yyb2787 = r.CheckBreak()
		}
		if yyb2787 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2787-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2792 := z.EncBinary()
		_ = yym2792
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2793 := !z.EncBinary()
			yy2arr2793 := z.EncBasicHandle().StructToArray
			var yyq2793 [3]bool
			_, _, _ = yysep2793, yyq2793, yy2arr2793
			const yyr2793 bool = false
			yyq2793[0] = x.Kind != ""
			yyq2793[1] = x.APIVersion != ""
			var yynn2793 int
			if yyr2793 || yy2arr2793 {
				r.EncodeArrayStart(3)
			} else {
				yynn2793 = 1
				for _, b := range yyq2793 {
					if b {
						yynn2793++
					}
				}
				r.EncodeMapStart(yynn2793)
				yynn2793 = 0
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2793[0] {
					yym2795 := z.EncBinary()
					_ = yym2795
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2793[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2793[1] {
					yym2798 := z.EncBinary()
					_ = yym2798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2793[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2801 := *x.GracePeriodSeconds
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeInt(int64(yy2801))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2803 := *x.GracePeriodSeconds
					yym2804 := z.EncBinary()
					_ = yym2804
					if false {
					} else {
						r.EncodeInt(int64(yy2803))
					}
				}
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2805 := z.DecBinary()
	_ = yym2805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2806 := r.ContainerType()
		if yyct2806 == codecSelferValueTypeMap1234 {
			yyl2806 := r.ReadMapStart()
			if yyl2806 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2806, d)
			}
		} else if yyct2806 == codecSelferValueTypeArray1234 {
			yyl2806 := r.ReadArrayStart()
			if yyl2806 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2807Slc
	var yyhl2807 bool = l >= 0
	for yyj2807 := 0; ; yyj2807++ {
		if yyhl2807 {
			if yyj2807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2807Slc = r.DecodeBytes(yys2807Slc, true, true)
		yys2807 := string(yys2807Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2807 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2811 := z.DecBinary()
				_ = yym2811
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2807)
		} // end switch yys2807
	} // end for yyj2807
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2812 int
	var yyb2812 bool
	var yyhl2812 bool = l >= 0
	yyj2812++
	if yyhl2812 {
		yyb2812 = yyj2812 > l
	} else {
		yyb2812 = r.CheckBreak()
	}
	if yyb2812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2812++
	if yyhl2812 {
		yyb2812 = yyj2812 > l
	} else {
		yyb2812 = r.CheckBreak()
	}
	if yyb2812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2812++
	if yyhl2812 {
		yyb2812 = yyj2812 > l
	} else {
		yyb2812 = r.CheckBreak()
	}
	if yyb2812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2816 := z.DecBinary()
		_ = yym2816
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2812++
		if yyhl2812 {
			yyb2812 = yyj2812 > l
		} else {
			yyb2812 = r.CheckBreak()
		}
		if yyb2812 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2812-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2817 := z.EncBinary()
		_ = yym2817
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2818 := !z.EncBinary()
			yy2arr2818 := z.EncBasicHandle().StructToArray
			var yyq2818 [4]bool
			_, _, _ = yysep2818, yyq2818, yy2arr2818
			const yyr2818 bool = false
			yyq2818[0] = x.Kind != ""
			yyq2818[1] = x.APIVersion != ""
			var yynn2818 int
			if yyr2818 || yy2arr2818 {
				r.EncodeArrayStart(4)
			} else {
				yynn2818 = 2
				for _, b := range yyq2818 {
					if b {
						yynn2818++
					}
				}
				r.EncodeMapStart(yynn2818)
				yynn2818 = 0
			}
			if yyr2818 || yy2arr2818 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2818[0] {
					yym2820 := z.EncBinary()
					_ = yym2820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2818[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2818 || yy2arr2818 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2818[1] {
					yym2823 := z.EncBinary()
					_ = yym2823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2818[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2824 := z.EncBinary()
					_ = yym2824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2818 || yy2arr2818 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2826 := z.EncBinary()
				_ = yym2826
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2827 := z.EncBinary()
				_ = yym2827
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr2818 || yy2arr2818 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2829 := z.EncBinary()
				_ = yym2829
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2830 := z.EncBinary()
				_ = yym2830
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr2818 || yy2arr2818 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2831 := z.DecBinary()
	_ = yym2831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2832 := r.ContainerType()
		if yyct2832 == codecSelferValueTypeMap1234 {
			yyl2832 := r.ReadMapStart()
			if yyl2832 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2832, d)
			}
		} else if yyct2832 == codecSelferValueTypeArray1234 {
			yyl2832 := r.ReadArrayStart()
			if yyl2832 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2833Slc
	var yyhl2833 bool = l >= 0
	for yyj2833 := 0; ; yyj2833++ {
		if yyhl2833 {
			if yyj2833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2833Slc = r.DecodeBytes(yys2833Slc, true, true)
		yys2833 := string(yys2833Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2833 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2833)
		} // end switch yys2833
	} // end for yyj2833
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2838 int
	var yyb2838 bool
	var yyhl2838 bool = l >= 0
	yyj2838++
	if yyhl2838 {
		yyb2838 = yyj2838 > l
	} else {
		yyb2838 = r.CheckBreak()
	}
	if yyb2838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2838++
	if yyhl2838 {
		yyb2838 = yyj2838 > l
	} else {
		yyb2838 = r.CheckBreak()
	}
	if yyb2838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2838++
	if yyhl2838 {
		yyb2838 = yyj2838 > l
	} else {
		yyb2838 = r.CheckBreak()
	}
	if yyb2838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj2838++
	if yyhl2838 {
		yyb2838 = yyj2838 > l
	} else {
		yyb2838 = r.CheckBreak()
	}
	if yyb2838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj2838++
		if yyhl2838 {
			yyb2838 = yyj2838 > l
		} else {
			yyb2838 = r.CheckBreak()
		}
		if yyb2838 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2838-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2843 := z.EncBinary()
		_ = yym2843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2844 := !z.EncBinary()
			yy2arr2844 := z.EncBasicHandle().StructToArray
			var yyq2844 [7]bool
			_, _, _ = yysep2844, yyq2844, yy2arr2844
			const yyr2844 bool = false
			yyq2844[0] = x.Kind != ""
			yyq2844[1] = x.APIVersion != ""
			var yynn2844 int
			if yyr2844 || yy2arr2844 {
				r.EncodeArrayStart(7)
			} else {
				yynn2844 = 5
				for _, b := range yyq2844 {
					if b {
						yynn2844++
					}
				}
				r.EncodeMapStart(yynn2844)
				yynn2844 = 0
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[0] {
					yym2846 := z.EncBinary()
					_ = yym2846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2844[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2847 := z.EncBinary()
					_ = yym2847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[1] {
					yym2849 := z.EncBinary()
					_ = yym2849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2844[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2852 := z.EncBinary()
					_ = yym2852
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2855 := z.EncBinary()
					_ = yym2855
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2856 := z.EncBinary()
					_ = yym2856
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2858 := z.EncBinary()
				_ = yym2858
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2859 := z.EncBinary()
				_ = yym2859
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2861 := z.EncBinary()
				_ = yym2861
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2862 := z.EncBinary()
				_ = yym2862
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2864 := *x.TimeoutSeconds
					yym2865 := z.EncBinary()
					_ = yym2865
					if false {
					} else {
						r.EncodeInt(int64(yy2864))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2866 := *x.TimeoutSeconds
					yym2867 := z.EncBinary()
					_ = yym2867
					if false {
					} else {
						r.EncodeInt(int64(yy2866))
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2868 := z.DecBinary()
	_ = yym2868
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2869 := r.ContainerType()
		if yyct2869 == codecSelferValueTypeMap1234 {
			yyl2869 := r.ReadMapStart()
			if yyl2869 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2869, d)
			}
		} else if yyct2869 == codecSelferValueTypeArray1234 {
			yyl2869 := r.ReadArrayStart()
			if yyl2869 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2869, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2870Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2870Slc
	var yyhl2870 bool = l >= 0
	for yyj2870 := 0; ; yyj2870++ {
		if yyhl2870 {
			if yyj2870 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2870Slc = r.DecodeBytes(yys2870Slc, true, true)
		yys2870 := string(yys2870Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2870 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv2873 := &x.LabelSelector
				yym2874 := z.DecBinary()
				_ = yym2874
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2873) {
				} else {
					z.DecFallback(yyv2873, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv2875 := &x.FieldSelector
				yym2876 := z.DecBinary()
				_ = yym2876
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2875) {
				} else {
					z.DecFallback(yyv2875, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2880 := z.DecBinary()
				_ = yym2880
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2870)
		} // end switch yys2870
	} // end for yyj2870
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2881 int
	var yyb2881 bool
	var yyhl2881 bool = l >= 0
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv2884 := &x.LabelSelector
		yym2885 := z.DecBinary()
		_ = yym2885
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2884) {
		} else {
			z.DecFallback(yyv2884, true)
		}
	}
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv2886 := &x.FieldSelector
		yym2887 := z.DecBinary()
		_ = yym2887
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2886) {
		} else {
			z.DecFallback(yyv2886, true)
		}
	}
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2891 := z.DecBinary()
		_ = yym2891
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2881++
		if yyhl2881 {
			yyb2881 = yyj2881 > l
		} else {
			yyb2881 = r.CheckBreak()
		}
		if yyb2881 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2881-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2892 := z.EncBinary()
		_ = yym2892
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2893 := !z.EncBinary()
			yy2arr2893 := z.EncBasicHandle().StructToArray
			var yyq2893 [10]bool
			_, _, _ = yysep2893, yyq2893, yy2arr2893
			const yyr2893 bool = false
			yyq2893[0] = x.Kind != ""
			yyq2893[1] = x.APIVersion != ""
			var yynn2893 int
			if yyr2893 || yy2arr2893 {
				r.EncodeArrayStart(10)
			} else {
				yynn2893 = 8
				for _, b := range yyq2893 {
					if b {
						yynn2893++
					}
				}
				r.EncodeMapStart(yynn2893)
				yynn2893 = 0
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2893[0] {
					yym2895 := z.EncBinary()
					_ = yym2895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2893[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2896 := z.EncBinary()
					_ = yym2896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2893[1] {
					yym2898 := z.EncBinary()
					_ = yym2898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2893[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2901 := z.EncBinary()
				_ = yym2901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2902 := z.EncBinary()
				_ = yym2902
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2904 := z.EncBinary()
				_ = yym2904
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2905 := z.EncBinary()
				_ = yym2905
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2907 := z.EncBinary()
				_ = yym2907
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2908 := z.EncBinary()
				_ = yym2908
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2910 := *x.SinceSeconds
					yym2911 := z.EncBinary()
					_ = yym2911
					if false {
					} else {
						r.EncodeInt(int64(yy2910))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2912 := *x.SinceSeconds
					yym2913 := z.EncBinary()
					_ = yym2913
					if false {
					} else {
						r.EncodeInt(int64(yy2912))
					}
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2915 := z.EncBinary()
					_ = yym2915
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2915 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2915 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2916 := z.EncBinary()
					_ = yym2916
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2916 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2916 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2918 := z.EncBinary()
				_ = yym2918
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2919 := z.EncBinary()
				_ = yym2919
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2921 := *x.TailLines
					yym2922 := z.EncBinary()
					_ = yym2922
					if false {
					} else {
						r.EncodeInt(int64(yy2921))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2923 := *x.TailLines
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						r.EncodeInt(int64(yy2923))
					}
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2926 := *x.LimitBytes
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else {
						r.EncodeInt(int64(yy2926))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2928 := *x.LimitBytes
					yym2929 := z.EncBinary()
					_ = yym2929
					if false {
					} else {
						r.EncodeInt(int64(yy2928))
					}
				}
			}
			if yyr2893 || yy2arr2893 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2930 := z.DecBinary()
	_ = yym2930
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2931 := r.ContainerType()
		if yyct2931 == codecSelferValueTypeMap1234 {
			yyl2931 := r.ReadMapStart()
			if yyl2931 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2931, d)
			}
		} else if yyct2931 == codecSelferValueTypeArray1234 {
			yyl2931 := r.ReadArrayStart()
			if yyl2931 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2931, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2932Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2932Slc
	var yyhl2932 bool = l >= 0
	for yyj2932 := 0; ; yyj2932++ {
		if yyhl2932 {
			if yyj2932 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2932Slc = r.DecodeBytes(yys2932Slc, true, true)
		yys2932 := string(yys2932Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2932 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2939 := z.DecBinary()
				_ = yym2939
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2941 := z.DecBinary()
				_ = yym2941
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2941 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2941 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2944 := z.DecBinary()
				_ = yym2944
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2946 := z.DecBinary()
				_ = yym2946
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2932)
		} // end switch yys2932
	} // end for yyj2932
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2947 int
	var yyb2947 bool
	var yyhl2947 bool = l >= 0
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2954 := z.DecBinary()
		_ = yym2954
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2956 := z.DecBinary()
		_ = yym2956
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2956 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2956 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2959 := z.DecBinary()
		_ = yym2959
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2961 := z.DecBinary()
		_ = yym2961
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2947++
		if yyhl2947 {
			yyb2947 = yyj2947 > l
		} else {
			yyb2947 = r.CheckBreak()
		}
		if yyb2947 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2947-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2962 := z.EncBinary()
		_ = yym2962
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2963 := !z.EncBinary()
			yy2arr2963 := z.EncBasicHandle().StructToArray
			var yyq2963 [7]bool
			_, _, _ = yysep2963, yyq2963, yy2arr2963
			const yyr2963 bool = false
			yyq2963[0] = x.Kind != ""
			yyq2963[1] = x.APIVersion != ""
			yyq2963[2] = x.Stdin != false
			yyq2963[3] = x.Stdout != false
			yyq2963[4] = x.Stderr != false
			yyq2963[5] = x.TTY != false
			yyq2963[6] = x.Container != ""
			var yynn2963 int
			if yyr2963 || yy2arr2963 {
				r.EncodeArrayStart(7)
			} else {
				yynn2963 = 0
				for _, b := range yyq2963 {
					if b {
						yynn2963++
					}
				}
				r.EncodeMapStart(yynn2963)
				yynn2963 = 0
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[0] {
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2963[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2966 := z.EncBinary()
					_ = yym2966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[1] {
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2963[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2969 := z.EncBinary()
					_ = yym2969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[2] {
					yym2971 := z.EncBinary()
					_ = yym2971
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2963[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2972 := z.EncBinary()
					_ = yym2972
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[3] {
					yym2974 := z.EncBinary()
					_ = yym2974
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2963[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2975 := z.EncBinary()
					_ = yym2975
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[4] {
					yym2977 := z.EncBinary()
					_ = yym2977
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2963[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2978 := z.EncBinary()
					_ = yym2978
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[5] {
					yym2980 := z.EncBinary()
					_ = yym2980
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2963[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2981 := z.EncBinary()
					_ = yym2981
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[6] {
					yym2983 := z.EncBinary()
					_ = yym2983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2963[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2984 := z.EncBinary()
					_ = yym2984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2985 := z.DecBinary()
	_ = yym2985
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2986 := r.ContainerType()
		if yyct2986 == codecSelferValueTypeMap1234 {
			yyl2986 := r.ReadMapStart()
			if yyl2986 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2986, d)
			}
		} else if yyct2986 == codecSelferValueTypeArray1234 {
			yyl2986 := r.ReadArrayStart()
			if yyl2986 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2986, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2987Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2987Slc
	var yyhl2987 bool = l >= 0
	for yyj2987 := 0; ; yyj2987++ {
		if yyhl2987 {
			if yyj2987 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2987Slc = r.DecodeBytes(yys2987Slc, true, true)
		yys2987 := string(yys2987Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2987 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2987)
		} // end switch yys2987
	} // end for yyj2987
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2995 int
	var yyb2995 bool
	var yyhl2995 bool = l >= 0
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2995++
		if yyhl2995 {
			yyb2995 = yyj2995 > l
		} else {
			yyb2995 = r.CheckBreak()
		}
		if yyb2995 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2995-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3003 := z.EncBinary()
		_ = yym3003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3004 := !z.EncBinary()
			yy2arr3004 := z.EncBasicHandle().StructToArray
			var yyq3004 [8]bool
			_, _, _ = yysep3004, yyq3004, yy2arr3004
			const yyr3004 bool = false
			yyq3004[0] = x.Kind != ""
			yyq3004[1] = x.APIVersion != ""
			var yynn3004 int
			if yyr3004 || yy2arr3004 {
				r.EncodeArrayStart(8)
			} else {
				yynn3004 = 6
				for _, b := range yyq3004 {
					if b {
						yynn3004++
					}
				}
				r.EncodeMapStart(yynn3004)
				yynn3004 = 0
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3004[0] {
					yym3006 := z.EncBinary()
					_ = yym3006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3004[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3007 := z.EncBinary()
					_ = yym3007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3004[1] {
					yym3009 := z.EncBinary()
					_ = yym3009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3004[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3010 := z.EncBinary()
					_ = yym3010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3012 := z.EncBinary()
				_ = yym3012
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3013 := z.EncBinary()
				_ = yym3013
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3015 := z.EncBinary()
				_ = yym3015
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3016 := z.EncBinary()
				_ = yym3016
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3018 := z.EncBinary()
				_ = yym3018
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3019 := z.EncBinary()
				_ = yym3019
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3021 := z.EncBinary()
				_ = yym3021
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3022 := z.EncBinary()
				_ = yym3022
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3024 := z.EncBinary()
				_ = yym3024
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3025 := z.EncBinary()
				_ = yym3025
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3027 := z.EncBinary()
					_ = yym3027
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3028 := z.EncBinary()
					_ = yym3028
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3004 || yy2arr3004 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3029 := z.DecBinary()
	_ = yym3029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3030 := r.ContainerType()
		if yyct3030 == codecSelferValueTypeMap1234 {
			yyl3030 := r.ReadMapStart()
			if yyl3030 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3030, d)
			}
		} else if yyct3030 == codecSelferValueTypeArray1234 {
			yyl3030 := r.ReadArrayStart()
			if yyl3030 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3030, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3031Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3031Slc
	var yyhl3031 bool = l >= 0
	for yyj3031 := 0; ; yyj3031++ {
		if yyhl3031 {
			if yyj3031 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3031Slc = r.DecodeBytes(yys3031Slc, true, true)
		yys3031 := string(yys3031Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3031 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3039 := &x.Command
				yym3040 := z.DecBinary()
				_ = yym3040
				if false {
				} else {
					z.F.DecSliceStringX(yyv3039, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3031)
		} // end switch yys3031
	} // end for yyj3031
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3041 int
	var yyb3041 bool
	var yyhl3041 bool = l >= 0
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3049 := &x.Command
		yym3050 := z.DecBinary()
		_ = yym3050
		if false {
		} else {
			z.F.DecSliceStringX(yyv3049, false, d)
		}
	}
	for {
		yyj3041++
		if yyhl3041 {
			yyb3041 = yyj3041 > l
		} else {
			yyb3041 = r.CheckBreak()
		}
		if yyb3041 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3041-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3051 := z.EncBinary()
		_ = yym3051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3052 := !z.EncBinary()
			yy2arr3052 := z.EncBasicHandle().StructToArray
			var yyq3052 [3]bool
			_, _, _ = yysep3052, yyq3052, yy2arr3052
			const yyr3052 bool = false
			yyq3052[0] = x.Kind != ""
			yyq3052[1] = x.APIVersion != ""
			var yynn3052 int
			if yyr3052 || yy2arr3052 {
				r.EncodeArrayStart(3)
			} else {
				yynn3052 = 1
				for _, b := range yyq3052 {
					if b {
						yynn3052++
					}
				}
				r.EncodeMapStart(yynn3052)
				yynn3052 = 0
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3052[0] {
					yym3054 := z.EncBinary()
					_ = yym3054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3052[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3055 := z.EncBinary()
					_ = yym3055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3052[1] {
					yym3057 := z.EncBinary()
					_ = yym3057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3052[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3058 := z.EncBinary()
					_ = yym3058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3060 := z.EncBinary()
				_ = yym3060
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3061 := z.EncBinary()
				_ = yym3061
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3062 := z.DecBinary()
	_ = yym3062
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3063 := r.ContainerType()
		if yyct3063 == codecSelferValueTypeMap1234 {
			yyl3063 := r.ReadMapStart()
			if yyl3063 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3063, d)
			}
		} else if yyct3063 == codecSelferValueTypeArray1234 {
			yyl3063 := r.ReadArrayStart()
			if yyl3063 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3063, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3064Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3064Slc
	var yyhl3064 bool = l >= 0
	for yyj3064 := 0; ; yyj3064++ {
		if yyhl3064 {
			if yyj3064 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3064Slc = r.DecodeBytes(yys3064Slc, true, true)
		yys3064 := string(yys3064Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3064 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3064)
		} // end switch yys3064
	} // end for yyj3064
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3068 int
	var yyb3068 bool
	var yyhl3068 bool = l >= 0
	yyj3068++
	if yyhl3068 {
		yyb3068 = yyj3068 > l
	} else {
		yyb3068 = r.CheckBreak()
	}
	if yyb3068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3068++
	if yyhl3068 {
		yyb3068 = yyj3068 > l
	} else {
		yyb3068 = r.CheckBreak()
	}
	if yyb3068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3068++
	if yyhl3068 {
		yyb3068 = yyj3068 > l
	} else {
		yyb3068 = r.CheckBreak()
	}
	if yyb3068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3068++
		if yyhl3068 {
			yyb3068 = yyj3068 > l
		} else {
			yyb3068 = r.CheckBreak()
		}
		if yyb3068 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3068-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3072 := z.EncBinary()
		_ = yym3072
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3073 := !z.EncBinary()
			yy2arr3073 := z.EncBasicHandle().StructToArray
			var yyq3073 [7]bool
			_, _, _ = yysep3073, yyq3073, yy2arr3073
			const yyr3073 bool = false
			yyq3073[0] = x.Kind != ""
			yyq3073[1] = x.Namespace != ""
			yyq3073[2] = x.Name != ""
			yyq3073[3] = x.UID != ""
			yyq3073[4] = x.APIVersion != ""
			yyq3073[5] = x.ResourceVersion != ""
			yyq3073[6] = x.FieldPath != ""
			var yynn3073 int
			if yyr3073 || yy2arr3073 {
				r.EncodeArrayStart(7)
			} else {
				yynn3073 = 0
				for _, b := range yyq3073 {
					if b {
						yynn3073++
					}
				}
				r.EncodeMapStart(yynn3073)
				yynn3073 = 0
			}
			if yyr3073 || yy2arr3073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3073[0] {
					yym3075 := z.EncBinary()
					_ = yym3075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3073[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3076 := z.EncBinary()
					_ = yym3076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3073 || yy2arr3073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3073[1] {
					yym3078 := z.EncBinary()
					_ = yym3078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3073[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3079 := z.EncBinary()
					_ = yym3079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3073 || yy2arr3073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3073[2] {
					yym3081 := z.EncBinary()
					_ = yym3081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3073[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3082 := z.EncBinary()
					_ = yym3082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3073 || yy2arr3073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3073[3] {
					yym3084 := z.EncBinary()
					_ = yym3084
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3073[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3085 := z.EncBinary()
					_ = yym3085
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3073 || yy2arr3073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3073[4] {
					yym3087 := z.EncBinary()
					_ = yym3087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3073[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3088 := z.EncBinary()
					_ = yym3088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3073 || yy2arr3073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3073[5] {
					yym3090 := z.EncBinary()
					_ = yym3090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3073[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3091 := z.EncBinary()
					_ = yym3091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3073 || yy2arr3073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3073[6] {
					yym3093 := z.EncBinary()
					_ = yym3093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3073[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3094 := z.EncBinary()
					_ = yym3094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3073 || yy2arr3073 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3095 := z.DecBinary()
	_ = yym3095
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3096 := r.ContainerType()
		if yyct3096 == codecSelferValueTypeMap1234 {
			yyl3096 := r.ReadMapStart()
			if yyl3096 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3096, d)
			}
		} else if yyct3096 == codecSelferValueTypeArray1234 {
			yyl3096 := r.ReadArrayStart()
			if yyl3096 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3096, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3097Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3097Slc
	var yyhl3097 bool = l >= 0
	for yyj3097 := 0; ; yyj3097++ {
		if yyhl3097 {
			if yyj3097 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3097Slc = r.DecodeBytes(yys3097Slc, true, true)
		yys3097 := string(yys3097Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3097 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3097)
		} // end switch yys3097
	} // end for yyj3097
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3105 int
	var yyb3105 bool
	var yyhl3105 bool = l >= 0
	yyj3105++
	if yyhl3105 {
		yyb3105 = yyj3105 > l
	} else {
		yyb3105 = r.CheckBreak()
	}
	if yyb3105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3105++
	if yyhl3105 {
		yyb3105 = yyj3105 > l
	} else {
		yyb3105 = r.CheckBreak()
	}
	if yyb3105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3105++
	if yyhl3105 {
		yyb3105 = yyj3105 > l
	} else {
		yyb3105 = r.CheckBreak()
	}
	if yyb3105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3105++
	if yyhl3105 {
		yyb3105 = yyj3105 > l
	} else {
		yyb3105 = r.CheckBreak()
	}
	if yyb3105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3105++
	if yyhl3105 {
		yyb3105 = yyj3105 > l
	} else {
		yyb3105 = r.CheckBreak()
	}
	if yyb3105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3105++
	if yyhl3105 {
		yyb3105 = yyj3105 > l
	} else {
		yyb3105 = r.CheckBreak()
	}
	if yyb3105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3105++
	if yyhl3105 {
		yyb3105 = yyj3105 > l
	} else {
		yyb3105 = r.CheckBreak()
	}
	if yyb3105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3105++
		if yyhl3105 {
			yyb3105 = yyj3105 > l
		} else {
			yyb3105 = r.CheckBreak()
		}
		if yyb3105 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3105-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3113 := z.EncBinary()
		_ = yym3113
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3114 := !z.EncBinary()
			yy2arr3114 := z.EncBasicHandle().StructToArray
			var yyq3114 [1]bool
			_, _, _ = yysep3114, yyq3114, yy2arr3114
			const yyr3114 bool = false
			var yynn3114 int
			if yyr3114 || yy2arr3114 {
				r.EncodeArrayStart(1)
			} else {
				yynn3114 = 1
				for _, b := range yyq3114 {
					if b {
						yynn3114++
					}
				}
				r.EncodeMapStart(yynn3114)
				yynn3114 = 0
			}
			if yyr3114 || yy2arr3114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3116 := z.EncBinary()
				_ = yym3116
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3117 := z.EncBinary()
				_ = yym3117
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3114 || yy2arr3114 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3118 := z.DecBinary()
	_ = yym3118
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3119 := r.ContainerType()
		if yyct3119 == codecSelferValueTypeMap1234 {
			yyl3119 := r.ReadMapStart()
			if yyl3119 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3119, d)
			}
		} else if yyct3119 == codecSelferValueTypeArray1234 {
			yyl3119 := r.ReadArrayStart()
			if yyl3119 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3119, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3120Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3120Slc
	var yyhl3120 bool = l >= 0
	for yyj3120 := 0; ; yyj3120++ {
		if yyhl3120 {
			if yyj3120 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3120Slc = r.DecodeBytes(yys3120Slc, true, true)
		yys3120 := string(yys3120Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3120 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3120)
		} // end switch yys3120
	} // end for yyj3120
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3122 int
	var yyb3122 bool
	var yyhl3122 bool = l >= 0
	yyj3122++
	if yyhl3122 {
		yyb3122 = yyj3122 > l
	} else {
		yyb3122 = r.CheckBreak()
	}
	if yyb3122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3122++
		if yyhl3122 {
			yyb3122 = yyj3122 > l
		} else {
			yyb3122 = r.CheckBreak()
		}
		if yyb3122 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3122-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3124 := z.EncBinary()
		_ = yym3124
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3125 := !z.EncBinary()
			yy2arr3125 := z.EncBasicHandle().StructToArray
			var yyq3125 [3]bool
			_, _, _ = yysep3125, yyq3125, yy2arr3125
			const yyr3125 bool = false
			yyq3125[0] = x.Kind != ""
			yyq3125[1] = x.APIVersion != ""
			yyq3125[2] = true
			var yynn3125 int
			if yyr3125 || yy2arr3125 {
				r.EncodeArrayStart(3)
			} else {
				yynn3125 = 0
				for _, b := range yyq3125 {
					if b {
						yynn3125++
					}
				}
				r.EncodeMapStart(yynn3125)
				yynn3125 = 0
			}
			if yyr3125 || yy2arr3125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3125[0] {
					yym3127 := z.EncBinary()
					_ = yym3127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3125[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3128 := z.EncBinary()
					_ = yym3128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3125 || yy2arr3125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3125[1] {
					yym3130 := z.EncBinary()
					_ = yym3130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3125[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3131 := z.EncBinary()
					_ = yym3131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3125 || yy2arr3125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3125[2] {
					yy3133 := &x.Reference
					yy3133.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3125[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3134 := &x.Reference
					yy3134.CodecEncodeSelf(e)
				}
			}
			if yyr3125 || yy2arr3125 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3135 := z.DecBinary()
	_ = yym3135
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3136 := r.ContainerType()
		if yyct3136 == codecSelferValueTypeMap1234 {
			yyl3136 := r.ReadMapStart()
			if yyl3136 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3136, d)
			}
		} else if yyct3136 == codecSelferValueTypeArray1234 {
			yyl3136 := r.ReadArrayStart()
			if yyl3136 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3136, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3137Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3137Slc
	var yyhl3137 bool = l >= 0
	for yyj3137 := 0; ; yyj3137++ {
		if yyhl3137 {
			if yyj3137 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3137Slc = r.DecodeBytes(yys3137Slc, true, true)
		yys3137 := string(yys3137Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3137 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3140 := &x.Reference
				yyv3140.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3137)
		} // end switch yys3137
	} // end for yyj3137
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3141 int
	var yyb3141 bool
	var yyhl3141 bool = l >= 0
	yyj3141++
	if yyhl3141 {
		yyb3141 = yyj3141 > l
	} else {
		yyb3141 = r.CheckBreak()
	}
	if yyb3141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3141++
	if yyhl3141 {
		yyb3141 = yyj3141 > l
	} else {
		yyb3141 = r.CheckBreak()
	}
	if yyb3141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3141++
	if yyhl3141 {
		yyb3141 = yyj3141 > l
	} else {
		yyb3141 = r.CheckBreak()
	}
	if yyb3141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3144 := &x.Reference
		yyv3144.CodecDecodeSelf(d)
	}
	for {
		yyj3141++
		if yyhl3141 {
			yyb3141 = yyj3141 > l
		} else {
			yyb3141 = r.CheckBreak()
		}
		if yyb3141 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3141-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3145 := z.EncBinary()
		_ = yym3145
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3146 := !z.EncBinary()
			yy2arr3146 := z.EncBasicHandle().StructToArray
			var yyq3146 [2]bool
			_, _, _ = yysep3146, yyq3146, yy2arr3146
			const yyr3146 bool = false
			yyq3146[0] = x.Component != ""
			yyq3146[1] = x.Host != ""
			var yynn3146 int
			if yyr3146 || yy2arr3146 {
				r.EncodeArrayStart(2)
			} else {
				yynn3146 = 0
				for _, b := range yyq3146 {
					if b {
						yynn3146++
					}
				}
				r.EncodeMapStart(yynn3146)
				yynn3146 = 0
			}
			if yyr3146 || yy2arr3146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3146[0] {
					yym3148 := z.EncBinary()
					_ = yym3148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3146[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3146 || yy2arr3146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3146[1] {
					yym3151 := z.EncBinary()
					_ = yym3151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3146[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3152 := z.EncBinary()
					_ = yym3152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3146 || yy2arr3146 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3153 := z.DecBinary()
	_ = yym3153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3154 := r.ContainerType()
		if yyct3154 == codecSelferValueTypeMap1234 {
			yyl3154 := r.ReadMapStart()
			if yyl3154 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3154, d)
			}
		} else if yyct3154 == codecSelferValueTypeArray1234 {
			yyl3154 := r.ReadArrayStart()
			if yyl3154 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3154, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3155Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3155Slc
	var yyhl3155 bool = l >= 0
	for yyj3155 := 0; ; yyj3155++ {
		if yyhl3155 {
			if yyj3155 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3155Slc = r.DecodeBytes(yys3155Slc, true, true)
		yys3155 := string(yys3155Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3155 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3155)
		} // end switch yys3155
	} // end for yyj3155
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3158 int
	var yyb3158 bool
	var yyhl3158 bool = l >= 0
	yyj3158++
	if yyhl3158 {
		yyb3158 = yyj3158 > l
	} else {
		yyb3158 = r.CheckBreak()
	}
	if yyb3158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3158++
	if yyhl3158 {
		yyb3158 = yyj3158 > l
	} else {
		yyb3158 = r.CheckBreak()
	}
	if yyb3158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3158++
		if yyhl3158 {
			yyb3158 = yyj3158 > l
		} else {
			yyb3158 = r.CheckBreak()
		}
		if yyb3158 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3158-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3161 := z.EncBinary()
		_ = yym3161
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3162 := !z.EncBinary()
			yy2arr3162 := z.EncBasicHandle().StructToArray
			var yyq3162 [11]bool
			_, _, _ = yysep3162, yyq3162, yy2arr3162
			const yyr3162 bool = false
			yyq3162[0] = x.Kind != ""
			yyq3162[1] = x.APIVersion != ""
			yyq3162[2] = true
			yyq3162[3] = true
			yyq3162[4] = x.Reason != ""
			yyq3162[5] = x.Message != ""
			yyq3162[6] = true
			yyq3162[7] = true
			yyq3162[8] = true
			yyq3162[9] = x.Count != 0
			yyq3162[10] = x.Type != ""
			var yynn3162 int
			if yyr3162 || yy2arr3162 {
				r.EncodeArrayStart(11)
			} else {
				yynn3162 = 0
				for _, b := range yyq3162 {
					if b {
						yynn3162++
					}
				}
				r.EncodeMapStart(yynn3162)
				yynn3162 = 0
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[0] {
					yym3164 := z.EncBinary()
					_ = yym3164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3162[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3165 := z.EncBinary()
					_ = yym3165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[1] {
					yym3167 := z.EncBinary()
					_ = yym3167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3162[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3168 := z.EncBinary()
					_ = yym3168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[2] {
					yy3170 := &x.ObjectMeta
					yy3170.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3162[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3171 := &x.ObjectMeta
					yy3171.CodecEncodeSelf(e)
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[3] {
					yy3173 := &x.InvolvedObject
					yy3173.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3162[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3174 := &x.InvolvedObject
					yy3174.CodecEncodeSelf(e)
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[4] {
					yym3176 := z.EncBinary()
					_ = yym3176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3162[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3177 := z.EncBinary()
					_ = yym3177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[5] {
					yym3179 := z.EncBinary()
					_ = yym3179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3162[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[6] {
					yy3182 := &x.Source
					yy3182.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3162[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3183 := &x.Source
					yy3183.CodecEncodeSelf(e)
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[7] {
					yy3185 := &x.FirstTimestamp
					yym3186 := z.EncBinary()
					_ = yym3186
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3185) {
					} else if yym3186 {
						z.EncBinaryMarshal(yy3185)
					} else if !yym3186 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3185)
					} else {
						z.EncFallback(yy3185)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3162[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3187 := &x.FirstTimestamp
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3187) {
					} else if yym3188 {
						z.EncBinaryMarshal(yy3187)
					} else if !yym3188 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3187)
					} else {
						z.EncFallback(yy3187)
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[8] {
					yy3190 := &x.LastTimestamp
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3190) {
					} else if yym3191 {
						z.EncBinaryMarshal(yy3190)
					} else if !yym3191 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3190)
					} else {
						z.EncFallback(yy3190)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3162[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3192 := &x.LastTimestamp
					yym3193 := z.EncBinary()
					_ = yym3193
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3192) {
					} else if yym3193 {
						z.EncBinaryMarshal(yy3192)
					} else if !yym3193 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3192)
					} else {
						z.EncFallback(yy3192)
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[9] {
					yym3195 := z.EncBinary()
					_ = yym3195
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3162[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3196 := z.EncBinary()
					_ = yym3196
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[10] {
					yym3198 := z.EncBinary()
					_ = yym3198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3162[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3199 := z.EncBinary()
					_ = yym3199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3200 := z.DecBinary()
	_ = yym3200
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3201 := r.ContainerType()
		if yyct3201 == codecSelferValueTypeMap1234 {
			yyl3201 := r.ReadMapStart()
			if yyl3201 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3201, d)
			}
		} else if yyct3201 == codecSelferValueTypeArray1234 {
			yyl3201 := r.ReadArrayStart()
			if yyl3201 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3201, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3202Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3202Slc
	var yyhl3202 bool = l >= 0
	for yyj3202 := 0; ; yyj3202++ {
		if yyhl3202 {
			if yyj3202 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3202Slc = r.DecodeBytes(yys3202Slc, true, true)
		yys3202 := string(yys3202Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3202 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3205 := &x.ObjectMeta
				yyv3205.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3206 := &x.InvolvedObject
				yyv3206.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3209 := &x.Source
				yyv3209.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3210 := &x.FirstTimestamp
				yym3211 := z.DecBinary()
				_ = yym3211
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3210) {
				} else if yym3211 {
					z.DecBinaryUnmarshal(yyv3210)
				} else if !yym3211 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3210)
				} else {
					z.DecFallback(yyv3210, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3212 := &x.LastTimestamp
				yym3213 := z.DecBinary()
				_ = yym3213
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3212) {
				} else if yym3213 {
					z.DecBinaryUnmarshal(yyv3212)
				} else if !yym3213 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3212)
				} else {
					z.DecFallback(yyv3212, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3202)
		} // end switch yys3202
	} // end for yyj3202
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3216 int
	var yyb3216 bool
	var yyhl3216 bool = l >= 0
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3219 := &x.ObjectMeta
		yyv3219.CodecDecodeSelf(d)
	}
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3220 := &x.InvolvedObject
		yyv3220.CodecDecodeSelf(d)
	}
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3223 := &x.Source
		yyv3223.CodecDecodeSelf(d)
	}
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3224 := &x.FirstTimestamp
		yym3225 := z.DecBinary()
		_ = yym3225
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3224) {
		} else if yym3225 {
			z.DecBinaryUnmarshal(yyv3224)
		} else if !yym3225 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3224)
		} else {
			z.DecFallback(yyv3224, false)
		}
	}
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3226 := &x.LastTimestamp
		yym3227 := z.DecBinary()
		_ = yym3227
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3226) {
		} else if yym3227 {
			z.DecBinaryUnmarshal(yyv3226)
		} else if !yym3227 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3226)
		} else {
			z.DecFallback(yyv3226, false)
		}
	}
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj3216++
	if yyhl3216 {
		yyb3216 = yyj3216 > l
	} else {
		yyb3216 = r.CheckBreak()
	}
	if yyb3216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3216++
		if yyhl3216 {
			yyb3216 = yyj3216 > l
		} else {
			yyb3216 = r.CheckBreak()
		}
		if yyb3216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3230 := z.EncBinary()
		_ = yym3230
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3231 := !z.EncBinary()
			yy2arr3231 := z.EncBasicHandle().StructToArray
			var yyq3231 [4]bool
			_, _, _ = yysep3231, yyq3231, yy2arr3231
			const yyr3231 bool = false
			yyq3231[0] = x.Kind != ""
			yyq3231[1] = x.APIVersion != ""
			yyq3231[2] = true
			var yynn3231 int
			if yyr3231 || yy2arr3231 {
				r.EncodeArrayStart(4)
			} else {
				yynn3231 = 1
				for _, b := range yyq3231 {
					if b {
						yynn3231++
					}
				}
				r.EncodeMapStart(yynn3231)
				yynn3231 = 0
			}
			if yyr3231 || yy2arr3231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3231[0] {
					yym3233 := z.EncBinary()
					_ = yym3233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3231[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3234 := z.EncBinary()
					_ = yym3234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3231 || yy2arr3231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3231[1] {
					yym3236 := z.EncBinary()
					_ = yym3236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3231[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3237 := z.EncBinary()
					_ = yym3237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3231 || yy2arr3231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3231[2] {
					yy3239 := &x.ListMeta
					yym3240 := z.EncBinary()
					_ = yym3240
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3239) {
					} else {
						z.EncFallback(yy3239)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3231[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3241 := &x.ListMeta
					yym3242 := z.EncBinary()
					_ = yym3242
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3241) {
					} else {
						z.EncFallback(yy3241)
					}
				}
			}
			if yyr3231 || yy2arr3231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3244 := z.EncBinary()
					_ = yym3244
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3245 := z.EncBinary()
					_ = yym3245
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3231 || yy2arr3231 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3246 := z.DecBinary()
	_ = yym3246
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3247 := r.ContainerType()
		if yyct3247 == codecSelferValueTypeMap1234 {
			yyl3247 := r.ReadMapStart()
			if yyl3247 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3247, d)
			}
		} else if yyct3247 == codecSelferValueTypeArray1234 {
			yyl3247 := r.ReadArrayStart()
			if yyl3247 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3247, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3248Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3248Slc
	var yyhl3248 bool = l >= 0
	for yyj3248 := 0; ; yyj3248++ {
		if yyhl3248 {
			if yyj3248 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3248Slc = r.DecodeBytes(yys3248Slc, true, true)
		yys3248 := string(yys3248Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3248 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3251 := &x.ListMeta
				yym3252 := z.DecBinary()
				_ = yym3252
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3251) {
				} else {
					z.DecFallback(yyv3251, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3253 := &x.Items
				yym3254 := z.DecBinary()
				_ = yym3254
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3253), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3248)
		} // end switch yys3248
	} // end for yyj3248
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3255 int
	var yyb3255 bool
	var yyhl3255 bool = l >= 0
	yyj3255++
	if yyhl3255 {
		yyb3255 = yyj3255 > l
	} else {
		yyb3255 = r.CheckBreak()
	}
	if yyb3255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3255++
	if yyhl3255 {
		yyb3255 = yyj3255 > l
	} else {
		yyb3255 = r.CheckBreak()
	}
	if yyb3255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3255++
	if yyhl3255 {
		yyb3255 = yyj3255 > l
	} else {
		yyb3255 = r.CheckBreak()
	}
	if yyb3255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3258 := &x.ListMeta
		yym3259 := z.DecBinary()
		_ = yym3259
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3258) {
		} else {
			z.DecFallback(yyv3258, false)
		}
	}
	yyj3255++
	if yyhl3255 {
		yyb3255 = yyj3255 > l
	} else {
		yyb3255 = r.CheckBreak()
	}
	if yyb3255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3260 := &x.Items
		yym3261 := z.DecBinary()
		_ = yym3261
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3260), d)
		}
	}
	for {
		yyj3255++
		if yyhl3255 {
			yyb3255 = yyj3255 > l
		} else {
			yyb3255 = r.CheckBreak()
		}
		if yyb3255 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3255-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3262 := z.EncBinary()
		_ = yym3262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3263 := !z.EncBinary()
			yy2arr3263 := z.EncBasicHandle().StructToArray
			var yyq3263 [4]bool
			_, _, _ = yysep3263, yyq3263, yy2arr3263
			const yyr3263 bool = false
			yyq3263[0] = x.Kind != ""
			yyq3263[1] = x.APIVersion != ""
			yyq3263[2] = true
			var yynn3263 int
			if yyr3263 || yy2arr3263 {
				r.EncodeArrayStart(4)
			} else {
				yynn3263 = 1
				for _, b := range yyq3263 {
					if b {
						yynn3263++
					}
				}
				r.EncodeMapStart(yynn3263)
				yynn3263 = 0
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3263[0] {
					yym3265 := z.EncBinary()
					_ = yym3265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3263[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3266 := z.EncBinary()
					_ = yym3266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3263[1] {
					yym3268 := z.EncBinary()
					_ = yym3268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3263[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3269 := z.EncBinary()
					_ = yym3269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3263[2] {
					yy3271 := &x.ListMeta
					yym3272 := z.EncBinary()
					_ = yym3272
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3271) {
					} else {
						z.EncFallback(yy3271)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3263[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3273 := &x.ListMeta
					yym3274 := z.EncBinary()
					_ = yym3274
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3273) {
					} else {
						z.EncFallback(yy3273)
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3277 := z.EncBinary()
					_ = yym3277
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3278 := z.DecBinary()
	_ = yym3278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3279 := r.ContainerType()
		if yyct3279 == codecSelferValueTypeMap1234 {
			yyl3279 := r.ReadMapStart()
			if yyl3279 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3279, d)
			}
		} else if yyct3279 == codecSelferValueTypeArray1234 {
			yyl3279 := r.ReadArrayStart()
			if yyl3279 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3280Slc
	var yyhl3280 bool = l >= 0
	for yyj3280 := 0; ; yyj3280++ {
		if yyhl3280 {
			if yyj3280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3280Slc = r.DecodeBytes(yys3280Slc, true, true)
		yys3280 := string(yys3280Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3280 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3283 := &x.ListMeta
				yym3284 := z.DecBinary()
				_ = yym3284
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3283) {
				} else {
					z.DecFallback(yyv3283, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3285 := &x.Items
				yym3286 := z.DecBinary()
				_ = yym3286
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3285), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3280)
		} // end switch yys3280
	} // end for yyj3280
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3287 int
	var yyb3287 bool
	var yyhl3287 bool = l >= 0
	yyj3287++
	if yyhl3287 {
		yyb3287 = yyj3287 > l
	} else {
		yyb3287 = r.CheckBreak()
	}
	if yyb3287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3287++
	if yyhl3287 {
		yyb3287 = yyj3287 > l
	} else {
		yyb3287 = r.CheckBreak()
	}
	if yyb3287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3287++
	if yyhl3287 {
		yyb3287 = yyj3287 > l
	} else {
		yyb3287 = r.CheckBreak()
	}
	if yyb3287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3290 := &x.ListMeta
		yym3291 := z.DecBinary()
		_ = yym3291
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3290) {
		} else {
			z.DecFallback(yyv3290, false)
		}
	}
	yyj3287++
	if yyhl3287 {
		yyb3287 = yyj3287 > l
	} else {
		yyb3287 = r.CheckBreak()
	}
	if yyb3287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3292 := &x.Items
		yym3293 := z.DecBinary()
		_ = yym3293
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3292), d)
		}
	}
	for {
		yyj3287++
		if yyhl3287 {
			yyb3287 = yyj3287 > l
		} else {
			yyb3287 = r.CheckBreak()
		}
		if yyb3287 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3287-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3294 := z.EncBinary()
	_ = yym3294
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3295 := z.DecBinary()
	_ = yym3295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3296 := z.EncBinary()
		_ = yym3296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3297 := !z.EncBinary()
			yy2arr3297 := z.EncBasicHandle().StructToArray
			var yyq3297 [6]bool
			_, _, _ = yysep3297, yyq3297, yy2arr3297
			const yyr3297 bool = false
			yyq3297[0] = x.Type != ""
			yyq3297[1] = len(x.Max) != 0
			yyq3297[2] = len(x.Min) != 0
			yyq3297[3] = len(x.Default) != 0
			yyq3297[4] = len(x.DefaultRequest) != 0
			yyq3297[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3297 int
			if yyr3297 || yy2arr3297 {
				r.EncodeArrayStart(6)
			} else {
				yynn3297 = 0
				for _, b := range yyq3297 {
					if b {
						yynn3297++
					}
				}
				r.EncodeMapStart(yynn3297)
				yynn3297 = 0
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3297[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3297[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3297[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3297[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3297[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3297[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3297[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3297[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3297[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3297[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3297[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3297[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3304 := z.DecBinary()
	_ = yym3304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3305 := r.ContainerType()
		if yyct3305 == codecSelferValueTypeMap1234 {
			yyl3305 := r.ReadMapStart()
			if yyl3305 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3305, d)
			}
		} else if yyct3305 == codecSelferValueTypeArray1234 {
			yyl3305 := r.ReadArrayStart()
			if yyl3305 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3306Slc
	var yyhl3306 bool = l >= 0
	for yyj3306 := 0; ; yyj3306++ {
		if yyhl3306 {
			if yyj3306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3306Slc = r.DecodeBytes(yys3306Slc, true, true)
		yys3306 := string(yys3306Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3306 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3308 := &x.Max
				yyv3308.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3309 := &x.Min
				yyv3309.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3310 := &x.Default
				yyv3310.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3311 := &x.DefaultRequest
				yyv3311.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3312 := &x.MaxLimitRequestRatio
				yyv3312.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3306)
		} // end switch yys3306
	} // end for yyj3306
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3313 int
	var yyb3313 bool
	var yyhl3313 bool = l >= 0
	yyj3313++
	if yyhl3313 {
		yyb3313 = yyj3313 > l
	} else {
		yyb3313 = r.CheckBreak()
	}
	if yyb3313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3313++
	if yyhl3313 {
		yyb3313 = yyj3313 > l
	} else {
		yyb3313 = r.CheckBreak()
	}
	if yyb3313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3315 := &x.Max
		yyv3315.CodecDecodeSelf(d)
	}
	yyj3313++
	if yyhl3313 {
		yyb3313 = yyj3313 > l
	} else {
		yyb3313 = r.CheckBreak()
	}
	if yyb3313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3316 := &x.Min
		yyv3316.CodecDecodeSelf(d)
	}
	yyj3313++
	if yyhl3313 {
		yyb3313 = yyj3313 > l
	} else {
		yyb3313 = r.CheckBreak()
	}
	if yyb3313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3317 := &x.Default
		yyv3317.CodecDecodeSelf(d)
	}
	yyj3313++
	if yyhl3313 {
		yyb3313 = yyj3313 > l
	} else {
		yyb3313 = r.CheckBreak()
	}
	if yyb3313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3318 := &x.DefaultRequest
		yyv3318.CodecDecodeSelf(d)
	}
	yyj3313++
	if yyhl3313 {
		yyb3313 = yyj3313 > l
	} else {
		yyb3313 = r.CheckBreak()
	}
	if yyb3313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3319 := &x.MaxLimitRequestRatio
		yyv3319.CodecDecodeSelf(d)
	}
	for {
		yyj3313++
		if yyhl3313 {
			yyb3313 = yyj3313 > l
		} else {
			yyb3313 = r.CheckBreak()
		}
		if yyb3313 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3313-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3320 := z.EncBinary()
		_ = yym3320
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3321 := !z.EncBinary()
			yy2arr3321 := z.EncBasicHandle().StructToArray
			var yyq3321 [1]bool
			_, _, _ = yysep3321, yyq3321, yy2arr3321
			const yyr3321 bool = false
			var yynn3321 int
			if yyr3321 || yy2arr3321 {
				r.EncodeArrayStart(1)
			} else {
				yynn3321 = 1
				for _, b := range yyq3321 {
					if b {
						yynn3321++
					}
				}
				r.EncodeMapStart(yynn3321)
				yynn3321 = 0
			}
			if yyr3321 || yy2arr3321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3323 := z.EncBinary()
					_ = yym3323
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3324 := z.EncBinary()
					_ = yym3324
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3321 || yy2arr3321 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3325 := z.DecBinary()
	_ = yym3325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3326 := r.ContainerType()
		if yyct3326 == codecSelferValueTypeMap1234 {
			yyl3326 := r.ReadMapStart()
			if yyl3326 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3326, d)
			}
		} else if yyct3326 == codecSelferValueTypeArray1234 {
			yyl3326 := r.ReadArrayStart()
			if yyl3326 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3326, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3327Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3327Slc
	var yyhl3327 bool = l >= 0
	for yyj3327 := 0; ; yyj3327++ {
		if yyhl3327 {
			if yyj3327 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3327Slc = r.DecodeBytes(yys3327Slc, true, true)
		yys3327 := string(yys3327Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3327 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3328 := &x.Limits
				yym3329 := z.DecBinary()
				_ = yym3329
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3328), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3327)
		} // end switch yys3327
	} // end for yyj3327
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3330 int
	var yyb3330 bool
	var yyhl3330 bool = l >= 0
	yyj3330++
	if yyhl3330 {
		yyb3330 = yyj3330 > l
	} else {
		yyb3330 = r.CheckBreak()
	}
	if yyb3330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3331 := &x.Limits
		yym3332 := z.DecBinary()
		_ = yym3332
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3331), d)
		}
	}
	for {
		yyj3330++
		if yyhl3330 {
			yyb3330 = yyj3330 > l
		} else {
			yyb3330 = r.CheckBreak()
		}
		if yyb3330 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3330-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3333 := z.EncBinary()
		_ = yym3333
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3334 := !z.EncBinary()
			yy2arr3334 := z.EncBasicHandle().StructToArray
			var yyq3334 [4]bool
			_, _, _ = yysep3334, yyq3334, yy2arr3334
			const yyr3334 bool = false
			yyq3334[0] = x.Kind != ""
			yyq3334[1] = x.APIVersion != ""
			yyq3334[2] = true
			yyq3334[3] = true
			var yynn3334 int
			if yyr3334 || yy2arr3334 {
				r.EncodeArrayStart(4)
			} else {
				yynn3334 = 0
				for _, b := range yyq3334 {
					if b {
						yynn3334++
					}
				}
				r.EncodeMapStart(yynn3334)
				yynn3334 = 0
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3334[0] {
					yym3336 := z.EncBinary()
					_ = yym3336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3334[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3337 := z.EncBinary()
					_ = yym3337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3334[1] {
					yym3339 := z.EncBinary()
					_ = yym3339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3334[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3340 := z.EncBinary()
					_ = yym3340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3334[2] {
					yy3342 := &x.ObjectMeta
					yy3342.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3334[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3343 := &x.ObjectMeta
					yy3343.CodecEncodeSelf(e)
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3334[3] {
					yy3345 := &x.Spec
					yy3345.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3334[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3346 := &x.Spec
					yy3346.CodecEncodeSelf(e)
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3347 := z.DecBinary()
	_ = yym3347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3348 := r.ContainerType()
		if yyct3348 == codecSelferValueTypeMap1234 {
			yyl3348 := r.ReadMapStart()
			if yyl3348 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3348, d)
			}
		} else if yyct3348 == codecSelferValueTypeArray1234 {
			yyl3348 := r.ReadArrayStart()
			if yyl3348 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3348, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3349Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3349Slc
	var yyhl3349 bool = l >= 0
	for yyj3349 := 0; ; yyj3349++ {
		if yyhl3349 {
			if yyj3349 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3349Slc = r.DecodeBytes(yys3349Slc, true, true)
		yys3349 := string(yys3349Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3349 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3352 := &x.ObjectMeta
				yyv3352.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3353 := &x.Spec
				yyv3353.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3349)
		} // end switch yys3349
	} // end for yyj3349
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3354 int
	var yyb3354 bool
	var yyhl3354 bool = l >= 0
	yyj3354++
	if yyhl3354 {
		yyb3354 = yyj3354 > l
	} else {
		yyb3354 = r.CheckBreak()
	}
	if yyb3354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3354++
	if yyhl3354 {
		yyb3354 = yyj3354 > l
	} else {
		yyb3354 = r.CheckBreak()
	}
	if yyb3354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3354++
	if yyhl3354 {
		yyb3354 = yyj3354 > l
	} else {
		yyb3354 = r.CheckBreak()
	}
	if yyb3354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3357 := &x.ObjectMeta
		yyv3357.CodecDecodeSelf(d)
	}
	yyj3354++
	if yyhl3354 {
		yyb3354 = yyj3354 > l
	} else {
		yyb3354 = r.CheckBreak()
	}
	if yyb3354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3358 := &x.Spec
		yyv3358.CodecDecodeSelf(d)
	}
	for {
		yyj3354++
		if yyhl3354 {
			yyb3354 = yyj3354 > l
		} else {
			yyb3354 = r.CheckBreak()
		}
		if yyb3354 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3354-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3359 := z.EncBinary()
		_ = yym3359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3360 := !z.EncBinary()
			yy2arr3360 := z.EncBasicHandle().StructToArray
			var yyq3360 [4]bool
			_, _, _ = yysep3360, yyq3360, yy2arr3360
			const yyr3360 bool = false
			yyq3360[0] = x.Kind != ""
			yyq3360[1] = x.APIVersion != ""
			yyq3360[2] = true
			var yynn3360 int
			if yyr3360 || yy2arr3360 {
				r.EncodeArrayStart(4)
			} else {
				yynn3360 = 1
				for _, b := range yyq3360 {
					if b {
						yynn3360++
					}
				}
				r.EncodeMapStart(yynn3360)
				yynn3360 = 0
			}
			if yyr3360 || yy2arr3360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3360[0] {
					yym3362 := z.EncBinary()
					_ = yym3362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3363 := z.EncBinary()
					_ = yym3363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3360 || yy2arr3360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3360[1] {
					yym3365 := z.EncBinary()
					_ = yym3365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3360[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3366 := z.EncBinary()
					_ = yym3366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3360 || yy2arr3360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3360[2] {
					yy3368 := &x.ListMeta
					yym3369 := z.EncBinary()
					_ = yym3369
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3368) {
					} else {
						z.EncFallback(yy3368)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3360[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3370 := &x.ListMeta
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3370) {
					} else {
						z.EncFallback(yy3370)
					}
				}
			}
			if yyr3360 || yy2arr3360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3373 := z.EncBinary()
					_ = yym3373
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3374 := z.EncBinary()
					_ = yym3374
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3360 || yy2arr3360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3375 := z.DecBinary()
	_ = yym3375
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3376 := r.ContainerType()
		if yyct3376 == codecSelferValueTypeMap1234 {
			yyl3376 := r.ReadMapStart()
			if yyl3376 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3376, d)
			}
		} else if yyct3376 == codecSelferValueTypeArray1234 {
			yyl3376 := r.ReadArrayStart()
			if yyl3376 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3376, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3377Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3377Slc
	var yyhl3377 bool = l >= 0
	for yyj3377 := 0; ; yyj3377++ {
		if yyhl3377 {
			if yyj3377 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3377Slc = r.DecodeBytes(yys3377Slc, true, true)
		yys3377 := string(yys3377Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3377 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3380 := &x.ListMeta
				yym3381 := z.DecBinary()
				_ = yym3381
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3380) {
				} else {
					z.DecFallback(yyv3380, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3382 := &x.Items
				yym3383 := z.DecBinary()
				_ = yym3383
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3382), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3377)
		} // end switch yys3377
	} // end for yyj3377
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3384 int
	var yyb3384 bool
	var yyhl3384 bool = l >= 0
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3387 := &x.ListMeta
		yym3388 := z.DecBinary()
		_ = yym3388
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3387) {
		} else {
			z.DecFallback(yyv3387, false)
		}
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3389 := &x.Items
		yym3390 := z.DecBinary()
		_ = yym3390
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3389), d)
		}
	}
	for {
		yyj3384++
		if yyhl3384 {
			yyb3384 = yyj3384 > l
		} else {
			yyb3384 = r.CheckBreak()
		}
		if yyb3384 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3384-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3391 := z.EncBinary()
		_ = yym3391
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3392 := !z.EncBinary()
			yy2arr3392 := z.EncBasicHandle().StructToArray
			var yyq3392 [1]bool
			_, _, _ = yysep3392, yyq3392, yy2arr3392
			const yyr3392 bool = false
			yyq3392[0] = len(x.Hard) != 0
			var yynn3392 int
			if yyr3392 || yy2arr3392 {
				r.EncodeArrayStart(1)
			} else {
				yynn3392 = 0
				for _, b := range yyq3392 {
					if b {
						yynn3392++
					}
				}
				r.EncodeMapStart(yynn3392)
				yynn3392 = 0
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3392[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3392[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3394 := z.DecBinary()
	_ = yym3394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3395 := r.ContainerType()
		if yyct3395 == codecSelferValueTypeMap1234 {
			yyl3395 := r.ReadMapStart()
			if yyl3395 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3395, d)
			}
		} else if yyct3395 == codecSelferValueTypeArray1234 {
			yyl3395 := r.ReadArrayStart()
			if yyl3395 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3395, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3396Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3396Slc
	var yyhl3396 bool = l >= 0
	for yyj3396 := 0; ; yyj3396++ {
		if yyhl3396 {
			if yyj3396 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3396Slc = r.DecodeBytes(yys3396Slc, true, true)
		yys3396 := string(yys3396Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3396 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3397 := &x.Hard
				yyv3397.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3396)
		} // end switch yys3396
	} // end for yyj3396
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3398 int
	var yyb3398 bool
	var yyhl3398 bool = l >= 0
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3399 := &x.Hard
		yyv3399.CodecDecodeSelf(d)
	}
	for {
		yyj3398++
		if yyhl3398 {
			yyb3398 = yyj3398 > l
		} else {
			yyb3398 = r.CheckBreak()
		}
		if yyb3398 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3398-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3400 := z.EncBinary()
		_ = yym3400
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3401 := !z.EncBinary()
			yy2arr3401 := z.EncBasicHandle().StructToArray
			var yyq3401 [2]bool
			_, _, _ = yysep3401, yyq3401, yy2arr3401
			const yyr3401 bool = false
			yyq3401[0] = len(x.Hard) != 0
			yyq3401[1] = len(x.Used) != 0
			var yynn3401 int
			if yyr3401 || yy2arr3401 {
				r.EncodeArrayStart(2)
			} else {
				yynn3401 = 0
				for _, b := range yyq3401 {
					if b {
						yynn3401++
					}
				}
				r.EncodeMapStart(yynn3401)
				yynn3401 = 0
			}
			if yyr3401 || yy2arr3401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3401[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3401[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3401 || yy2arr3401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3401[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3401[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3401 || yy2arr3401 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3404 := z.DecBinary()
	_ = yym3404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3405 := r.ContainerType()
		if yyct3405 == codecSelferValueTypeMap1234 {
			yyl3405 := r.ReadMapStart()
			if yyl3405 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3405, d)
			}
		} else if yyct3405 == codecSelferValueTypeArray1234 {
			yyl3405 := r.ReadArrayStart()
			if yyl3405 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3406Slc
	var yyhl3406 bool = l >= 0
	for yyj3406 := 0; ; yyj3406++ {
		if yyhl3406 {
			if yyj3406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3406Slc = r.DecodeBytes(yys3406Slc, true, true)
		yys3406 := string(yys3406Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3406 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3407 := &x.Hard
				yyv3407.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3408 := &x.Used
				yyv3408.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3406)
		} // end switch yys3406
	} // end for yyj3406
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3409 int
	var yyb3409 bool
	var yyhl3409 bool = l >= 0
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3410 := &x.Hard
		yyv3410.CodecDecodeSelf(d)
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3411 := &x.Used
		yyv3411.CodecDecodeSelf(d)
	}
	for {
		yyj3409++
		if yyhl3409 {
			yyb3409 = yyj3409 > l
		} else {
			yyb3409 = r.CheckBreak()
		}
		if yyb3409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3412 := z.EncBinary()
		_ = yym3412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3413 := !z.EncBinary()
			yy2arr3413 := z.EncBasicHandle().StructToArray
			var yyq3413 [5]bool
			_, _, _ = yysep3413, yyq3413, yy2arr3413
			const yyr3413 bool = false
			yyq3413[0] = x.Kind != ""
			yyq3413[1] = x.APIVersion != ""
			yyq3413[2] = true
			yyq3413[3] = true
			yyq3413[4] = true
			var yynn3413 int
			if yyr3413 || yy2arr3413 {
				r.EncodeArrayStart(5)
			} else {
				yynn3413 = 0
				for _, b := range yyq3413 {
					if b {
						yynn3413++
					}
				}
				r.EncodeMapStart(yynn3413)
				yynn3413 = 0
			}
			if yyr3413 || yy2arr3413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3413[0] {
					yym3415 := z.EncBinary()
					_ = yym3415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3413[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3416 := z.EncBinary()
					_ = yym3416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3413 || yy2arr3413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3413[1] {
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3413[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3419 := z.EncBinary()
					_ = yym3419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3413 || yy2arr3413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3413[2] {
					yy3421 := &x.ObjectMeta
					yy3421.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3413[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3422 := &x.ObjectMeta
					yy3422.CodecEncodeSelf(e)
				}
			}
			if yyr3413 || yy2arr3413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3413[3] {
					yy3424 := &x.Spec
					yy3424.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3413[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3425 := &x.Spec
					yy3425.CodecEncodeSelf(e)
				}
			}
			if yyr3413 || yy2arr3413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3413[4] {
					yy3427 := &x.Status
					yy3427.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3413[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3428 := &x.Status
					yy3428.CodecEncodeSelf(e)
				}
			}
			if yyr3413 || yy2arr3413 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3429 := z.DecBinary()
	_ = yym3429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3430 := r.ContainerType()
		if yyct3430 == codecSelferValueTypeMap1234 {
			yyl3430 := r.ReadMapStart()
			if yyl3430 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3430, d)
			}
		} else if yyct3430 == codecSelferValueTypeArray1234 {
			yyl3430 := r.ReadArrayStart()
			if yyl3430 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3430, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3431Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3431Slc
	var yyhl3431 bool = l >= 0
	for yyj3431 := 0; ; yyj3431++ {
		if yyhl3431 {
			if yyj3431 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3431Slc = r.DecodeBytes(yys3431Slc, true, true)
		yys3431 := string(yys3431Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3431 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3434 := &x.ObjectMeta
				yyv3434.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3435 := &x.Spec
				yyv3435.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3436 := &x.Status
				yyv3436.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3431)
		} // end switch yys3431
	} // end for yyj3431
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3437 int
	var yyb3437 bool
	var yyhl3437 bool = l >= 0
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3440 := &x.ObjectMeta
		yyv3440.CodecDecodeSelf(d)
	}
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3441 := &x.Spec
		yyv3441.CodecDecodeSelf(d)
	}
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3442 := &x.Status
		yyv3442.CodecDecodeSelf(d)
	}
	for {
		yyj3437++
		if yyhl3437 {
			yyb3437 = yyj3437 > l
		} else {
			yyb3437 = r.CheckBreak()
		}
		if yyb3437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3443 := z.EncBinary()
		_ = yym3443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3444 := !z.EncBinary()
			yy2arr3444 := z.EncBasicHandle().StructToArray
			var yyq3444 [4]bool
			_, _, _ = yysep3444, yyq3444, yy2arr3444
			const yyr3444 bool = false
			yyq3444[0] = x.Kind != ""
			yyq3444[1] = x.APIVersion != ""
			yyq3444[2] = true
			var yynn3444 int
			if yyr3444 || yy2arr3444 {
				r.EncodeArrayStart(4)
			} else {
				yynn3444 = 1
				for _, b := range yyq3444 {
					if b {
						yynn3444++
					}
				}
				r.EncodeMapStart(yynn3444)
				yynn3444 = 0
			}
			if yyr3444 || yy2arr3444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3444[0] {
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3444[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3447 := z.EncBinary()
					_ = yym3447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3444 || yy2arr3444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3444[1] {
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3444[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3444 || yy2arr3444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3444[2] {
					yy3452 := &x.ListMeta
					yym3453 := z.EncBinary()
					_ = yym3453
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3452) {
					} else {
						z.EncFallback(yy3452)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3444[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3454 := &x.ListMeta
					yym3455 := z.EncBinary()
					_ = yym3455
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3454) {
					} else {
						z.EncFallback(yy3454)
					}
				}
			}
			if yyr3444 || yy2arr3444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3457 := z.EncBinary()
					_ = yym3457
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3444 || yy2arr3444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3459 := z.DecBinary()
	_ = yym3459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3460 := r.ContainerType()
		if yyct3460 == codecSelferValueTypeMap1234 {
			yyl3460 := r.ReadMapStart()
			if yyl3460 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3460, d)
			}
		} else if yyct3460 == codecSelferValueTypeArray1234 {
			yyl3460 := r.ReadArrayStart()
			if yyl3460 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3460, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3461Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3461Slc
	var yyhl3461 bool = l >= 0
	for yyj3461 := 0; ; yyj3461++ {
		if yyhl3461 {
			if yyj3461 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3461Slc = r.DecodeBytes(yys3461Slc, true, true)
		yys3461 := string(yys3461Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3461 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3464 := &x.ListMeta
				yym3465 := z.DecBinary()
				_ = yym3465
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3464) {
				} else {
					z.DecFallback(yyv3464, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3466 := &x.Items
				yym3467 := z.DecBinary()
				_ = yym3467
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3466), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3461)
		} // end switch yys3461
	} // end for yyj3461
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3468 int
	var yyb3468 bool
	var yyhl3468 bool = l >= 0
	yyj3468++
	if yyhl3468 {
		yyb3468 = yyj3468 > l
	} else {
		yyb3468 = r.CheckBreak()
	}
	if yyb3468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3468++
	if yyhl3468 {
		yyb3468 = yyj3468 > l
	} else {
		yyb3468 = r.CheckBreak()
	}
	if yyb3468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3468++
	if yyhl3468 {
		yyb3468 = yyj3468 > l
	} else {
		yyb3468 = r.CheckBreak()
	}
	if yyb3468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3471 := &x.ListMeta
		yym3472 := z.DecBinary()
		_ = yym3472
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3471) {
		} else {
			z.DecFallback(yyv3471, false)
		}
	}
	yyj3468++
	if yyhl3468 {
		yyb3468 = yyj3468 > l
	} else {
		yyb3468 = r.CheckBreak()
	}
	if yyb3468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3473 := &x.Items
		yym3474 := z.DecBinary()
		_ = yym3474
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3473), d)
		}
	}
	for {
		yyj3468++
		if yyhl3468 {
			yyb3468 = yyj3468 > l
		} else {
			yyb3468 = r.CheckBreak()
		}
		if yyb3468 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3468-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3475 := z.EncBinary()
		_ = yym3475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3476 := !z.EncBinary()
			yy2arr3476 := z.EncBasicHandle().StructToArray
			var yyq3476 [5]bool
			_, _, _ = yysep3476, yyq3476, yy2arr3476
			const yyr3476 bool = false
			yyq3476[0] = x.Kind != ""
			yyq3476[1] = x.APIVersion != ""
			yyq3476[2] = true
			yyq3476[3] = len(x.Data) != 0
			yyq3476[4] = x.Type != ""
			var yynn3476 int
			if yyr3476 || yy2arr3476 {
				r.EncodeArrayStart(5)
			} else {
				yynn3476 = 0
				for _, b := range yyq3476 {
					if b {
						yynn3476++
					}
				}
				r.EncodeMapStart(yynn3476)
				yynn3476 = 0
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3476[0] {
					yym3478 := z.EncBinary()
					_ = yym3478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3479 := z.EncBinary()
					_ = yym3479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3476[1] {
					yym3481 := z.EncBinary()
					_ = yym3481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3476[2] {
					yy3484 := &x.ObjectMeta
					yy3484.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3485 := &x.ObjectMeta
					yy3485.CodecEncodeSelf(e)
				}
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3476[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3487 := z.EncBinary()
						_ = yym3487
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3476[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3488 := z.EncBinary()
						_ = yym3488
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3476[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3476[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3476 || yy2arr3476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3490 := z.DecBinary()
	_ = yym3490
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3491 := r.ContainerType()
		if yyct3491 == codecSelferValueTypeMap1234 {
			yyl3491 := r.ReadMapStart()
			if yyl3491 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3491, d)
			}
		} else if yyct3491 == codecSelferValueTypeArray1234 {
			yyl3491 := r.ReadArrayStart()
			if yyl3491 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3491, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3492Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3492Slc
	var yyhl3492 bool = l >= 0
	for yyj3492 := 0; ; yyj3492++ {
		if yyhl3492 {
			if yyj3492 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3492Slc = r.DecodeBytes(yys3492Slc, true, true)
		yys3492 := string(yys3492Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3492 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3495 := &x.ObjectMeta
				yyv3495.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3496 := &x.Data
				yym3497 := z.DecBinary()
				_ = yym3497
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3496), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3492)
		} // end switch yys3492
	} // end for yyj3492
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3499 int
	var yyb3499 bool
	var yyhl3499 bool = l >= 0
	yyj3499++
	if yyhl3499 {
		yyb3499 = yyj3499 > l
	} else {
		yyb3499 = r.CheckBreak()
	}
	if yyb3499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3499++
	if yyhl3499 {
		yyb3499 = yyj3499 > l
	} else {
		yyb3499 = r.CheckBreak()
	}
	if yyb3499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3499++
	if yyhl3499 {
		yyb3499 = yyj3499 > l
	} else {
		yyb3499 = r.CheckBreak()
	}
	if yyb3499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3502 := &x.ObjectMeta
		yyv3502.CodecDecodeSelf(d)
	}
	yyj3499++
	if yyhl3499 {
		yyb3499 = yyj3499 > l
	} else {
		yyb3499 = r.CheckBreak()
	}
	if yyb3499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3503 := &x.Data
		yym3504 := z.DecBinary()
		_ = yym3504
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3503), d)
		}
	}
	yyj3499++
	if yyhl3499 {
		yyb3499 = yyj3499 > l
	} else {
		yyb3499 = r.CheckBreak()
	}
	if yyb3499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3499++
		if yyhl3499 {
			yyb3499 = yyj3499 > l
		} else {
			yyb3499 = r.CheckBreak()
		}
		if yyb3499 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3499-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3506 := z.EncBinary()
	_ = yym3506
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3507 := z.DecBinary()
	_ = yym3507
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3508 := z.EncBinary()
		_ = yym3508
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3509 := !z.EncBinary()
			yy2arr3509 := z.EncBasicHandle().StructToArray
			var yyq3509 [4]bool
			_, _, _ = yysep3509, yyq3509, yy2arr3509
			const yyr3509 bool = false
			yyq3509[0] = x.Kind != ""
			yyq3509[1] = x.APIVersion != ""
			yyq3509[2] = true
			var yynn3509 int
			if yyr3509 || yy2arr3509 {
				r.EncodeArrayStart(4)
			} else {
				yynn3509 = 1
				for _, b := range yyq3509 {
					if b {
						yynn3509++
					}
				}
				r.EncodeMapStart(yynn3509)
				yynn3509 = 0
			}
			if yyr3509 || yy2arr3509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3509[0] {
					yym3511 := z.EncBinary()
					_ = yym3511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3509[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3512 := z.EncBinary()
					_ = yym3512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3509 || yy2arr3509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3509[1] {
					yym3514 := z.EncBinary()
					_ = yym3514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3509[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3515 := z.EncBinary()
					_ = yym3515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3509 || yy2arr3509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3509[2] {
					yy3517 := &x.ListMeta
					yym3518 := z.EncBinary()
					_ = yym3518
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3517) {
					} else {
						z.EncFallback(yy3517)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3509[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3519 := &x.ListMeta
					yym3520 := z.EncBinary()
					_ = yym3520
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3519) {
					} else {
						z.EncFallback(yy3519)
					}
				}
			}
			if yyr3509 || yy2arr3509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3522 := z.EncBinary()
					_ = yym3522
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3509 || yy2arr3509 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3524 := z.DecBinary()
	_ = yym3524
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3525 := r.ContainerType()
		if yyct3525 == codecSelferValueTypeMap1234 {
			yyl3525 := r.ReadMapStart()
			if yyl3525 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3525, d)
			}
		} else if yyct3525 == codecSelferValueTypeArray1234 {
			yyl3525 := r.ReadArrayStart()
			if yyl3525 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3525, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3526Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3526Slc
	var yyhl3526 bool = l >= 0
	for yyj3526 := 0; ; yyj3526++ {
		if yyhl3526 {
			if yyj3526 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3526Slc = r.DecodeBytes(yys3526Slc, true, true)
		yys3526 := string(yys3526Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3526 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3529 := &x.ListMeta
				yym3530 := z.DecBinary()
				_ = yym3530
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3529) {
				} else {
					z.DecFallback(yyv3529, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3531 := &x.Items
				yym3532 := z.DecBinary()
				_ = yym3532
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3531), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3526)
		} // end switch yys3526
	} // end for yyj3526
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3533 int
	var yyb3533 bool
	var yyhl3533 bool = l >= 0
	yyj3533++
	if yyhl3533 {
		yyb3533 = yyj3533 > l
	} else {
		yyb3533 = r.CheckBreak()
	}
	if yyb3533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3533++
	if yyhl3533 {
		yyb3533 = yyj3533 > l
	} else {
		yyb3533 = r.CheckBreak()
	}
	if yyb3533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3533++
	if yyhl3533 {
		yyb3533 = yyj3533 > l
	} else {
		yyb3533 = r.CheckBreak()
	}
	if yyb3533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3536 := &x.ListMeta
		yym3537 := z.DecBinary()
		_ = yym3537
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3536) {
		} else {
			z.DecFallback(yyv3536, false)
		}
	}
	yyj3533++
	if yyhl3533 {
		yyb3533 = yyj3533 > l
	} else {
		yyb3533 = r.CheckBreak()
	}
	if yyb3533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3538 := &x.Items
		yym3539 := z.DecBinary()
		_ = yym3539
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3538), d)
		}
	}
	for {
		yyj3533++
		if yyhl3533 {
			yyb3533 = yyj3533 > l
		} else {
			yyb3533 = r.CheckBreak()
		}
		if yyb3533 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3533-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3540 := z.EncBinary()
	_ = yym3540
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3541 := z.DecBinary()
	_ = yym3541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3542 := z.EncBinary()
	_ = yym3542
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3543 := z.DecBinary()
	_ = yym3543
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3544 := z.EncBinary()
		_ = yym3544
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3545 := !z.EncBinary()
			yy2arr3545 := z.EncBasicHandle().StructToArray
			var yyq3545 [4]bool
			_, _, _ = yysep3545, yyq3545, yy2arr3545
			const yyr3545 bool = false
			yyq3545[2] = x.Message != ""
			yyq3545[3] = x.Error != ""
			var yynn3545 int
			if yyr3545 || yy2arr3545 {
				r.EncodeArrayStart(4)
			} else {
				yynn3545 = 2
				for _, b := range yyq3545 {
					if b {
						yynn3545++
					}
				}
				r.EncodeMapStart(yynn3545)
				yynn3545 = 0
			}
			if yyr3545 || yy2arr3545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3545 || yy2arr3545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3545 || yy2arr3545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3545[2] {
					yym3549 := z.EncBinary()
					_ = yym3549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3545[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3545 || yy2arr3545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3545[3] {
					yym3552 := z.EncBinary()
					_ = yym3552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3545[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3553 := z.EncBinary()
					_ = yym3553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3545 || yy2arr3545 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3554 := z.DecBinary()
	_ = yym3554
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3555 := r.ContainerType()
		if yyct3555 == codecSelferValueTypeMap1234 {
			yyl3555 := r.ReadMapStart()
			if yyl3555 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3555, d)
			}
		} else if yyct3555 == codecSelferValueTypeArray1234 {
			yyl3555 := r.ReadArrayStart()
			if yyl3555 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3555, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3556Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3556Slc
	var yyhl3556 bool = l >= 0
	for yyj3556 := 0; ; yyj3556++ {
		if yyhl3556 {
			if yyj3556 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3556Slc = r.DecodeBytes(yys3556Slc, true, true)
		yys3556 := string(yys3556Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3556 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3556)
		} // end switch yys3556
	} // end for yyj3556
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3561 int
	var yyb3561 bool
	var yyhl3561 bool = l >= 0
	yyj3561++
	if yyhl3561 {
		yyb3561 = yyj3561 > l
	} else {
		yyb3561 = r.CheckBreak()
	}
	if yyb3561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3561++
	if yyhl3561 {
		yyb3561 = yyj3561 > l
	} else {
		yyb3561 = r.CheckBreak()
	}
	if yyb3561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3561++
	if yyhl3561 {
		yyb3561 = yyj3561 > l
	} else {
		yyb3561 = r.CheckBreak()
	}
	if yyb3561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3561++
	if yyhl3561 {
		yyb3561 = yyj3561 > l
	} else {
		yyb3561 = r.CheckBreak()
	}
	if yyb3561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3561++
		if yyhl3561 {
			yyb3561 = yyj3561 > l
		} else {
			yyb3561 = r.CheckBreak()
		}
		if yyb3561 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3561-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3566 := z.EncBinary()
		_ = yym3566
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3567 := !z.EncBinary()
			yy2arr3567 := z.EncBasicHandle().StructToArray
			var yyq3567 [4]bool
			_, _, _ = yysep3567, yyq3567, yy2arr3567
			const yyr3567 bool = false
			yyq3567[0] = x.Kind != ""
			yyq3567[1] = x.APIVersion != ""
			yyq3567[2] = true
			yyq3567[3] = len(x.Conditions) != 0
			var yynn3567 int
			if yyr3567 || yy2arr3567 {
				r.EncodeArrayStart(4)
			} else {
				yynn3567 = 0
				for _, b := range yyq3567 {
					if b {
						yynn3567++
					}
				}
				r.EncodeMapStart(yynn3567)
				yynn3567 = 0
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3567[0] {
					yym3569 := z.EncBinary()
					_ = yym3569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3567[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3570 := z.EncBinary()
					_ = yym3570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3567[1] {
					yym3572 := z.EncBinary()
					_ = yym3572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3567[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3573 := z.EncBinary()
					_ = yym3573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3567[2] {
					yy3575 := &x.ObjectMeta
					yy3575.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3567[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3576 := &x.ObjectMeta
					yy3576.CodecEncodeSelf(e)
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3567[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3578 := z.EncBinary()
						_ = yym3578
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3567[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3579 := z.EncBinary()
						_ = yym3579
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3580 := z.DecBinary()
	_ = yym3580
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3581 := r.ContainerType()
		if yyct3581 == codecSelferValueTypeMap1234 {
			yyl3581 := r.ReadMapStart()
			if yyl3581 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3581, d)
			}
		} else if yyct3581 == codecSelferValueTypeArray1234 {
			yyl3581 := r.ReadArrayStart()
			if yyl3581 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3581, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3582Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3582Slc
	var yyhl3582 bool = l >= 0
	for yyj3582 := 0; ; yyj3582++ {
		if yyhl3582 {
			if yyj3582 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3582Slc = r.DecodeBytes(yys3582Slc, true, true)
		yys3582 := string(yys3582Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3582 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3585 := &x.ObjectMeta
				yyv3585.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3586 := &x.Conditions
				yym3587 := z.DecBinary()
				_ = yym3587
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3586), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3582)
		} // end switch yys3582
	} // end for yyj3582
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3588 int
	var yyb3588 bool
	var yyhl3588 bool = l >= 0
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3591 := &x.ObjectMeta
		yyv3591.CodecDecodeSelf(d)
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3592 := &x.Conditions
		yym3593 := z.DecBinary()
		_ = yym3593
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3592), d)
		}
	}
	for {
		yyj3588++
		if yyhl3588 {
			yyb3588 = yyj3588 > l
		} else {
			yyb3588 = r.CheckBreak()
		}
		if yyb3588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3594 := z.EncBinary()
		_ = yym3594
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3595 := !z.EncBinary()
			yy2arr3595 := z.EncBasicHandle().StructToArray
			var yyq3595 [4]bool
			_, _, _ = yysep3595, yyq3595, yy2arr3595
			const yyr3595 bool = false
			yyq3595[0] = x.Kind != ""
			yyq3595[1] = x.APIVersion != ""
			yyq3595[2] = true
			var yynn3595 int
			if yyr3595 || yy2arr3595 {
				r.EncodeArrayStart(4)
			} else {
				yynn3595 = 1
				for _, b := range yyq3595 {
					if b {
						yynn3595++
					}
				}
				r.EncodeMapStart(yynn3595)
				yynn3595 = 0
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3595[0] {
					yym3597 := z.EncBinary()
					_ = yym3597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3595[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3598 := z.EncBinary()
					_ = yym3598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3595[1] {
					yym3600 := z.EncBinary()
					_ = yym3600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3595[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3601 := z.EncBinary()
					_ = yym3601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3595[2] {
					yy3603 := &x.ListMeta
					yym3604 := z.EncBinary()
					_ = yym3604
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3603) {
					} else {
						z.EncFallback(yy3603)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3595[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3605 := &x.ListMeta
					yym3606 := z.EncBinary()
					_ = yym3606
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3605) {
					} else {
						z.EncFallback(yy3605)
					}
				}
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3608 := z.EncBinary()
					_ = yym3608
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3609 := z.EncBinary()
					_ = yym3609
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3610 := z.DecBinary()
	_ = yym3610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3611 := r.ContainerType()
		if yyct3611 == codecSelferValueTypeMap1234 {
			yyl3611 := r.ReadMapStart()
			if yyl3611 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3611, d)
			}
		} else if yyct3611 == codecSelferValueTypeArray1234 {
			yyl3611 := r.ReadArrayStart()
			if yyl3611 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3611, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3612Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3612Slc
	var yyhl3612 bool = l >= 0
	for yyj3612 := 0; ; yyj3612++ {
		if yyhl3612 {
			if yyj3612 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3612Slc = r.DecodeBytes(yys3612Slc, true, true)
		yys3612 := string(yys3612Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3612 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3615 := &x.ListMeta
				yym3616 := z.DecBinary()
				_ = yym3616
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3615) {
				} else {
					z.DecFallback(yyv3615, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3617 := &x.Items
				yym3618 := z.DecBinary()
				_ = yym3618
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3617), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3612)
		} // end switch yys3612
	} // end for yyj3612
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3619 int
	var yyb3619 bool
	var yyhl3619 bool = l >= 0
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3622 := &x.ListMeta
		yym3623 := z.DecBinary()
		_ = yym3623
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3622) {
		} else {
			z.DecFallback(yyv3622, false)
		}
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3624 := &x.Items
		yym3625 := z.DecBinary()
		_ = yym3625
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3624), d)
		}
	}
	for {
		yyj3619++
		if yyhl3619 {
			yyb3619 = yyj3619 > l
		} else {
			yyb3619 = r.CheckBreak()
		}
		if yyb3619 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3619-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3626 := z.EncBinary()
		_ = yym3626
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3627 := !z.EncBinary()
			yy2arr3627 := z.EncBasicHandle().StructToArray
			var yyq3627 [5]bool
			_, _, _ = yysep3627, yyq3627, yy2arr3627
			const yyr3627 bool = false
			yyq3627[0] = x.Capabilities != nil
			yyq3627[1] = x.Privileged != nil
			yyq3627[2] = x.SELinuxOptions != nil
			yyq3627[3] = x.RunAsUser != nil
			yyq3627[4] = x.RunAsNonRoot != nil
			var yynn3627 int
			if yyr3627 || yy2arr3627 {
				r.EncodeArrayStart(5)
			} else {
				yynn3627 = 0
				for _, b := range yyq3627 {
					if b {
						yynn3627++
					}
				}
				r.EncodeMapStart(yynn3627)
				yynn3627 = 0
			}
			if yyr3627 || yy2arr3627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3627[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3627[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3627 || yy2arr3627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3627[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3630 := *x.Privileged
						yym3631 := z.EncBinary()
						_ = yym3631
						if false {
						} else {
							r.EncodeBool(bool(yy3630))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3627[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3632 := *x.Privileged
						yym3633 := z.EncBinary()
						_ = yym3633
						if false {
						} else {
							r.EncodeBool(bool(yy3632))
						}
					}
				}
			}
			if yyr3627 || yy2arr3627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3627[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3627[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3627 || yy2arr3627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3627[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3636 := *x.RunAsUser
						yym3637 := z.EncBinary()
						_ = yym3637
						if false {
						} else {
							r.EncodeInt(int64(yy3636))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3627[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3638 := *x.RunAsUser
						yym3639 := z.EncBinary()
						_ = yym3639
						if false {
						} else {
							r.EncodeInt(int64(yy3638))
						}
					}
				}
			}
			if yyr3627 || yy2arr3627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3627[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3641 := *x.RunAsNonRoot
						yym3642 := z.EncBinary()
						_ = yym3642
						if false {
						} else {
							r.EncodeBool(bool(yy3641))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3627[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3643 := *x.RunAsNonRoot
						yym3644 := z.EncBinary()
						_ = yym3644
						if false {
						} else {
							r.EncodeBool(bool(yy3643))
						}
					}
				}
			}
			if yyr3627 || yy2arr3627 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3645 := z.DecBinary()
	_ = yym3645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3646 := r.ContainerType()
		if yyct3646 == codecSelferValueTypeMap1234 {
			yyl3646 := r.ReadMapStart()
			if yyl3646 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3646, d)
			}
		} else if yyct3646 == codecSelferValueTypeArray1234 {
			yyl3646 := r.ReadArrayStart()
			if yyl3646 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3646, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3647Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3647Slc
	var yyhl3647 bool = l >= 0
	for yyj3647 := 0; ; yyj3647++ {
		if yyhl3647 {
			if yyj3647 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3647Slc = r.DecodeBytes(yys3647Slc, true, true)
		yys3647 := string(yys3647Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3647 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3650 := z.DecBinary()
				_ = yym3650
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3653 := z.DecBinary()
				_ = yym3653
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3655 := z.DecBinary()
				_ = yym3655
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3647)
		} // end switch yys3647
	} // end for yyj3647
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3656 int
	var yyb3656 bool
	var yyhl3656 bool = l >= 0
	yyj3656++
	if yyhl3656 {
		yyb3656 = yyj3656 > l
	} else {
		yyb3656 = r.CheckBreak()
	}
	if yyb3656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3656++
	if yyhl3656 {
		yyb3656 = yyj3656 > l
	} else {
		yyb3656 = r.CheckBreak()
	}
	if yyb3656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3659 := z.DecBinary()
		_ = yym3659
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3656++
	if yyhl3656 {
		yyb3656 = yyj3656 > l
	} else {
		yyb3656 = r.CheckBreak()
	}
	if yyb3656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3656++
	if yyhl3656 {
		yyb3656 = yyj3656 > l
	} else {
		yyb3656 = r.CheckBreak()
	}
	if yyb3656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3662 := z.DecBinary()
		_ = yym3662
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3656++
	if yyhl3656 {
		yyb3656 = yyj3656 > l
	} else {
		yyb3656 = r.CheckBreak()
	}
	if yyb3656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3664 := z.DecBinary()
		_ = yym3664
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3656++
		if yyhl3656 {
			yyb3656 = yyj3656 > l
		} else {
			yyb3656 = r.CheckBreak()
		}
		if yyb3656 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3656-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3665 := z.EncBinary()
		_ = yym3665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3666 := !z.EncBinary()
			yy2arr3666 := z.EncBasicHandle().StructToArray
			var yyq3666 [4]bool
			_, _, _ = yysep3666, yyq3666, yy2arr3666
			const yyr3666 bool = false
			yyq3666[0] = x.User != ""
			yyq3666[1] = x.Role != ""
			yyq3666[2] = x.Type != ""
			yyq3666[3] = x.Level != ""
			var yynn3666 int
			if yyr3666 || yy2arr3666 {
				r.EncodeArrayStart(4)
			} else {
				yynn3666 = 0
				for _, b := range yyq3666 {
					if b {
						yynn3666++
					}
				}
				r.EncodeMapStart(yynn3666)
				yynn3666 = 0
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[0] {
					yym3668 := z.EncBinary()
					_ = yym3668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3666[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3669 := z.EncBinary()
					_ = yym3669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[1] {
					yym3671 := z.EncBinary()
					_ = yym3671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3666[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3672 := z.EncBinary()
					_ = yym3672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[2] {
					yym3674 := z.EncBinary()
					_ = yym3674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3666[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3675 := z.EncBinary()
					_ = yym3675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3666[3] {
					yym3677 := z.EncBinary()
					_ = yym3677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3666[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3678 := z.EncBinary()
					_ = yym3678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3666 || yy2arr3666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3679 := z.DecBinary()
	_ = yym3679
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3680 := r.ContainerType()
		if yyct3680 == codecSelferValueTypeMap1234 {
			yyl3680 := r.ReadMapStart()
			if yyl3680 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3680, d)
			}
		} else if yyct3680 == codecSelferValueTypeArray1234 {
			yyl3680 := r.ReadArrayStart()
			if yyl3680 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3680, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3681Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3681Slc
	var yyhl3681 bool = l >= 0
	for yyj3681 := 0; ; yyj3681++ {
		if yyhl3681 {
			if yyj3681 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3681Slc = r.DecodeBytes(yys3681Slc, true, true)
		yys3681 := string(yys3681Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3681 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3681)
		} // end switch yys3681
	} // end for yyj3681
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3686 int
	var yyb3686 bool
	var yyhl3686 bool = l >= 0
	yyj3686++
	if yyhl3686 {
		yyb3686 = yyj3686 > l
	} else {
		yyb3686 = r.CheckBreak()
	}
	if yyb3686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3686++
	if yyhl3686 {
		yyb3686 = yyj3686 > l
	} else {
		yyb3686 = r.CheckBreak()
	}
	if yyb3686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3686++
	if yyhl3686 {
		yyb3686 = yyj3686 > l
	} else {
		yyb3686 = r.CheckBreak()
	}
	if yyb3686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3686++
	if yyhl3686 {
		yyb3686 = yyj3686 > l
	} else {
		yyb3686 = r.CheckBreak()
	}
	if yyb3686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3686++
		if yyhl3686 {
			yyb3686 = yyj3686 > l
		} else {
			yyb3686 = r.CheckBreak()
		}
		if yyb3686 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3686-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3691 := z.EncBinary()
		_ = yym3691
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3692 := !z.EncBinary()
			yy2arr3692 := z.EncBasicHandle().StructToArray
			var yyq3692 [5]bool
			_, _, _ = yysep3692, yyq3692, yy2arr3692
			const yyr3692 bool = false
			yyq3692[0] = x.Kind != ""
			yyq3692[1] = x.APIVersion != ""
			yyq3692[2] = true
			var yynn3692 int
			if yyr3692 || yy2arr3692 {
				r.EncodeArrayStart(5)
			} else {
				yynn3692 = 2
				for _, b := range yyq3692 {
					if b {
						yynn3692++
					}
				}
				r.EncodeMapStart(yynn3692)
				yynn3692 = 0
			}
			if yyr3692 || yy2arr3692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3692[0] {
					yym3694 := z.EncBinary()
					_ = yym3694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3692[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3695 := z.EncBinary()
					_ = yym3695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3692 || yy2arr3692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3692[1] {
					yym3697 := z.EncBinary()
					_ = yym3697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3692[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3698 := z.EncBinary()
					_ = yym3698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3692 || yy2arr3692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3692[2] {
					yy3700 := &x.ObjectMeta
					yy3700.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3692[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3701 := &x.ObjectMeta
					yy3701.CodecEncodeSelf(e)
				}
			}
			if yyr3692 || yy2arr3692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3703 := z.EncBinary()
				_ = yym3703
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3704 := z.EncBinary()
				_ = yym3704
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3692 || yy2arr3692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3706 := z.EncBinary()
					_ = yym3706
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3707 := z.EncBinary()
					_ = yym3707
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3692 || yy2arr3692 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3708 := z.DecBinary()
	_ = yym3708
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3709 := r.ContainerType()
		if yyct3709 == codecSelferValueTypeMap1234 {
			yyl3709 := r.ReadMapStart()
			if yyl3709 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3709, d)
			}
		} else if yyct3709 == codecSelferValueTypeArray1234 {
			yyl3709 := r.ReadArrayStart()
			if yyl3709 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3709, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3710Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3710Slc
	var yyhl3710 bool = l >= 0
	for yyj3710 := 0; ; yyj3710++ {
		if yyhl3710 {
			if yyj3710 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3710Slc = r.DecodeBytes(yys3710Slc, true, true)
		yys3710 := string(yys3710Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3710 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3713 := &x.ObjectMeta
				yyv3713.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3715 := &x.Data
				yym3716 := z.DecBinary()
				_ = yym3716
				if false {
				} else {
					*yyv3715 = r.DecodeBytes(*(*[]byte)(yyv3715), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3710)
		} // end switch yys3710
	} // end for yyj3710
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3717 int
	var yyb3717 bool
	var yyhl3717 bool = l >= 0
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3720 := &x.ObjectMeta
		yyv3720.CodecDecodeSelf(d)
	}
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3722 := &x.Data
		yym3723 := z.DecBinary()
		_ = yym3723
		if false {
		} else {
			*yyv3722 = r.DecodeBytes(*(*[]byte)(yyv3722), false, false)
		}
	}
	for {
		yyj3717++
		if yyhl3717 {
			yyb3717 = yyj3717 > l
		} else {
			yyb3717 = r.CheckBreak()
		}
		if yyb3717 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3717-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3724 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3724.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3725 := *v
	yyh3725, yyl3725 := z.DecSliceHelperStart()
	var yyc3725 bool
	if yyl3725 == 0 {
		if yyv3725 == nil {
			yyv3725 = []PersistentVolumeAccessMode{}
			yyc3725 = true
		} else if len(yyv3725) != 0 {
			yyv3725 = yyv3725[:0]
			yyc3725 = true
		}
	} else if yyl3725 > 0 {
		var yyrr3725, yyrl3725 int
		var yyrt3725 bool
		if yyl3725 > cap(yyv3725) {

			yyrl3725, yyrt3725 = z.DecInferLen(yyl3725, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3725 {
				if yyrl3725 <= cap(yyv3725) {
					yyv3725 = yyv3725[:yyrl3725]
				} else {
					yyv3725 = make([]PersistentVolumeAccessMode, yyrl3725)
				}
			} else {
				yyv3725 = make([]PersistentVolumeAccessMode, yyrl3725)
			}
			yyc3725 = true
			yyrr3725 = len(yyv3725)
		} else if yyl3725 != len(yyv3725) {
			yyv3725 = yyv3725[:yyl3725]
			yyc3725 = true
		}
		yyj3725 := 0
		for ; yyj3725 < yyrr3725; yyj3725++ {
			yyh3725.ElemContainerState(yyj3725)
			if r.TryDecodeAsNil() {
				yyv3725[yyj3725] = ""
			} else {
				yyv3725[yyj3725] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3725 {
			for ; yyj3725 < yyl3725; yyj3725++ {
				yyv3725 = append(yyv3725, "")
				yyh3725.ElemContainerState(yyj3725)
				if r.TryDecodeAsNil() {
					yyv3725[yyj3725] = ""
				} else {
					yyv3725[yyj3725] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3725 := 0
		for ; !r.CheckBreak(); yyj3725++ {

			if yyj3725 >= len(yyv3725) {
				yyv3725 = append(yyv3725, "") // var yyz3725 PersistentVolumeAccessMode
				yyc3725 = true
			}
			yyh3725.ElemContainerState(yyj3725)
			if yyj3725 < len(yyv3725) {
				if r.TryDecodeAsNil() {
					yyv3725[yyj3725] = ""
				} else {
					yyv3725[yyj3725] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3725 < len(yyv3725) {
			yyv3725 = yyv3725[:yyj3725]
			yyc3725 = true
		} else if yyj3725 == 0 && yyv3725 == nil {
			yyv3725 = []PersistentVolumeAccessMode{}
			yyc3725 = true
		}
	}
	yyh3725.End()
	if yyc3725 {
		*v = yyv3725
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3729 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3730 := &yyv3729
		yy3730.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3731 := *v
	yyh3731, yyl3731 := z.DecSliceHelperStart()
	var yyc3731 bool
	if yyl3731 == 0 {
		if yyv3731 == nil {
			yyv3731 = []PersistentVolume{}
			yyc3731 = true
		} else if len(yyv3731) != 0 {
			yyv3731 = yyv3731[:0]
			yyc3731 = true
		}
	} else if yyl3731 > 0 {
		var yyrr3731, yyrl3731 int
		var yyrt3731 bool
		if yyl3731 > cap(yyv3731) {

			yyrg3731 := len(yyv3731) > 0
			yyv23731 := yyv3731
			yyrl3731, yyrt3731 = z.DecInferLen(yyl3731, z.DecBasicHandle().MaxInitLen, 392)
			if yyrt3731 {
				if yyrl3731 <= cap(yyv3731) {
					yyv3731 = yyv3731[:yyrl3731]
				} else {
					yyv3731 = make([]PersistentVolume, yyrl3731)
				}
			} else {
				yyv3731 = make([]PersistentVolume, yyrl3731)
			}
			yyc3731 = true
			yyrr3731 = len(yyv3731)
			if yyrg3731 {
				copy(yyv3731, yyv23731)
			}
		} else if yyl3731 != len(yyv3731) {
			yyv3731 = yyv3731[:yyl3731]
			yyc3731 = true
		}
		yyj3731 := 0
		for ; yyj3731 < yyrr3731; yyj3731++ {
			yyh3731.ElemContainerState(yyj3731)
			if r.TryDecodeAsNil() {
				yyv3731[yyj3731] = PersistentVolume{}
			} else {
				yyv3732 := &yyv3731[yyj3731]
				yyv3732.CodecDecodeSelf(d)
			}

		}
		if yyrt3731 {
			for ; yyj3731 < yyl3731; yyj3731++ {
				yyv3731 = append(yyv3731, PersistentVolume{})
				yyh3731.ElemContainerState(yyj3731)
				if r.TryDecodeAsNil() {
					yyv3731[yyj3731] = PersistentVolume{}
				} else {
					yyv3733 := &yyv3731[yyj3731]
					yyv3733.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3731 := 0
		for ; !r.CheckBreak(); yyj3731++ {

			if yyj3731 >= len(yyv3731) {
				yyv3731 = append(yyv3731, PersistentVolume{}) // var yyz3731 PersistentVolume
				yyc3731 = true
			}
			yyh3731.ElemContainerState(yyj3731)
			if yyj3731 < len(yyv3731) {
				if r.TryDecodeAsNil() {
					yyv3731[yyj3731] = PersistentVolume{}
				} else {
					yyv3734 := &yyv3731[yyj3731]
					yyv3734.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3731 < len(yyv3731) {
			yyv3731 = yyv3731[:yyj3731]
			yyc3731 = true
		} else if yyj3731 == 0 && yyv3731 == nil {
			yyv3731 = []PersistentVolume{}
			yyc3731 = true
		}
	}
	yyh3731.End()
	if yyc3731 {
		*v = yyv3731
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3735 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3736 := &yyv3735
		yy3736.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3737 := *v
	yyh3737, yyl3737 := z.DecSliceHelperStart()
	var yyc3737 bool
	if yyl3737 == 0 {
		if yyv3737 == nil {
			yyv3737 = []PersistentVolumeClaim{}
			yyc3737 = true
		} else if len(yyv3737) != 0 {
			yyv3737 = yyv3737[:0]
			yyc3737 = true
		}
	} else if yyl3737 > 0 {
		var yyrr3737, yyrl3737 int
		var yyrt3737 bool
		if yyl3737 > cap(yyv3737) {

			yyrg3737 := len(yyv3737) > 0
			yyv23737 := yyv3737
			yyrl3737, yyrt3737 = z.DecInferLen(yyl3737, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt3737 {
				if yyrl3737 <= cap(yyv3737) {
					yyv3737 = yyv3737[:yyrl3737]
				} else {
					yyv3737 = make([]PersistentVolumeClaim, yyrl3737)
				}
			} else {
				yyv3737 = make([]PersistentVolumeClaim, yyrl3737)
			}
			yyc3737 = true
			yyrr3737 = len(yyv3737)
			if yyrg3737 {
				copy(yyv3737, yyv23737)
			}
		} else if yyl3737 != len(yyv3737) {
			yyv3737 = yyv3737[:yyl3737]
			yyc3737 = true
		}
		yyj3737 := 0
		for ; yyj3737 < yyrr3737; yyj3737++ {
			yyh3737.ElemContainerState(yyj3737)
			if r.TryDecodeAsNil() {
				yyv3737[yyj3737] = PersistentVolumeClaim{}
			} else {
				yyv3738 := &yyv3737[yyj3737]
				yyv3738.CodecDecodeSelf(d)
			}

		}
		if yyrt3737 {
			for ; yyj3737 < yyl3737; yyj3737++ {
				yyv3737 = append(yyv3737, PersistentVolumeClaim{})
				yyh3737.ElemContainerState(yyj3737)
				if r.TryDecodeAsNil() {
					yyv3737[yyj3737] = PersistentVolumeClaim{}
				} else {
					yyv3739 := &yyv3737[yyj3737]
					yyv3739.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3737 := 0
		for ; !r.CheckBreak(); yyj3737++ {

			if yyj3737 >= len(yyv3737) {
				yyv3737 = append(yyv3737, PersistentVolumeClaim{}) // var yyz3737 PersistentVolumeClaim
				yyc3737 = true
			}
			yyh3737.ElemContainerState(yyj3737)
			if yyj3737 < len(yyv3737) {
				if r.TryDecodeAsNil() {
					yyv3737[yyj3737] = PersistentVolumeClaim{}
				} else {
					yyv3740 := &yyv3737[yyj3737]
					yyv3740.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3737 < len(yyv3737) {
			yyv3737 = yyv3737[:yyj3737]
			yyc3737 = true
		} else if yyj3737 == 0 && yyv3737 == nil {
			yyv3737 = []PersistentVolumeClaim{}
			yyc3737 = true
		}
	}
	yyh3737.End()
	if yyc3737 {
		*v = yyv3737
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3741 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3742 := &yyv3741
		yy3742.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3743 := *v
	yyh3743, yyl3743 := z.DecSliceHelperStart()
	var yyc3743 bool
	if yyl3743 == 0 {
		if yyv3743 == nil {
			yyv3743 = []DownwardAPIVolumeFile{}
			yyc3743 = true
		} else if len(yyv3743) != 0 {
			yyv3743 = yyv3743[:0]
			yyc3743 = true
		}
	} else if yyl3743 > 0 {
		var yyrr3743, yyrl3743 int
		var yyrt3743 bool
		if yyl3743 > cap(yyv3743) {

			yyrg3743 := len(yyv3743) > 0
			yyv23743 := yyv3743
			yyrl3743, yyrt3743 = z.DecInferLen(yyl3743, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt3743 {
				if yyrl3743 <= cap(yyv3743) {
					yyv3743 = yyv3743[:yyrl3743]
				} else {
					yyv3743 = make([]DownwardAPIVolumeFile, yyrl3743)
				}
			} else {
				yyv3743 = make([]DownwardAPIVolumeFile, yyrl3743)
			}
			yyc3743 = true
			yyrr3743 = len(yyv3743)
			if yyrg3743 {
				copy(yyv3743, yyv23743)
			}
		} else if yyl3743 != len(yyv3743) {
			yyv3743 = yyv3743[:yyl3743]
			yyc3743 = true
		}
		yyj3743 := 0
		for ; yyj3743 < yyrr3743; yyj3743++ {
			yyh3743.ElemContainerState(yyj3743)
			if r.TryDecodeAsNil() {
				yyv3743[yyj3743] = DownwardAPIVolumeFile{}
			} else {
				yyv3744 := &yyv3743[yyj3743]
				yyv3744.CodecDecodeSelf(d)
			}

		}
		if yyrt3743 {
			for ; yyj3743 < yyl3743; yyj3743++ {
				yyv3743 = append(yyv3743, DownwardAPIVolumeFile{})
				yyh3743.ElemContainerState(yyj3743)
				if r.TryDecodeAsNil() {
					yyv3743[yyj3743] = DownwardAPIVolumeFile{}
				} else {
					yyv3745 := &yyv3743[yyj3743]
					yyv3745.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3743 := 0
		for ; !r.CheckBreak(); yyj3743++ {

			if yyj3743 >= len(yyv3743) {
				yyv3743 = append(yyv3743, DownwardAPIVolumeFile{}) // var yyz3743 DownwardAPIVolumeFile
				yyc3743 = true
			}
			yyh3743.ElemContainerState(yyj3743)
			if yyj3743 < len(yyv3743) {
				if r.TryDecodeAsNil() {
					yyv3743[yyj3743] = DownwardAPIVolumeFile{}
				} else {
					yyv3746 := &yyv3743[yyj3743]
					yyv3746.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3743 < len(yyv3743) {
			yyv3743 = yyv3743[:yyj3743]
			yyc3743 = true
		} else if yyj3743 == 0 && yyv3743 == nil {
			yyv3743 = []DownwardAPIVolumeFile{}
			yyc3743 = true
		}
	}
	yyh3743.End()
	if yyc3743 {
		*v = yyv3743
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3747 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3747.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3748 := *v
	yyh3748, yyl3748 := z.DecSliceHelperStart()
	var yyc3748 bool
	if yyl3748 == 0 {
		if yyv3748 == nil {
			yyv3748 = []Capability{}
			yyc3748 = true
		} else if len(yyv3748) != 0 {
			yyv3748 = yyv3748[:0]
			yyc3748 = true
		}
	} else if yyl3748 > 0 {
		var yyrr3748, yyrl3748 int
		var yyrt3748 bool
		if yyl3748 > cap(yyv3748) {

			yyrl3748, yyrt3748 = z.DecInferLen(yyl3748, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3748 {
				if yyrl3748 <= cap(yyv3748) {
					yyv3748 = yyv3748[:yyrl3748]
				} else {
					yyv3748 = make([]Capability, yyrl3748)
				}
			} else {
				yyv3748 = make([]Capability, yyrl3748)
			}
			yyc3748 = true
			yyrr3748 = len(yyv3748)
		} else if yyl3748 != len(yyv3748) {
			yyv3748 = yyv3748[:yyl3748]
			yyc3748 = true
		}
		yyj3748 := 0
		for ; yyj3748 < yyrr3748; yyj3748++ {
			yyh3748.ElemContainerState(yyj3748)
			if r.TryDecodeAsNil() {
				yyv3748[yyj3748] = ""
			} else {
				yyv3748[yyj3748] = Capability(r.DecodeString())
			}

		}
		if yyrt3748 {
			for ; yyj3748 < yyl3748; yyj3748++ {
				yyv3748 = append(yyv3748, "")
				yyh3748.ElemContainerState(yyj3748)
				if r.TryDecodeAsNil() {
					yyv3748[yyj3748] = ""
				} else {
					yyv3748[yyj3748] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj3748 := 0
		for ; !r.CheckBreak(); yyj3748++ {

			if yyj3748 >= len(yyv3748) {
				yyv3748 = append(yyv3748, "") // var yyz3748 Capability
				yyc3748 = true
			}
			yyh3748.ElemContainerState(yyj3748)
			if yyj3748 < len(yyv3748) {
				if r.TryDecodeAsNil() {
					yyv3748[yyj3748] = ""
				} else {
					yyv3748[yyj3748] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3748 < len(yyv3748) {
			yyv3748 = yyv3748[:yyj3748]
			yyc3748 = true
		} else if yyj3748 == 0 && yyv3748 == nil {
			yyv3748 = []Capability{}
			yyc3748 = true
		}
	}
	yyh3748.End()
	if yyc3748 {
		*v = yyv3748
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3752 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3753 := &yyv3752
		yy3753.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3754 := *v
	yyh3754, yyl3754 := z.DecSliceHelperStart()
	var yyc3754 bool
	if yyl3754 == 0 {
		if yyv3754 == nil {
			yyv3754 = []ContainerPort{}
			yyc3754 = true
		} else if len(yyv3754) != 0 {
			yyv3754 = yyv3754[:0]
			yyc3754 = true
		}
	} else if yyl3754 > 0 {
		var yyrr3754, yyrl3754 int
		var yyrt3754 bool
		if yyl3754 > cap(yyv3754) {

			yyrg3754 := len(yyv3754) > 0
			yyv23754 := yyv3754
			yyrl3754, yyrt3754 = z.DecInferLen(yyl3754, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3754 {
				if yyrl3754 <= cap(yyv3754) {
					yyv3754 = yyv3754[:yyrl3754]
				} else {
					yyv3754 = make([]ContainerPort, yyrl3754)
				}
			} else {
				yyv3754 = make([]ContainerPort, yyrl3754)
			}
			yyc3754 = true
			yyrr3754 = len(yyv3754)
			if yyrg3754 {
				copy(yyv3754, yyv23754)
			}
		} else if yyl3754 != len(yyv3754) {
			yyv3754 = yyv3754[:yyl3754]
			yyc3754 = true
		}
		yyj3754 := 0
		for ; yyj3754 < yyrr3754; yyj3754++ {
			yyh3754.ElemContainerState(yyj3754)
			if r.TryDecodeAsNil() {
				yyv3754[yyj3754] = ContainerPort{}
			} else {
				yyv3755 := &yyv3754[yyj3754]
				yyv3755.CodecDecodeSelf(d)
			}

		}
		if yyrt3754 {
			for ; yyj3754 < yyl3754; yyj3754++ {
				yyv3754 = append(yyv3754, ContainerPort{})
				yyh3754.ElemContainerState(yyj3754)
				if r.TryDecodeAsNil() {
					yyv3754[yyj3754] = ContainerPort{}
				} else {
					yyv3756 := &yyv3754[yyj3754]
					yyv3756.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3754 := 0
		for ; !r.CheckBreak(); yyj3754++ {

			if yyj3754 >= len(yyv3754) {
				yyv3754 = append(yyv3754, ContainerPort{}) // var yyz3754 ContainerPort
				yyc3754 = true
			}
			yyh3754.ElemContainerState(yyj3754)
			if yyj3754 < len(yyv3754) {
				if r.TryDecodeAsNil() {
					yyv3754[yyj3754] = ContainerPort{}
				} else {
					yyv3757 := &yyv3754[yyj3754]
					yyv3757.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3754 < len(yyv3754) {
			yyv3754 = yyv3754[:yyj3754]
			yyc3754 = true
		} else if yyj3754 == 0 && yyv3754 == nil {
			yyv3754 = []ContainerPort{}
			yyc3754 = true
		}
	}
	yyh3754.End()
	if yyc3754 {
		*v = yyv3754
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3758 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3759 := &yyv3758
		yy3759.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3760 := *v
	yyh3760, yyl3760 := z.DecSliceHelperStart()
	var yyc3760 bool
	if yyl3760 == 0 {
		if yyv3760 == nil {
			yyv3760 = []EnvVar{}
			yyc3760 = true
		} else if len(yyv3760) != 0 {
			yyv3760 = yyv3760[:0]
			yyc3760 = true
		}
	} else if yyl3760 > 0 {
		var yyrr3760, yyrl3760 int
		var yyrt3760 bool
		if yyl3760 > cap(yyv3760) {

			yyrg3760 := len(yyv3760) > 0
			yyv23760 := yyv3760
			yyrl3760, yyrt3760 = z.DecInferLen(yyl3760, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3760 {
				if yyrl3760 <= cap(yyv3760) {
					yyv3760 = yyv3760[:yyrl3760]
				} else {
					yyv3760 = make([]EnvVar, yyrl3760)
				}
			} else {
				yyv3760 = make([]EnvVar, yyrl3760)
			}
			yyc3760 = true
			yyrr3760 = len(yyv3760)
			if yyrg3760 {
				copy(yyv3760, yyv23760)
			}
		} else if yyl3760 != len(yyv3760) {
			yyv3760 = yyv3760[:yyl3760]
			yyc3760 = true
		}
		yyj3760 := 0
		for ; yyj3760 < yyrr3760; yyj3760++ {
			yyh3760.ElemContainerState(yyj3760)
			if r.TryDecodeAsNil() {
				yyv3760[yyj3760] = EnvVar{}
			} else {
				yyv3761 := &yyv3760[yyj3760]
				yyv3761.CodecDecodeSelf(d)
			}

		}
		if yyrt3760 {
			for ; yyj3760 < yyl3760; yyj3760++ {
				yyv3760 = append(yyv3760, EnvVar{})
				yyh3760.ElemContainerState(yyj3760)
				if r.TryDecodeAsNil() {
					yyv3760[yyj3760] = EnvVar{}
				} else {
					yyv3762 := &yyv3760[yyj3760]
					yyv3762.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3760 := 0
		for ; !r.CheckBreak(); yyj3760++ {

			if yyj3760 >= len(yyv3760) {
				yyv3760 = append(yyv3760, EnvVar{}) // var yyz3760 EnvVar
				yyc3760 = true
			}
			yyh3760.ElemContainerState(yyj3760)
			if yyj3760 < len(yyv3760) {
				if r.TryDecodeAsNil() {
					yyv3760[yyj3760] = EnvVar{}
				} else {
					yyv3763 := &yyv3760[yyj3760]
					yyv3763.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3760 < len(yyv3760) {
			yyv3760 = yyv3760[:yyj3760]
			yyc3760 = true
		} else if yyj3760 == 0 && yyv3760 == nil {
			yyv3760 = []EnvVar{}
			yyc3760 = true
		}
	}
	yyh3760.End()
	if yyc3760 {
		*v = yyv3760
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3764 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3765 := &yyv3764
		yy3765.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3766 := *v
	yyh3766, yyl3766 := z.DecSliceHelperStart()
	var yyc3766 bool
	if yyl3766 == 0 {
		if yyv3766 == nil {
			yyv3766 = []VolumeMount{}
			yyc3766 = true
		} else if len(yyv3766) != 0 {
			yyv3766 = yyv3766[:0]
			yyc3766 = true
		}
	} else if yyl3766 > 0 {
		var yyrr3766, yyrl3766 int
		var yyrt3766 bool
		if yyl3766 > cap(yyv3766) {

			yyrg3766 := len(yyv3766) > 0
			yyv23766 := yyv3766
			yyrl3766, yyrt3766 = z.DecInferLen(yyl3766, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3766 {
				if yyrl3766 <= cap(yyv3766) {
					yyv3766 = yyv3766[:yyrl3766]
				} else {
					yyv3766 = make([]VolumeMount, yyrl3766)
				}
			} else {
				yyv3766 = make([]VolumeMount, yyrl3766)
			}
			yyc3766 = true
			yyrr3766 = len(yyv3766)
			if yyrg3766 {
				copy(yyv3766, yyv23766)
			}
		} else if yyl3766 != len(yyv3766) {
			yyv3766 = yyv3766[:yyl3766]
			yyc3766 = true
		}
		yyj3766 := 0
		for ; yyj3766 < yyrr3766; yyj3766++ {
			yyh3766.ElemContainerState(yyj3766)
			if r.TryDecodeAsNil() {
				yyv3766[yyj3766] = VolumeMount{}
			} else {
				yyv3767 := &yyv3766[yyj3766]
				yyv3767.CodecDecodeSelf(d)
			}

		}
		if yyrt3766 {
			for ; yyj3766 < yyl3766; yyj3766++ {
				yyv3766 = append(yyv3766, VolumeMount{})
				yyh3766.ElemContainerState(yyj3766)
				if r.TryDecodeAsNil() {
					yyv3766[yyj3766] = VolumeMount{}
				} else {
					yyv3768 := &yyv3766[yyj3766]
					yyv3768.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3766 := 0
		for ; !r.CheckBreak(); yyj3766++ {

			if yyj3766 >= len(yyv3766) {
				yyv3766 = append(yyv3766, VolumeMount{}) // var yyz3766 VolumeMount
				yyc3766 = true
			}
			yyh3766.ElemContainerState(yyj3766)
			if yyj3766 < len(yyv3766) {
				if r.TryDecodeAsNil() {
					yyv3766[yyj3766] = VolumeMount{}
				} else {
					yyv3769 := &yyv3766[yyj3766]
					yyv3769.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3766 < len(yyv3766) {
			yyv3766 = yyv3766[:yyj3766]
			yyc3766 = true
		} else if yyj3766 == 0 && yyv3766 == nil {
			yyv3766 = []VolumeMount{}
			yyc3766 = true
		}
	}
	yyh3766.End()
	if yyc3766 {
		*v = yyv3766
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3770 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3771 := &yyv3770
		yy3771.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3772 := *v
	yyh3772, yyl3772 := z.DecSliceHelperStart()
	var yyc3772 bool
	if yyl3772 == 0 {
		if yyv3772 == nil {
			yyv3772 = []Pod{}
			yyc3772 = true
		} else if len(yyv3772) != 0 {
			yyv3772 = yyv3772[:0]
			yyc3772 = true
		}
	} else if yyl3772 > 0 {
		var yyrr3772, yyrl3772 int
		var yyrt3772 bool
		if yyl3772 > cap(yyv3772) {

			yyrg3772 := len(yyv3772) > 0
			yyv23772 := yyv3772
			yyrl3772, yyrt3772 = z.DecInferLen(yyl3772, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt3772 {
				if yyrl3772 <= cap(yyv3772) {
					yyv3772 = yyv3772[:yyrl3772]
				} else {
					yyv3772 = make([]Pod, yyrl3772)
				}
			} else {
				yyv3772 = make([]Pod, yyrl3772)
			}
			yyc3772 = true
			yyrr3772 = len(yyv3772)
			if yyrg3772 {
				copy(yyv3772, yyv23772)
			}
		} else if yyl3772 != len(yyv3772) {
			yyv3772 = yyv3772[:yyl3772]
			yyc3772 = true
		}
		yyj3772 := 0
		for ; yyj3772 < yyrr3772; yyj3772++ {
			yyh3772.ElemContainerState(yyj3772)
			if r.TryDecodeAsNil() {
				yyv3772[yyj3772] = Pod{}
			} else {
				yyv3773 := &yyv3772[yyj3772]
				yyv3773.CodecDecodeSelf(d)
			}

		}
		if yyrt3772 {
			for ; yyj3772 < yyl3772; yyj3772++ {
				yyv3772 = append(yyv3772, Pod{})
				yyh3772.ElemContainerState(yyj3772)
				if r.TryDecodeAsNil() {
					yyv3772[yyj3772] = Pod{}
				} else {
					yyv3774 := &yyv3772[yyj3772]
					yyv3774.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3772 := 0
		for ; !r.CheckBreak(); yyj3772++ {

			if yyj3772 >= len(yyv3772) {
				yyv3772 = append(yyv3772, Pod{}) // var yyz3772 Pod
				yyc3772 = true
			}
			yyh3772.ElemContainerState(yyj3772)
			if yyj3772 < len(yyv3772) {
				if r.TryDecodeAsNil() {
					yyv3772[yyj3772] = Pod{}
				} else {
					yyv3775 := &yyv3772[yyj3772]
					yyv3775.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3772 < len(yyv3772) {
			yyv3772 = yyv3772[:yyj3772]
			yyc3772 = true
		} else if yyj3772 == 0 && yyv3772 == nil {
			yyv3772 = []Pod{}
			yyc3772 = true
		}
	}
	yyh3772.End()
	if yyc3772 {
		*v = yyv3772
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3776 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3777 := &yyv3776
		yy3777.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3778 := *v
	yyh3778, yyl3778 := z.DecSliceHelperStart()
	var yyc3778 bool
	if yyl3778 == 0 {
		if yyv3778 == nil {
			yyv3778 = []NodeSelectorTerm{}
			yyc3778 = true
		} else if len(yyv3778) != 0 {
			yyv3778 = yyv3778[:0]
			yyc3778 = true
		}
	} else if yyl3778 > 0 {
		var yyrr3778, yyrl3778 int
		var yyrt3778 bool
		if yyl3778 > cap(yyv3778) {

			yyrg3778 := len(yyv3778) > 0
			yyv23778 := yyv3778
			yyrl3778, yyrt3778 = z.DecInferLen(yyl3778, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3778 {
				if yyrl3778 <= cap(yyv3778) {
					yyv3778 = yyv3778[:yyrl3778]
				} else {
					yyv3778 = make([]NodeSelectorTerm, yyrl3778)
				}
			} else {
				yyv3778 = make([]NodeSelectorTerm, yyrl3778)
			}
			yyc3778 = true
			yyrr3778 = len(yyv3778)
			if yyrg3778 {
				copy(yyv3778, yyv23778)
			}
		} else if yyl3778 != len(yyv3778) {
			yyv3778 = yyv3778[:yyl3778]
			yyc3778 = true
		}
		yyj3778 := 0
		for ; yyj3778 < yyrr3778; yyj3778++ {
			yyh3778.ElemContainerState(yyj3778)
			if r.TryDecodeAsNil() {
				yyv3778[yyj3778] = NodeSelectorTerm{}
			} else {
				yyv3779 := &yyv3778[yyj3778]
				yyv3779.CodecDecodeSelf(d)
			}

		}
		if yyrt3778 {
			for ; yyj3778 < yyl3778; yyj3778++ {
				yyv3778 = append(yyv3778, NodeSelectorTerm{})
				yyh3778.ElemContainerState(yyj3778)
				if r.TryDecodeAsNil() {
					yyv3778[yyj3778] = NodeSelectorTerm{}
				} else {
					yyv3780 := &yyv3778[yyj3778]
					yyv3780.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3778 := 0
		for ; !r.CheckBreak(); yyj3778++ {

			if yyj3778 >= len(yyv3778) {
				yyv3778 = append(yyv3778, NodeSelectorTerm{}) // var yyz3778 NodeSelectorTerm
				yyc3778 = true
			}
			yyh3778.ElemContainerState(yyj3778)
			if yyj3778 < len(yyv3778) {
				if r.TryDecodeAsNil() {
					yyv3778[yyj3778] = NodeSelectorTerm{}
				} else {
					yyv3781 := &yyv3778[yyj3778]
					yyv3781.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3778 < len(yyv3778) {
			yyv3778 = yyv3778[:yyj3778]
			yyc3778 = true
		} else if yyj3778 == 0 && yyv3778 == nil {
			yyv3778 = []NodeSelectorTerm{}
			yyc3778 = true
		}
	}
	yyh3778.End()
	if yyc3778 {
		*v = yyv3778
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3782 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3783 := &yyv3782
		yy3783.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3784 := *v
	yyh3784, yyl3784 := z.DecSliceHelperStart()
	var yyc3784 bool
	if yyl3784 == 0 {
		if yyv3784 == nil {
			yyv3784 = []NodeSelectorRequirement{}
			yyc3784 = true
		} else if len(yyv3784) != 0 {
			yyv3784 = yyv3784[:0]
			yyc3784 = true
		}
	} else if yyl3784 > 0 {
		var yyrr3784, yyrl3784 int
		var yyrt3784 bool
		if yyl3784 > cap(yyv3784) {

			yyrg3784 := len(yyv3784) > 0
			yyv23784 := yyv3784
			yyrl3784, yyrt3784 = z.DecInferLen(yyl3784, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3784 {
				if yyrl3784 <= cap(yyv3784) {
					yyv3784 = yyv3784[:yyrl3784]
				} else {
					yyv3784 = make([]NodeSelectorRequirement, yyrl3784)
				}
			} else {
				yyv3784 = make([]NodeSelectorRequirement, yyrl3784)
			}
			yyc3784 = true
			yyrr3784 = len(yyv3784)
			if yyrg3784 {
				copy(yyv3784, yyv23784)
			}
		} else if yyl3784 != len(yyv3784) {
			yyv3784 = yyv3784[:yyl3784]
			yyc3784 = true
		}
		yyj3784 := 0
		for ; yyj3784 < yyrr3784; yyj3784++ {
			yyh3784.ElemContainerState(yyj3784)
			if r.TryDecodeAsNil() {
				yyv3784[yyj3784] = NodeSelectorRequirement{}
			} else {
				yyv3785 := &yyv3784[yyj3784]
				yyv3785.CodecDecodeSelf(d)
			}

		}
		if yyrt3784 {
			for ; yyj3784 < yyl3784; yyj3784++ {
				yyv3784 = append(yyv3784, NodeSelectorRequirement{})
				yyh3784.ElemContainerState(yyj3784)
				if r.TryDecodeAsNil() {
					yyv3784[yyj3784] = NodeSelectorRequirement{}
				} else {
					yyv3786 := &yyv3784[yyj3784]
					yyv3786.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3784 := 0
		for ; !r.CheckBreak(); yyj3784++ {

			if yyj3784 >= len(yyv3784) {
				yyv3784 = append(yyv3784, NodeSelectorRequirement{}) // var yyz3784 NodeSelectorRequirement
				yyc3784 = true
			}
			yyh3784.ElemContainerState(yyj3784)
			if yyj3784 < len(yyv3784) {
				if r.TryDecodeAsNil() {
					yyv3784[yyj3784] = NodeSelectorRequirement{}
				} else {
					yyv3787 := &yyv3784[yyj3784]
					yyv3787.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3784 < len(yyv3784) {
			yyv3784 = yyv3784[:yyj3784]
			yyc3784 = true
		} else if yyj3784 == 0 && yyv3784 == nil {
			yyv3784 = []NodeSelectorRequirement{}
			yyc3784 = true
		}
	}
	yyh3784.End()
	if yyc3784 {
		*v = yyv3784
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3788 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3789 := &yyv3788
		yy3789.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3790 := *v
	yyh3790, yyl3790 := z.DecSliceHelperStart()
	var yyc3790 bool
	if yyl3790 == 0 {
		if yyv3790 == nil {
			yyv3790 = []PreferredSchedulingTerm{}
			yyc3790 = true
		} else if len(yyv3790) != 0 {
			yyv3790 = yyv3790[:0]
			yyc3790 = true
		}
	} else if yyl3790 > 0 {
		var yyrr3790, yyrl3790 int
		var yyrt3790 bool
		if yyl3790 > cap(yyv3790) {

			yyrg3790 := len(yyv3790) > 0
			yyv23790 := yyv3790
			yyrl3790, yyrt3790 = z.DecInferLen(yyl3790, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3790 {
				if yyrl3790 <= cap(yyv3790) {
					yyv3790 = yyv3790[:yyrl3790]
				} else {
					yyv3790 = make([]PreferredSchedulingTerm, yyrl3790)
				}
			} else {
				yyv3790 = make([]PreferredSchedulingTerm, yyrl3790)
			}
			yyc3790 = true
			yyrr3790 = len(yyv3790)
			if yyrg3790 {
				copy(yyv3790, yyv23790)
			}
		} else if yyl3790 != len(yyv3790) {
			yyv3790 = yyv3790[:yyl3790]
			yyc3790 = true
		}
		yyj3790 := 0
		for ; yyj3790 < yyrr3790; yyj3790++ {
			yyh3790.ElemContainerState(yyj3790)
			if r.TryDecodeAsNil() {
				yyv3790[yyj3790] = PreferredSchedulingTerm{}
			} else {
				yyv3791 := &yyv3790[yyj3790]
				yyv3791.CodecDecodeSelf(d)
			}

		}
		if yyrt3790 {
			for ; yyj3790 < yyl3790; yyj3790++ {
				yyv3790 = append(yyv3790, PreferredSchedulingTerm{})
				yyh3790.ElemContainerState(yyj3790)
				if r.TryDecodeAsNil() {
					yyv3790[yyj3790] = PreferredSchedulingTerm{}
				} else {
					yyv3792 := &yyv3790[yyj3790]
					yyv3792.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3790 := 0
		for ; !r.CheckBreak(); yyj3790++ {

			if yyj3790 >= len(yyv3790) {
				yyv3790 = append(yyv3790, PreferredSchedulingTerm{}) // var yyz3790 PreferredSchedulingTerm
				yyc3790 = true
			}
			yyh3790.ElemContainerState(yyj3790)
			if yyj3790 < len(yyv3790) {
				if r.TryDecodeAsNil() {
					yyv3790[yyj3790] = PreferredSchedulingTerm{}
				} else {
					yyv3793 := &yyv3790[yyj3790]
					yyv3793.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3790 < len(yyv3790) {
			yyv3790 = yyv3790[:yyj3790]
			yyc3790 = true
		} else if yyj3790 == 0 && yyv3790 == nil {
			yyv3790 = []PreferredSchedulingTerm{}
			yyc3790 = true
		}
	}
	yyh3790.End()
	if yyc3790 {
		*v = yyv3790
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3794 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3795 := &yyv3794
		yy3795.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3796 := *v
	yyh3796, yyl3796 := z.DecSliceHelperStart()
	var yyc3796 bool
	if yyl3796 == 0 {
		if yyv3796 == nil {
			yyv3796 = []Volume{}
			yyc3796 = true
		} else if len(yyv3796) != 0 {
			yyv3796 = yyv3796[:0]
			yyc3796 = true
		}
	} else if yyl3796 > 0 {
		var yyrr3796, yyrl3796 int
		var yyrt3796 bool
		if yyl3796 > cap(yyv3796) {

			yyrg3796 := len(yyv3796) > 0
			yyv23796 := yyv3796
			yyrl3796, yyrt3796 = z.DecInferLen(yyl3796, z.DecBasicHandle().MaxInitLen, 152)
			if yyrt3796 {
				if yyrl3796 <= cap(yyv3796) {
					yyv3796 = yyv3796[:yyrl3796]
				} else {
					yyv3796 = make([]Volume, yyrl3796)
				}
			} else {
				yyv3796 = make([]Volume, yyrl3796)
			}
			yyc3796 = true
			yyrr3796 = len(yyv3796)
			if yyrg3796 {
				copy(yyv3796, yyv23796)
			}
		} else if yyl3796 != len(yyv3796) {
			yyv3796 = yyv3796[:yyl3796]
			yyc3796 = true
		}
		yyj3796 := 0
		for ; yyj3796 < yyrr3796; yyj3796++ {
			yyh3796.ElemContainerState(yyj3796)
			if r.TryDecodeAsNil() {
				yyv3796[yyj3796] = Volume{}
			} else {
				yyv3797 := &yyv3796[yyj3796]
				yyv3797.CodecDecodeSelf(d)
			}

		}
		if yyrt3796 {
			for ; yyj3796 < yyl3796; yyj3796++ {
				yyv3796 = append(yyv3796, Volume{})
				yyh3796.ElemContainerState(yyj3796)
				if r.TryDecodeAsNil() {
					yyv3796[yyj3796] = Volume{}
				} else {
					yyv3798 := &yyv3796[yyj3796]
					yyv3798.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3796 := 0
		for ; !r.CheckBreak(); yyj3796++ {

			if yyj3796 >= len(yyv3796) {
				yyv3796 = append(yyv3796, Volume{}) // var yyz3796 Volume
				yyc3796 = true
			}
			yyh3796.ElemContainerState(yyj3796)
			if yyj3796 < len(yyv3796) {
				if r.TryDecodeAsNil() {
					yyv3796[yyj3796] = Volume{}
				} else {
					yyv3799 := &yyv3796[yyj3796]
					yyv3799.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3796 < len(yyv3796) {
			yyv3796 = yyv3796[:yyj3796]
			yyc3796 = true
		} else if yyj3796 == 0 && yyv3796 == nil {
			yyv3796 = []Volume{}
			yyc3796 = true
		}
	}
	yyh3796.End()
	if yyc3796 {
		*v = yyv3796
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3800 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3801 := &yyv3800
		yy3801.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3802 := *v
	yyh3802, yyl3802 := z.DecSliceHelperStart()
	var yyc3802 bool
	if yyl3802 == 0 {
		if yyv3802 == nil {
			yyv3802 = []Container{}
			yyc3802 = true
		} else if len(yyv3802) != 0 {
			yyv3802 = yyv3802[:0]
			yyc3802 = true
		}
	} else if yyl3802 > 0 {
		var yyrr3802, yyrl3802 int
		var yyrt3802 bool
		if yyl3802 > cap(yyv3802) {

			yyrg3802 := len(yyv3802) > 0
			yyv23802 := yyv3802
			yyrl3802, yyrt3802 = z.DecInferLen(yyl3802, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt3802 {
				if yyrl3802 <= cap(yyv3802) {
					yyv3802 = yyv3802[:yyrl3802]
				} else {
					yyv3802 = make([]Container, yyrl3802)
				}
			} else {
				yyv3802 = make([]Container, yyrl3802)
			}
			yyc3802 = true
			yyrr3802 = len(yyv3802)
			if yyrg3802 {
				copy(yyv3802, yyv23802)
			}
		} else if yyl3802 != len(yyv3802) {
			yyv3802 = yyv3802[:yyl3802]
			yyc3802 = true
		}
		yyj3802 := 0
		for ; yyj3802 < yyrr3802; yyj3802++ {
			yyh3802.ElemContainerState(yyj3802)
			if r.TryDecodeAsNil() {
				yyv3802[yyj3802] = Container{}
			} else {
				yyv3803 := &yyv3802[yyj3802]
				yyv3803.CodecDecodeSelf(d)
			}

		}
		if yyrt3802 {
			for ; yyj3802 < yyl3802; yyj3802++ {
				yyv3802 = append(yyv3802, Container{})
				yyh3802.ElemContainerState(yyj3802)
				if r.TryDecodeAsNil() {
					yyv3802[yyj3802] = Container{}
				} else {
					yyv3804 := &yyv3802[yyj3802]
					yyv3804.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3802 := 0
		for ; !r.CheckBreak(); yyj3802++ {

			if yyj3802 >= len(yyv3802) {
				yyv3802 = append(yyv3802, Container{}) // var yyz3802 Container
				yyc3802 = true
			}
			yyh3802.ElemContainerState(yyj3802)
			if yyj3802 < len(yyv3802) {
				if r.TryDecodeAsNil() {
					yyv3802[yyj3802] = Container{}
				} else {
					yyv3805 := &yyv3802[yyj3802]
					yyv3805.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3802 < len(yyv3802) {
			yyv3802 = yyv3802[:yyj3802]
			yyc3802 = true
		} else if yyj3802 == 0 && yyv3802 == nil {
			yyv3802 = []Container{}
			yyc3802 = true
		}
	}
	yyh3802.End()
	if yyc3802 {
		*v = yyv3802
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3806 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3807 := &yyv3806
		yy3807.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3808 := *v
	yyh3808, yyl3808 := z.DecSliceHelperStart()
	var yyc3808 bool
	if yyl3808 == 0 {
		if yyv3808 == nil {
			yyv3808 = []LocalObjectReference{}
			yyc3808 = true
		} else if len(yyv3808) != 0 {
			yyv3808 = yyv3808[:0]
			yyc3808 = true
		}
	} else if yyl3808 > 0 {
		var yyrr3808, yyrl3808 int
		var yyrt3808 bool
		if yyl3808 > cap(yyv3808) {

			yyrg3808 := len(yyv3808) > 0
			yyv23808 := yyv3808
			yyrl3808, yyrt3808 = z.DecInferLen(yyl3808, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3808 {
				if yyrl3808 <= cap(yyv3808) {
					yyv3808 = yyv3808[:yyrl3808]
				} else {
					yyv3808 = make([]LocalObjectReference, yyrl3808)
				}
			} else {
				yyv3808 = make([]LocalObjectReference, yyrl3808)
			}
			yyc3808 = true
			yyrr3808 = len(yyv3808)
			if yyrg3808 {
				copy(yyv3808, yyv23808)
			}
		} else if yyl3808 != len(yyv3808) {
			yyv3808 = yyv3808[:yyl3808]
			yyc3808 = true
		}
		yyj3808 := 0
		for ; yyj3808 < yyrr3808; yyj3808++ {
			yyh3808.ElemContainerState(yyj3808)
			if r.TryDecodeAsNil() {
				yyv3808[yyj3808] = LocalObjectReference{}
			} else {
				yyv3809 := &yyv3808[yyj3808]
				yyv3809.CodecDecodeSelf(d)
			}

		}
		if yyrt3808 {
			for ; yyj3808 < yyl3808; yyj3808++ {
				yyv3808 = append(yyv3808, LocalObjectReference{})
				yyh3808.ElemContainerState(yyj3808)
				if r.TryDecodeAsNil() {
					yyv3808[yyj3808] = LocalObjectReference{}
				} else {
					yyv3810 := &yyv3808[yyj3808]
					yyv3810.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3808 := 0
		for ; !r.CheckBreak(); yyj3808++ {

			if yyj3808 >= len(yyv3808) {
				yyv3808 = append(yyv3808, LocalObjectReference{}) // var yyz3808 LocalObjectReference
				yyc3808 = true
			}
			yyh3808.ElemContainerState(yyj3808)
			if yyj3808 < len(yyv3808) {
				if r.TryDecodeAsNil() {
					yyv3808[yyj3808] = LocalObjectReference{}
				} else {
					yyv3811 := &yyv3808[yyj3808]
					yyv3811.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3808 < len(yyv3808) {
			yyv3808 = yyv3808[:yyj3808]
			yyc3808 = true
		} else if yyj3808 == 0 && yyv3808 == nil {
			yyv3808 = []LocalObjectReference{}
			yyc3808 = true
		}
	}
	yyh3808.End()
	if yyc3808 {
		*v = yyv3808
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3812 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3813 := &yyv3812
		yy3813.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3814 := *v
	yyh3814, yyl3814 := z.DecSliceHelperStart()
	var yyc3814 bool
	if yyl3814 == 0 {
		if yyv3814 == nil {
			yyv3814 = []PodCondition{}
			yyc3814 = true
		} else if len(yyv3814) != 0 {
			yyv3814 = yyv3814[:0]
			yyc3814 = true
		}
	} else if yyl3814 > 0 {
		var yyrr3814, yyrl3814 int
		var yyrt3814 bool
		if yyl3814 > cap(yyv3814) {

			yyrg3814 := len(yyv3814) > 0
			yyv23814 := yyv3814
			yyrl3814, yyrt3814 = z.DecInferLen(yyl3814, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3814 {
				if yyrl3814 <= cap(yyv3814) {
					yyv3814 = yyv3814[:yyrl3814]
				} else {
					yyv3814 = make([]PodCondition, yyrl3814)
				}
			} else {
				yyv3814 = make([]PodCondition, yyrl3814)
			}
			yyc3814 = true
			yyrr3814 = len(yyv3814)
			if yyrg3814 {
				copy(yyv3814, yyv23814)
			}
		} else if yyl3814 != len(yyv3814) {
			yyv3814 = yyv3814[:yyl3814]
			yyc3814 = true
		}
		yyj3814 := 0
		for ; yyj3814 < yyrr3814; yyj3814++ {
			yyh3814.ElemContainerState(yyj3814)
			if r.TryDecodeAsNil() {
				yyv3814[yyj3814] = PodCondition{}
			} else {
				yyv3815 := &yyv3814[yyj3814]
				yyv3815.CodecDecodeSelf(d)
			}

		}
		if yyrt3814 {
			for ; yyj3814 < yyl3814; yyj3814++ {
				yyv3814 = append(yyv3814, PodCondition{})
				yyh3814.ElemContainerState(yyj3814)
				if r.TryDecodeAsNil() {
					yyv3814[yyj3814] = PodCondition{}
				} else {
					yyv3816 := &yyv3814[yyj3814]
					yyv3816.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3814 := 0
		for ; !r.CheckBreak(); yyj3814++ {

			if yyj3814 >= len(yyv3814) {
				yyv3814 = append(yyv3814, PodCondition{}) // var yyz3814 PodCondition
				yyc3814 = true
			}
			yyh3814.ElemContainerState(yyj3814)
			if yyj3814 < len(yyv3814) {
				if r.TryDecodeAsNil() {
					yyv3814[yyj3814] = PodCondition{}
				} else {
					yyv3817 := &yyv3814[yyj3814]
					yyv3817.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3814 < len(yyv3814) {
			yyv3814 = yyv3814[:yyj3814]
			yyc3814 = true
		} else if yyj3814 == 0 && yyv3814 == nil {
			yyv3814 = []PodCondition{}
			yyc3814 = true
		}
	}
	yyh3814.End()
	if yyc3814 {
		*v = yyv3814
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3818 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3819 := &yyv3818
		yy3819.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3820 := *v
	yyh3820, yyl3820 := z.DecSliceHelperStart()
	var yyc3820 bool
	if yyl3820 == 0 {
		if yyv3820 == nil {
			yyv3820 = []ContainerStatus{}
			yyc3820 = true
		} else if len(yyv3820) != 0 {
			yyv3820 = yyv3820[:0]
			yyc3820 = true
		}
	} else if yyl3820 > 0 {
		var yyrr3820, yyrl3820 int
		var yyrt3820 bool
		if yyl3820 > cap(yyv3820) {

			yyrg3820 := len(yyv3820) > 0
			yyv23820 := yyv3820
			yyrl3820, yyrt3820 = z.DecInferLen(yyl3820, z.DecBasicHandle().MaxInitLen, 128)
			if yyrt3820 {
				if yyrl3820 <= cap(yyv3820) {
					yyv3820 = yyv3820[:yyrl3820]
				} else {
					yyv3820 = make([]ContainerStatus, yyrl3820)
				}
			} else {
				yyv3820 = make([]ContainerStatus, yyrl3820)
			}
			yyc3820 = true
			yyrr3820 = len(yyv3820)
			if yyrg3820 {
				copy(yyv3820, yyv23820)
			}
		} else if yyl3820 != len(yyv3820) {
			yyv3820 = yyv3820[:yyl3820]
			yyc3820 = true
		}
		yyj3820 := 0
		for ; yyj3820 < yyrr3820; yyj3820++ {
			yyh3820.ElemContainerState(yyj3820)
			if r.TryDecodeAsNil() {
				yyv3820[yyj3820] = ContainerStatus{}
			} else {
				yyv3821 := &yyv3820[yyj3820]
				yyv3821.CodecDecodeSelf(d)
			}

		}
		if yyrt3820 {
			for ; yyj3820 < yyl3820; yyj3820++ {
				yyv3820 = append(yyv3820, ContainerStatus{})
				yyh3820.ElemContainerState(yyj3820)
				if r.TryDecodeAsNil() {
					yyv3820[yyj3820] = ContainerStatus{}
				} else {
					yyv3822 := &yyv3820[yyj3820]
					yyv3822.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3820 := 0
		for ; !r.CheckBreak(); yyj3820++ {

			if yyj3820 >= len(yyv3820) {
				yyv3820 = append(yyv3820, ContainerStatus{}) // var yyz3820 ContainerStatus
				yyc3820 = true
			}
			yyh3820.ElemContainerState(yyj3820)
			if yyj3820 < len(yyv3820) {
				if r.TryDecodeAsNil() {
					yyv3820[yyj3820] = ContainerStatus{}
				} else {
					yyv3823 := &yyv3820[yyj3820]
					yyv3823.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3820 < len(yyv3820) {
			yyv3820 = yyv3820[:yyj3820]
			yyc3820 = true
		} else if yyj3820 == 0 && yyv3820 == nil {
			yyv3820 = []ContainerStatus{}
			yyc3820 = true
		}
	}
	yyh3820.End()
	if yyc3820 {
		*v = yyv3820
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3824 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3825 := &yyv3824
		yy3825.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3826 := *v
	yyh3826, yyl3826 := z.DecSliceHelperStart()
	var yyc3826 bool
	if yyl3826 == 0 {
		if yyv3826 == nil {
			yyv3826 = []PodTemplate{}
			yyc3826 = true
		} else if len(yyv3826) != 0 {
			yyv3826 = yyv3826[:0]
			yyc3826 = true
		}
	} else if yyl3826 > 0 {
		var yyrr3826, yyrl3826 int
		var yyrt3826 bool
		if yyl3826 > cap(yyv3826) {

			yyrg3826 := len(yyv3826) > 0
			yyv23826 := yyv3826
			yyrl3826, yyrt3826 = z.DecInferLen(yyl3826, z.DecBasicHandle().MaxInitLen, 520)
			if yyrt3826 {
				if yyrl3826 <= cap(yyv3826) {
					yyv3826 = yyv3826[:yyrl3826]
				} else {
					yyv3826 = make([]PodTemplate, yyrl3826)
				}
			} else {
				yyv3826 = make([]PodTemplate, yyrl3826)
			}
			yyc3826 = true
			yyrr3826 = len(yyv3826)
			if yyrg3826 {
				copy(yyv3826, yyv23826)
			}
		} else if yyl3826 != len(yyv3826) {
			yyv3826 = yyv3826[:yyl3826]
			yyc3826 = true
		}
		yyj3826 := 0
		for ; yyj3826 < yyrr3826; yyj3826++ {
			yyh3826.ElemContainerState(yyj3826)
			if r.TryDecodeAsNil() {
				yyv3826[yyj3826] = PodTemplate{}
			} else {
				yyv3827 := &yyv3826[yyj3826]
				yyv3827.CodecDecodeSelf(d)
			}

		}
		if yyrt3826 {
			for ; yyj3826 < yyl3826; yyj3826++ {
				yyv3826 = append(yyv3826, PodTemplate{})
				yyh3826.ElemContainerState(yyj3826)
				if r.TryDecodeAsNil() {
					yyv3826[yyj3826] = PodTemplate{}
				} else {
					yyv3828 := &yyv3826[yyj3826]
					yyv3828.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3826 := 0
		for ; !r.CheckBreak(); yyj3826++ {

			if yyj3826 >= len(yyv3826) {
				yyv3826 = append(yyv3826, PodTemplate{}) // var yyz3826 PodTemplate
				yyc3826 = true
			}
			yyh3826.ElemContainerState(yyj3826)
			if yyj3826 < len(yyv3826) {
				if r.TryDecodeAsNil() {
					yyv3826[yyj3826] = PodTemplate{}
				} else {
					yyv3829 := &yyv3826[yyj3826]
					yyv3829.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3826 < len(yyv3826) {
			yyv3826 = yyv3826[:yyj3826]
			yyc3826 = true
		} else if yyj3826 == 0 && yyv3826 == nil {
			yyv3826 = []PodTemplate{}
			yyc3826 = true
		}
	}
	yyh3826.End()
	if yyc3826 {
		*v = yyv3826
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3830 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3831 := &yyv3830
		yy3831.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3832 := *v
	yyh3832, yyl3832 := z.DecSliceHelperStart()
	var yyc3832 bool
	if yyl3832 == 0 {
		if yyv3832 == nil {
			yyv3832 = []ReplicationController{}
			yyc3832 = true
		} else if len(yyv3832) != 0 {
			yyv3832 = yyv3832[:0]
			yyc3832 = true
		}
	} else if yyl3832 > 0 {
		var yyrr3832, yyrl3832 int
		var yyrt3832 bool
		if yyl3832 > cap(yyv3832) {

			yyrg3832 := len(yyv3832) > 0
			yyv23832 := yyv3832
			yyrl3832, yyrt3832 = z.DecInferLen(yyl3832, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3832 {
				if yyrl3832 <= cap(yyv3832) {
					yyv3832 = yyv3832[:yyrl3832]
				} else {
					yyv3832 = make([]ReplicationController, yyrl3832)
				}
			} else {
				yyv3832 = make([]ReplicationController, yyrl3832)
			}
			yyc3832 = true
			yyrr3832 = len(yyv3832)
			if yyrg3832 {
				copy(yyv3832, yyv23832)
			}
		} else if yyl3832 != len(yyv3832) {
			yyv3832 = yyv3832[:yyl3832]
			yyc3832 = true
		}
		yyj3832 := 0
		for ; yyj3832 < yyrr3832; yyj3832++ {
			yyh3832.ElemContainerState(yyj3832)
			if r.TryDecodeAsNil() {
				yyv3832[yyj3832] = ReplicationController{}
			} else {
				yyv3833 := &yyv3832[yyj3832]
				yyv3833.CodecDecodeSelf(d)
			}

		}
		if yyrt3832 {
			for ; yyj3832 < yyl3832; yyj3832++ {
				yyv3832 = append(yyv3832, ReplicationController{})
				yyh3832.ElemContainerState(yyj3832)
				if r.TryDecodeAsNil() {
					yyv3832[yyj3832] = ReplicationController{}
				} else {
					yyv3834 := &yyv3832[yyj3832]
					yyv3834.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3832 := 0
		for ; !r.CheckBreak(); yyj3832++ {

			if yyj3832 >= len(yyv3832) {
				yyv3832 = append(yyv3832, ReplicationController{}) // var yyz3832 ReplicationController
				yyc3832 = true
			}
			yyh3832.ElemContainerState(yyj3832)
			if yyj3832 < len(yyv3832) {
				if r.TryDecodeAsNil() {
					yyv3832[yyj3832] = ReplicationController{}
				} else {
					yyv3835 := &yyv3832[yyj3832]
					yyv3835.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3832 < len(yyv3832) {
			yyv3832 = yyv3832[:yyj3832]
			yyc3832 = true
		} else if yyj3832 == 0 && yyv3832 == nil {
			yyv3832 = []ReplicationController{}
			yyc3832 = true
		}
	}
	yyh3832.End()
	if yyc3832 {
		*v = yyv3832
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3836 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3837 := &yyv3836
		yy3837.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3838 := *v
	yyh3838, yyl3838 := z.DecSliceHelperStart()
	var yyc3838 bool
	if yyl3838 == 0 {
		if yyv3838 == nil {
			yyv3838 = []Service{}
			yyc3838 = true
		} else if len(yyv3838) != 0 {
			yyv3838 = yyv3838[:0]
			yyc3838 = true
		}
	} else if yyl3838 > 0 {
		var yyrr3838, yyrl3838 int
		var yyrt3838 bool
		if yyl3838 > cap(yyv3838) {

			yyrg3838 := len(yyv3838) > 0
			yyv23838 := yyv3838
			yyrl3838, yyrt3838 = z.DecInferLen(yyl3838, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt3838 {
				if yyrl3838 <= cap(yyv3838) {
					yyv3838 = yyv3838[:yyrl3838]
				} else {
					yyv3838 = make([]Service, yyrl3838)
				}
			} else {
				yyv3838 = make([]Service, yyrl3838)
			}
			yyc3838 = true
			yyrr3838 = len(yyv3838)
			if yyrg3838 {
				copy(yyv3838, yyv23838)
			}
		} else if yyl3838 != len(yyv3838) {
			yyv3838 = yyv3838[:yyl3838]
			yyc3838 = true
		}
		yyj3838 := 0
		for ; yyj3838 < yyrr3838; yyj3838++ {
			yyh3838.ElemContainerState(yyj3838)
			if r.TryDecodeAsNil() {
				yyv3838[yyj3838] = Service{}
			} else {
				yyv3839 := &yyv3838[yyj3838]
				yyv3839.CodecDecodeSelf(d)
			}

		}
		if yyrt3838 {
			for ; yyj3838 < yyl3838; yyj3838++ {
				yyv3838 = append(yyv3838, Service{})
				yyh3838.ElemContainerState(yyj3838)
				if r.TryDecodeAsNil() {
					yyv3838[yyj3838] = Service{}
				} else {
					yyv3840 := &yyv3838[yyj3838]
					yyv3840.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3838 := 0
		for ; !r.CheckBreak(); yyj3838++ {

			if yyj3838 >= len(yyv3838) {
				yyv3838 = append(yyv3838, Service{}) // var yyz3838 Service
				yyc3838 = true
			}
			yyh3838.ElemContainerState(yyj3838)
			if yyj3838 < len(yyv3838) {
				if r.TryDecodeAsNil() {
					yyv3838[yyj3838] = Service{}
				} else {
					yyv3841 := &yyv3838[yyj3838]
					yyv3841.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3838 < len(yyv3838) {
			yyv3838 = yyv3838[:yyj3838]
			yyc3838 = true
		} else if yyj3838 == 0 && yyv3838 == nil {
			yyv3838 = []Service{}
			yyc3838 = true
		}
	}
	yyh3838.End()
	if yyc3838 {
		*v = yyv3838
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3842 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3843 := &yyv3842
		yy3843.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3844 := *v
	yyh3844, yyl3844 := z.DecSliceHelperStart()
	var yyc3844 bool
	if yyl3844 == 0 {
		if yyv3844 == nil {
			yyv3844 = []LoadBalancerIngress{}
			yyc3844 = true
		} else if len(yyv3844) != 0 {
			yyv3844 = yyv3844[:0]
			yyc3844 = true
		}
	} else if yyl3844 > 0 {
		var yyrr3844, yyrl3844 int
		var yyrt3844 bool
		if yyl3844 > cap(yyv3844) {

			yyrg3844 := len(yyv3844) > 0
			yyv23844 := yyv3844
			yyrl3844, yyrt3844 = z.DecInferLen(yyl3844, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3844 {
				if yyrl3844 <= cap(yyv3844) {
					yyv3844 = yyv3844[:yyrl3844]
				} else {
					yyv3844 = make([]LoadBalancerIngress, yyrl3844)
				}
			} else {
				yyv3844 = make([]LoadBalancerIngress, yyrl3844)
			}
			yyc3844 = true
			yyrr3844 = len(yyv3844)
			if yyrg3844 {
				copy(yyv3844, yyv23844)
			}
		} else if yyl3844 != len(yyv3844) {
			yyv3844 = yyv3844[:yyl3844]
			yyc3844 = true
		}
		yyj3844 := 0
		for ; yyj3844 < yyrr3844; yyj3844++ {
			yyh3844.ElemContainerState(yyj3844)
			if r.TryDecodeAsNil() {
				yyv3844[yyj3844] = LoadBalancerIngress{}
			} else {
				yyv3845 := &yyv3844[yyj3844]
				yyv3845.CodecDecodeSelf(d)
			}

		}
		if yyrt3844 {
			for ; yyj3844 < yyl3844; yyj3844++ {
				yyv3844 = append(yyv3844, LoadBalancerIngress{})
				yyh3844.ElemContainerState(yyj3844)
				if r.TryDecodeAsNil() {
					yyv3844[yyj3844] = LoadBalancerIngress{}
				} else {
					yyv3846 := &yyv3844[yyj3844]
					yyv3846.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3844 := 0
		for ; !r.CheckBreak(); yyj3844++ {

			if yyj3844 >= len(yyv3844) {
				yyv3844 = append(yyv3844, LoadBalancerIngress{}) // var yyz3844 LoadBalancerIngress
				yyc3844 = true
			}
			yyh3844.ElemContainerState(yyj3844)
			if yyj3844 < len(yyv3844) {
				if r.TryDecodeAsNil() {
					yyv3844[yyj3844] = LoadBalancerIngress{}
				} else {
					yyv3847 := &yyv3844[yyj3844]
					yyv3847.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3844 < len(yyv3844) {
			yyv3844 = yyv3844[:yyj3844]
			yyc3844 = true
		} else if yyj3844 == 0 && yyv3844 == nil {
			yyv3844 = []LoadBalancerIngress{}
			yyc3844 = true
		}
	}
	yyh3844.End()
	if yyc3844 {
		*v = yyv3844
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3848 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3849 := &yyv3848
		yy3849.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3850 := *v
	yyh3850, yyl3850 := z.DecSliceHelperStart()
	var yyc3850 bool
	if yyl3850 == 0 {
		if yyv3850 == nil {
			yyv3850 = []ServicePort{}
			yyc3850 = true
		} else if len(yyv3850) != 0 {
			yyv3850 = yyv3850[:0]
			yyc3850 = true
		}
	} else if yyl3850 > 0 {
		var yyrr3850, yyrl3850 int
		var yyrt3850 bool
		if yyl3850 > cap(yyv3850) {

			yyrg3850 := len(yyv3850) > 0
			yyv23850 := yyv3850
			yyrl3850, yyrt3850 = z.DecInferLen(yyl3850, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt3850 {
				if yyrl3850 <= cap(yyv3850) {
					yyv3850 = yyv3850[:yyrl3850]
				} else {
					yyv3850 = make([]ServicePort, yyrl3850)
				}
			} else {
				yyv3850 = make([]ServicePort, yyrl3850)
			}
			yyc3850 = true
			yyrr3850 = len(yyv3850)
			if yyrg3850 {
				copy(yyv3850, yyv23850)
			}
		} else if yyl3850 != len(yyv3850) {
			yyv3850 = yyv3850[:yyl3850]
			yyc3850 = true
		}
		yyj3850 := 0
		for ; yyj3850 < yyrr3850; yyj3850++ {
			yyh3850.ElemContainerState(yyj3850)
			if r.TryDecodeAsNil() {
				yyv3850[yyj3850] = ServicePort{}
			} else {
				yyv3851 := &yyv3850[yyj3850]
				yyv3851.CodecDecodeSelf(d)
			}

		}
		if yyrt3850 {
			for ; yyj3850 < yyl3850; yyj3850++ {
				yyv3850 = append(yyv3850, ServicePort{})
				yyh3850.ElemContainerState(yyj3850)
				if r.TryDecodeAsNil() {
					yyv3850[yyj3850] = ServicePort{}
				} else {
					yyv3852 := &yyv3850[yyj3850]
					yyv3852.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3850 := 0
		for ; !r.CheckBreak(); yyj3850++ {

			if yyj3850 >= len(yyv3850) {
				yyv3850 = append(yyv3850, ServicePort{}) // var yyz3850 ServicePort
				yyc3850 = true
			}
			yyh3850.ElemContainerState(yyj3850)
			if yyj3850 < len(yyv3850) {
				if r.TryDecodeAsNil() {
					yyv3850[yyj3850] = ServicePort{}
				} else {
					yyv3853 := &yyv3850[yyj3850]
					yyv3853.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3850 < len(yyv3850) {
			yyv3850 = yyv3850[:yyj3850]
			yyc3850 = true
		} else if yyj3850 == 0 && yyv3850 == nil {
			yyv3850 = []ServicePort{}
			yyc3850 = true
		}
	}
	yyh3850.End()
	if yyc3850 {
		*v = yyv3850
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3854 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3855 := &yyv3854
		yy3855.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3856 := *v
	yyh3856, yyl3856 := z.DecSliceHelperStart()
	var yyc3856 bool
	if yyl3856 == 0 {
		if yyv3856 == nil {
			yyv3856 = []ObjectReference{}
			yyc3856 = true
		} else if len(yyv3856) != 0 {
			yyv3856 = yyv3856[:0]
			yyc3856 = true
		}
	} else if yyl3856 > 0 {
		var yyrr3856, yyrl3856 int
		var yyrt3856 bool
		if yyl3856 > cap(yyv3856) {

			yyrg3856 := len(yyv3856) > 0
			yyv23856 := yyv3856
			yyrl3856, yyrt3856 = z.DecInferLen(yyl3856, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3856 {
				if yyrl3856 <= cap(yyv3856) {
					yyv3856 = yyv3856[:yyrl3856]
				} else {
					yyv3856 = make([]ObjectReference, yyrl3856)
				}
			} else {
				yyv3856 = make([]ObjectReference, yyrl3856)
			}
			yyc3856 = true
			yyrr3856 = len(yyv3856)
			if yyrg3856 {
				copy(yyv3856, yyv23856)
			}
		} else if yyl3856 != len(yyv3856) {
			yyv3856 = yyv3856[:yyl3856]
			yyc3856 = true
		}
		yyj3856 := 0
		for ; yyj3856 < yyrr3856; yyj3856++ {
			yyh3856.ElemContainerState(yyj3856)
			if r.TryDecodeAsNil() {
				yyv3856[yyj3856] = ObjectReference{}
			} else {
				yyv3857 := &yyv3856[yyj3856]
				yyv3857.CodecDecodeSelf(d)
			}

		}
		if yyrt3856 {
			for ; yyj3856 < yyl3856; yyj3856++ {
				yyv3856 = append(yyv3856, ObjectReference{})
				yyh3856.ElemContainerState(yyj3856)
				if r.TryDecodeAsNil() {
					yyv3856[yyj3856] = ObjectReference{}
				} else {
					yyv3858 := &yyv3856[yyj3856]
					yyv3858.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3856 := 0
		for ; !r.CheckBreak(); yyj3856++ {

			if yyj3856 >= len(yyv3856) {
				yyv3856 = append(yyv3856, ObjectReference{}) // var yyz3856 ObjectReference
				yyc3856 = true
			}
			yyh3856.ElemContainerState(yyj3856)
			if yyj3856 < len(yyv3856) {
				if r.TryDecodeAsNil() {
					yyv3856[yyj3856] = ObjectReference{}
				} else {
					yyv3859 := &yyv3856[yyj3856]
					yyv3859.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3856 < len(yyv3856) {
			yyv3856 = yyv3856[:yyj3856]
			yyc3856 = true
		} else if yyj3856 == 0 && yyv3856 == nil {
			yyv3856 = []ObjectReference{}
			yyc3856 = true
		}
	}
	yyh3856.End()
	if yyc3856 {
		*v = yyv3856
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3860 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3861 := &yyv3860
		yy3861.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3862 := *v
	yyh3862, yyl3862 := z.DecSliceHelperStart()
	var yyc3862 bool
	if yyl3862 == 0 {
		if yyv3862 == nil {
			yyv3862 = []ServiceAccount{}
			yyc3862 = true
		} else if len(yyv3862) != 0 {
			yyv3862 = yyv3862[:0]
			yyc3862 = true
		}
	} else if yyl3862 > 0 {
		var yyrr3862, yyrl3862 int
		var yyrt3862 bool
		if yyl3862 > cap(yyv3862) {

			yyrg3862 := len(yyv3862) > 0
			yyv23862 := yyv3862
			yyrl3862, yyrt3862 = z.DecInferLen(yyl3862, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt3862 {
				if yyrl3862 <= cap(yyv3862) {
					yyv3862 = yyv3862[:yyrl3862]
				} else {
					yyv3862 = make([]ServiceAccount, yyrl3862)
				}
			} else {
				yyv3862 = make([]ServiceAccount, yyrl3862)
			}
			yyc3862 = true
			yyrr3862 = len(yyv3862)
			if yyrg3862 {
				copy(yyv3862, yyv23862)
			}
		} else if yyl3862 != len(yyv3862) {
			yyv3862 = yyv3862[:yyl3862]
			yyc3862 = true
		}
		yyj3862 := 0
		for ; yyj3862 < yyrr3862; yyj3862++ {
			yyh3862.ElemContainerState(yyj3862)
			if r.TryDecodeAsNil() {
				yyv3862[yyj3862] = ServiceAccount{}
			} else {
				yyv3863 := &yyv3862[yyj3862]
				yyv3863.CodecDecodeSelf(d)
			}

		}
		if yyrt3862 {
			for ; yyj3862 < yyl3862; yyj3862++ {
				yyv3862 = append(yyv3862, ServiceAccount{})
				yyh3862.ElemContainerState(yyj3862)
				if r.TryDecodeAsNil() {
					yyv3862[yyj3862] = ServiceAccount{}
				} else {
					yyv3864 := &yyv3862[yyj3862]
					yyv3864.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3862 := 0
		for ; !r.CheckBreak(); yyj3862++ {

			if yyj3862 >= len(yyv3862) {
				yyv3862 = append(yyv3862, ServiceAccount{}) // var yyz3862 ServiceAccount
				yyc3862 = true
			}
			yyh3862.ElemContainerState(yyj3862)
			if yyj3862 < len(yyv3862) {
				if r.TryDecodeAsNil() {
					yyv3862[yyj3862] = ServiceAccount{}
				} else {
					yyv3865 := &yyv3862[yyj3862]
					yyv3865.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3862 < len(yyv3862) {
			yyv3862 = yyv3862[:yyj3862]
			yyc3862 = true
		} else if yyj3862 == 0 && yyv3862 == nil {
			yyv3862 = []ServiceAccount{}
			yyc3862 = true
		}
	}
	yyh3862.End()
	if yyc3862 {
		*v = yyv3862
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3866 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3867 := &yyv3866
		yy3867.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3868 := *v
	yyh3868, yyl3868 := z.DecSliceHelperStart()
	var yyc3868 bool
	if yyl3868 == 0 {
		if yyv3868 == nil {
			yyv3868 = []EndpointSubset{}
			yyc3868 = true
		} else if len(yyv3868) != 0 {
			yyv3868 = yyv3868[:0]
			yyc3868 = true
		}
	} else if yyl3868 > 0 {
		var yyrr3868, yyrl3868 int
		var yyrt3868 bool
		if yyl3868 > cap(yyv3868) {

			yyrg3868 := len(yyv3868) > 0
			yyv23868 := yyv3868
			yyrl3868, yyrt3868 = z.DecInferLen(yyl3868, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt3868 {
				if yyrl3868 <= cap(yyv3868) {
					yyv3868 = yyv3868[:yyrl3868]
				} else {
					yyv3868 = make([]EndpointSubset, yyrl3868)
				}
			} else {
				yyv3868 = make([]EndpointSubset, yyrl3868)
			}
			yyc3868 = true
			yyrr3868 = len(yyv3868)
			if yyrg3868 {
				copy(yyv3868, yyv23868)
			}
		} else if yyl3868 != len(yyv3868) {
			yyv3868 = yyv3868[:yyl3868]
			yyc3868 = true
		}
		yyj3868 := 0
		for ; yyj3868 < yyrr3868; yyj3868++ {
			yyh3868.ElemContainerState(yyj3868)
			if r.TryDecodeAsNil() {
				yyv3868[yyj3868] = EndpointSubset{}
			} else {
				yyv3869 := &yyv3868[yyj3868]
				yyv3869.CodecDecodeSelf(d)
			}

		}
		if yyrt3868 {
			for ; yyj3868 < yyl3868; yyj3868++ {
				yyv3868 = append(yyv3868, EndpointSubset{})
				yyh3868.ElemContainerState(yyj3868)
				if r.TryDecodeAsNil() {
					yyv3868[yyj3868] = EndpointSubset{}
				} else {
					yyv3870 := &yyv3868[yyj3868]
					yyv3870.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3868 := 0
		for ; !r.CheckBreak(); yyj3868++ {

			if yyj3868 >= len(yyv3868) {
				yyv3868 = append(yyv3868, EndpointSubset{}) // var yyz3868 EndpointSubset
				yyc3868 = true
			}
			yyh3868.ElemContainerState(yyj3868)
			if yyj3868 < len(yyv3868) {
				if r.TryDecodeAsNil() {
					yyv3868[yyj3868] = EndpointSubset{}
				} else {
					yyv3871 := &yyv3868[yyj3868]
					yyv3871.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3868 < len(yyv3868) {
			yyv3868 = yyv3868[:yyj3868]
			yyc3868 = true
		} else if yyj3868 == 0 && yyv3868 == nil {
			yyv3868 = []EndpointSubset{}
			yyc3868 = true
		}
	}
	yyh3868.End()
	if yyc3868 {
		*v = yyv3868
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3872 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3873 := &yyv3872
		yy3873.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3874 := *v
	yyh3874, yyl3874 := z.DecSliceHelperStart()
	var yyc3874 bool
	if yyl3874 == 0 {
		if yyv3874 == nil {
			yyv3874 = []EndpointAddress{}
			yyc3874 = true
		} else if len(yyv3874) != 0 {
			yyv3874 = yyv3874[:0]
			yyc3874 = true
		}
	} else if yyl3874 > 0 {
		var yyrr3874, yyrl3874 int
		var yyrt3874 bool
		if yyl3874 > cap(yyv3874) {

			yyrg3874 := len(yyv3874) > 0
			yyv23874 := yyv3874
			yyrl3874, yyrt3874 = z.DecInferLen(yyl3874, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3874 {
				if yyrl3874 <= cap(yyv3874) {
					yyv3874 = yyv3874[:yyrl3874]
				} else {
					yyv3874 = make([]EndpointAddress, yyrl3874)
				}
			} else {
				yyv3874 = make([]EndpointAddress, yyrl3874)
			}
			yyc3874 = true
			yyrr3874 = len(yyv3874)
			if yyrg3874 {
				copy(yyv3874, yyv23874)
			}
		} else if yyl3874 != len(yyv3874) {
			yyv3874 = yyv3874[:yyl3874]
			yyc3874 = true
		}
		yyj3874 := 0
		for ; yyj3874 < yyrr3874; yyj3874++ {
			yyh3874.ElemContainerState(yyj3874)
			if r.TryDecodeAsNil() {
				yyv3874[yyj3874] = EndpointAddress{}
			} else {
				yyv3875 := &yyv3874[yyj3874]
				yyv3875.CodecDecodeSelf(d)
			}

		}
		if yyrt3874 {
			for ; yyj3874 < yyl3874; yyj3874++ {
				yyv3874 = append(yyv3874, EndpointAddress{})
				yyh3874.ElemContainerState(yyj3874)
				if r.TryDecodeAsNil() {
					yyv3874[yyj3874] = EndpointAddress{}
				} else {
					yyv3876 := &yyv3874[yyj3874]
					yyv3876.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3874 := 0
		for ; !r.CheckBreak(); yyj3874++ {

			if yyj3874 >= len(yyv3874) {
				yyv3874 = append(yyv3874, EndpointAddress{}) // var yyz3874 EndpointAddress
				yyc3874 = true
			}
			yyh3874.ElemContainerState(yyj3874)
			if yyj3874 < len(yyv3874) {
				if r.TryDecodeAsNil() {
					yyv3874[yyj3874] = EndpointAddress{}
				} else {
					yyv3877 := &yyv3874[yyj3874]
					yyv3877.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3874 < len(yyv3874) {
			yyv3874 = yyv3874[:yyj3874]
			yyc3874 = true
		} else if yyj3874 == 0 && yyv3874 == nil {
			yyv3874 = []EndpointAddress{}
			yyc3874 = true
		}
	}
	yyh3874.End()
	if yyc3874 {
		*v = yyv3874
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3878 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3879 := &yyv3878
		yy3879.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3880 := *v
	yyh3880, yyl3880 := z.DecSliceHelperStart()
	var yyc3880 bool
	if yyl3880 == 0 {
		if yyv3880 == nil {
			yyv3880 = []EndpointPort{}
			yyc3880 = true
		} else if len(yyv3880) != 0 {
			yyv3880 = yyv3880[:0]
			yyc3880 = true
		}
	} else if yyl3880 > 0 {
		var yyrr3880, yyrl3880 int
		var yyrt3880 bool
		if yyl3880 > cap(yyv3880) {

			yyrg3880 := len(yyv3880) > 0
			yyv23880 := yyv3880
			yyrl3880, yyrt3880 = z.DecInferLen(yyl3880, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3880 {
				if yyrl3880 <= cap(yyv3880) {
					yyv3880 = yyv3880[:yyrl3880]
				} else {
					yyv3880 = make([]EndpointPort, yyrl3880)
				}
			} else {
				yyv3880 = make([]EndpointPort, yyrl3880)
			}
			yyc3880 = true
			yyrr3880 = len(yyv3880)
			if yyrg3880 {
				copy(yyv3880, yyv23880)
			}
		} else if yyl3880 != len(yyv3880) {
			yyv3880 = yyv3880[:yyl3880]
			yyc3880 = true
		}
		yyj3880 := 0
		for ; yyj3880 < yyrr3880; yyj3880++ {
			yyh3880.ElemContainerState(yyj3880)
			if r.TryDecodeAsNil() {
				yyv3880[yyj3880] = EndpointPort{}
			} else {
				yyv3881 := &yyv3880[yyj3880]
				yyv3881.CodecDecodeSelf(d)
			}

		}
		if yyrt3880 {
			for ; yyj3880 < yyl3880; yyj3880++ {
				yyv3880 = append(yyv3880, EndpointPort{})
				yyh3880.ElemContainerState(yyj3880)
				if r.TryDecodeAsNil() {
					yyv3880[yyj3880] = EndpointPort{}
				} else {
					yyv3882 := &yyv3880[yyj3880]
					yyv3882.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3880 := 0
		for ; !r.CheckBreak(); yyj3880++ {

			if yyj3880 >= len(yyv3880) {
				yyv3880 = append(yyv3880, EndpointPort{}) // var yyz3880 EndpointPort
				yyc3880 = true
			}
			yyh3880.ElemContainerState(yyj3880)
			if yyj3880 < len(yyv3880) {
				if r.TryDecodeAsNil() {
					yyv3880[yyj3880] = EndpointPort{}
				} else {
					yyv3883 := &yyv3880[yyj3880]
					yyv3883.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3880 < len(yyv3880) {
			yyv3880 = yyv3880[:yyj3880]
			yyc3880 = true
		} else if yyj3880 == 0 && yyv3880 == nil {
			yyv3880 = []EndpointPort{}
			yyc3880 = true
		}
	}
	yyh3880.End()
	if yyc3880 {
		*v = yyv3880
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3884 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3885 := &yyv3884
		yy3885.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3886 := *v
	yyh3886, yyl3886 := z.DecSliceHelperStart()
	var yyc3886 bool
	if yyl3886 == 0 {
		if yyv3886 == nil {
			yyv3886 = []Endpoints{}
			yyc3886 = true
		} else if len(yyv3886) != 0 {
			yyv3886 = yyv3886[:0]
			yyc3886 = true
		}
	} else if yyl3886 > 0 {
		var yyrr3886, yyrl3886 int
		var yyrt3886 bool
		if yyl3886 > cap(yyv3886) {

			yyrg3886 := len(yyv3886) > 0
			yyv23886 := yyv3886
			yyrl3886, yyrt3886 = z.DecInferLen(yyl3886, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3886 {
				if yyrl3886 <= cap(yyv3886) {
					yyv3886 = yyv3886[:yyrl3886]
				} else {
					yyv3886 = make([]Endpoints, yyrl3886)
				}
			} else {
				yyv3886 = make([]Endpoints, yyrl3886)
			}
			yyc3886 = true
			yyrr3886 = len(yyv3886)
			if yyrg3886 {
				copy(yyv3886, yyv23886)
			}
		} else if yyl3886 != len(yyv3886) {
			yyv3886 = yyv3886[:yyl3886]
			yyc3886 = true
		}
		yyj3886 := 0
		for ; yyj3886 < yyrr3886; yyj3886++ {
			yyh3886.ElemContainerState(yyj3886)
			if r.TryDecodeAsNil() {
				yyv3886[yyj3886] = Endpoints{}
			} else {
				yyv3887 := &yyv3886[yyj3886]
				yyv3887.CodecDecodeSelf(d)
			}

		}
		if yyrt3886 {
			for ; yyj3886 < yyl3886; yyj3886++ {
				yyv3886 = append(yyv3886, Endpoints{})
				yyh3886.ElemContainerState(yyj3886)
				if r.TryDecodeAsNil() {
					yyv3886[yyj3886] = Endpoints{}
				} else {
					yyv3888 := &yyv3886[yyj3886]
					yyv3888.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3886 := 0
		for ; !r.CheckBreak(); yyj3886++ {

			if yyj3886 >= len(yyv3886) {
				yyv3886 = append(yyv3886, Endpoints{}) // var yyz3886 Endpoints
				yyc3886 = true
			}
			yyh3886.ElemContainerState(yyj3886)
			if yyj3886 < len(yyv3886) {
				if r.TryDecodeAsNil() {
					yyv3886[yyj3886] = Endpoints{}
				} else {
					yyv3889 := &yyv3886[yyj3886]
					yyv3889.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3886 < len(yyv3886) {
			yyv3886 = yyv3886[:yyj3886]
			yyc3886 = true
		} else if yyj3886 == 0 && yyv3886 == nil {
			yyv3886 = []Endpoints{}
			yyc3886 = true
		}
	}
	yyh3886.End()
	if yyc3886 {
		*v = yyv3886
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3890 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3891 := &yyv3890
		yy3891.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3892 := *v
	yyh3892, yyl3892 := z.DecSliceHelperStart()
	var yyc3892 bool
	if yyl3892 == 0 {
		if yyv3892 == nil {
			yyv3892 = []NodeCondition{}
			yyc3892 = true
		} else if len(yyv3892) != 0 {
			yyv3892 = yyv3892[:0]
			yyc3892 = true
		}
	} else if yyl3892 > 0 {
		var yyrr3892, yyrl3892 int
		var yyrt3892 bool
		if yyl3892 > cap(yyv3892) {

			yyrg3892 := len(yyv3892) > 0
			yyv23892 := yyv3892
			yyrl3892, yyrt3892 = z.DecInferLen(yyl3892, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3892 {
				if yyrl3892 <= cap(yyv3892) {
					yyv3892 = yyv3892[:yyrl3892]
				} else {
					yyv3892 = make([]NodeCondition, yyrl3892)
				}
			} else {
				yyv3892 = make([]NodeCondition, yyrl3892)
			}
			yyc3892 = true
			yyrr3892 = len(yyv3892)
			if yyrg3892 {
				copy(yyv3892, yyv23892)
			}
		} else if yyl3892 != len(yyv3892) {
			yyv3892 = yyv3892[:yyl3892]
			yyc3892 = true
		}
		yyj3892 := 0
		for ; yyj3892 < yyrr3892; yyj3892++ {
			yyh3892.ElemContainerState(yyj3892)
			if r.TryDecodeAsNil() {
				yyv3892[yyj3892] = NodeCondition{}
			} else {
				yyv3893 := &yyv3892[yyj3892]
				yyv3893.CodecDecodeSelf(d)
			}

		}
		if yyrt3892 {
			for ; yyj3892 < yyl3892; yyj3892++ {
				yyv3892 = append(yyv3892, NodeCondition{})
				yyh3892.ElemContainerState(yyj3892)
				if r.TryDecodeAsNil() {
					yyv3892[yyj3892] = NodeCondition{}
				} else {
					yyv3894 := &yyv3892[yyj3892]
					yyv3894.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3892 := 0
		for ; !r.CheckBreak(); yyj3892++ {

			if yyj3892 >= len(yyv3892) {
				yyv3892 = append(yyv3892, NodeCondition{}) // var yyz3892 NodeCondition
				yyc3892 = true
			}
			yyh3892.ElemContainerState(yyj3892)
			if yyj3892 < len(yyv3892) {
				if r.TryDecodeAsNil() {
					yyv3892[yyj3892] = NodeCondition{}
				} else {
					yyv3895 := &yyv3892[yyj3892]
					yyv3895.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3892 < len(yyv3892) {
			yyv3892 = yyv3892[:yyj3892]
			yyc3892 = true
		} else if yyj3892 == 0 && yyv3892 == nil {
			yyv3892 = []NodeCondition{}
			yyc3892 = true
		}
	}
	yyh3892.End()
	if yyc3892 {
		*v = yyv3892
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3896 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3897 := &yyv3896
		yy3897.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3898 := *v
	yyh3898, yyl3898 := z.DecSliceHelperStart()
	var yyc3898 bool
	if yyl3898 == 0 {
		if yyv3898 == nil {
			yyv3898 = []NodeAddress{}
			yyc3898 = true
		} else if len(yyv3898) != 0 {
			yyv3898 = yyv3898[:0]
			yyc3898 = true
		}
	} else if yyl3898 > 0 {
		var yyrr3898, yyrl3898 int
		var yyrt3898 bool
		if yyl3898 > cap(yyv3898) {

			yyrg3898 := len(yyv3898) > 0
			yyv23898 := yyv3898
			yyrl3898, yyrt3898 = z.DecInferLen(yyl3898, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3898 {
				if yyrl3898 <= cap(yyv3898) {
					yyv3898 = yyv3898[:yyrl3898]
				} else {
					yyv3898 = make([]NodeAddress, yyrl3898)
				}
			} else {
				yyv3898 = make([]NodeAddress, yyrl3898)
			}
			yyc3898 = true
			yyrr3898 = len(yyv3898)
			if yyrg3898 {
				copy(yyv3898, yyv23898)
			}
		} else if yyl3898 != len(yyv3898) {
			yyv3898 = yyv3898[:yyl3898]
			yyc3898 = true
		}
		yyj3898 := 0
		for ; yyj3898 < yyrr3898; yyj3898++ {
			yyh3898.ElemContainerState(yyj3898)
			if r.TryDecodeAsNil() {
				yyv3898[yyj3898] = NodeAddress{}
			} else {
				yyv3899 := &yyv3898[yyj3898]
				yyv3899.CodecDecodeSelf(d)
			}

		}
		if yyrt3898 {
			for ; yyj3898 < yyl3898; yyj3898++ {
				yyv3898 = append(yyv3898, NodeAddress{})
				yyh3898.ElemContainerState(yyj3898)
				if r.TryDecodeAsNil() {
					yyv3898[yyj3898] = NodeAddress{}
				} else {
					yyv3900 := &yyv3898[yyj3898]
					yyv3900.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3898 := 0
		for ; !r.CheckBreak(); yyj3898++ {

			if yyj3898 >= len(yyv3898) {
				yyv3898 = append(yyv3898, NodeAddress{}) // var yyz3898 NodeAddress
				yyc3898 = true
			}
			yyh3898.ElemContainerState(yyj3898)
			if yyj3898 < len(yyv3898) {
				if r.TryDecodeAsNil() {
					yyv3898[yyj3898] = NodeAddress{}
				} else {
					yyv3901 := &yyv3898[yyj3898]
					yyv3901.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3898 < len(yyv3898) {
			yyv3898 = yyv3898[:yyj3898]
			yyc3898 = true
		} else if yyj3898 == 0 && yyv3898 == nil {
			yyv3898 = []NodeAddress{}
			yyc3898 = true
		}
	}
	yyh3898.End()
	if yyc3898 {
		*v = yyv3898
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3902 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3903 := &yyv3902
		yy3903.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3904 := *v
	yyh3904, yyl3904 := z.DecSliceHelperStart()
	var yyc3904 bool
	if yyl3904 == 0 {
		if yyv3904 == nil {
			yyv3904 = []ContainerImage{}
			yyc3904 = true
		} else if len(yyv3904) != 0 {
			yyv3904 = yyv3904[:0]
			yyc3904 = true
		}
	} else if yyl3904 > 0 {
		var yyrr3904, yyrl3904 int
		var yyrt3904 bool
		if yyl3904 > cap(yyv3904) {

			yyrg3904 := len(yyv3904) > 0
			yyv23904 := yyv3904
			yyrl3904, yyrt3904 = z.DecInferLen(yyl3904, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3904 {
				if yyrl3904 <= cap(yyv3904) {
					yyv3904 = yyv3904[:yyrl3904]
				} else {
					yyv3904 = make([]ContainerImage, yyrl3904)
				}
			} else {
				yyv3904 = make([]ContainerImage, yyrl3904)
			}
			yyc3904 = true
			yyrr3904 = len(yyv3904)
			if yyrg3904 {
				copy(yyv3904, yyv23904)
			}
		} else if yyl3904 != len(yyv3904) {
			yyv3904 = yyv3904[:yyl3904]
			yyc3904 = true
		}
		yyj3904 := 0
		for ; yyj3904 < yyrr3904; yyj3904++ {
			yyh3904.ElemContainerState(yyj3904)
			if r.TryDecodeAsNil() {
				yyv3904[yyj3904] = ContainerImage{}
			} else {
				yyv3905 := &yyv3904[yyj3904]
				yyv3905.CodecDecodeSelf(d)
			}

		}
		if yyrt3904 {
			for ; yyj3904 < yyl3904; yyj3904++ {
				yyv3904 = append(yyv3904, ContainerImage{})
				yyh3904.ElemContainerState(yyj3904)
				if r.TryDecodeAsNil() {
					yyv3904[yyj3904] = ContainerImage{}
				} else {
					yyv3906 := &yyv3904[yyj3904]
					yyv3906.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3904 := 0
		for ; !r.CheckBreak(); yyj3904++ {

			if yyj3904 >= len(yyv3904) {
				yyv3904 = append(yyv3904, ContainerImage{}) // var yyz3904 ContainerImage
				yyc3904 = true
			}
			yyh3904.ElemContainerState(yyj3904)
			if yyj3904 < len(yyv3904) {
				if r.TryDecodeAsNil() {
					yyv3904[yyj3904] = ContainerImage{}
				} else {
					yyv3907 := &yyv3904[yyj3904]
					yyv3907.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3904 < len(yyv3904) {
			yyv3904 = yyv3904[:yyj3904]
			yyc3904 = true
		} else if yyj3904 == 0 && yyv3904 == nil {
			yyv3904 = []ContainerImage{}
			yyc3904 = true
		}
	}
	yyh3904.End()
	if yyc3904 {
		*v = yyv3904
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3908, yyv3908 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk3908.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy3909 := &yyv3908
		yym3910 := z.EncBinary()
		_ = yym3910
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3909) {
		} else if !yym3910 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3909)
		} else {
			z.EncFallback(yy3909)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3911 := *v
	yyl3911 := r.ReadMapStart()
	yybh3911 := z.DecBasicHandle()
	if yyv3911 == nil {
		yyrl3911, _ := z.DecInferLen(yyl3911, yybh3911.MaxInitLen, 40)
		yyv3911 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3911)
		*v = yyv3911
	}
	var yymk3911 ResourceName
	var yymv3911 pkg3_resource.Quantity
	var yymg3911 bool
	if yybh3911.MapValueReset {
		yymg3911 = true
	}
	if yyl3911 > 0 {
		for yyj3911 := 0; yyj3911 < yyl3911; yyj3911++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3911 = ""
			} else {
				yymk3911 = ResourceName(r.DecodeString())
			}

			if yymg3911 {
				yymv3911 = yyv3911[yymk3911]
			} else {
				yymv3911 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3911 = pkg3_resource.Quantity{}
			} else {
				yyv3913 := &yymv3911
				yym3914 := z.DecBinary()
				_ = yym3914
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3913) {
				} else if !yym3914 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3913)
				} else {
					z.DecFallback(yyv3913, false)
				}
			}

			if yyv3911 != nil {
				yyv3911[yymk3911] = yymv3911
			}
		}
	} else if yyl3911 < 0 {
		for yyj3911 := 0; !r.CheckBreak(); yyj3911++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3911 = ""
			} else {
				yymk3911 = ResourceName(r.DecodeString())
			}

			if yymg3911 {
				yymv3911 = yyv3911[yymk3911]
			} else {
				yymv3911 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3911 = pkg3_resource.Quantity{}
			} else {
				yyv3916 := &yymv3911
				yym3917 := z.DecBinary()
				_ = yym3917
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3916) {
				} else if !yym3917 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3916)
				} else {
					z.DecFallback(yyv3916, false)
				}
			}

			if yyv3911 != nil {
				yyv3911[yymk3911] = yymv3911
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3918 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3919 := &yyv3918
		yy3919.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3920 := *v
	yyh3920, yyl3920 := z.DecSliceHelperStart()
	var yyc3920 bool
	if yyl3920 == 0 {
		if yyv3920 == nil {
			yyv3920 = []Node{}
			yyc3920 = true
		} else if len(yyv3920) != 0 {
			yyv3920 = yyv3920[:0]
			yyc3920 = true
		}
	} else if yyl3920 > 0 {
		var yyrr3920, yyrl3920 int
		var yyrt3920 bool
		if yyl3920 > cap(yyv3920) {

			yyrg3920 := len(yyv3920) > 0
			yyv23920 := yyv3920
			yyrl3920, yyrt3920 = z.DecInferLen(yyl3920, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt3920 {
				if yyrl3920 <= cap(yyv3920) {
					yyv3920 = yyv3920[:yyrl3920]
				} else {
					yyv3920 = make([]Node, yyrl3920)
				}
			} else {
				yyv3920 = make([]Node, yyrl3920)
			}
			yyc3920 = true
			yyrr3920 = len(yyv3920)
			if yyrg3920 {
				copy(yyv3920, yyv23920)
			}
		} else if yyl3920 != len(yyv3920) {
			yyv3920 = yyv3920[:yyl3920]
			yyc3920 = true
		}
		yyj3920 := 0
		for ; yyj3920 < yyrr3920; yyj3920++ {
			yyh3920.ElemContainerState(yyj3920)
			if r.TryDecodeAsNil() {
				yyv3920[yyj3920] = Node{}
			} else {
				yyv3921 := &yyv3920[yyj3920]
				yyv3921.CodecDecodeSelf(d)
			}

		}
		if yyrt3920 {
			for ; yyj3920 < yyl3920; yyj3920++ {
				yyv3920 = append(yyv3920, Node{})
				yyh3920.ElemContainerState(yyj3920)
				if r.TryDecodeAsNil() {
					yyv3920[yyj3920] = Node{}
				} else {
					yyv3922 := &yyv3920[yyj3920]
					yyv3922.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3920 := 0
		for ; !r.CheckBreak(); yyj3920++ {

			if yyj3920 >= len(yyv3920) {
				yyv3920 = append(yyv3920, Node{}) // var yyz3920 Node
				yyc3920 = true
			}
			yyh3920.ElemContainerState(yyj3920)
			if yyj3920 < len(yyv3920) {
				if r.TryDecodeAsNil() {
					yyv3920[yyj3920] = Node{}
				} else {
					yyv3923 := &yyv3920[yyj3920]
					yyv3923.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3920 < len(yyv3920) {
			yyv3920 = yyv3920[:yyj3920]
			yyc3920 = true
		} else if yyj3920 == 0 && yyv3920 == nil {
			yyv3920 = []Node{}
			yyc3920 = true
		}
	}
	yyh3920.End()
	if yyc3920 {
		*v = yyv3920
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3924 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3924.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3925 := *v
	yyh3925, yyl3925 := z.DecSliceHelperStart()
	var yyc3925 bool
	if yyl3925 == 0 {
		if yyv3925 == nil {
			yyv3925 = []FinalizerName{}
			yyc3925 = true
		} else if len(yyv3925) != 0 {
			yyv3925 = yyv3925[:0]
			yyc3925 = true
		}
	} else if yyl3925 > 0 {
		var yyrr3925, yyrl3925 int
		var yyrt3925 bool
		if yyl3925 > cap(yyv3925) {

			yyrl3925, yyrt3925 = z.DecInferLen(yyl3925, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3925 {
				if yyrl3925 <= cap(yyv3925) {
					yyv3925 = yyv3925[:yyrl3925]
				} else {
					yyv3925 = make([]FinalizerName, yyrl3925)
				}
			} else {
				yyv3925 = make([]FinalizerName, yyrl3925)
			}
			yyc3925 = true
			yyrr3925 = len(yyv3925)
		} else if yyl3925 != len(yyv3925) {
			yyv3925 = yyv3925[:yyl3925]
			yyc3925 = true
		}
		yyj3925 := 0
		for ; yyj3925 < yyrr3925; yyj3925++ {
			yyh3925.ElemContainerState(yyj3925)
			if r.TryDecodeAsNil() {
				yyv3925[yyj3925] = ""
			} else {
				yyv3925[yyj3925] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3925 {
			for ; yyj3925 < yyl3925; yyj3925++ {
				yyv3925 = append(yyv3925, "")
				yyh3925.ElemContainerState(yyj3925)
				if r.TryDecodeAsNil() {
					yyv3925[yyj3925] = ""
				} else {
					yyv3925[yyj3925] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj3925 := 0
		for ; !r.CheckBreak(); yyj3925++ {

			if yyj3925 >= len(yyv3925) {
				yyv3925 = append(yyv3925, "") // var yyz3925 FinalizerName
				yyc3925 = true
			}
			yyh3925.ElemContainerState(yyj3925)
			if yyj3925 < len(yyv3925) {
				if r.TryDecodeAsNil() {
					yyv3925[yyj3925] = ""
				} else {
					yyv3925[yyj3925] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3925 < len(yyv3925) {
			yyv3925 = yyv3925[:yyj3925]
			yyc3925 = true
		} else if yyj3925 == 0 && yyv3925 == nil {
			yyv3925 = []FinalizerName{}
			yyc3925 = true
		}
	}
	yyh3925.End()
	if yyc3925 {
		*v = yyv3925
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3929 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3930 := &yyv3929
		yy3930.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3931 := *v
	yyh3931, yyl3931 := z.DecSliceHelperStart()
	var yyc3931 bool
	if yyl3931 == 0 {
		if yyv3931 == nil {
			yyv3931 = []Namespace{}
			yyc3931 = true
		} else if len(yyv3931) != 0 {
			yyv3931 = yyv3931[:0]
			yyc3931 = true
		}
	} else if yyl3931 > 0 {
		var yyrr3931, yyrl3931 int
		var yyrt3931 bool
		if yyl3931 > cap(yyv3931) {

			yyrg3931 := len(yyv3931) > 0
			yyv23931 := yyv3931
			yyrl3931, yyrt3931 = z.DecInferLen(yyl3931, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3931 {
				if yyrl3931 <= cap(yyv3931) {
					yyv3931 = yyv3931[:yyrl3931]
				} else {
					yyv3931 = make([]Namespace, yyrl3931)
				}
			} else {
				yyv3931 = make([]Namespace, yyrl3931)
			}
			yyc3931 = true
			yyrr3931 = len(yyv3931)
			if yyrg3931 {
				copy(yyv3931, yyv23931)
			}
		} else if yyl3931 != len(yyv3931) {
			yyv3931 = yyv3931[:yyl3931]
			yyc3931 = true
		}
		yyj3931 := 0
		for ; yyj3931 < yyrr3931; yyj3931++ {
			yyh3931.ElemContainerState(yyj3931)
			if r.TryDecodeAsNil() {
				yyv3931[yyj3931] = Namespace{}
			} else {
				yyv3932 := &yyv3931[yyj3931]
				yyv3932.CodecDecodeSelf(d)
			}

		}
		if yyrt3931 {
			for ; yyj3931 < yyl3931; yyj3931++ {
				yyv3931 = append(yyv3931, Namespace{})
				yyh3931.ElemContainerState(yyj3931)
				if r.TryDecodeAsNil() {
					yyv3931[yyj3931] = Namespace{}
				} else {
					yyv3933 := &yyv3931[yyj3931]
					yyv3933.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3931 := 0
		for ; !r.CheckBreak(); yyj3931++ {

			if yyj3931 >= len(yyv3931) {
				yyv3931 = append(yyv3931, Namespace{}) // var yyz3931 Namespace
				yyc3931 = true
			}
			yyh3931.ElemContainerState(yyj3931)
			if yyj3931 < len(yyv3931) {
				if r.TryDecodeAsNil() {
					yyv3931[yyj3931] = Namespace{}
				} else {
					yyv3934 := &yyv3931[yyj3931]
					yyv3934.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3931 < len(yyv3931) {
			yyv3931 = yyv3931[:yyj3931]
			yyc3931 = true
		} else if yyj3931 == 0 && yyv3931 == nil {
			yyv3931 = []Namespace{}
			yyc3931 = true
		}
	}
	yyh3931.End()
	if yyc3931 {
		*v = yyv3931
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3935 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3936 := &yyv3935
		yy3936.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3937 := *v
	yyh3937, yyl3937 := z.DecSliceHelperStart()
	var yyc3937 bool
	if yyl3937 == 0 {
		if yyv3937 == nil {
			yyv3937 = []Event{}
			yyc3937 = true
		} else if len(yyv3937) != 0 {
			yyv3937 = yyv3937[:0]
			yyc3937 = true
		}
	} else if yyl3937 > 0 {
		var yyrr3937, yyrl3937 int
		var yyrt3937 bool
		if yyl3937 > cap(yyv3937) {

			yyrg3937 := len(yyv3937) > 0
			yyv23937 := yyv3937
			yyrl3937, yyrt3937 = z.DecInferLen(yyl3937, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt3937 {
				if yyrl3937 <= cap(yyv3937) {
					yyv3937 = yyv3937[:yyrl3937]
				} else {
					yyv3937 = make([]Event, yyrl3937)
				}
			} else {
				yyv3937 = make([]Event, yyrl3937)
			}
			yyc3937 = true
			yyrr3937 = len(yyv3937)
			if yyrg3937 {
				copy(yyv3937, yyv23937)
			}
		} else if yyl3937 != len(yyv3937) {
			yyv3937 = yyv3937[:yyl3937]
			yyc3937 = true
		}
		yyj3937 := 0
		for ; yyj3937 < yyrr3937; yyj3937++ {
			yyh3937.ElemContainerState(yyj3937)
			if r.TryDecodeAsNil() {
				yyv3937[yyj3937] = Event{}
			} else {
				yyv3938 := &yyv3937[yyj3937]
				yyv3938.CodecDecodeSelf(d)
			}

		}
		if yyrt3937 {
			for ; yyj3937 < yyl3937; yyj3937++ {
				yyv3937 = append(yyv3937, Event{})
				yyh3937.ElemContainerState(yyj3937)
				if r.TryDecodeAsNil() {
					yyv3937[yyj3937] = Event{}
				} else {
					yyv3939 := &yyv3937[yyj3937]
					yyv3939.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3937 := 0
		for ; !r.CheckBreak(); yyj3937++ {

			if yyj3937 >= len(yyv3937) {
				yyv3937 = append(yyv3937, Event{}) // var yyz3937 Event
				yyc3937 = true
			}
			yyh3937.ElemContainerState(yyj3937)
			if yyj3937 < len(yyv3937) {
				if r.TryDecodeAsNil() {
					yyv3937[yyj3937] = Event{}
				} else {
					yyv3940 := &yyv3937[yyj3937]
					yyv3940.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3937 < len(yyv3937) {
			yyv3937 = yyv3937[:yyj3937]
			yyc3937 = true
		} else if yyj3937 == 0 && yyv3937 == nil {
			yyv3937 = []Event{}
			yyc3937 = true
		}
	}
	yyh3937.End()
	if yyc3937 {
		*v = yyv3937
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg8_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3941 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv3941 == nil {
			r.EncodeNil()
		} else {
			yym3942 := z.EncBinary()
			_ = yym3942
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3941) {
			} else {
				z.EncFallback(yyv3941)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg8_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3943 := *v
	yyh3943, yyl3943 := z.DecSliceHelperStart()
	var yyc3943 bool
	if yyl3943 == 0 {
		if yyv3943 == nil {
			yyv3943 = []pkg8_runtime.Object{}
			yyc3943 = true
		} else if len(yyv3943) != 0 {
			yyv3943 = yyv3943[:0]
			yyc3943 = true
		}
	} else if yyl3943 > 0 {
		var yyrr3943, yyrl3943 int
		var yyrt3943 bool
		if yyl3943 > cap(yyv3943) {

			yyrg3943 := len(yyv3943) > 0
			yyv23943 := yyv3943
			yyrl3943, yyrt3943 = z.DecInferLen(yyl3943, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3943 {
				if yyrl3943 <= cap(yyv3943) {
					yyv3943 = yyv3943[:yyrl3943]
				} else {
					yyv3943 = make([]pkg8_runtime.Object, yyrl3943)
				}
			} else {
				yyv3943 = make([]pkg8_runtime.Object, yyrl3943)
			}
			yyc3943 = true
			yyrr3943 = len(yyv3943)
			if yyrg3943 {
				copy(yyv3943, yyv23943)
			}
		} else if yyl3943 != len(yyv3943) {
			yyv3943 = yyv3943[:yyl3943]
			yyc3943 = true
		}
		yyj3943 := 0
		for ; yyj3943 < yyrr3943; yyj3943++ {
			yyh3943.ElemContainerState(yyj3943)
			if r.TryDecodeAsNil() {
				yyv3943[yyj3943] = nil
			} else {
				yyv3944 := &yyv3943[yyj3943]
				yym3945 := z.DecBinary()
				_ = yym3945
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3944) {
				} else {
					z.DecFallback(yyv3944, true)
				}
			}

		}
		if yyrt3943 {
			for ; yyj3943 < yyl3943; yyj3943++ {
				yyv3943 = append(yyv3943, nil)
				yyh3943.ElemContainerState(yyj3943)
				if r.TryDecodeAsNil() {
					yyv3943[yyj3943] = nil
				} else {
					yyv3946 := &yyv3943[yyj3943]
					yym3947 := z.DecBinary()
					_ = yym3947
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3946) {
					} else {
						z.DecFallback(yyv3946, true)
					}
				}

			}
		}

	} else {
		yyj3943 := 0
		for ; !r.CheckBreak(); yyj3943++ {

			if yyj3943 >= len(yyv3943) {
				yyv3943 = append(yyv3943, nil) // var yyz3943 pkg8_runtime.Object
				yyc3943 = true
			}
			yyh3943.ElemContainerState(yyj3943)
			if yyj3943 < len(yyv3943) {
				if r.TryDecodeAsNil() {
					yyv3943[yyj3943] = nil
				} else {
					yyv3948 := &yyv3943[yyj3943]
					yym3949 := z.DecBinary()
					_ = yym3949
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3948) {
					} else {
						z.DecFallback(yyv3948, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3943 < len(yyv3943) {
			yyv3943 = yyv3943[:yyj3943]
			yyc3943 = true
		} else if yyj3943 == 0 && yyv3943 == nil {
			yyv3943 = []pkg8_runtime.Object{}
			yyc3943 = true
		}
	}
	yyh3943.End()
	if yyc3943 {
		*v = yyv3943
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3950 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3951 := &yyv3950
		yy3951.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3952 := *v
	yyh3952, yyl3952 := z.DecSliceHelperStart()
	var yyc3952 bool
	if yyl3952 == 0 {
		if yyv3952 == nil {
			yyv3952 = []LimitRangeItem{}
			yyc3952 = true
		} else if len(yyv3952) != 0 {
			yyv3952 = yyv3952[:0]
			yyc3952 = true
		}
	} else if yyl3952 > 0 {
		var yyrr3952, yyrl3952 int
		var yyrt3952 bool
		if yyl3952 > cap(yyv3952) {

			yyrg3952 := len(yyv3952) > 0
			yyv23952 := yyv3952
			yyrl3952, yyrt3952 = z.DecInferLen(yyl3952, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3952 {
				if yyrl3952 <= cap(yyv3952) {
					yyv3952 = yyv3952[:yyrl3952]
				} else {
					yyv3952 = make([]LimitRangeItem, yyrl3952)
				}
			} else {
				yyv3952 = make([]LimitRangeItem, yyrl3952)
			}
			yyc3952 = true
			yyrr3952 = len(yyv3952)
			if yyrg3952 {
				copy(yyv3952, yyv23952)
			}
		} else if yyl3952 != len(yyv3952) {
			yyv3952 = yyv3952[:yyl3952]
			yyc3952 = true
		}
		yyj3952 := 0
		for ; yyj3952 < yyrr3952; yyj3952++ {
			yyh3952.ElemContainerState(yyj3952)
			if r.TryDecodeAsNil() {
				yyv3952[yyj3952] = LimitRangeItem{}
			} else {
				yyv3953 := &yyv3952[yyj3952]
				yyv3953.CodecDecodeSelf(d)
			}

		}
		if yyrt3952 {
			for ; yyj3952 < yyl3952; yyj3952++ {
				yyv3952 = append(yyv3952, LimitRangeItem{})
				yyh3952.ElemContainerState(yyj3952)
				if r.TryDecodeAsNil() {
					yyv3952[yyj3952] = LimitRangeItem{}
				} else {
					yyv3954 := &yyv3952[yyj3952]
					yyv3954.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3952 := 0
		for ; !r.CheckBreak(); yyj3952++ {

			if yyj3952 >= len(yyv3952) {
				yyv3952 = append(yyv3952, LimitRangeItem{}) // var yyz3952 LimitRangeItem
				yyc3952 = true
			}
			yyh3952.ElemContainerState(yyj3952)
			if yyj3952 < len(yyv3952) {
				if r.TryDecodeAsNil() {
					yyv3952[yyj3952] = LimitRangeItem{}
				} else {
					yyv3955 := &yyv3952[yyj3952]
					yyv3955.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3952 < len(yyv3952) {
			yyv3952 = yyv3952[:yyj3952]
			yyc3952 = true
		} else if yyj3952 == 0 && yyv3952 == nil {
			yyv3952 = []LimitRangeItem{}
			yyc3952 = true
		}
	}
	yyh3952.End()
	if yyc3952 {
		*v = yyv3952
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3956 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3957 := &yyv3956
		yy3957.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3958 := *v
	yyh3958, yyl3958 := z.DecSliceHelperStart()
	var yyc3958 bool
	if yyl3958 == 0 {
		if yyv3958 == nil {
			yyv3958 = []LimitRange{}
			yyc3958 = true
		} else if len(yyv3958) != 0 {
			yyv3958 = yyv3958[:0]
			yyc3958 = true
		}
	} else if yyl3958 > 0 {
		var yyrr3958, yyrl3958 int
		var yyrt3958 bool
		if yyl3958 > cap(yyv3958) {

			yyrg3958 := len(yyv3958) > 0
			yyv23958 := yyv3958
			yyrl3958, yyrt3958 = z.DecInferLen(yyl3958, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3958 {
				if yyrl3958 <= cap(yyv3958) {
					yyv3958 = yyv3958[:yyrl3958]
				} else {
					yyv3958 = make([]LimitRange, yyrl3958)
				}
			} else {
				yyv3958 = make([]LimitRange, yyrl3958)
			}
			yyc3958 = true
			yyrr3958 = len(yyv3958)
			if yyrg3958 {
				copy(yyv3958, yyv23958)
			}
		} else if yyl3958 != len(yyv3958) {
			yyv3958 = yyv3958[:yyl3958]
			yyc3958 = true
		}
		yyj3958 := 0
		for ; yyj3958 < yyrr3958; yyj3958++ {
			yyh3958.ElemContainerState(yyj3958)
			if r.TryDecodeAsNil() {
				yyv3958[yyj3958] = LimitRange{}
			} else {
				yyv3959 := &yyv3958[yyj3958]
				yyv3959.CodecDecodeSelf(d)
			}

		}
		if yyrt3958 {
			for ; yyj3958 < yyl3958; yyj3958++ {
				yyv3958 = append(yyv3958, LimitRange{})
				yyh3958.ElemContainerState(yyj3958)
				if r.TryDecodeAsNil() {
					yyv3958[yyj3958] = LimitRange{}
				} else {
					yyv3960 := &yyv3958[yyj3958]
					yyv3960.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3958 := 0
		for ; !r.CheckBreak(); yyj3958++ {

			if yyj3958 >= len(yyv3958) {
				yyv3958 = append(yyv3958, LimitRange{}) // var yyz3958 LimitRange
				yyc3958 = true
			}
			yyh3958.ElemContainerState(yyj3958)
			if yyj3958 < len(yyv3958) {
				if r.TryDecodeAsNil() {
					yyv3958[yyj3958] = LimitRange{}
				} else {
					yyv3961 := &yyv3958[yyj3958]
					yyv3961.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3958 < len(yyv3958) {
			yyv3958 = yyv3958[:yyj3958]
			yyc3958 = true
		} else if yyj3958 == 0 && yyv3958 == nil {
			yyv3958 = []LimitRange{}
			yyc3958 = true
		}
	}
	yyh3958.End()
	if yyc3958 {
		*v = yyv3958
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3962 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3963 := &yyv3962
		yy3963.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3964 := *v
	yyh3964, yyl3964 := z.DecSliceHelperStart()
	var yyc3964 bool
	if yyl3964 == 0 {
		if yyv3964 == nil {
			yyv3964 = []ResourceQuota{}
			yyc3964 = true
		} else if len(yyv3964) != 0 {
			yyv3964 = yyv3964[:0]
			yyc3964 = true
		}
	} else if yyl3964 > 0 {
		var yyrr3964, yyrl3964 int
		var yyrt3964 bool
		if yyl3964 > cap(yyv3964) {

			yyrg3964 := len(yyv3964) > 0
			yyv23964 := yyv3964
			yyrl3964, yyrt3964 = z.DecInferLen(yyl3964, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3964 {
				if yyrl3964 <= cap(yyv3964) {
					yyv3964 = yyv3964[:yyrl3964]
				} else {
					yyv3964 = make([]ResourceQuota, yyrl3964)
				}
			} else {
				yyv3964 = make([]ResourceQuota, yyrl3964)
			}
			yyc3964 = true
			yyrr3964 = len(yyv3964)
			if yyrg3964 {
				copy(yyv3964, yyv23964)
			}
		} else if yyl3964 != len(yyv3964) {
			yyv3964 = yyv3964[:yyl3964]
			yyc3964 = true
		}
		yyj3964 := 0
		for ; yyj3964 < yyrr3964; yyj3964++ {
			yyh3964.ElemContainerState(yyj3964)
			if r.TryDecodeAsNil() {
				yyv3964[yyj3964] = ResourceQuota{}
			} else {
				yyv3965 := &yyv3964[yyj3964]
				yyv3965.CodecDecodeSelf(d)
			}

		}
		if yyrt3964 {
			for ; yyj3964 < yyl3964; yyj3964++ {
				yyv3964 = append(yyv3964, ResourceQuota{})
				yyh3964.ElemContainerState(yyj3964)
				if r.TryDecodeAsNil() {
					yyv3964[yyj3964] = ResourceQuota{}
				} else {
					yyv3966 := &yyv3964[yyj3964]
					yyv3966.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3964 := 0
		for ; !r.CheckBreak(); yyj3964++ {

			if yyj3964 >= len(yyv3964) {
				yyv3964 = append(yyv3964, ResourceQuota{}) // var yyz3964 ResourceQuota
				yyc3964 = true
			}
			yyh3964.ElemContainerState(yyj3964)
			if yyj3964 < len(yyv3964) {
				if r.TryDecodeAsNil() {
					yyv3964[yyj3964] = ResourceQuota{}
				} else {
					yyv3967 := &yyv3964[yyj3964]
					yyv3967.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3964 < len(yyv3964) {
			yyv3964 = yyv3964[:yyj3964]
			yyc3964 = true
		} else if yyj3964 == 0 && yyv3964 == nil {
			yyv3964 = []ResourceQuota{}
			yyc3964 = true
		}
	}
	yyh3964.End()
	if yyc3964 {
		*v = yyv3964
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3968, yyv3968 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym3969 := z.EncBinary()
		_ = yym3969
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3968))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv3968 == nil {
			r.EncodeNil()
		} else {
			yym3970 := z.EncBinary()
			_ = yym3970
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3968))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3971 := *v
	yyl3971 := r.ReadMapStart()
	yybh3971 := z.DecBasicHandle()
	if yyv3971 == nil {
		yyrl3971, _ := z.DecInferLen(yyl3971, yybh3971.MaxInitLen, 40)
		yyv3971 = make(map[string][]uint8, yyrl3971)
		*v = yyv3971
	}
	var yymk3971 string
	var yymv3971 []uint8
	var yymg3971 bool
	if yybh3971.MapValueReset {
		yymg3971 = true
	}
	if yyl3971 > 0 {
		for yyj3971 := 0; yyj3971 < yyl3971; yyj3971++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3971 = ""
			} else {
				yymk3971 = string(r.DecodeString())
			}

			if yymg3971 {
				yymv3971 = yyv3971[yymk3971]
			} else {
				yymv3971 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3971 = nil
			} else {
				yyv3973 := &yymv3971
				yym3974 := z.DecBinary()
				_ = yym3974
				if false {
				} else {
					*yyv3973 = r.DecodeBytes(*(*[]byte)(yyv3973), false, false)
				}
			}

			if yyv3971 != nil {
				yyv3971[yymk3971] = yymv3971
			}
		}
	} else if yyl3971 < 0 {
		for yyj3971 := 0; !r.CheckBreak(); yyj3971++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3971 = ""
			} else {
				yymk3971 = string(r.DecodeString())
			}

			if yymg3971 {
				yymv3971 = yyv3971[yymk3971]
			} else {
				yymv3971 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3971 = nil
			} else {
				yyv3976 := &yymv3971
				yym3977 := z.DecBinary()
				_ = yym3977
				if false {
				} else {
					*yyv3976 = r.DecodeBytes(*(*[]byte)(yyv3976), false, false)
				}
			}

			if yyv3971 != nil {
				yyv3971[yymk3971] = yymv3971
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3978 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3979 := &yyv3978
		yy3979.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3980 := *v
	yyh3980, yyl3980 := z.DecSliceHelperStart()
	var yyc3980 bool
	if yyl3980 == 0 {
		if yyv3980 == nil {
			yyv3980 = []Secret{}
			yyc3980 = true
		} else if len(yyv3980) != 0 {
			yyv3980 = yyv3980[:0]
			yyc3980 = true
		}
	} else if yyl3980 > 0 {
		var yyrr3980, yyrl3980 int
		var yyrt3980 bool
		if yyl3980 > cap(yyv3980) {

			yyrg3980 := len(yyv3980) > 0
			yyv23980 := yyv3980
			yyrl3980, yyrt3980 = z.DecInferLen(yyl3980, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3980 {
				if yyrl3980 <= cap(yyv3980) {
					yyv3980 = yyv3980[:yyrl3980]
				} else {
					yyv3980 = make([]Secret, yyrl3980)
				}
			} else {
				yyv3980 = make([]Secret, yyrl3980)
			}
			yyc3980 = true
			yyrr3980 = len(yyv3980)
			if yyrg3980 {
				copy(yyv3980, yyv23980)
			}
		} else if yyl3980 != len(yyv3980) {
			yyv3980 = yyv3980[:yyl3980]
			yyc3980 = true
		}
		yyj3980 := 0
		for ; yyj3980 < yyrr3980; yyj3980++ {
			yyh3980.ElemContainerState(yyj3980)
			if r.TryDecodeAsNil() {
				yyv3980[yyj3980] = Secret{}
			} else {
				yyv3981 := &yyv3980[yyj3980]
				yyv3981.CodecDecodeSelf(d)
			}

		}
		if yyrt3980 {
			for ; yyj3980 < yyl3980; yyj3980++ {
				yyv3980 = append(yyv3980, Secret{})
				yyh3980.ElemContainerState(yyj3980)
				if r.TryDecodeAsNil() {
					yyv3980[yyj3980] = Secret{}
				} else {
					yyv3982 := &yyv3980[yyj3980]
					yyv3982.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3980 := 0
		for ; !r.CheckBreak(); yyj3980++ {

			if yyj3980 >= len(yyv3980) {
				yyv3980 = append(yyv3980, Secret{}) // var yyz3980 Secret
				yyc3980 = true
			}
			yyh3980.ElemContainerState(yyj3980)
			if yyj3980 < len(yyv3980) {
				if r.TryDecodeAsNil() {
					yyv3980[yyj3980] = Secret{}
				} else {
					yyv3983 := &yyv3980[yyj3980]
					yyv3983.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3980 < len(yyv3980) {
			yyv3980 = yyv3980[:yyj3980]
			yyc3980 = true
		} else if yyj3980 == 0 && yyv3980 == nil {
			yyv3980 = []Secret{}
			yyc3980 = true
		}
	}
	yyh3980.End()
	if yyc3980 {
		*v = yyv3980
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3984 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3985 := &yyv3984
		yy3985.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3986 := *v
	yyh3986, yyl3986 := z.DecSliceHelperStart()
	var yyc3986 bool
	if yyl3986 == 0 {
		if yyv3986 == nil {
			yyv3986 = []ComponentCondition{}
			yyc3986 = true
		} else if len(yyv3986) != 0 {
			yyv3986 = yyv3986[:0]
			yyc3986 = true
		}
	} else if yyl3986 > 0 {
		var yyrr3986, yyrl3986 int
		var yyrt3986 bool
		if yyl3986 > cap(yyv3986) {

			yyrg3986 := len(yyv3986) > 0
			yyv23986 := yyv3986
			yyrl3986, yyrt3986 = z.DecInferLen(yyl3986, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3986 {
				if yyrl3986 <= cap(yyv3986) {
					yyv3986 = yyv3986[:yyrl3986]
				} else {
					yyv3986 = make([]ComponentCondition, yyrl3986)
				}
			} else {
				yyv3986 = make([]ComponentCondition, yyrl3986)
			}
			yyc3986 = true
			yyrr3986 = len(yyv3986)
			if yyrg3986 {
				copy(yyv3986, yyv23986)
			}
		} else if yyl3986 != len(yyv3986) {
			yyv3986 = yyv3986[:yyl3986]
			yyc3986 = true
		}
		yyj3986 := 0
		for ; yyj3986 < yyrr3986; yyj3986++ {
			yyh3986.ElemContainerState(yyj3986)
			if r.TryDecodeAsNil() {
				yyv3986[yyj3986] = ComponentCondition{}
			} else {
				yyv3987 := &yyv3986[yyj3986]
				yyv3987.CodecDecodeSelf(d)
			}

		}
		if yyrt3986 {
			for ; yyj3986 < yyl3986; yyj3986++ {
				yyv3986 = append(yyv3986, ComponentCondition{})
				yyh3986.ElemContainerState(yyj3986)
				if r.TryDecodeAsNil() {
					yyv3986[yyj3986] = ComponentCondition{}
				} else {
					yyv3988 := &yyv3986[yyj3986]
					yyv3988.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3986 := 0
		for ; !r.CheckBreak(); yyj3986++ {

			if yyj3986 >= len(yyv3986) {
				yyv3986 = append(yyv3986, ComponentCondition{}) // var yyz3986 ComponentCondition
				yyc3986 = true
			}
			yyh3986.ElemContainerState(yyj3986)
			if yyj3986 < len(yyv3986) {
				if r.TryDecodeAsNil() {
					yyv3986[yyj3986] = ComponentCondition{}
				} else {
					yyv3989 := &yyv3986[yyj3986]
					yyv3989.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3986 < len(yyv3986) {
			yyv3986 = yyv3986[:yyj3986]
			yyc3986 = true
		} else if yyj3986 == 0 && yyv3986 == nil {
			yyv3986 = []ComponentCondition{}
			yyc3986 = true
		}
	}
	yyh3986.End()
	if yyc3986 {
		*v = yyv3986
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3990 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3991 := &yyv3990
		yy3991.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3992 := *v
	yyh3992, yyl3992 := z.DecSliceHelperStart()
	var yyc3992 bool
	if yyl3992 == 0 {
		if yyv3992 == nil {
			yyv3992 = []ComponentStatus{}
			yyc3992 = true
		} else if len(yyv3992) != 0 {
			yyv3992 = yyv3992[:0]
			yyc3992 = true
		}
	} else if yyl3992 > 0 {
		var yyrr3992, yyrl3992 int
		var yyrt3992 bool
		if yyl3992 > cap(yyv3992) {

			yyrg3992 := len(yyv3992) > 0
			yyv23992 := yyv3992
			yyrl3992, yyrt3992 = z.DecInferLen(yyl3992, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3992 {
				if yyrl3992 <= cap(yyv3992) {
					yyv3992 = yyv3992[:yyrl3992]
				} else {
					yyv3992 = make([]ComponentStatus, yyrl3992)
				}
			} else {
				yyv3992 = make([]ComponentStatus, yyrl3992)
			}
			yyc3992 = true
			yyrr3992 = len(yyv3992)
			if yyrg3992 {
				copy(yyv3992, yyv23992)
			}
		} else if yyl3992 != len(yyv3992) {
			yyv3992 = yyv3992[:yyl3992]
			yyc3992 = true
		}
		yyj3992 := 0
		for ; yyj3992 < yyrr3992; yyj3992++ {
			yyh3992.ElemContainerState(yyj3992)
			if r.TryDecodeAsNil() {
				yyv3992[yyj3992] = ComponentStatus{}
			} else {
				yyv3993 := &yyv3992[yyj3992]
				yyv3993.CodecDecodeSelf(d)
			}

		}
		if yyrt3992 {
			for ; yyj3992 < yyl3992; yyj3992++ {
				yyv3992 = append(yyv3992, ComponentStatus{})
				yyh3992.ElemContainerState(yyj3992)
				if r.TryDecodeAsNil() {
					yyv3992[yyj3992] = ComponentStatus{}
				} else {
					yyv3994 := &yyv3992[yyj3992]
					yyv3994.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3992 := 0
		for ; !r.CheckBreak(); yyj3992++ {

			if yyj3992 >= len(yyv3992) {
				yyv3992 = append(yyv3992, ComponentStatus{}) // var yyz3992 ComponentStatus
				yyc3992 = true
			}
			yyh3992.ElemContainerState(yyj3992)
			if yyj3992 < len(yyv3992) {
				if r.TryDecodeAsNil() {
					yyv3992[yyj3992] = ComponentStatus{}
				} else {
					yyv3995 := &yyv3992[yyj3992]
					yyv3995.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3992 < len(yyv3992) {
			yyv3992 = yyv3992[:yyj3992]
			yyc3992 = true
		} else if yyj3992 == 0 && yyv3992 == nil {
			yyv3992 = []ComponentStatus{}
			yyc3992 = true
		}
	}
	yyh3992.End()
	if yyc3992 {
		*v = yyv3992
	}
}
