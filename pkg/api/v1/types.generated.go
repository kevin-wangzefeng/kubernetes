/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [18]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq82[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[17] = x.VolumeSource.FC != nil && x.FC != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(18)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.Cinder == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.CephFS == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.Flocker == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.FC == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr82 || yy2arr82 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym103 := z.DecBinary()
	_ = yym103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct104 := r.ContainerType()
		if yyct104 == codecSelferValueTypeMap1234 {
			yyl104 := r.ReadMapStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl104, d)
			}
		} else if yyct104 == codecSelferValueTypeArray1234 {
			yyl104 := r.ReadArrayStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys105Slc
	var yyhl105 bool = l >= 0
	for yyj105 := 0; ; yyj105++ {
		if yyhl105 {
			if yyj105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys105Slc = r.DecodeBytes(yys105Slc, true, true)
		yys105 := string(yys105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys105 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys105)
		} // end switch yys105
	} // end for yyj105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj124 int
	var yyb124 bool
	var yyhl124 bool = l >= 0
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj124++
		if yyhl124 {
			yyb124 = yyj124 > l
		} else {
			yyb124 = r.CheckBreak()
		}
		if yyb124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [17]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			yyq144[0] = x.HostPath != nil
			yyq144[1] = x.EmptyDir != nil
			yyq144[2] = x.GCEPersistentDisk != nil
			yyq144[3] = x.AWSElasticBlockStore != nil
			yyq144[4] = x.GitRepo != nil
			yyq144[5] = x.Secret != nil
			yyq144[6] = x.NFS != nil
			yyq144[7] = x.ISCSI != nil
			yyq144[8] = x.Glusterfs != nil
			yyq144[9] = x.PersistentVolumeClaim != nil
			yyq144[10] = x.RBD != nil
			yyq144[11] = x.FlexVolume != nil
			yyq144[12] = x.Cinder != nil
			yyq144[13] = x.CephFS != nil
			yyq144[14] = x.Flocker != nil
			yyq144[15] = x.DownwardAPI != nil
			yyq144[16] = x.FC != nil
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(17)
			} else {
				yynn144 = 0
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym162 := z.DecBinary()
	_ = yym162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct163 := r.ContainerType()
		if yyct163 == codecSelferValueTypeMap1234 {
			yyl163 := r.ReadMapStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl163, d)
			}
		} else if yyct163 == codecSelferValueTypeArray1234 {
			yyl163 := r.ReadArrayStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys164Slc
	var yyhl164 bool = l >= 0
	for yyj164 := 0; ; yyj164++ {
		if yyhl164 {
			if yyj164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys164Slc = r.DecodeBytes(yys164Slc, true, true)
		yys164 := string(yys164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys164 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys164)
		} // end switch yys164
	} // end for yyj164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj182 int
	var yyb182 bool
	var yyhl182 bool = l >= 0
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj182++
		if yyhl182 {
			yyb182 = yyj182 > l
		} else {
			yyb182 = r.CheckBreak()
		}
		if yyb182 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj182-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym200 := z.EncBinary()
		_ = yym200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep201 := !z.EncBinary()
			yy2arr201 := z.EncBasicHandle().StructToArray
			var yyq201 [2]bool
			_, _, _ = yysep201, yyq201, yy2arr201
			const yyr201 bool = false
			yyq201[1] = x.ReadOnly != false
			var yynn201 int
			if yyr201 || yy2arr201 {
				r.EncodeArrayStart(2)
			} else {
				yynn201 = 1
				for _, b := range yyq201 {
					if b {
						yynn201++
					}
				}
				r.EncodeMapStart(yynn201)
				yynn201 = 0
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym203 := z.EncBinary()
				_ = yym203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym204 := z.EncBinary()
				_ = yym204
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[1] {
					yym206 := z.EncBinary()
					_ = yym206
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq201[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym207 := z.EncBinary()
					_ = yym207
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym208 := z.DecBinary()
	_ = yym208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct209 := r.ContainerType()
		if yyct209 == codecSelferValueTypeMap1234 {
			yyl209 := r.ReadMapStart()
			if yyl209 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl209, d)
			}
		} else if yyct209 == codecSelferValueTypeArray1234 {
			yyl209 := r.ReadArrayStart()
			if yyl209 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys210Slc
	var yyhl210 bool = l >= 0
	for yyj210 := 0; ; yyj210++ {
		if yyhl210 {
			if yyj210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys210Slc = r.DecodeBytes(yys210Slc, true, true)
		yys210 := string(yys210Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys210 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys210)
		} // end switch yys210
	} // end for yyj210
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj213 int
	var yyb213 bool
	var yyhl213 bool = l >= 0
	yyj213++
	if yyhl213 {
		yyb213 = yyj213 > l
	} else {
		yyb213 = r.CheckBreak()
	}
	if yyb213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj213++
	if yyhl213 {
		yyb213 = yyj213 > l
	} else {
		yyb213 = r.CheckBreak()
	}
	if yyb213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj213++
		if yyhl213 {
			yyb213 = yyj213 > l
		} else {
			yyb213 = r.CheckBreak()
		}
		if yyb213 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj213-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym216 := z.EncBinary()
		_ = yym216
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep217 := !z.EncBinary()
			yy2arr217 := z.EncBasicHandle().StructToArray
			var yyq217 [12]bool
			_, _, _ = yysep217, yyq217, yy2arr217
			const yyr217 bool = false
			yyq217[0] = x.GCEPersistentDisk != nil
			yyq217[1] = x.AWSElasticBlockStore != nil
			yyq217[2] = x.HostPath != nil
			yyq217[3] = x.Glusterfs != nil
			yyq217[4] = x.NFS != nil
			yyq217[5] = x.RBD != nil
			yyq217[6] = x.ISCSI != nil
			yyq217[7] = x.Cinder != nil
			yyq217[8] = x.CephFS != nil
			yyq217[9] = x.FC != nil
			yyq217[10] = x.Flocker != nil
			yyq217[11] = x.FlexVolume != nil
			var yynn217 int
			if yyr217 || yy2arr217 {
				r.EncodeArrayStart(12)
			} else {
				yynn217 = 0
				for _, b := range yyq217 {
					if b {
						yynn217++
					}
				}
				r.EncodeMapStart(yynn217)
				yynn217 = 0
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym230 := z.DecBinary()
	_ = yym230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct231 := r.ContainerType()
		if yyct231 == codecSelferValueTypeMap1234 {
			yyl231 := r.ReadMapStart()
			if yyl231 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl231, d)
			}
		} else if yyct231 == codecSelferValueTypeArray1234 {
			yyl231 := r.ReadArrayStart()
			if yyl231 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl231, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys232Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys232Slc
	var yyhl232 bool = l >= 0
	for yyj232 := 0; ; yyj232++ {
		if yyhl232 {
			if yyj232 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys232Slc = r.DecodeBytes(yys232Slc, true, true)
		yys232 := string(yys232Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys232 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys232)
		} // end switch yys232
	} // end for yyj232
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj245 int
	var yyb245 bool
	var yyhl245 bool = l >= 0
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	for {
		yyj245++
		if yyhl245 {
			yyb245 = yyj245 > l
		} else {
			yyb245 = r.CheckBreak()
		}
		if yyb245 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj245-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym258 := z.EncBinary()
		_ = yym258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep259 := !z.EncBinary()
			yy2arr259 := z.EncBasicHandle().StructToArray
			var yyq259 [5]bool
			_, _, _ = yysep259, yyq259, yy2arr259
			const yyr259 bool = false
			yyq259[0] = x.Kind != ""
			yyq259[1] = x.APIVersion != ""
			yyq259[2] = true
			yyq259[3] = true
			yyq259[4] = true
			var yynn259 int
			if yyr259 || yy2arr259 {
				r.EncodeArrayStart(5)
			} else {
				yynn259 = 0
				for _, b := range yyq259 {
					if b {
						yynn259++
					}
				}
				r.EncodeMapStart(yynn259)
				yynn259 = 0
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[0] {
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[1] {
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[2] {
					yy267 := &x.ObjectMeta
					yy267.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy268 := &x.ObjectMeta
					yy268.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[3] {
					yy270 := &x.Spec
					yy270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy271 := &x.Spec
					yy271.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[4] {
					yy273 := &x.Status
					yy273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy274 := &x.Status
					yy274.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym275 := z.DecBinary()
	_ = yym275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct276 := r.ContainerType()
		if yyct276 == codecSelferValueTypeMap1234 {
			yyl276 := r.ReadMapStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl276, d)
			}
		} else if yyct276 == codecSelferValueTypeArray1234 {
			yyl276 := r.ReadArrayStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys277Slc
	var yyhl277 bool = l >= 0
	for yyj277 := 0; ; yyj277++ {
		if yyhl277 {
			if yyj277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys277Slc = r.DecodeBytes(yys277Slc, true, true)
		yys277 := string(yys277Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys277 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv280 := &x.ObjectMeta
				yyv280.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv281 := &x.Spec
				yyv281.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv282 := &x.Status
				yyv282.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys277)
		} // end switch yys277
	} // end for yyj277
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj283 int
	var yyb283 bool
	var yyhl283 bool = l >= 0
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv286 := &x.ObjectMeta
		yyv286.CodecDecodeSelf(d)
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv287 := &x.Spec
		yyv287.CodecDecodeSelf(d)
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv288 := &x.Status
		yyv288.CodecDecodeSelf(d)
	}
	for {
		yyj283++
		if yyhl283 {
			yyb283 = yyj283 > l
		} else {
			yyb283 = r.CheckBreak()
		}
		if yyb283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym289 := z.EncBinary()
		_ = yym289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep290 := !z.EncBinary()
			yy2arr290 := z.EncBasicHandle().StructToArray
			var yyq290 [16]bool
			_, _, _ = yysep290, yyq290, yy2arr290
			const yyr290 bool = false
			yyq290[0] = len(x.Capacity) != 0
			yyq290[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq290[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq290[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq290[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq290[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq290[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq290[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq290[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq290[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq290[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq290[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq290[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq290[13] = len(x.AccessModes) != 0
			yyq290[14] = x.ClaimRef != nil
			yyq290[15] = x.PersistentVolumeReclaimPolicy != ""
			var yynn290 int
			if yyr290 || yy2arr290 {
				r.EncodeArrayStart(16)
			} else {
				yynn290 = 0
				for _, b := range yyq290 {
					if b {
						yynn290++
					}
				}
				r.EncodeMapStart(yynn290)
				yynn290 = 0
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr290 || yy2arr290 {
				if yyn292 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr290 || yy2arr290 {
				if yyn293 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn294 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn294 = true
				goto LABEL294
			}
		LABEL294:
			if yyr290 || yy2arr290 {
				if yyn294 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn294 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn295 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn295 = true
				goto LABEL295
			}
		LABEL295:
			if yyr290 || yy2arr290 {
				if yyn295 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn295 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn296 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn296 = true
				goto LABEL296
			}
		LABEL296:
			if yyr290 || yy2arr290 {
				if yyn296 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn296 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn297 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn297 = true
				goto LABEL297
			}
		LABEL297:
			if yyr290 || yy2arr290 {
				if yyn297 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn297 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn298 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn298 = true
				goto LABEL298
			}
		LABEL298:
			if yyr290 || yy2arr290 {
				if yyn298 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn298 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn299 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn299 = true
				goto LABEL299
			}
		LABEL299:
			if yyr290 || yy2arr290 {
				if yyn299 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn299 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn300 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn300 = true
				goto LABEL300
			}
		LABEL300:
			if yyr290 || yy2arr290 {
				if yyn300 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn300 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn301 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn301 = true
				goto LABEL301
			}
		LABEL301:
			if yyr290 || yy2arr290 {
				if yyn301 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn301 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn302 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn302 = true
				goto LABEL302
			}
		LABEL302:
			if yyr290 || yy2arr290 {
				if yyn302 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn302 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn303 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn303 = true
				goto LABEL303
			}
		LABEL303:
			if yyr290 || yy2arr290 {
				if yyn303 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn303 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[13] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym305 := z.EncBinary()
						_ = yym305
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym306 := z.EncBinary()
						_ = yym306
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[14] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[15] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq290[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym309 := z.DecBinary()
	_ = yym309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct310 := r.ContainerType()
		if yyct310 == codecSelferValueTypeMap1234 {
			yyl310 := r.ReadMapStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl310, d)
			}
		} else if yyct310 == codecSelferValueTypeArray1234 {
			yyl310 := r.ReadArrayStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys311Slc
	var yyhl311 bool = l >= 0
	for yyj311 := 0; ; yyj311++ {
		if yyhl311 {
			if yyj311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys311Slc = r.DecodeBytes(yys311Slc, true, true)
		yys311 := string(yys311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys311 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv312 := &x.Capacity
				yyv312.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv325 := &x.AccessModes
				yym326 := z.DecBinary()
				_ = yym326
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv325), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys311)
		} // end switch yys311
	} // end for yyj311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj329 int
	var yyb329 bool
	var yyhl329 bool = l >= 0
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv330 := &x.Capacity
		yyv330.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv343 := &x.AccessModes
		yym344 := z.DecBinary()
		_ = yym344
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv343), d)
		}
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj329++
		if yyhl329 {
			yyb329 = yyj329 > l
		} else {
			yyb329 = r.CheckBreak()
		}
		if yyb329 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj329-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym347 := z.EncBinary()
	_ = yym347
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym348 := z.DecBinary()
	_ = yym348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym349 := z.EncBinary()
		_ = yym349
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep350 := !z.EncBinary()
			yy2arr350 := z.EncBasicHandle().StructToArray
			var yyq350 [3]bool
			_, _, _ = yysep350, yyq350, yy2arr350
			const yyr350 bool = false
			yyq350[0] = x.Phase != ""
			yyq350[1] = x.Message != ""
			yyq350[2] = x.Reason != ""
			var yynn350 int
			if yyr350 || yy2arr350 {
				r.EncodeArrayStart(3)
			} else {
				yynn350 = 0
				for _, b := range yyq350 {
					if b {
						yynn350++
					}
				}
				r.EncodeMapStart(yynn350)
				yynn350 = 0
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[1] {
					yym353 := z.EncBinary()
					_ = yym353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym354 := z.EncBinary()
					_ = yym354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[2] {
					yym356 := z.EncBinary()
					_ = yym356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym357 := z.EncBinary()
					_ = yym357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym358 := z.DecBinary()
	_ = yym358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct359 := r.ContainerType()
		if yyct359 == codecSelferValueTypeMap1234 {
			yyl359 := r.ReadMapStart()
			if yyl359 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl359, d)
			}
		} else if yyct359 == codecSelferValueTypeArray1234 {
			yyl359 := r.ReadArrayStart()
			if yyl359 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl359, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys360Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys360Slc
	var yyhl360 bool = l >= 0
	for yyj360 := 0; ; yyj360++ {
		if yyhl360 {
			if yyj360 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys360Slc = r.DecodeBytes(yys360Slc, true, true)
		yys360 := string(yys360Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys360 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys360)
		} // end switch yys360
	} // end for yyj360
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj364 int
	var yyb364 bool
	var yyhl364 bool = l >= 0
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj364++
		if yyhl364 {
			yyb364 = yyj364 > l
		} else {
			yyb364 = r.CheckBreak()
		}
		if yyb364 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj364-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym368 := z.EncBinary()
		_ = yym368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep369 := !z.EncBinary()
			yy2arr369 := z.EncBasicHandle().StructToArray
			var yyq369 [4]bool
			_, _, _ = yysep369, yyq369, yy2arr369
			const yyr369 bool = false
			yyq369[0] = x.Kind != ""
			yyq369[1] = x.APIVersion != ""
			yyq369[2] = true
			var yynn369 int
			if yyr369 || yy2arr369 {
				r.EncodeArrayStart(4)
			} else {
				yynn369 = 1
				for _, b := range yyq369 {
					if b {
						yynn369++
					}
				}
				r.EncodeMapStart(yynn369)
				yynn369 = 0
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[0] {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[1] {
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym375 := z.EncBinary()
					_ = yym375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[2] {
					yy377 := &x.ListMeta
					yym378 := z.EncBinary()
					_ = yym378
					if false {
					} else if z.HasExtensions() && z.EncExt(yy377) {
					} else {
						z.EncFallback(yy377)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy379 := &x.ListMeta
					yym380 := z.EncBinary()
					_ = yym380
					if false {
					} else if z.HasExtensions() && z.EncExt(yy379) {
					} else {
						z.EncFallback(yy379)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym382 := z.EncBinary()
					_ = yym382
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym383 := z.EncBinary()
					_ = yym383
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym384 := z.DecBinary()
	_ = yym384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct385 := r.ContainerType()
		if yyct385 == codecSelferValueTypeMap1234 {
			yyl385 := r.ReadMapStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl385, d)
			}
		} else if yyct385 == codecSelferValueTypeArray1234 {
			yyl385 := r.ReadArrayStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys386Slc
	var yyhl386 bool = l >= 0
	for yyj386 := 0; ; yyj386++ {
		if yyhl386 {
			if yyj386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys386Slc = r.DecodeBytes(yys386Slc, true, true)
		yys386 := string(yys386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys386 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv389 := &x.ListMeta
				yym390 := z.DecBinary()
				_ = yym390
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv389) {
				} else {
					z.DecFallback(yyv389, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv391 := &x.Items
				yym392 := z.DecBinary()
				_ = yym392
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv391), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys386)
		} // end switch yys386
	} // end for yyj386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj393 int
	var yyb393 bool
	var yyhl393 bool = l >= 0
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv396 := &x.ListMeta
		yym397 := z.DecBinary()
		_ = yym397
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv396) {
		} else {
			z.DecFallback(yyv396, false)
		}
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv398 := &x.Items
		yym399 := z.DecBinary()
		_ = yym399
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv398), d)
		}
	}
	for {
		yyj393++
		if yyhl393 {
			yyb393 = yyj393 > l
		} else {
			yyb393 = r.CheckBreak()
		}
		if yyb393 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj393-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym400 := z.EncBinary()
		_ = yym400
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep401 := !z.EncBinary()
			yy2arr401 := z.EncBasicHandle().StructToArray
			var yyq401 [5]bool
			_, _, _ = yysep401, yyq401, yy2arr401
			const yyr401 bool = false
			yyq401[0] = x.Kind != ""
			yyq401[1] = x.APIVersion != ""
			yyq401[2] = true
			yyq401[3] = true
			yyq401[4] = true
			var yynn401 int
			if yyr401 || yy2arr401 {
				r.EncodeArrayStart(5)
			} else {
				yynn401 = 0
				for _, b := range yyq401 {
					if b {
						yynn401++
					}
				}
				r.EncodeMapStart(yynn401)
				yynn401 = 0
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[0] {
					yym403 := z.EncBinary()
					_ = yym403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq401[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym404 := z.EncBinary()
					_ = yym404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[1] {
					yym406 := z.EncBinary()
					_ = yym406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq401[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym407 := z.EncBinary()
					_ = yym407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[2] {
					yy409 := &x.ObjectMeta
					yy409.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy410 := &x.ObjectMeta
					yy410.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[3] {
					yy412 := &x.Spec
					yy412.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy413 := &x.Spec
					yy413.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[4] {
					yy415 := &x.Status
					yy415.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy416 := &x.Status
					yy416.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym417 := z.DecBinary()
	_ = yym417
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct418 := r.ContainerType()
		if yyct418 == codecSelferValueTypeMap1234 {
			yyl418 := r.ReadMapStart()
			if yyl418 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl418, d)
			}
		} else if yyct418 == codecSelferValueTypeArray1234 {
			yyl418 := r.ReadArrayStart()
			if yyl418 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl418, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys419Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys419Slc
	var yyhl419 bool = l >= 0
	for yyj419 := 0; ; yyj419++ {
		if yyhl419 {
			if yyj419 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys419Slc = r.DecodeBytes(yys419Slc, true, true)
		yys419 := string(yys419Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys419 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv422 := &x.ObjectMeta
				yyv422.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv423 := &x.Spec
				yyv423.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv424 := &x.Status
				yyv424.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys419)
		} // end switch yys419
	} // end for yyj419
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj425 int
	var yyb425 bool
	var yyhl425 bool = l >= 0
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv428 := &x.ObjectMeta
		yyv428.CodecDecodeSelf(d)
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv429 := &x.Spec
		yyv429.CodecDecodeSelf(d)
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv430 := &x.Status
		yyv430.CodecDecodeSelf(d)
	}
	for {
		yyj425++
		if yyhl425 {
			yyb425 = yyj425 > l
		} else {
			yyb425 = r.CheckBreak()
		}
		if yyb425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym431 := z.EncBinary()
		_ = yym431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep432 := !z.EncBinary()
			yy2arr432 := z.EncBasicHandle().StructToArray
			var yyq432 [4]bool
			_, _, _ = yysep432, yyq432, yy2arr432
			const yyr432 bool = false
			yyq432[0] = x.Kind != ""
			yyq432[1] = x.APIVersion != ""
			yyq432[2] = true
			var yynn432 int
			if yyr432 || yy2arr432 {
				r.EncodeArrayStart(4)
			} else {
				yynn432 = 1
				for _, b := range yyq432 {
					if b {
						yynn432++
					}
				}
				r.EncodeMapStart(yynn432)
				yynn432 = 0
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[0] {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[1] {
					yym437 := z.EncBinary()
					_ = yym437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[2] {
					yy440 := &x.ListMeta
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else if z.HasExtensions() && z.EncExt(yy440) {
					} else {
						z.EncFallback(yy440)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq432[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy442 := &x.ListMeta
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else if z.HasExtensions() && z.EncExt(yy442) {
					} else {
						z.EncFallback(yy442)
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym446 := z.EncBinary()
					_ = yym446
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym447 := z.DecBinary()
	_ = yym447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct448 := r.ContainerType()
		if yyct448 == codecSelferValueTypeMap1234 {
			yyl448 := r.ReadMapStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl448, d)
			}
		} else if yyct448 == codecSelferValueTypeArray1234 {
			yyl448 := r.ReadArrayStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl448, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys449Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys449Slc
	var yyhl449 bool = l >= 0
	for yyj449 := 0; ; yyj449++ {
		if yyhl449 {
			if yyj449 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys449Slc = r.DecodeBytes(yys449Slc, true, true)
		yys449 := string(yys449Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys449 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv452 := &x.ListMeta
				yym453 := z.DecBinary()
				_ = yym453
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv452) {
				} else {
					z.DecFallback(yyv452, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv454 := &x.Items
				yym455 := z.DecBinary()
				_ = yym455
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv454), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys449)
		} // end switch yys449
	} // end for yyj449
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj456 int
	var yyb456 bool
	var yyhl456 bool = l >= 0
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv459 := &x.ListMeta
		yym460 := z.DecBinary()
		_ = yym460
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv459) {
		} else {
			z.DecFallback(yyv459, false)
		}
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv461 := &x.Items
		yym462 := z.DecBinary()
		_ = yym462
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv461), d)
		}
	}
	for {
		yyj456++
		if yyhl456 {
			yyb456 = yyj456 > l
		} else {
			yyb456 = r.CheckBreak()
		}
		if yyb456 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj456-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym463 := z.EncBinary()
		_ = yym463
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep464 := !z.EncBinary()
			yy2arr464 := z.EncBasicHandle().StructToArray
			var yyq464 [3]bool
			_, _, _ = yysep464, yyq464, yy2arr464
			const yyr464 bool = false
			yyq464[0] = len(x.AccessModes) != 0
			yyq464[1] = true
			yyq464[2] = x.VolumeName != ""
			var yynn464 int
			if yyr464 || yy2arr464 {
				r.EncodeArrayStart(3)
			} else {
				yynn464 = 0
				for _, b := range yyq464 {
					if b {
						yynn464++
					}
				}
				r.EncodeMapStart(yynn464)
				yynn464 = 0
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym466 := z.EncBinary()
						_ = yym466
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq464[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym467 := z.EncBinary()
						_ = yym467
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[1] {
					yy469 := &x.Resources
					yy469.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq464[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy470 := &x.Resources
					yy470.CodecEncodeSelf(e)
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[2] {
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq464[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym473 := z.EncBinary()
					_ = yym473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym474 := z.DecBinary()
	_ = yym474
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct475 := r.ContainerType()
		if yyct475 == codecSelferValueTypeMap1234 {
			yyl475 := r.ReadMapStart()
			if yyl475 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl475, d)
			}
		} else if yyct475 == codecSelferValueTypeArray1234 {
			yyl475 := r.ReadArrayStart()
			if yyl475 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl475, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys476Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys476Slc
	var yyhl476 bool = l >= 0
	for yyj476 := 0; ; yyj476++ {
		if yyhl476 {
			if yyj476 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys476Slc = r.DecodeBytes(yys476Slc, true, true)
		yys476 := string(yys476Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys476 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv477 := &x.AccessModes
				yym478 := z.DecBinary()
				_ = yym478
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv477), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv479 := &x.Resources
				yyv479.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys476)
		} // end switch yys476
	} // end for yyj476
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj481 int
	var yyb481 bool
	var yyhl481 bool = l >= 0
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv482 := &x.AccessModes
		yym483 := z.DecBinary()
		_ = yym483
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv482), d)
		}
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv484 := &x.Resources
		yyv484.CodecDecodeSelf(d)
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj481++
		if yyhl481 {
			yyb481 = yyj481 > l
		} else {
			yyb481 = r.CheckBreak()
		}
		if yyb481 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj481-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym486 := z.EncBinary()
		_ = yym486
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep487 := !z.EncBinary()
			yy2arr487 := z.EncBasicHandle().StructToArray
			var yyq487 [3]bool
			_, _, _ = yysep487, yyq487, yy2arr487
			const yyr487 bool = false
			yyq487[0] = x.Phase != ""
			yyq487[1] = len(x.AccessModes) != 0
			yyq487[2] = len(x.Capacity) != 0
			var yynn487 int
			if yyr487 || yy2arr487 {
				r.EncodeArrayStart(3)
			} else {
				yynn487 = 0
				for _, b := range yyq487 {
					if b {
						yynn487++
					}
				}
				r.EncodeMapStart(yynn487)
				yynn487 = 0
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq487[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym490 := z.EncBinary()
						_ = yym490
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq487[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym491 := z.EncBinary()
						_ = yym491
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq487[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym493 := z.DecBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct494 := r.ContainerType()
		if yyct494 == codecSelferValueTypeMap1234 {
			yyl494 := r.ReadMapStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl494, d)
			}
		} else if yyct494 == codecSelferValueTypeArray1234 {
			yyl494 := r.ReadArrayStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys495Slc
	var yyhl495 bool = l >= 0
	for yyj495 := 0; ; yyj495++ {
		if yyhl495 {
			if yyj495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys495Slc = r.DecodeBytes(yys495Slc, true, true)
		yys495 := string(yys495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys495 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv497 := &x.AccessModes
				yym498 := z.DecBinary()
				_ = yym498
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv497), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv499 := &x.Capacity
				yyv499.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys495)
		} // end switch yys495
	} // end for yyj495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj500 int
	var yyb500 bool
	var yyhl500 bool = l >= 0
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv502 := &x.AccessModes
		yym503 := z.DecBinary()
		_ = yym503
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv502), d)
		}
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv504 := &x.Capacity
		yyv504.CodecDecodeSelf(d)
	}
	for {
		yyj500++
		if yyhl500 {
			yyb500 = yyj500 > l
		} else {
			yyb500 = r.CheckBreak()
		}
		if yyb500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym505 := z.EncBinary()
	_ = yym505
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym506 := z.DecBinary()
	_ = yym506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym507 := z.EncBinary()
	_ = yym507
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym508 := z.DecBinary()
	_ = yym508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym509 := z.EncBinary()
	_ = yym509
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym510 := z.DecBinary()
	_ = yym510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym511 := z.EncBinary()
		_ = yym511
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep512 := !z.EncBinary()
			yy2arr512 := z.EncBasicHandle().StructToArray
			var yyq512 [1]bool
			_, _, _ = yysep512, yyq512, yy2arr512
			const yyr512 bool = false
			var yynn512 int
			if yyr512 || yy2arr512 {
				r.EncodeArrayStart(1)
			} else {
				yynn512 = 1
				for _, b := range yyq512 {
					if b {
						yynn512++
					}
				}
				r.EncodeMapStart(yynn512)
				yynn512 = 0
			}
			if yyr512 || yy2arr512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym514 := z.EncBinary()
				_ = yym514
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym515 := z.EncBinary()
				_ = yym515
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr512 || yy2arr512 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym516 := z.DecBinary()
	_ = yym516
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct517 := r.ContainerType()
		if yyct517 == codecSelferValueTypeMap1234 {
			yyl517 := r.ReadMapStart()
			if yyl517 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl517, d)
			}
		} else if yyct517 == codecSelferValueTypeArray1234 {
			yyl517 := r.ReadArrayStart()
			if yyl517 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl517, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys518Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys518Slc
	var yyhl518 bool = l >= 0
	for yyj518 := 0; ; yyj518++ {
		if yyhl518 {
			if yyj518 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys518Slc = r.DecodeBytes(yys518Slc, true, true)
		yys518 := string(yys518Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys518 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys518)
		} // end switch yys518
	} // end for yyj518
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj520 int
	var yyb520 bool
	var yyhl520 bool = l >= 0
	yyj520++
	if yyhl520 {
		yyb520 = yyj520 > l
	} else {
		yyb520 = r.CheckBreak()
	}
	if yyb520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj520++
		if yyhl520 {
			yyb520 = yyj520 > l
		} else {
			yyb520 = r.CheckBreak()
		}
		if yyb520 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj520-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym522 := z.EncBinary()
		_ = yym522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep523 := !z.EncBinary()
			yy2arr523 := z.EncBasicHandle().StructToArray
			var yyq523 [1]bool
			_, _, _ = yysep523, yyq523, yy2arr523
			const yyr523 bool = false
			yyq523[0] = x.Medium != ""
			var yynn523 int
			if yyr523 || yy2arr523 {
				r.EncodeArrayStart(1)
			} else {
				yynn523 = 0
				for _, b := range yyq523 {
					if b {
						yynn523++
					}
				}
				r.EncodeMapStart(yynn523)
				yynn523 = 0
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq523[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq523[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym525 := z.DecBinary()
	_ = yym525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct526 := r.ContainerType()
		if yyct526 == codecSelferValueTypeMap1234 {
			yyl526 := r.ReadMapStart()
			if yyl526 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl526, d)
			}
		} else if yyct526 == codecSelferValueTypeArray1234 {
			yyl526 := r.ReadArrayStart()
			if yyl526 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl526, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys527Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys527Slc
	var yyhl527 bool = l >= 0
	for yyj527 := 0; ; yyj527++ {
		if yyhl527 {
			if yyj527 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys527Slc = r.DecodeBytes(yys527Slc, true, true)
		yys527 := string(yys527Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys527 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys527)
		} // end switch yys527
	} // end for yyj527
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj529 int
	var yyb529 bool
	var yyhl529 bool = l >= 0
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj529++
		if yyhl529 {
			yyb529 = yyj529 > l
		} else {
			yyb529 = r.CheckBreak()
		}
		if yyb529 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj529-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym531 := z.EncBinary()
		_ = yym531
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep532 := !z.EncBinary()
			yy2arr532 := z.EncBasicHandle().StructToArray
			var yyq532 [3]bool
			_, _, _ = yysep532, yyq532, yy2arr532
			const yyr532 bool = false
			yyq532[2] = x.ReadOnly != false
			var yynn532 int
			if yyr532 || yy2arr532 {
				r.EncodeArrayStart(3)
			} else {
				yynn532 = 2
				for _, b := range yyq532 {
					if b {
						yynn532++
					}
				}
				r.EncodeMapStart(yynn532)
				yynn532 = 0
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym534 := z.EncBinary()
				_ = yym534
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym535 := z.EncBinary()
				_ = yym535
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym537 := z.EncBinary()
				_ = yym537
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym538 := z.EncBinary()
				_ = yym538
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq532[2] {
					yym540 := z.EncBinary()
					_ = yym540
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq532[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym541 := z.EncBinary()
					_ = yym541
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym542 := z.DecBinary()
	_ = yym542
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct543 := r.ContainerType()
		if yyct543 == codecSelferValueTypeMap1234 {
			yyl543 := r.ReadMapStart()
			if yyl543 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl543, d)
			}
		} else if yyct543 == codecSelferValueTypeArray1234 {
			yyl543 := r.ReadArrayStart()
			if yyl543 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl543, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys544Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys544Slc
	var yyhl544 bool = l >= 0
	for yyj544 := 0; ; yyj544++ {
		if yyhl544 {
			if yyj544 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys544Slc = r.DecodeBytes(yys544Slc, true, true)
		yys544 := string(yys544Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys544 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys544)
		} // end switch yys544
	} // end for yyj544
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj548 int
	var yyb548 bool
	var yyhl548 bool = l >= 0
	yyj548++
	if yyhl548 {
		yyb548 = yyj548 > l
	} else {
		yyb548 = r.CheckBreak()
	}
	if yyb548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj548++
	if yyhl548 {
		yyb548 = yyj548 > l
	} else {
		yyb548 = r.CheckBreak()
	}
	if yyb548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj548++
	if yyhl548 {
		yyb548 = yyj548 > l
	} else {
		yyb548 = r.CheckBreak()
	}
	if yyb548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj548++
		if yyhl548 {
			yyb548 = yyj548 > l
		} else {
			yyb548 = r.CheckBreak()
		}
		if yyb548 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj548-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym552 := z.EncBinary()
		_ = yym552
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep553 := !z.EncBinary()
			yy2arr553 := z.EncBasicHandle().StructToArray
			var yyq553 [8]bool
			_, _, _ = yysep553, yyq553, yy2arr553
			const yyr553 bool = false
			yyq553[2] = x.FSType != ""
			yyq553[7] = x.ReadOnly != false
			var yynn553 int
			if yyr553 || yy2arr553 {
				r.EncodeArrayStart(8)
			} else {
				yynn553 = 6
				for _, b := range yyq553 {
					if b {
						yynn553++
					}
				}
				r.EncodeMapStart(yynn553)
				yynn553 = 0
			}
			if yyr553 || yy2arr553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr553 || yy2arr553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym558 := z.EncBinary()
				_ = yym558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym559 := z.EncBinary()
				_ = yym559
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr553 || yy2arr553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq553[2] {
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq553[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr553 || yy2arr553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym564 := z.EncBinary()
				_ = yym564
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym565 := z.EncBinary()
				_ = yym565
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr553 || yy2arr553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym567 := z.EncBinary()
				_ = yym567
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym568 := z.EncBinary()
				_ = yym568
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr553 || yy2arr553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym570 := z.EncBinary()
				_ = yym570
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym571 := z.EncBinary()
				_ = yym571
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr553 || yy2arr553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr553 || yy2arr553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq553[7] {
					yym574 := z.EncBinary()
					_ = yym574
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq553[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym575 := z.EncBinary()
					_ = yym575
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr553 || yy2arr553 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym576 := z.DecBinary()
	_ = yym576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct577 := r.ContainerType()
		if yyct577 == codecSelferValueTypeMap1234 {
			yyl577 := r.ReadMapStart()
			if yyl577 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl577, d)
			}
		} else if yyct577 == codecSelferValueTypeArray1234 {
			yyl577 := r.ReadArrayStart()
			if yyl577 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys578Slc
	var yyhl578 bool = l >= 0
	for yyj578 := 0; ; yyj578++ {
		if yyhl578 {
			if yyj578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys578Slc = r.DecodeBytes(yys578Slc, true, true)
		yys578 := string(yys578Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys578 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv579 := &x.CephMonitors
				yym580 := z.DecBinary()
				_ = yym580
				if false {
				} else {
					z.F.DecSliceStringX(yyv579, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys578)
		} // end switch yys578
	} // end for yyj578
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj588 int
	var yyb588 bool
	var yyhl588 bool = l >= 0
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv589 := &x.CephMonitors
		yym590 := z.DecBinary()
		_ = yym590
		if false {
		} else {
			z.F.DecSliceStringX(yyv589, false, d)
		}
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj588++
		if yyhl588 {
			yyb588 = yyj588 > l
		} else {
			yyb588 = r.CheckBreak()
		}
		if yyb588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym598 := z.EncBinary()
		_ = yym598
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep599 := !z.EncBinary()
			yy2arr599 := z.EncBasicHandle().StructToArray
			var yyq599 [3]bool
			_, _, _ = yysep599, yyq599, yy2arr599
			const yyr599 bool = false
			yyq599[1] = x.FSType != ""
			yyq599[2] = x.ReadOnly != false
			var yynn599 int
			if yyr599 || yy2arr599 {
				r.EncodeArrayStart(3)
			} else {
				yynn599 = 1
				for _, b := range yyq599 {
					if b {
						yynn599++
					}
				}
				r.EncodeMapStart(yynn599)
				yynn599 = 0
			}
			if yyr599 || yy2arr599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym601 := z.EncBinary()
				_ = yym601
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym602 := z.EncBinary()
				_ = yym602
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr599 || yy2arr599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq599[1] {
					yym604 := z.EncBinary()
					_ = yym604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq599[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym605 := z.EncBinary()
					_ = yym605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr599 || yy2arr599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq599[2] {
					yym607 := z.EncBinary()
					_ = yym607
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq599[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym608 := z.EncBinary()
					_ = yym608
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr599 || yy2arr599 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym609 := z.DecBinary()
	_ = yym609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct610 := r.ContainerType()
		if yyct610 == codecSelferValueTypeMap1234 {
			yyl610 := r.ReadMapStart()
			if yyl610 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl610, d)
			}
		} else if yyct610 == codecSelferValueTypeArray1234 {
			yyl610 := r.ReadArrayStart()
			if yyl610 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl610, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys611Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys611Slc
	var yyhl611 bool = l >= 0
	for yyj611 := 0; ; yyj611++ {
		if yyhl611 {
			if yyj611 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys611Slc = r.DecodeBytes(yys611Slc, true, true)
		yys611 := string(yys611Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys611 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys611)
		} // end switch yys611
	} // end for yyj611
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj615 int
	var yyb615 bool
	var yyhl615 bool = l >= 0
	yyj615++
	if yyhl615 {
		yyb615 = yyj615 > l
	} else {
		yyb615 = r.CheckBreak()
	}
	if yyb615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj615++
	if yyhl615 {
		yyb615 = yyj615 > l
	} else {
		yyb615 = r.CheckBreak()
	}
	if yyb615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj615++
	if yyhl615 {
		yyb615 = yyj615 > l
	} else {
		yyb615 = r.CheckBreak()
	}
	if yyb615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj615++
		if yyhl615 {
			yyb615 = yyj615 > l
		} else {
			yyb615 = r.CheckBreak()
		}
		if yyb615 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj615-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym619 := z.EncBinary()
		_ = yym619
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep620 := !z.EncBinary()
			yy2arr620 := z.EncBasicHandle().StructToArray
			var yyq620 [5]bool
			_, _, _ = yysep620, yyq620, yy2arr620
			const yyr620 bool = false
			yyq620[1] = x.User != ""
			yyq620[2] = x.SecretFile != ""
			yyq620[3] = x.SecretRef != nil
			yyq620[4] = x.ReadOnly != false
			var yynn620 int
			if yyr620 || yy2arr620 {
				r.EncodeArrayStart(5)
			} else {
				yynn620 = 1
				for _, b := range yyq620 {
					if b {
						yynn620++
					}
				}
				r.EncodeMapStart(yynn620)
				yynn620 = 0
			}
			if yyr620 || yy2arr620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr620 || yy2arr620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq620[1] {
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq620[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym626 := z.EncBinary()
					_ = yym626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr620 || yy2arr620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq620[2] {
					yym628 := z.EncBinary()
					_ = yym628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq620[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr620 || yy2arr620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq620[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq620[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr620 || yy2arr620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq620[4] {
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq620[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr620 || yy2arr620 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym634 := z.DecBinary()
	_ = yym634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct635 := r.ContainerType()
		if yyct635 == codecSelferValueTypeMap1234 {
			yyl635 := r.ReadMapStart()
			if yyl635 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl635, d)
			}
		} else if yyct635 == codecSelferValueTypeArray1234 {
			yyl635 := r.ReadArrayStart()
			if yyl635 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys636Slc
	var yyhl636 bool = l >= 0
	for yyj636 := 0; ; yyj636++ {
		if yyhl636 {
			if yyj636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys636Slc = r.DecodeBytes(yys636Slc, true, true)
		yys636 := string(yys636Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys636 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv637 := &x.Monitors
				yym638 := z.DecBinary()
				_ = yym638
				if false {
				} else {
					z.F.DecSliceStringX(yyv637, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys636)
		} // end switch yys636
	} // end for yyj636
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj643 int
	var yyb643 bool
	var yyhl643 bool = l >= 0
	yyj643++
	if yyhl643 {
		yyb643 = yyj643 > l
	} else {
		yyb643 = r.CheckBreak()
	}
	if yyb643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv644 := &x.Monitors
		yym645 := z.DecBinary()
		_ = yym645
		if false {
		} else {
			z.F.DecSliceStringX(yyv644, false, d)
		}
	}
	yyj643++
	if yyhl643 {
		yyb643 = yyj643 > l
	} else {
		yyb643 = r.CheckBreak()
	}
	if yyb643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj643++
	if yyhl643 {
		yyb643 = yyj643 > l
	} else {
		yyb643 = r.CheckBreak()
	}
	if yyb643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj643++
	if yyhl643 {
		yyb643 = yyj643 > l
	} else {
		yyb643 = r.CheckBreak()
	}
	if yyb643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj643++
	if yyhl643 {
		yyb643 = yyj643 > l
	} else {
		yyb643 = r.CheckBreak()
	}
	if yyb643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj643++
		if yyhl643 {
			yyb643 = yyj643 > l
		} else {
			yyb643 = r.CheckBreak()
		}
		if yyb643 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj643-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym650 := z.EncBinary()
		_ = yym650
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep651 := !z.EncBinary()
			yy2arr651 := z.EncBasicHandle().StructToArray
			var yyq651 [1]bool
			_, _, _ = yysep651, yyq651, yy2arr651
			const yyr651 bool = false
			var yynn651 int
			if yyr651 || yy2arr651 {
				r.EncodeArrayStart(1)
			} else {
				yynn651 = 1
				for _, b := range yyq651 {
					if b {
						yynn651++
					}
				}
				r.EncodeMapStart(yynn651)
				yynn651 = 0
			}
			if yyr651 || yy2arr651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym653 := z.EncBinary()
				_ = yym653
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym654 := z.EncBinary()
				_ = yym654
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr651 || yy2arr651 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym655 := z.DecBinary()
	_ = yym655
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct656 := r.ContainerType()
		if yyct656 == codecSelferValueTypeMap1234 {
			yyl656 := r.ReadMapStart()
			if yyl656 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl656, d)
			}
		} else if yyct656 == codecSelferValueTypeArray1234 {
			yyl656 := r.ReadArrayStart()
			if yyl656 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl656, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys657Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys657Slc
	var yyhl657 bool = l >= 0
	for yyj657 := 0; ; yyj657++ {
		if yyhl657 {
			if yyj657 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys657Slc = r.DecodeBytes(yys657Slc, true, true)
		yys657 := string(yys657Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys657 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys657)
		} // end switch yys657
	} // end for yyj657
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj659 int
	var yyb659 bool
	var yyhl659 bool = l >= 0
	yyj659++
	if yyhl659 {
		yyb659 = yyj659 > l
	} else {
		yyb659 = r.CheckBreak()
	}
	if yyb659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj659++
		if yyhl659 {
			yyb659 = yyj659 > l
		} else {
			yyb659 = r.CheckBreak()
		}
		if yyb659 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj659-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym661 := z.EncBinary()
	_ = yym661
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym662 := z.DecBinary()
	_ = yym662
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym663 := z.EncBinary()
	_ = yym663
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym664 := z.DecBinary()
	_ = yym664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym665 := z.EncBinary()
		_ = yym665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep666 := !z.EncBinary()
			yy2arr666 := z.EncBasicHandle().StructToArray
			var yyq666 [4]bool
			_, _, _ = yysep666, yyq666, yy2arr666
			const yyr666 bool = false
			yyq666[2] = x.Partition != 0
			yyq666[3] = x.ReadOnly != false
			var yynn666 int
			if yyr666 || yy2arr666 {
				r.EncodeArrayStart(4)
			} else {
				yynn666 = 2
				for _, b := range yyq666 {
					if b {
						yynn666++
					}
				}
				r.EncodeMapStart(yynn666)
				yynn666 = 0
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym668 := z.EncBinary()
				_ = yym668
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym669 := z.EncBinary()
				_ = yym669
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym671 := z.EncBinary()
				_ = yym671
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym672 := z.EncBinary()
				_ = yym672
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[2] {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq666[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[3] {
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq666[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym679 := z.DecBinary()
	_ = yym679
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct680 := r.ContainerType()
		if yyct680 == codecSelferValueTypeMap1234 {
			yyl680 := r.ReadMapStart()
			if yyl680 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl680, d)
			}
		} else if yyct680 == codecSelferValueTypeArray1234 {
			yyl680 := r.ReadArrayStart()
			if yyl680 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl680, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys681Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys681Slc
	var yyhl681 bool = l >= 0
	for yyj681 := 0; ; yyj681++ {
		if yyhl681 {
			if yyj681 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys681Slc = r.DecodeBytes(yys681Slc, true, true)
		yys681 := string(yys681Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys681 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys681)
		} // end switch yys681
	} // end for yyj681
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj686 int
	var yyb686 bool
	var yyhl686 bool = l >= 0
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj686++
		if yyhl686 {
			yyb686 = yyj686 > l
		} else {
			yyb686 = r.CheckBreak()
		}
		if yyb686 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj686-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym691 := z.EncBinary()
		_ = yym691
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep692 := !z.EncBinary()
			yy2arr692 := z.EncBasicHandle().StructToArray
			var yyq692 [5]bool
			_, _, _ = yysep692, yyq692, yy2arr692
			const yyr692 bool = false
			yyq692[1] = x.FSType != ""
			yyq692[2] = x.SecretRef != nil
			yyq692[3] = x.ReadOnly != false
			yyq692[4] = len(x.Options) != 0
			var yynn692 int
			if yyr692 || yy2arr692 {
				r.EncodeArrayStart(5)
			} else {
				yynn692 = 1
				for _, b := range yyq692 {
					if b {
						yynn692++
					}
				}
				r.EncodeMapStart(yynn692)
				yynn692 = 0
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym694 := z.EncBinary()
				_ = yym694
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym695 := z.EncBinary()
				_ = yym695
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq692[1] {
					yym697 := z.EncBinary()
					_ = yym697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq692[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym698 := z.EncBinary()
					_ = yym698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq692[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq692[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq692[3] {
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq692[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym702 := z.EncBinary()
					_ = yym702
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq692[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym704 := z.EncBinary()
						_ = yym704
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq692[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym705 := z.EncBinary()
						_ = yym705
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym706 := z.DecBinary()
	_ = yym706
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct707 := r.ContainerType()
		if yyct707 == codecSelferValueTypeMap1234 {
			yyl707 := r.ReadMapStart()
			if yyl707 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl707, d)
			}
		} else if yyct707 == codecSelferValueTypeArray1234 {
			yyl707 := r.ReadArrayStart()
			if yyl707 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl707, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys708Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys708Slc
	var yyhl708 bool = l >= 0
	for yyj708 := 0; ; yyj708++ {
		if yyhl708 {
			if yyj708 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys708Slc = r.DecodeBytes(yys708Slc, true, true)
		yys708 := string(yys708Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys708 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv713 := &x.Options
				yym714 := z.DecBinary()
				_ = yym714
				if false {
				} else {
					z.F.DecMapStringStringX(yyv713, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys708)
		} // end switch yys708
	} // end for yyj708
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj715 int
	var yyb715 bool
	var yyhl715 bool = l >= 0
	yyj715++
	if yyhl715 {
		yyb715 = yyj715 > l
	} else {
		yyb715 = r.CheckBreak()
	}
	if yyb715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj715++
	if yyhl715 {
		yyb715 = yyj715 > l
	} else {
		yyb715 = r.CheckBreak()
	}
	if yyb715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj715++
	if yyhl715 {
		yyb715 = yyj715 > l
	} else {
		yyb715 = r.CheckBreak()
	}
	if yyb715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj715++
	if yyhl715 {
		yyb715 = yyj715 > l
	} else {
		yyb715 = r.CheckBreak()
	}
	if yyb715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj715++
	if yyhl715 {
		yyb715 = yyj715 > l
	} else {
		yyb715 = r.CheckBreak()
	}
	if yyb715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv720 := &x.Options
		yym721 := z.DecBinary()
		_ = yym721
		if false {
		} else {
			z.F.DecMapStringStringX(yyv720, false, d)
		}
	}
	for {
		yyj715++
		if yyhl715 {
			yyb715 = yyj715 > l
		} else {
			yyb715 = r.CheckBreak()
		}
		if yyb715 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj715-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym722 := z.EncBinary()
		_ = yym722
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep723 := !z.EncBinary()
			yy2arr723 := z.EncBasicHandle().StructToArray
			var yyq723 [4]bool
			_, _, _ = yysep723, yyq723, yy2arr723
			const yyr723 bool = false
			yyq723[2] = x.Partition != 0
			yyq723[3] = x.ReadOnly != false
			var yynn723 int
			if yyr723 || yy2arr723 {
				r.EncodeArrayStart(4)
			} else {
				yynn723 = 2
				for _, b := range yyq723 {
					if b {
						yynn723++
					}
				}
				r.EncodeMapStart(yynn723)
				yynn723 = 0
			}
			if yyr723 || yy2arr723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym726 := z.EncBinary()
				_ = yym726
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr723 || yy2arr723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym728 := z.EncBinary()
				_ = yym728
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym729 := z.EncBinary()
				_ = yym729
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr723 || yy2arr723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq723[2] {
					yym731 := z.EncBinary()
					_ = yym731
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq723[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym732 := z.EncBinary()
					_ = yym732
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr723 || yy2arr723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq723[3] {
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq723[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym735 := z.EncBinary()
					_ = yym735
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr723 || yy2arr723 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym736 := z.DecBinary()
	_ = yym736
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct737 := r.ContainerType()
		if yyct737 == codecSelferValueTypeMap1234 {
			yyl737 := r.ReadMapStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl737, d)
			}
		} else if yyct737 == codecSelferValueTypeArray1234 {
			yyl737 := r.ReadArrayStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl737, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys738Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys738Slc
	var yyhl738 bool = l >= 0
	for yyj738 := 0; ; yyj738++ {
		if yyhl738 {
			if yyj738 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys738Slc = r.DecodeBytes(yys738Slc, true, true)
		yys738 := string(yys738Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys738 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys738)
		} // end switch yys738
	} // end for yyj738
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj743 int
	var yyb743 bool
	var yyhl743 bool = l >= 0
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj743++
		if yyhl743 {
			yyb743 = yyj743 > l
		} else {
			yyb743 = r.CheckBreak()
		}
		if yyb743 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj743-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym748 := z.EncBinary()
		_ = yym748
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep749 := !z.EncBinary()
			yy2arr749 := z.EncBasicHandle().StructToArray
			var yyq749 [3]bool
			_, _, _ = yysep749, yyq749, yy2arr749
			const yyr749 bool = false
			yyq749[1] = x.Revision != ""
			yyq749[2] = x.Directory != ""
			var yynn749 int
			if yyr749 || yy2arr749 {
				r.EncodeArrayStart(3)
			} else {
				yynn749 = 1
				for _, b := range yyq749 {
					if b {
						yynn749++
					}
				}
				r.EncodeMapStart(yynn749)
				yynn749 = 0
			}
			if yyr749 || yy2arr749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym751 := z.EncBinary()
				_ = yym751
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym752 := z.EncBinary()
				_ = yym752
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr749 || yy2arr749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq749[1] {
					yym754 := z.EncBinary()
					_ = yym754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq749[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym755 := z.EncBinary()
					_ = yym755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr749 || yy2arr749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq749[2] {
					yym757 := z.EncBinary()
					_ = yym757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq749[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym758 := z.EncBinary()
					_ = yym758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr749 || yy2arr749 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym759 := z.DecBinary()
	_ = yym759
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct760 := r.ContainerType()
		if yyct760 == codecSelferValueTypeMap1234 {
			yyl760 := r.ReadMapStart()
			if yyl760 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl760, d)
			}
		} else if yyct760 == codecSelferValueTypeArray1234 {
			yyl760 := r.ReadArrayStart()
			if yyl760 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl760, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys761Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys761Slc
	var yyhl761 bool = l >= 0
	for yyj761 := 0; ; yyj761++ {
		if yyhl761 {
			if yyj761 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys761Slc = r.DecodeBytes(yys761Slc, true, true)
		yys761 := string(yys761Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys761 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys761)
		} // end switch yys761
	} // end for yyj761
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj765 int
	var yyb765 bool
	var yyhl765 bool = l >= 0
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj765++
		if yyhl765 {
			yyb765 = yyj765 > l
		} else {
			yyb765 = r.CheckBreak()
		}
		if yyb765 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj765-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym769 := z.EncBinary()
		_ = yym769
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep770 := !z.EncBinary()
			yy2arr770 := z.EncBasicHandle().StructToArray
			var yyq770 [1]bool
			_, _, _ = yysep770, yyq770, yy2arr770
			const yyr770 bool = false
			var yynn770 int
			if yyr770 || yy2arr770 {
				r.EncodeArrayStart(1)
			} else {
				yynn770 = 1
				for _, b := range yyq770 {
					if b {
						yynn770++
					}
				}
				r.EncodeMapStart(yynn770)
				yynn770 = 0
			}
			if yyr770 || yy2arr770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym772 := z.EncBinary()
				_ = yym772
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym773 := z.EncBinary()
				_ = yym773
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr770 || yy2arr770 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym774 := z.DecBinary()
	_ = yym774
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct775 := r.ContainerType()
		if yyct775 == codecSelferValueTypeMap1234 {
			yyl775 := r.ReadMapStart()
			if yyl775 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl775, d)
			}
		} else if yyct775 == codecSelferValueTypeArray1234 {
			yyl775 := r.ReadArrayStart()
			if yyl775 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl775, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys776Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys776Slc
	var yyhl776 bool = l >= 0
	for yyj776 := 0; ; yyj776++ {
		if yyhl776 {
			if yyj776 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys776Slc = r.DecodeBytes(yys776Slc, true, true)
		yys776 := string(yys776Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys776 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys776)
		} // end switch yys776
	} // end for yyj776
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj778 int
	var yyb778 bool
	var yyhl778 bool = l >= 0
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj778++
		if yyhl778 {
			yyb778 = yyj778 > l
		} else {
			yyb778 = r.CheckBreak()
		}
		if yyb778 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj778-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym780 := z.EncBinary()
		_ = yym780
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep781 := !z.EncBinary()
			yy2arr781 := z.EncBasicHandle().StructToArray
			var yyq781 [3]bool
			_, _, _ = yysep781, yyq781, yy2arr781
			const yyr781 bool = false
			yyq781[2] = x.ReadOnly != false
			var yynn781 int
			if yyr781 || yy2arr781 {
				r.EncodeArrayStart(3)
			} else {
				yynn781 = 2
				for _, b := range yyq781 {
					if b {
						yynn781++
					}
				}
				r.EncodeMapStart(yynn781)
				yynn781 = 0
			}
			if yyr781 || yy2arr781 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym783 := z.EncBinary()
				_ = yym783
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym784 := z.EncBinary()
				_ = yym784
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr781 || yy2arr781 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym786 := z.EncBinary()
				_ = yym786
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym787 := z.EncBinary()
				_ = yym787
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr781 || yy2arr781 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq781[2] {
					yym789 := z.EncBinary()
					_ = yym789
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq781[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr781 || yy2arr781 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym791 := z.DecBinary()
	_ = yym791
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct792 := r.ContainerType()
		if yyct792 == codecSelferValueTypeMap1234 {
			yyl792 := r.ReadMapStart()
			if yyl792 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl792, d)
			}
		} else if yyct792 == codecSelferValueTypeArray1234 {
			yyl792 := r.ReadArrayStart()
			if yyl792 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl792, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys793Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys793Slc
	var yyhl793 bool = l >= 0
	for yyj793 := 0; ; yyj793++ {
		if yyhl793 {
			if yyj793 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys793Slc = r.DecodeBytes(yys793Slc, true, true)
		yys793 := string(yys793Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys793 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys793)
		} // end switch yys793
	} // end for yyj793
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj797 int
	var yyb797 bool
	var yyhl797 bool = l >= 0
	yyj797++
	if yyhl797 {
		yyb797 = yyj797 > l
	} else {
		yyb797 = r.CheckBreak()
	}
	if yyb797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj797++
	if yyhl797 {
		yyb797 = yyj797 > l
	} else {
		yyb797 = r.CheckBreak()
	}
	if yyb797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj797++
	if yyhl797 {
		yyb797 = yyj797 > l
	} else {
		yyb797 = r.CheckBreak()
	}
	if yyb797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj797++
		if yyhl797 {
			yyb797 = yyj797 > l
		} else {
			yyb797 = r.CheckBreak()
		}
		if yyb797 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj797-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym801 := z.EncBinary()
		_ = yym801
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep802 := !z.EncBinary()
			yy2arr802 := z.EncBasicHandle().StructToArray
			var yyq802 [6]bool
			_, _, _ = yysep802, yyq802, yy2arr802
			const yyr802 bool = false
			yyq802[3] = x.ISCSIInterface != ""
			yyq802[5] = x.ReadOnly != false
			var yynn802 int
			if yyr802 || yy2arr802 {
				r.EncodeArrayStart(6)
			} else {
				yynn802 = 4
				for _, b := range yyq802 {
					if b {
						yynn802++
					}
				}
				r.EncodeMapStart(yynn802)
				yynn802 = 0
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym804 := z.EncBinary()
				_ = yym804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym805 := z.EncBinary()
				_ = yym805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym807 := z.EncBinary()
				_ = yym807
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym808 := z.EncBinary()
				_ = yym808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym810 := z.EncBinary()
				_ = yym810
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym811 := z.EncBinary()
				_ = yym811
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq802[3] {
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq802[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym814 := z.EncBinary()
					_ = yym814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym816 := z.EncBinary()
				_ = yym816
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym817 := z.EncBinary()
				_ = yym817
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq802[5] {
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq802[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym821 := z.DecBinary()
	_ = yym821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct822 := r.ContainerType()
		if yyct822 == codecSelferValueTypeMap1234 {
			yyl822 := r.ReadMapStart()
			if yyl822 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl822, d)
			}
		} else if yyct822 == codecSelferValueTypeArray1234 {
			yyl822 := r.ReadArrayStart()
			if yyl822 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys823Slc
	var yyhl823 bool = l >= 0
	for yyj823 := 0; ; yyj823++ {
		if yyhl823 {
			if yyj823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys823Slc = r.DecodeBytes(yys823Slc, true, true)
		yys823 := string(yys823Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys823 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys823)
		} // end switch yys823
	} // end for yyj823
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj830 int
	var yyb830 bool
	var yyhl830 bool = l >= 0
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj830++
		if yyhl830 {
			yyb830 = yyj830 > l
		} else {
			yyb830 = r.CheckBreak()
		}
		if yyb830 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj830-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym837 := z.EncBinary()
		_ = yym837
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep838 := !z.EncBinary()
			yy2arr838 := z.EncBasicHandle().StructToArray
			var yyq838 [4]bool
			_, _, _ = yysep838, yyq838, yy2arr838
			const yyr838 bool = false
			yyq838[3] = x.ReadOnly != false
			var yynn838 int
			if yyr838 || yy2arr838 {
				r.EncodeArrayStart(4)
			} else {
				yynn838 = 3
				for _, b := range yyq838 {
					if b {
						yynn838++
					}
				}
				r.EncodeMapStart(yynn838)
				yynn838 = 0
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy843 := *x.Lun
					yym844 := z.EncBinary()
					_ = yym844
					if false {
					} else {
						r.EncodeInt(int64(yy843))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy845 := *x.Lun
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeInt(int64(yy845))
					}
				}
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym848 := z.EncBinary()
				_ = yym848
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq838[3] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq838[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym853 := z.DecBinary()
	_ = yym853
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct854 := r.ContainerType()
		if yyct854 == codecSelferValueTypeMap1234 {
			yyl854 := r.ReadMapStart()
			if yyl854 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl854, d)
			}
		} else if yyct854 == codecSelferValueTypeArray1234 {
			yyl854 := r.ReadArrayStart()
			if yyl854 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl854, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys855Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys855Slc
	var yyhl855 bool = l >= 0
	for yyj855 := 0; ; yyj855++ {
		if yyhl855 {
			if yyj855 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys855Slc = r.DecodeBytes(yys855Slc, true, true)
		yys855 := string(yys855Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys855 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv856 := &x.TargetWWNs
				yym857 := z.DecBinary()
				_ = yym857
				if false {
				} else {
					z.F.DecSliceStringX(yyv856, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym859 := z.DecBinary()
				_ = yym859
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys855)
		} // end switch yys855
	} // end for yyj855
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj862 int
	var yyb862 bool
	var yyhl862 bool = l >= 0
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv863 := &x.TargetWWNs
		yym864 := z.DecBinary()
		_ = yym864
		if false {
		} else {
			z.F.DecSliceStringX(yyv863, false, d)
		}
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym866 := z.DecBinary()
		_ = yym866
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj862++
		if yyhl862 {
			yyb862 = yyj862 > l
		} else {
			yyb862 = r.CheckBreak()
		}
		if yyb862 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj862-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym869 := z.EncBinary()
		_ = yym869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep870 := !z.EncBinary()
			yy2arr870 := z.EncBasicHandle().StructToArray
			var yyq870 [5]bool
			_, _, _ = yysep870, yyq870, yy2arr870
			const yyr870 bool = false
			yyq870[0] = x.Name != ""
			yyq870[1] = x.HostPort != 0
			yyq870[3] = x.Protocol != ""
			yyq870[4] = x.HostIP != ""
			var yynn870 int
			if yyr870 || yy2arr870 {
				r.EncodeArrayStart(5)
			} else {
				yynn870 = 1
				for _, b := range yyq870 {
					if b {
						yynn870++
					}
				}
				r.EncodeMapStart(yynn870)
				yynn870 = 0
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[0] {
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq870[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[1] {
					yym875 := z.EncBinary()
					_ = yym875
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq870[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym876 := z.EncBinary()
					_ = yym876
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym878 := z.EncBinary()
				_ = yym878
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym879 := z.EncBinary()
				_ = yym879
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq870[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[4] {
					yym882 := z.EncBinary()
					_ = yym882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq870[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym883 := z.EncBinary()
					_ = yym883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym884 := z.DecBinary()
	_ = yym884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct885 := r.ContainerType()
		if yyct885 == codecSelferValueTypeMap1234 {
			yyl885 := r.ReadMapStart()
			if yyl885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl885, d)
			}
		} else if yyct885 == codecSelferValueTypeArray1234 {
			yyl885 := r.ReadArrayStart()
			if yyl885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys886Slc
	var yyhl886 bool = l >= 0
	for yyj886 := 0; ; yyj886++ {
		if yyhl886 {
			if yyj886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys886Slc = r.DecodeBytes(yys886Slc, true, true)
		yys886 := string(yys886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys886 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys886)
		} // end switch yys886
	} // end for yyj886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj892 int
	var yyb892 bool
	var yyhl892 bool = l >= 0
	yyj892++
	if yyhl892 {
		yyb892 = yyj892 > l
	} else {
		yyb892 = r.CheckBreak()
	}
	if yyb892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj892++
	if yyhl892 {
		yyb892 = yyj892 > l
	} else {
		yyb892 = r.CheckBreak()
	}
	if yyb892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj892++
	if yyhl892 {
		yyb892 = yyj892 > l
	} else {
		yyb892 = r.CheckBreak()
	}
	if yyb892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj892++
	if yyhl892 {
		yyb892 = yyj892 > l
	} else {
		yyb892 = r.CheckBreak()
	}
	if yyb892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj892++
	if yyhl892 {
		yyb892 = yyj892 > l
	} else {
		yyb892 = r.CheckBreak()
	}
	if yyb892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj892++
		if yyhl892 {
			yyb892 = yyj892 > l
		} else {
			yyb892 = r.CheckBreak()
		}
		if yyb892 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj892-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym898 := z.EncBinary()
		_ = yym898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep899 := !z.EncBinary()
			yy2arr899 := z.EncBasicHandle().StructToArray
			var yyq899 [3]bool
			_, _, _ = yysep899, yyq899, yy2arr899
			const yyr899 bool = false
			yyq899[1] = x.ReadOnly != false
			var yynn899 int
			if yyr899 || yy2arr899 {
				r.EncodeArrayStart(3)
			} else {
				yynn899 = 2
				for _, b := range yyq899 {
					if b {
						yynn899++
					}
				}
				r.EncodeMapStart(yynn899)
				yynn899 = 0
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym901 := z.EncBinary()
				_ = yym901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym902 := z.EncBinary()
				_ = yym902
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq899[1] {
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq899[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym907 := z.EncBinary()
				_ = yym907
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym908 := z.EncBinary()
				_ = yym908
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym909 := z.DecBinary()
	_ = yym909
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct910 := r.ContainerType()
		if yyct910 == codecSelferValueTypeMap1234 {
			yyl910 := r.ReadMapStart()
			if yyl910 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl910, d)
			}
		} else if yyct910 == codecSelferValueTypeArray1234 {
			yyl910 := r.ReadArrayStart()
			if yyl910 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl910, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys911Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys911Slc
	var yyhl911 bool = l >= 0
	for yyj911 := 0; ; yyj911++ {
		if yyhl911 {
			if yyj911 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys911Slc = r.DecodeBytes(yys911Slc, true, true)
		yys911 := string(yys911Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys911 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys911)
		} // end switch yys911
	} // end for yyj911
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj915 int
	var yyb915 bool
	var yyhl915 bool = l >= 0
	yyj915++
	if yyhl915 {
		yyb915 = yyj915 > l
	} else {
		yyb915 = r.CheckBreak()
	}
	if yyb915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj915++
	if yyhl915 {
		yyb915 = yyj915 > l
	} else {
		yyb915 = r.CheckBreak()
	}
	if yyb915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj915++
	if yyhl915 {
		yyb915 = yyj915 > l
	} else {
		yyb915 = r.CheckBreak()
	}
	if yyb915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj915++
		if yyhl915 {
			yyb915 = yyj915 > l
		} else {
			yyb915 = r.CheckBreak()
		}
		if yyb915 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj915-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym919 := z.EncBinary()
		_ = yym919
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep920 := !z.EncBinary()
			yy2arr920 := z.EncBasicHandle().StructToArray
			var yyq920 [3]bool
			_, _, _ = yysep920, yyq920, yy2arr920
			const yyr920 bool = false
			yyq920[1] = x.Value != ""
			yyq920[2] = x.ValueFrom != nil
			var yynn920 int
			if yyr920 || yy2arr920 {
				r.EncodeArrayStart(3)
			} else {
				yynn920 = 1
				for _, b := range yyq920 {
					if b {
						yynn920++
					}
				}
				r.EncodeMapStart(yynn920)
				yynn920 = 0
			}
			if yyr920 || yy2arr920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym922 := z.EncBinary()
				_ = yym922
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym923 := z.EncBinary()
				_ = yym923
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr920 || yy2arr920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq920[1] {
					yym925 := z.EncBinary()
					_ = yym925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq920[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym926 := z.EncBinary()
					_ = yym926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr920 || yy2arr920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq920[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq920[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr920 || yy2arr920 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym928 := z.DecBinary()
	_ = yym928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct929 := r.ContainerType()
		if yyct929 == codecSelferValueTypeMap1234 {
			yyl929 := r.ReadMapStart()
			if yyl929 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl929, d)
			}
		} else if yyct929 == codecSelferValueTypeArray1234 {
			yyl929 := r.ReadArrayStart()
			if yyl929 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl929, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys930Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys930Slc
	var yyhl930 bool = l >= 0
	for yyj930 := 0; ; yyj930++ {
		if yyhl930 {
			if yyj930 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys930Slc = r.DecodeBytes(yys930Slc, true, true)
		yys930 := string(yys930Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys930 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys930)
		} // end switch yys930
	} // end for yyj930
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj934 int
	var yyb934 bool
	var yyhl934 bool = l >= 0
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj934++
		if yyhl934 {
			yyb934 = yyj934 > l
		} else {
			yyb934 = r.CheckBreak()
		}
		if yyb934 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj934-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym938 := z.EncBinary()
		_ = yym938
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep939 := !z.EncBinary()
			yy2arr939 := z.EncBasicHandle().StructToArray
			var yyq939 [1]bool
			_, _, _ = yysep939, yyq939, yy2arr939
			const yyr939 bool = false
			var yynn939 int
			if yyr939 || yy2arr939 {
				r.EncodeArrayStart(1)
			} else {
				yynn939 = 1
				for _, b := range yyq939 {
					if b {
						yynn939++
					}
				}
				r.EncodeMapStart(yynn939)
				yynn939 = 0
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym941 := z.DecBinary()
	_ = yym941
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct942 := r.ContainerType()
		if yyct942 == codecSelferValueTypeMap1234 {
			yyl942 := r.ReadMapStart()
			if yyl942 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl942, d)
			}
		} else if yyct942 == codecSelferValueTypeArray1234 {
			yyl942 := r.ReadArrayStart()
			if yyl942 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl942, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys943Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys943Slc
	var yyhl943 bool = l >= 0
	for yyj943 := 0; ; yyj943++ {
		if yyhl943 {
			if yyj943 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys943Slc = r.DecodeBytes(yys943Slc, true, true)
		yys943 := string(yys943Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys943 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys943)
		} // end switch yys943
	} // end for yyj943
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj945 int
	var yyb945 bool
	var yyhl945 bool = l >= 0
	yyj945++
	if yyhl945 {
		yyb945 = yyj945 > l
	} else {
		yyb945 = r.CheckBreak()
	}
	if yyb945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj945++
		if yyhl945 {
			yyb945 = yyj945 > l
		} else {
			yyb945 = r.CheckBreak()
		}
		if yyb945 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj945-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym947 := z.EncBinary()
		_ = yym947
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep948 := !z.EncBinary()
			yy2arr948 := z.EncBasicHandle().StructToArray
			var yyq948 [2]bool
			_, _, _ = yysep948, yyq948, yy2arr948
			const yyr948 bool = false
			yyq948[0] = x.APIVersion != ""
			var yynn948 int
			if yyr948 || yy2arr948 {
				r.EncodeArrayStart(2)
			} else {
				yynn948 = 1
				for _, b := range yyq948 {
					if b {
						yynn948++
					}
				}
				r.EncodeMapStart(yynn948)
				yynn948 = 0
			}
			if yyr948 || yy2arr948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq948[0] {
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq948[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr948 || yy2arr948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym953 := z.EncBinary()
				_ = yym953
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym954 := z.EncBinary()
				_ = yym954
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr948 || yy2arr948 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym955 := z.DecBinary()
	_ = yym955
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct956 := r.ContainerType()
		if yyct956 == codecSelferValueTypeMap1234 {
			yyl956 := r.ReadMapStart()
			if yyl956 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl956, d)
			}
		} else if yyct956 == codecSelferValueTypeArray1234 {
			yyl956 := r.ReadArrayStart()
			if yyl956 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl956, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys957Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys957Slc
	var yyhl957 bool = l >= 0
	for yyj957 := 0; ; yyj957++ {
		if yyhl957 {
			if yyj957 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys957Slc = r.DecodeBytes(yys957Slc, true, true)
		yys957 := string(yys957Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys957 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys957)
		} // end switch yys957
	} // end for yyj957
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj960 int
	var yyb960 bool
	var yyhl960 bool = l >= 0
	yyj960++
	if yyhl960 {
		yyb960 = yyj960 > l
	} else {
		yyb960 = r.CheckBreak()
	}
	if yyb960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj960++
	if yyhl960 {
		yyb960 = yyj960 > l
	} else {
		yyb960 = r.CheckBreak()
	}
	if yyb960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj960++
		if yyhl960 {
			yyb960 = yyj960 > l
		} else {
			yyb960 = r.CheckBreak()
		}
		if yyb960 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj960-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym963 := z.EncBinary()
		_ = yym963
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep964 := !z.EncBinary()
			yy2arr964 := z.EncBasicHandle().StructToArray
			var yyq964 [4]bool
			_, _, _ = yysep964, yyq964, yy2arr964
			const yyr964 bool = false
			yyq964[0] = x.Path != ""
			yyq964[2] = x.Host != ""
			yyq964[3] = x.Scheme != ""
			var yynn964 int
			if yyr964 || yy2arr964 {
				r.EncodeArrayStart(4)
			} else {
				yynn964 = 1
				for _, b := range yyq964 {
					if b {
						yynn964++
					}
				}
				r.EncodeMapStart(yynn964)
				yynn964 = 0
			}
			if yyr964 || yy2arr964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq964[0] {
					yym966 := z.EncBinary()
					_ = yym966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq964[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym967 := z.EncBinary()
					_ = yym967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr964 || yy2arr964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy969 := &x.Port
				yym970 := z.EncBinary()
				_ = yym970
				if false {
				} else if z.HasExtensions() && z.EncExt(yy969) {
				} else if !yym970 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy969)
				} else {
					z.EncFallback(yy969)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy971 := &x.Port
				yym972 := z.EncBinary()
				_ = yym972
				if false {
				} else if z.HasExtensions() && z.EncExt(yy971) {
				} else if !yym972 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy971)
				} else {
					z.EncFallback(yy971)
				}
			}
			if yyr964 || yy2arr964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq964[2] {
					yym974 := z.EncBinary()
					_ = yym974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq964[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr964 || yy2arr964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq964[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq964[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr964 || yy2arr964 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym977 := z.DecBinary()
	_ = yym977
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct978 := r.ContainerType()
		if yyct978 == codecSelferValueTypeMap1234 {
			yyl978 := r.ReadMapStart()
			if yyl978 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl978, d)
			}
		} else if yyct978 == codecSelferValueTypeArray1234 {
			yyl978 := r.ReadArrayStart()
			if yyl978 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl978, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys979Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys979Slc
	var yyhl979 bool = l >= 0
	for yyj979 := 0; ; yyj979++ {
		if yyhl979 {
			if yyj979 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys979Slc = r.DecodeBytes(yys979Slc, true, true)
		yys979 := string(yys979Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys979 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv981 := &x.Port
				yym982 := z.DecBinary()
				_ = yym982
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv981) {
				} else if !yym982 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv981)
				} else {
					z.DecFallback(yyv981, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys979)
		} // end switch yys979
	} // end for yyj979
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj985 int
	var yyb985 bool
	var yyhl985 bool = l >= 0
	yyj985++
	if yyhl985 {
		yyb985 = yyj985 > l
	} else {
		yyb985 = r.CheckBreak()
	}
	if yyb985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj985++
	if yyhl985 {
		yyb985 = yyj985 > l
	} else {
		yyb985 = r.CheckBreak()
	}
	if yyb985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv987 := &x.Port
		yym988 := z.DecBinary()
		_ = yym988
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv987) {
		} else if !yym988 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv987)
		} else {
			z.DecFallback(yyv987, false)
		}
	}
	yyj985++
	if yyhl985 {
		yyb985 = yyj985 > l
	} else {
		yyb985 = r.CheckBreak()
	}
	if yyb985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj985++
	if yyhl985 {
		yyb985 = yyj985 > l
	} else {
		yyb985 = r.CheckBreak()
	}
	if yyb985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj985++
		if yyhl985 {
			yyb985 = yyj985 > l
		} else {
			yyb985 = r.CheckBreak()
		}
		if yyb985 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj985-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym991 := z.EncBinary()
	_ = yym991
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym992 := z.DecBinary()
	_ = yym992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym993 := z.EncBinary()
		_ = yym993
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep994 := !z.EncBinary()
			yy2arr994 := z.EncBasicHandle().StructToArray
			var yyq994 [1]bool
			_, _, _ = yysep994, yyq994, yy2arr994
			const yyr994 bool = false
			var yynn994 int
			if yyr994 || yy2arr994 {
				r.EncodeArrayStart(1)
			} else {
				yynn994 = 1
				for _, b := range yyq994 {
					if b {
						yynn994++
					}
				}
				r.EncodeMapStart(yynn994)
				yynn994 = 0
			}
			if yyr994 || yy2arr994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy996 := &x.Port
				yym997 := z.EncBinary()
				_ = yym997
				if false {
				} else if z.HasExtensions() && z.EncExt(yy996) {
				} else if !yym997 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy996)
				} else {
					z.EncFallback(yy996)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy998 := &x.Port
				yym999 := z.EncBinary()
				_ = yym999
				if false {
				} else if z.HasExtensions() && z.EncExt(yy998) {
				} else if !yym999 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy998)
				} else {
					z.EncFallback(yy998)
				}
			}
			if yyr994 || yy2arr994 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1000 := z.DecBinary()
	_ = yym1000
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1001 := r.ContainerType()
		if yyct1001 == codecSelferValueTypeMap1234 {
			yyl1001 := r.ReadMapStart()
			if yyl1001 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1001, d)
			}
		} else if yyct1001 == codecSelferValueTypeArray1234 {
			yyl1001 := r.ReadArrayStart()
			if yyl1001 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1001, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1002Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1002Slc
	var yyhl1002 bool = l >= 0
	for yyj1002 := 0; ; yyj1002++ {
		if yyhl1002 {
			if yyj1002 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1002Slc = r.DecodeBytes(yys1002Slc, true, true)
		yys1002 := string(yys1002Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1002 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1003 := &x.Port
				yym1004 := z.DecBinary()
				_ = yym1004
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1003) {
				} else if !yym1004 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1003)
				} else {
					z.DecFallback(yyv1003, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1002)
		} // end switch yys1002
	} // end for yyj1002
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1005 int
	var yyb1005 bool
	var yyhl1005 bool = l >= 0
	yyj1005++
	if yyhl1005 {
		yyb1005 = yyj1005 > l
	} else {
		yyb1005 = r.CheckBreak()
	}
	if yyb1005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1006 := &x.Port
		yym1007 := z.DecBinary()
		_ = yym1007
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1006) {
		} else if !yym1007 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1006)
		} else {
			z.DecFallback(yyv1006, false)
		}
	}
	for {
		yyj1005++
		if yyhl1005 {
			yyb1005 = yyj1005 > l
		} else {
			yyb1005 = r.CheckBreak()
		}
		if yyb1005 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1005-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1008 := z.EncBinary()
		_ = yym1008
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1009 := !z.EncBinary()
			yy2arr1009 := z.EncBasicHandle().StructToArray
			var yyq1009 [1]bool
			_, _, _ = yysep1009, yyq1009, yy2arr1009
			const yyr1009 bool = false
			yyq1009[0] = len(x.Command) != 0
			var yynn1009 int
			if yyr1009 || yy2arr1009 {
				r.EncodeArrayStart(1)
			} else {
				yynn1009 = 0
				for _, b := range yyq1009 {
					if b {
						yynn1009++
					}
				}
				r.EncodeMapStart(yynn1009)
				yynn1009 = 0
			}
			if yyr1009 || yy2arr1009 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1009[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1011 := z.EncBinary()
						_ = yym1011
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1009[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1012 := z.EncBinary()
						_ = yym1012
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1009 || yy2arr1009 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1013 := z.DecBinary()
	_ = yym1013
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1014 := r.ContainerType()
		if yyct1014 == codecSelferValueTypeMap1234 {
			yyl1014 := r.ReadMapStart()
			if yyl1014 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1014, d)
			}
		} else if yyct1014 == codecSelferValueTypeArray1234 {
			yyl1014 := r.ReadArrayStart()
			if yyl1014 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1014, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1015Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1015Slc
	var yyhl1015 bool = l >= 0
	for yyj1015 := 0; ; yyj1015++ {
		if yyhl1015 {
			if yyj1015 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1015Slc = r.DecodeBytes(yys1015Slc, true, true)
		yys1015 := string(yys1015Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1015 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1016 := &x.Command
				yym1017 := z.DecBinary()
				_ = yym1017
				if false {
				} else {
					z.F.DecSliceStringX(yyv1016, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1015)
		} // end switch yys1015
	} // end for yyj1015
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1018 int
	var yyb1018 bool
	var yyhl1018 bool = l >= 0
	yyj1018++
	if yyhl1018 {
		yyb1018 = yyj1018 > l
	} else {
		yyb1018 = r.CheckBreak()
	}
	if yyb1018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1019 := &x.Command
		yym1020 := z.DecBinary()
		_ = yym1020
		if false {
		} else {
			z.F.DecSliceStringX(yyv1019, false, d)
		}
	}
	for {
		yyj1018++
		if yyhl1018 {
			yyb1018 = yyj1018 > l
		} else {
			yyb1018 = r.CheckBreak()
		}
		if yyb1018 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1018-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1021 := z.EncBinary()
		_ = yym1021
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1022 := !z.EncBinary()
			yy2arr1022 := z.EncBasicHandle().StructToArray
			var yyq1022 [8]bool
			_, _, _ = yysep1022, yyq1022, yy2arr1022
			const yyr1022 bool = false
			yyq1022[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1022[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1022[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1022[3] = x.InitialDelaySeconds != 0
			yyq1022[4] = x.TimeoutSeconds != 0
			yyq1022[5] = x.PeriodSeconds != 0
			yyq1022[6] = x.SuccessThreshold != 0
			yyq1022[7] = x.FailureThreshold != 0
			var yynn1022 int
			if yyr1022 || yy2arr1022 {
				r.EncodeArrayStart(8)
			} else {
				yynn1022 = 0
				for _, b := range yyq1022 {
					if b {
						yynn1022++
					}
				}
				r.EncodeMapStart(yynn1022)
				yynn1022 = 0
			}
			var yyn1023 bool
			if x.Handler.Exec == nil {
				yyn1023 = true
				goto LABEL1023
			}
		LABEL1023:
			if yyr1022 || yy2arr1022 {
				if yyn1023 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1022[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1022[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1023 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1024 bool
			if x.Handler.HTTPGet == nil {
				yyn1024 = true
				goto LABEL1024
			}
		LABEL1024:
			if yyr1022 || yy2arr1022 {
				if yyn1024 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1022[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1022[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1024 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1025 bool
			if x.Handler.TCPSocket == nil {
				yyn1025 = true
				goto LABEL1025
			}
		LABEL1025:
			if yyr1022 || yy2arr1022 {
				if yyn1025 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1022[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1022[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1025 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1022 || yy2arr1022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1022[3] {
					yym1027 := z.EncBinary()
					_ = yym1027
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1022[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1028 := z.EncBinary()
					_ = yym1028
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1022 || yy2arr1022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1022[4] {
					yym1030 := z.EncBinary()
					_ = yym1030
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1022[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1031 := z.EncBinary()
					_ = yym1031
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1022 || yy2arr1022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1022[5] {
					yym1033 := z.EncBinary()
					_ = yym1033
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1022[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1034 := z.EncBinary()
					_ = yym1034
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1022 || yy2arr1022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1022[6] {
					yym1036 := z.EncBinary()
					_ = yym1036
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1022[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1037 := z.EncBinary()
					_ = yym1037
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1022 || yy2arr1022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1022[7] {
					yym1039 := z.EncBinary()
					_ = yym1039
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1022[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1040 := z.EncBinary()
					_ = yym1040
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1022 || yy2arr1022 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1041 := z.DecBinary()
	_ = yym1041
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1042 := r.ContainerType()
		if yyct1042 == codecSelferValueTypeMap1234 {
			yyl1042 := r.ReadMapStart()
			if yyl1042 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1042, d)
			}
		} else if yyct1042 == codecSelferValueTypeArray1234 {
			yyl1042 := r.ReadArrayStart()
			if yyl1042 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1042, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1043Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1043Slc
	var yyhl1043 bool = l >= 0
	for yyj1043 := 0; ; yyj1043++ {
		if yyhl1043 {
			if yyj1043 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1043Slc = r.DecodeBytes(yys1043Slc, true, true)
		yys1043 := string(yys1043Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1043 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1043)
		} // end switch yys1043
	} // end for yyj1043
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1052 int
	var yyb1052 bool
	var yyhl1052 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1052++
		if yyhl1052 {
			yyb1052 = yyj1052 > l
		} else {
			yyb1052 = r.CheckBreak()
		}
		if yyb1052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1061 := z.EncBinary()
	_ = yym1061
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1062 := z.DecBinary()
	_ = yym1062
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1063 := z.EncBinary()
	_ = yym1063
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1064 := z.DecBinary()
	_ = yym1064
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1065 := z.EncBinary()
		_ = yym1065
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1066 := !z.EncBinary()
			yy2arr1066 := z.EncBasicHandle().StructToArray
			var yyq1066 [2]bool
			_, _, _ = yysep1066, yyq1066, yy2arr1066
			const yyr1066 bool = false
			yyq1066[0] = len(x.Add) != 0
			yyq1066[1] = len(x.Drop) != 0
			var yynn1066 int
			if yyr1066 || yy2arr1066 {
				r.EncodeArrayStart(2)
			} else {
				yynn1066 = 0
				for _, b := range yyq1066 {
					if b {
						yynn1066++
					}
				}
				r.EncodeMapStart(yynn1066)
				yynn1066 = 0
			}
			if yyr1066 || yy2arr1066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1066[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1068 := z.EncBinary()
						_ = yym1068
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1066[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1069 := z.EncBinary()
						_ = yym1069
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1066 || yy2arr1066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1066[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1071 := z.EncBinary()
						_ = yym1071
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1066[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1072 := z.EncBinary()
						_ = yym1072
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1066 || yy2arr1066 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1073 := z.DecBinary()
	_ = yym1073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1074 := r.ContainerType()
		if yyct1074 == codecSelferValueTypeMap1234 {
			yyl1074 := r.ReadMapStart()
			if yyl1074 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1074, d)
			}
		} else if yyct1074 == codecSelferValueTypeArray1234 {
			yyl1074 := r.ReadArrayStart()
			if yyl1074 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1075Slc
	var yyhl1075 bool = l >= 0
	for yyj1075 := 0; ; yyj1075++ {
		if yyhl1075 {
			if yyj1075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1075Slc = r.DecodeBytes(yys1075Slc, true, true)
		yys1075 := string(yys1075Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1075 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1076 := &x.Add
				yym1077 := z.DecBinary()
				_ = yym1077
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1076), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1078 := &x.Drop
				yym1079 := z.DecBinary()
				_ = yym1079
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1078), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1075)
		} // end switch yys1075
	} // end for yyj1075
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1080 int
	var yyb1080 bool
	var yyhl1080 bool = l >= 0
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1081 := &x.Add
		yym1082 := z.DecBinary()
		_ = yym1082
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1081), d)
		}
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1083 := &x.Drop
		yym1084 := z.DecBinary()
		_ = yym1084
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1083), d)
		}
	}
	for {
		yyj1080++
		if yyhl1080 {
			yyb1080 = yyj1080 > l
		} else {
			yyb1080 = r.CheckBreak()
		}
		if yyb1080 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1080-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1085 := z.EncBinary()
		_ = yym1085
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1086 := !z.EncBinary()
			yy2arr1086 := z.EncBasicHandle().StructToArray
			var yyq1086 [2]bool
			_, _, _ = yysep1086, yyq1086, yy2arr1086
			const yyr1086 bool = false
			yyq1086[0] = len(x.Limits) != 0
			yyq1086[1] = len(x.Requests) != 0
			var yynn1086 int
			if yyr1086 || yy2arr1086 {
				r.EncodeArrayStart(2)
			} else {
				yynn1086 = 0
				for _, b := range yyq1086 {
					if b {
						yynn1086++
					}
				}
				r.EncodeMapStart(yynn1086)
				yynn1086 = 0
			}
			if yyr1086 || yy2arr1086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1086[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1086[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1086 || yy2arr1086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1086[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1086[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1086 || yy2arr1086 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1089 := z.DecBinary()
	_ = yym1089
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1090 := r.ContainerType()
		if yyct1090 == codecSelferValueTypeMap1234 {
			yyl1090 := r.ReadMapStart()
			if yyl1090 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1090, d)
			}
		} else if yyct1090 == codecSelferValueTypeArray1234 {
			yyl1090 := r.ReadArrayStart()
			if yyl1090 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1090, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1091Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1091Slc
	var yyhl1091 bool = l >= 0
	for yyj1091 := 0; ; yyj1091++ {
		if yyhl1091 {
			if yyj1091 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1091Slc = r.DecodeBytes(yys1091Slc, true, true)
		yys1091 := string(yys1091Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1091 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1092 := &x.Limits
				yyv1092.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1093 := &x.Requests
				yyv1093.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1091)
		} // end switch yys1091
	} // end for yyj1091
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1094 int
	var yyb1094 bool
	var yyhl1094 bool = l >= 0
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1095 := &x.Limits
		yyv1095.CodecDecodeSelf(d)
	}
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1096 := &x.Requests
		yyv1096.CodecDecodeSelf(d)
	}
	for {
		yyj1094++
		if yyhl1094 {
			yyb1094 = yyj1094 > l
		} else {
			yyb1094 = r.CheckBreak()
		}
		if yyb1094 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1094-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1097 := z.EncBinary()
		_ = yym1097
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1098 := !z.EncBinary()
			yy2arr1098 := z.EncBasicHandle().StructToArray
			var yyq1098 [18]bool
			_, _, _ = yysep1098, yyq1098, yy2arr1098
			const yyr1098 bool = false
			yyq1098[1] = x.Image != ""
			yyq1098[2] = len(x.Command) != 0
			yyq1098[3] = len(x.Args) != 0
			yyq1098[4] = x.WorkingDir != ""
			yyq1098[5] = len(x.Ports) != 0
			yyq1098[6] = len(x.Env) != 0
			yyq1098[7] = true
			yyq1098[8] = len(x.VolumeMounts) != 0
			yyq1098[9] = x.LivenessProbe != nil
			yyq1098[10] = x.ReadinessProbe != nil
			yyq1098[11] = x.Lifecycle != nil
			yyq1098[12] = x.TerminationMessagePath != ""
			yyq1098[13] = x.ImagePullPolicy != ""
			yyq1098[14] = x.SecurityContext != nil
			yyq1098[15] = x.Stdin != false
			yyq1098[16] = x.StdinOnce != false
			yyq1098[17] = x.TTY != false
			var yynn1098 int
			if yyr1098 || yy2arr1098 {
				r.EncodeArrayStart(18)
			} else {
				yynn1098 = 1
				for _, b := range yyq1098 {
					if b {
						yynn1098++
					}
				}
				r.EncodeMapStart(yynn1098)
				yynn1098 = 0
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1100 := z.EncBinary()
				_ = yym1100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1101 := z.EncBinary()
				_ = yym1101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[1] {
					yym1103 := z.EncBinary()
					_ = yym1103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1098[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1104 := z.EncBinary()
					_ = yym1104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1106 := z.EncBinary()
						_ = yym1106
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1098[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1107 := z.EncBinary()
						_ = yym1107
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1109 := z.EncBinary()
						_ = yym1109
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1098[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1110 := z.EncBinary()
						_ = yym1110
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[4] {
					yym1112 := z.EncBinary()
					_ = yym1112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1098[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1113 := z.EncBinary()
					_ = yym1113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1115 := z.EncBinary()
						_ = yym1115
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1098[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1116 := z.EncBinary()
						_ = yym1116
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1118 := z.EncBinary()
						_ = yym1118
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1098[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1119 := z.EncBinary()
						_ = yym1119
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[7] {
					yy1121 := &x.Resources
					yy1121.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1098[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1122 := &x.Resources
					yy1122.CodecEncodeSelf(e)
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1124 := z.EncBinary()
						_ = yym1124
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1098[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1125 := z.EncBinary()
						_ = yym1125
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1098[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1098[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1098[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[12] {
					yym1130 := z.EncBinary()
					_ = yym1130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1098[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1131 := z.EncBinary()
					_ = yym1131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1098[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1098[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[15] {
					yym1135 := z.EncBinary()
					_ = yym1135
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1098[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1136 := z.EncBinary()
					_ = yym1136
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[16] {
					yym1138 := z.EncBinary()
					_ = yym1138
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1098[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1139 := z.EncBinary()
					_ = yym1139
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1098[17] {
					yym1141 := z.EncBinary()
					_ = yym1141
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1098[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1142 := z.EncBinary()
					_ = yym1142
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1098 || yy2arr1098 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1143 := z.DecBinary()
	_ = yym1143
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1144 := r.ContainerType()
		if yyct1144 == codecSelferValueTypeMap1234 {
			yyl1144 := r.ReadMapStart()
			if yyl1144 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1144, d)
			}
		} else if yyct1144 == codecSelferValueTypeArray1234 {
			yyl1144 := r.ReadArrayStart()
			if yyl1144 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1144, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1145Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1145Slc
	var yyhl1145 bool = l >= 0
	for yyj1145 := 0; ; yyj1145++ {
		if yyhl1145 {
			if yyj1145 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1145Slc = r.DecodeBytes(yys1145Slc, true, true)
		yys1145 := string(yys1145Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1145 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1148 := &x.Command
				yym1149 := z.DecBinary()
				_ = yym1149
				if false {
				} else {
					z.F.DecSliceStringX(yyv1148, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1150 := &x.Args
				yym1151 := z.DecBinary()
				_ = yym1151
				if false {
				} else {
					z.F.DecSliceStringX(yyv1150, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1153 := &x.Ports
				yym1154 := z.DecBinary()
				_ = yym1154
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1153), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1155 := &x.Env
				yym1156 := z.DecBinary()
				_ = yym1156
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1155), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1157 := &x.Resources
				yyv1157.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1158 := &x.VolumeMounts
				yym1159 := z.DecBinary()
				_ = yym1159
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1158), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1145)
		} // end switch yys1145
	} // end for yyj1145
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1169 int
	var yyb1169 bool
	var yyhl1169 bool = l >= 0
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1172 := &x.Command
		yym1173 := z.DecBinary()
		_ = yym1173
		if false {
		} else {
			z.F.DecSliceStringX(yyv1172, false, d)
		}
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1174 := &x.Args
		yym1175 := z.DecBinary()
		_ = yym1175
		if false {
		} else {
			z.F.DecSliceStringX(yyv1174, false, d)
		}
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1177 := &x.Ports
		yym1178 := z.DecBinary()
		_ = yym1178
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1177), d)
		}
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1179 := &x.Env
		yym1180 := z.DecBinary()
		_ = yym1180
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1179), d)
		}
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1181 := &x.Resources
		yyv1181.CodecDecodeSelf(d)
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1182 := &x.VolumeMounts
		yym1183 := z.DecBinary()
		_ = yym1183
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1182), d)
		}
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1169++
		if yyhl1169 {
			yyb1169 = yyj1169 > l
		} else {
			yyb1169 = r.CheckBreak()
		}
		if yyb1169 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1169-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1193 := z.EncBinary()
		_ = yym1193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1194 := !z.EncBinary()
			yy2arr1194 := z.EncBasicHandle().StructToArray
			var yyq1194 [3]bool
			_, _, _ = yysep1194, yyq1194, yy2arr1194
			const yyr1194 bool = false
			yyq1194[0] = x.Exec != nil
			yyq1194[1] = x.HTTPGet != nil
			yyq1194[2] = x.TCPSocket != nil
			var yynn1194 int
			if yyr1194 || yy2arr1194 {
				r.EncodeArrayStart(3)
			} else {
				yynn1194 = 0
				for _, b := range yyq1194 {
					if b {
						yynn1194++
					}
				}
				r.EncodeMapStart(yynn1194)
				yynn1194 = 0
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1194[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1194[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1194[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1198 := z.DecBinary()
	_ = yym1198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1199 := r.ContainerType()
		if yyct1199 == codecSelferValueTypeMap1234 {
			yyl1199 := r.ReadMapStart()
			if yyl1199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1199, d)
			}
		} else if yyct1199 == codecSelferValueTypeArray1234 {
			yyl1199 := r.ReadArrayStart()
			if yyl1199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1200Slc
	var yyhl1200 bool = l >= 0
	for yyj1200 := 0; ; yyj1200++ {
		if yyhl1200 {
			if yyj1200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1200Slc = r.DecodeBytes(yys1200Slc, true, true)
		yys1200 := string(yys1200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1200 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1200)
		} // end switch yys1200
	} // end for yyj1200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1204 int
	var yyb1204 bool
	var yyhl1204 bool = l >= 0
	yyj1204++
	if yyhl1204 {
		yyb1204 = yyj1204 > l
	} else {
		yyb1204 = r.CheckBreak()
	}
	if yyb1204 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1204++
	if yyhl1204 {
		yyb1204 = yyj1204 > l
	} else {
		yyb1204 = r.CheckBreak()
	}
	if yyb1204 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1204++
	if yyhl1204 {
		yyb1204 = yyj1204 > l
	} else {
		yyb1204 = r.CheckBreak()
	}
	if yyb1204 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1204++
		if yyhl1204 {
			yyb1204 = yyj1204 > l
		} else {
			yyb1204 = r.CheckBreak()
		}
		if yyb1204 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1204-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1208 := z.EncBinary()
		_ = yym1208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1209 := !z.EncBinary()
			yy2arr1209 := z.EncBasicHandle().StructToArray
			var yyq1209 [2]bool
			_, _, _ = yysep1209, yyq1209, yy2arr1209
			const yyr1209 bool = false
			yyq1209[0] = x.PostStart != nil
			yyq1209[1] = x.PreStop != nil
			var yynn1209 int
			if yyr1209 || yy2arr1209 {
				r.EncodeArrayStart(2)
			} else {
				yynn1209 = 0
				for _, b := range yyq1209 {
					if b {
						yynn1209++
					}
				}
				r.EncodeMapStart(yynn1209)
				yynn1209 = 0
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1209[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1209[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1209[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1209[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1212 := z.DecBinary()
	_ = yym1212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1213 := r.ContainerType()
		if yyct1213 == codecSelferValueTypeMap1234 {
			yyl1213 := r.ReadMapStart()
			if yyl1213 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1213, d)
			}
		} else if yyct1213 == codecSelferValueTypeArray1234 {
			yyl1213 := r.ReadArrayStart()
			if yyl1213 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1214Slc
	var yyhl1214 bool = l >= 0
	for yyj1214 := 0; ; yyj1214++ {
		if yyhl1214 {
			if yyj1214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1214Slc = r.DecodeBytes(yys1214Slc, true, true)
		yys1214 := string(yys1214Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1214 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1214)
		} // end switch yys1214
	} // end for yyj1214
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1217 int
	var yyb1217 bool
	var yyhl1217 bool = l >= 0
	yyj1217++
	if yyhl1217 {
		yyb1217 = yyj1217 > l
	} else {
		yyb1217 = r.CheckBreak()
	}
	if yyb1217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1217++
	if yyhl1217 {
		yyb1217 = yyj1217 > l
	} else {
		yyb1217 = r.CheckBreak()
	}
	if yyb1217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1217++
		if yyhl1217 {
			yyb1217 = yyj1217 > l
		} else {
			yyb1217 = r.CheckBreak()
		}
		if yyb1217 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1217-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1220 := z.EncBinary()
	_ = yym1220
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1221 := z.DecBinary()
	_ = yym1221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1222 := z.EncBinary()
		_ = yym1222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1223 := !z.EncBinary()
			yy2arr1223 := z.EncBasicHandle().StructToArray
			var yyq1223 [2]bool
			_, _, _ = yysep1223, yyq1223, yy2arr1223
			const yyr1223 bool = false
			yyq1223[0] = x.Reason != ""
			yyq1223[1] = x.Message != ""
			var yynn1223 int
			if yyr1223 || yy2arr1223 {
				r.EncodeArrayStart(2)
			} else {
				yynn1223 = 0
				for _, b := range yyq1223 {
					if b {
						yynn1223++
					}
				}
				r.EncodeMapStart(yynn1223)
				yynn1223 = 0
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1223[0] {
					yym1225 := z.EncBinary()
					_ = yym1225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1223[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1223[1] {
					yym1228 := z.EncBinary()
					_ = yym1228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1223[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1229 := z.EncBinary()
					_ = yym1229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1230 := z.DecBinary()
	_ = yym1230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1231 := r.ContainerType()
		if yyct1231 == codecSelferValueTypeMap1234 {
			yyl1231 := r.ReadMapStart()
			if yyl1231 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1231, d)
			}
		} else if yyct1231 == codecSelferValueTypeArray1234 {
			yyl1231 := r.ReadArrayStart()
			if yyl1231 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1231, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1232Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1232Slc
	var yyhl1232 bool = l >= 0
	for yyj1232 := 0; ; yyj1232++ {
		if yyhl1232 {
			if yyj1232 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1232Slc = r.DecodeBytes(yys1232Slc, true, true)
		yys1232 := string(yys1232Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1232 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1232)
		} // end switch yys1232
	} // end for yyj1232
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1235 int
	var yyb1235 bool
	var yyhl1235 bool = l >= 0
	yyj1235++
	if yyhl1235 {
		yyb1235 = yyj1235 > l
	} else {
		yyb1235 = r.CheckBreak()
	}
	if yyb1235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1235++
	if yyhl1235 {
		yyb1235 = yyj1235 > l
	} else {
		yyb1235 = r.CheckBreak()
	}
	if yyb1235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1235++
		if yyhl1235 {
			yyb1235 = yyj1235 > l
		} else {
			yyb1235 = r.CheckBreak()
		}
		if yyb1235 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1235-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1238 := z.EncBinary()
		_ = yym1238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1239 := !z.EncBinary()
			yy2arr1239 := z.EncBasicHandle().StructToArray
			var yyq1239 [1]bool
			_, _, _ = yysep1239, yyq1239, yy2arr1239
			const yyr1239 bool = false
			yyq1239[0] = true
			var yynn1239 int
			if yyr1239 || yy2arr1239 {
				r.EncodeArrayStart(1)
			} else {
				yynn1239 = 0
				for _, b := range yyq1239 {
					if b {
						yynn1239++
					}
				}
				r.EncodeMapStart(yynn1239)
				yynn1239 = 0
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[0] {
					yy1241 := &x.StartedAt
					yym1242 := z.EncBinary()
					_ = yym1242
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1241) {
					} else if yym1242 {
						z.EncBinaryMarshal(yy1241)
					} else if !yym1242 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1241)
					} else {
						z.EncFallback(yy1241)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1243 := &x.StartedAt
					yym1244 := z.EncBinary()
					_ = yym1244
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1243) {
					} else if yym1244 {
						z.EncBinaryMarshal(yy1243)
					} else if !yym1244 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1243)
					} else {
						z.EncFallback(yy1243)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1245 := z.DecBinary()
	_ = yym1245
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1246 := r.ContainerType()
		if yyct1246 == codecSelferValueTypeMap1234 {
			yyl1246 := r.ReadMapStart()
			if yyl1246 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1246, d)
			}
		} else if yyct1246 == codecSelferValueTypeArray1234 {
			yyl1246 := r.ReadArrayStart()
			if yyl1246 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1246, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1247Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1247Slc
	var yyhl1247 bool = l >= 0
	for yyj1247 := 0; ; yyj1247++ {
		if yyhl1247 {
			if yyj1247 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1247Slc = r.DecodeBytes(yys1247Slc, true, true)
		yys1247 := string(yys1247Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1247 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1248 := &x.StartedAt
				yym1249 := z.DecBinary()
				_ = yym1249
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1248) {
				} else if yym1249 {
					z.DecBinaryUnmarshal(yyv1248)
				} else if !yym1249 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1248)
				} else {
					z.DecFallback(yyv1248, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1247)
		} // end switch yys1247
	} // end for yyj1247
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1250 int
	var yyb1250 bool
	var yyhl1250 bool = l >= 0
	yyj1250++
	if yyhl1250 {
		yyb1250 = yyj1250 > l
	} else {
		yyb1250 = r.CheckBreak()
	}
	if yyb1250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1251 := &x.StartedAt
		yym1252 := z.DecBinary()
		_ = yym1252
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1251) {
		} else if yym1252 {
			z.DecBinaryUnmarshal(yyv1251)
		} else if !yym1252 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1251)
		} else {
			z.DecFallback(yyv1251, false)
		}
	}
	for {
		yyj1250++
		if yyhl1250 {
			yyb1250 = yyj1250 > l
		} else {
			yyb1250 = r.CheckBreak()
		}
		if yyb1250 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1250-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1253 := z.EncBinary()
		_ = yym1253
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1254 := !z.EncBinary()
			yy2arr1254 := z.EncBasicHandle().StructToArray
			var yyq1254 [7]bool
			_, _, _ = yysep1254, yyq1254, yy2arr1254
			const yyr1254 bool = false
			yyq1254[1] = x.Signal != 0
			yyq1254[2] = x.Reason != ""
			yyq1254[3] = x.Message != ""
			yyq1254[4] = true
			yyq1254[5] = true
			yyq1254[6] = x.ContainerID != ""
			var yynn1254 int
			if yyr1254 || yy2arr1254 {
				r.EncodeArrayStart(7)
			} else {
				yynn1254 = 1
				for _, b := range yyq1254 {
					if b {
						yynn1254++
					}
				}
				r.EncodeMapStart(yynn1254)
				yynn1254 = 0
			}
			if yyr1254 || yy2arr1254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1256 := z.EncBinary()
				_ = yym1256
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1257 := z.EncBinary()
				_ = yym1257
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1254 || yy2arr1254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1254[1] {
					yym1259 := z.EncBinary()
					_ = yym1259
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1254[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1260 := z.EncBinary()
					_ = yym1260
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1254 || yy2arr1254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1254[2] {
					yym1262 := z.EncBinary()
					_ = yym1262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1254[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1263 := z.EncBinary()
					_ = yym1263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1254 || yy2arr1254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1254[3] {
					yym1265 := z.EncBinary()
					_ = yym1265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1254[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1266 := z.EncBinary()
					_ = yym1266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1254 || yy2arr1254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1254[4] {
					yy1268 := &x.StartedAt
					yym1269 := z.EncBinary()
					_ = yym1269
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1268) {
					} else if yym1269 {
						z.EncBinaryMarshal(yy1268)
					} else if !yym1269 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1268)
					} else {
						z.EncFallback(yy1268)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1254[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1270 := &x.StartedAt
					yym1271 := z.EncBinary()
					_ = yym1271
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1270) {
					} else if yym1271 {
						z.EncBinaryMarshal(yy1270)
					} else if !yym1271 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1270)
					} else {
						z.EncFallback(yy1270)
					}
				}
			}
			if yyr1254 || yy2arr1254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1254[5] {
					yy1273 := &x.FinishedAt
					yym1274 := z.EncBinary()
					_ = yym1274
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1273) {
					} else if yym1274 {
						z.EncBinaryMarshal(yy1273)
					} else if !yym1274 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1273)
					} else {
						z.EncFallback(yy1273)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1254[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1275 := &x.FinishedAt
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1275) {
					} else if yym1276 {
						z.EncBinaryMarshal(yy1275)
					} else if !yym1276 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1275)
					} else {
						z.EncFallback(yy1275)
					}
				}
			}
			if yyr1254 || yy2arr1254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1254[6] {
					yym1278 := z.EncBinary()
					_ = yym1278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1254[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1279 := z.EncBinary()
					_ = yym1279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1254 || yy2arr1254 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1280 := z.DecBinary()
	_ = yym1280
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1281 := r.ContainerType()
		if yyct1281 == codecSelferValueTypeMap1234 {
			yyl1281 := r.ReadMapStart()
			if yyl1281 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1281, d)
			}
		} else if yyct1281 == codecSelferValueTypeArray1234 {
			yyl1281 := r.ReadArrayStart()
			if yyl1281 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1281, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1282Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1282Slc
	var yyhl1282 bool = l >= 0
	for yyj1282 := 0; ; yyj1282++ {
		if yyhl1282 {
			if yyj1282 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1282Slc = r.DecodeBytes(yys1282Slc, true, true)
		yys1282 := string(yys1282Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1282 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1287 := &x.StartedAt
				yym1288 := z.DecBinary()
				_ = yym1288
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1287) {
				} else if yym1288 {
					z.DecBinaryUnmarshal(yyv1287)
				} else if !yym1288 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1287)
				} else {
					z.DecFallback(yyv1287, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1289 := &x.FinishedAt
				yym1290 := z.DecBinary()
				_ = yym1290
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1289) {
				} else if yym1290 {
					z.DecBinaryUnmarshal(yyv1289)
				} else if !yym1290 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1289)
				} else {
					z.DecFallback(yyv1289, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1282)
		} // end switch yys1282
	} // end for yyj1282
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1292 int
	var yyb1292 bool
	var yyhl1292 bool = l >= 0
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1297 := &x.StartedAt
		yym1298 := z.DecBinary()
		_ = yym1298
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1297) {
		} else if yym1298 {
			z.DecBinaryUnmarshal(yyv1297)
		} else if !yym1298 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1297)
		} else {
			z.DecFallback(yyv1297, false)
		}
	}
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1299 := &x.FinishedAt
		yym1300 := z.DecBinary()
		_ = yym1300
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1299) {
		} else if yym1300 {
			z.DecBinaryUnmarshal(yyv1299)
		} else if !yym1300 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1299)
		} else {
			z.DecFallback(yyv1299, false)
		}
	}
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1292++
		if yyhl1292 {
			yyb1292 = yyj1292 > l
		} else {
			yyb1292 = r.CheckBreak()
		}
		if yyb1292 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1292-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1302 := z.EncBinary()
		_ = yym1302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1303 := !z.EncBinary()
			yy2arr1303 := z.EncBasicHandle().StructToArray
			var yyq1303 [3]bool
			_, _, _ = yysep1303, yyq1303, yy2arr1303
			const yyr1303 bool = false
			yyq1303[0] = x.Waiting != nil
			yyq1303[1] = x.Running != nil
			yyq1303[2] = x.Terminated != nil
			var yynn1303 int
			if yyr1303 || yy2arr1303 {
				r.EncodeArrayStart(3)
			} else {
				yynn1303 = 0
				for _, b := range yyq1303 {
					if b {
						yynn1303++
					}
				}
				r.EncodeMapStart(yynn1303)
				yynn1303 = 0
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1303[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1303[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1303[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1307 := z.DecBinary()
	_ = yym1307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1308 := r.ContainerType()
		if yyct1308 == codecSelferValueTypeMap1234 {
			yyl1308 := r.ReadMapStart()
			if yyl1308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1308, d)
			}
		} else if yyct1308 == codecSelferValueTypeArray1234 {
			yyl1308 := r.ReadArrayStart()
			if yyl1308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1309Slc
	var yyhl1309 bool = l >= 0
	for yyj1309 := 0; ; yyj1309++ {
		if yyhl1309 {
			if yyj1309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1309Slc = r.DecodeBytes(yys1309Slc, true, true)
		yys1309 := string(yys1309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1309 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1309)
		} // end switch yys1309
	} // end for yyj1309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1313 int
	var yyb1313 bool
	var yyhl1313 bool = l >= 0
	yyj1313++
	if yyhl1313 {
		yyb1313 = yyj1313 > l
	} else {
		yyb1313 = r.CheckBreak()
	}
	if yyb1313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1313++
	if yyhl1313 {
		yyb1313 = yyj1313 > l
	} else {
		yyb1313 = r.CheckBreak()
	}
	if yyb1313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1313++
	if yyhl1313 {
		yyb1313 = yyj1313 > l
	} else {
		yyb1313 = r.CheckBreak()
	}
	if yyb1313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1313++
		if yyhl1313 {
			yyb1313 = yyj1313 > l
		} else {
			yyb1313 = r.CheckBreak()
		}
		if yyb1313 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1313-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1317 := z.EncBinary()
		_ = yym1317
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1318 := !z.EncBinary()
			yy2arr1318 := z.EncBasicHandle().StructToArray
			var yyq1318 [8]bool
			_, _, _ = yysep1318, yyq1318, yy2arr1318
			const yyr1318 bool = false
			yyq1318[1] = true
			yyq1318[2] = true
			yyq1318[7] = x.ContainerID != ""
			var yynn1318 int
			if yyr1318 || yy2arr1318 {
				r.EncodeArrayStart(8)
			} else {
				yynn1318 = 5
				for _, b := range yyq1318 {
					if b {
						yynn1318++
					}
				}
				r.EncodeMapStart(yynn1318)
				yynn1318 = 0
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1320 := z.EncBinary()
				_ = yym1320
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1321 := z.EncBinary()
				_ = yym1321
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[1] {
					yy1323 := &x.State
					yy1323.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1318[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1324 := &x.State
					yy1324.CodecEncodeSelf(e)
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[2] {
					yy1326 := &x.LastTerminationState
					yy1326.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1318[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1327 := &x.LastTerminationState
					yy1327.CodecEncodeSelf(e)
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1329 := z.EncBinary()
				_ = yym1329
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1330 := z.EncBinary()
				_ = yym1330
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1332 := z.EncBinary()
				_ = yym1332
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1333 := z.EncBinary()
				_ = yym1333
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1335 := z.EncBinary()
				_ = yym1335
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1336 := z.EncBinary()
				_ = yym1336
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1338 := z.EncBinary()
				_ = yym1338
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1339 := z.EncBinary()
				_ = yym1339
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[7] {
					yym1341 := z.EncBinary()
					_ = yym1341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1318[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1342 := z.EncBinary()
					_ = yym1342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1343 := z.DecBinary()
	_ = yym1343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1344 := r.ContainerType()
		if yyct1344 == codecSelferValueTypeMap1234 {
			yyl1344 := r.ReadMapStart()
			if yyl1344 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1344, d)
			}
		} else if yyct1344 == codecSelferValueTypeArray1234 {
			yyl1344 := r.ReadArrayStart()
			if yyl1344 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1344, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1345Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1345Slc
	var yyhl1345 bool = l >= 0
	for yyj1345 := 0; ; yyj1345++ {
		if yyhl1345 {
			if yyj1345 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1345Slc = r.DecodeBytes(yys1345Slc, true, true)
		yys1345 := string(yys1345Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1345 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1347 := &x.State
				yyv1347.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1348 := &x.LastTerminationState
				yyv1348.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1345)
		} // end switch yys1345
	} // end for yyj1345
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1354 int
	var yyb1354 bool
	var yyhl1354 bool = l >= 0
	yyj1354++
	if yyhl1354 {
		yyb1354 = yyj1354 > l
	} else {
		yyb1354 = r.CheckBreak()
	}
	if yyb1354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1354++
	if yyhl1354 {
		yyb1354 = yyj1354 > l
	} else {
		yyb1354 = r.CheckBreak()
	}
	if yyb1354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1356 := &x.State
		yyv1356.CodecDecodeSelf(d)
	}
	yyj1354++
	if yyhl1354 {
		yyb1354 = yyj1354 > l
	} else {
		yyb1354 = r.CheckBreak()
	}
	if yyb1354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1357 := &x.LastTerminationState
		yyv1357.CodecDecodeSelf(d)
	}
	yyj1354++
	if yyhl1354 {
		yyb1354 = yyj1354 > l
	} else {
		yyb1354 = r.CheckBreak()
	}
	if yyb1354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1354++
	if yyhl1354 {
		yyb1354 = yyj1354 > l
	} else {
		yyb1354 = r.CheckBreak()
	}
	if yyb1354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1354++
	if yyhl1354 {
		yyb1354 = yyj1354 > l
	} else {
		yyb1354 = r.CheckBreak()
	}
	if yyb1354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1354++
	if yyhl1354 {
		yyb1354 = yyj1354 > l
	} else {
		yyb1354 = r.CheckBreak()
	}
	if yyb1354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1354++
	if yyhl1354 {
		yyb1354 = yyj1354 > l
	} else {
		yyb1354 = r.CheckBreak()
	}
	if yyb1354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1354++
		if yyhl1354 {
			yyb1354 = yyj1354 > l
		} else {
			yyb1354 = r.CheckBreak()
		}
		if yyb1354 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1354-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1363 := z.EncBinary()
	_ = yym1363
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1364 := z.DecBinary()
	_ = yym1364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1365 := z.EncBinary()
	_ = yym1365
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1366 := z.DecBinary()
	_ = yym1366
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1367 := z.EncBinary()
		_ = yym1367
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1368 := !z.EncBinary()
			yy2arr1368 := z.EncBasicHandle().StructToArray
			var yyq1368 [6]bool
			_, _, _ = yysep1368, yyq1368, yy2arr1368
			const yyr1368 bool = false
			yyq1368[2] = true
			yyq1368[3] = true
			yyq1368[4] = x.Reason != ""
			yyq1368[5] = x.Message != ""
			var yynn1368 int
			if yyr1368 || yy2arr1368 {
				r.EncodeArrayStart(6)
			} else {
				yynn1368 = 2
				for _, b := range yyq1368 {
					if b {
						yynn1368++
					}
				}
				r.EncodeMapStart(yynn1368)
				yynn1368 = 0
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[2] {
					yy1372 := &x.LastProbeTime
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1372) {
					} else if yym1373 {
						z.EncBinaryMarshal(yy1372)
					} else if !yym1373 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1372)
					} else {
						z.EncFallback(yy1372)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1368[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1374 := &x.LastProbeTime
					yym1375 := z.EncBinary()
					_ = yym1375
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1374) {
					} else if yym1375 {
						z.EncBinaryMarshal(yy1374)
					} else if !yym1375 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1374)
					} else {
						z.EncFallback(yy1374)
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[3] {
					yy1377 := &x.LastTransitionTime
					yym1378 := z.EncBinary()
					_ = yym1378
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1377) {
					} else if yym1378 {
						z.EncBinaryMarshal(yy1377)
					} else if !yym1378 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1377)
					} else {
						z.EncFallback(yy1377)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1368[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1379 := &x.LastTransitionTime
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1379) {
					} else if yym1380 {
						z.EncBinaryMarshal(yy1379)
					} else if !yym1380 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1379)
					} else {
						z.EncFallback(yy1379)
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[4] {
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1368[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1383 := z.EncBinary()
					_ = yym1383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[5] {
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1368[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1386 := z.EncBinary()
					_ = yym1386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1387 := z.DecBinary()
	_ = yym1387
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1388 := r.ContainerType()
		if yyct1388 == codecSelferValueTypeMap1234 {
			yyl1388 := r.ReadMapStart()
			if yyl1388 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1388, d)
			}
		} else if yyct1388 == codecSelferValueTypeArray1234 {
			yyl1388 := r.ReadArrayStart()
			if yyl1388 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1388, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1389Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1389Slc
	var yyhl1389 bool = l >= 0
	for yyj1389 := 0; ; yyj1389++ {
		if yyhl1389 {
			if yyj1389 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1389Slc = r.DecodeBytes(yys1389Slc, true, true)
		yys1389 := string(yys1389Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1389 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1392 := &x.LastProbeTime
				yym1393 := z.DecBinary()
				_ = yym1393
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1392) {
				} else if yym1393 {
					z.DecBinaryUnmarshal(yyv1392)
				} else if !yym1393 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1392)
				} else {
					z.DecFallback(yyv1392, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1394 := &x.LastTransitionTime
				yym1395 := z.DecBinary()
				_ = yym1395
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1394) {
				} else if yym1395 {
					z.DecBinaryUnmarshal(yyv1394)
				} else if !yym1395 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1394)
				} else {
					z.DecFallback(yyv1394, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1389)
		} // end switch yys1389
	} // end for yyj1389
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1398 int
	var yyb1398 bool
	var yyhl1398 bool = l >= 0
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1401 := &x.LastProbeTime
		yym1402 := z.DecBinary()
		_ = yym1402
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1401) {
		} else if yym1402 {
			z.DecBinaryUnmarshal(yyv1401)
		} else if !yym1402 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1401)
		} else {
			z.DecFallback(yyv1401, false)
		}
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1403 := &x.LastTransitionTime
		yym1404 := z.DecBinary()
		_ = yym1404
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1403) {
		} else if yym1404 {
			z.DecBinaryUnmarshal(yyv1403)
		} else if !yym1404 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1403)
		} else {
			z.DecFallback(yyv1403, false)
		}
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1398++
		if yyhl1398 {
			yyb1398 = yyj1398 > l
		} else {
			yyb1398 = r.CheckBreak()
		}
		if yyb1398 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1398-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1407 := z.EncBinary()
	_ = yym1407
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1408 := z.DecBinary()
	_ = yym1408
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1409 := z.EncBinary()
	_ = yym1409
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1410 := z.DecBinary()
	_ = yym1410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1411 := z.EncBinary()
		_ = yym1411
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1412 := !z.EncBinary()
			yy2arr1412 := z.EncBasicHandle().StructToArray
			var yyq1412 [1]bool
			_, _, _ = yysep1412, yyq1412, yy2arr1412
			const yyr1412 bool = false
			yyq1412[0] = len(x.NodeSelectorTerms) != 0
			var yynn1412 int
			if yyr1412 || yy2arr1412 {
				r.EncodeArrayStart(1)
			} else {
				yynn1412 = 0
				for _, b := range yyq1412 {
					if b {
						yynn1412++
					}
				}
				r.EncodeMapStart(yynn1412)
				yynn1412 = 0
			}
			if yyr1412 || yy2arr1412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1412[0] {
					if x.NodeSelectorTerms == nil {
						r.EncodeNil()
					} else {
						yym1414 := z.EncBinary()
						_ = yym1414
						if false {
						} else {
							h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1412[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelectorTerms == nil {
						r.EncodeNil()
					} else {
						yym1415 := z.EncBinary()
						_ = yym1415
						if false {
						} else {
							h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
						}
					}
				}
			}
			if yyr1412 || yy2arr1412 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1416 := z.DecBinary()
	_ = yym1416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1417 := r.ContainerType()
		if yyct1417 == codecSelferValueTypeMap1234 {
			yyl1417 := r.ReadMapStart()
			if yyl1417 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1417, d)
			}
		} else if yyct1417 == codecSelferValueTypeArray1234 {
			yyl1417 := r.ReadArrayStart()
			if yyl1417 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1417, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1418Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1418Slc
	var yyhl1418 bool = l >= 0
	for yyj1418 := 0; ; yyj1418++ {
		if yyhl1418 {
			if yyj1418 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1418Slc = r.DecodeBytes(yys1418Slc, true, true)
		yys1418 := string(yys1418Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1418 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1419 := &x.NodeSelectorTerms
				yym1420 := z.DecBinary()
				_ = yym1420
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1419), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1418)
		} // end switch yys1418
	} // end for yyj1418
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1421 int
	var yyb1421 bool
	var yyhl1421 bool = l >= 0
	yyj1421++
	if yyhl1421 {
		yyb1421 = yyj1421 > l
	} else {
		yyb1421 = r.CheckBreak()
	}
	if yyb1421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1422 := &x.NodeSelectorTerms
		yym1423 := z.DecBinary()
		_ = yym1423
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1422), d)
		}
	}
	for {
		yyj1421++
		if yyhl1421 {
			yyb1421 = yyj1421 > l
		} else {
			yyb1421 = r.CheckBreak()
		}
		if yyb1421 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1421-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1424 := z.EncBinary()
		_ = yym1424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1425 := !z.EncBinary()
			yy2arr1425 := z.EncBasicHandle().StructToArray
			var yyq1425 [1]bool
			_, _, _ = yysep1425, yyq1425, yy2arr1425
			const yyr1425 bool = false
			yyq1425[0] = len(x.MatchExpressions) != 0
			var yynn1425 int
			if yyr1425 || yy2arr1425 {
				r.EncodeArrayStart(1)
			} else {
				yynn1425 = 0
				for _, b := range yyq1425 {
					if b {
						yynn1425++
					}
				}
				r.EncodeMapStart(yynn1425)
				yynn1425 = 0
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1425[0] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1427 := z.EncBinary()
						_ = yym1427
						if false {
						} else {
							h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1425[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1428 := z.EncBinary()
						_ = yym1428
						if false {
						} else {
							h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1429 := z.DecBinary()
	_ = yym1429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1430 := r.ContainerType()
		if yyct1430 == codecSelferValueTypeMap1234 {
			yyl1430 := r.ReadMapStart()
			if yyl1430 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1430, d)
			}
		} else if yyct1430 == codecSelferValueTypeArray1234 {
			yyl1430 := r.ReadArrayStart()
			if yyl1430 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1430, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1431Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1431Slc
	var yyhl1431 bool = l >= 0
	for yyj1431 := 0; ; yyj1431++ {
		if yyhl1431 {
			if yyj1431 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1431Slc = r.DecodeBytes(yys1431Slc, true, true)
		yys1431 := string(yys1431Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1431 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1432 := &x.MatchExpressions
				yym1433 := z.DecBinary()
				_ = yym1433
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1432), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1431)
		} // end switch yys1431
	} // end for yyj1431
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1434 int
	var yyb1434 bool
	var yyhl1434 bool = l >= 0
	yyj1434++
	if yyhl1434 {
		yyb1434 = yyj1434 > l
	} else {
		yyb1434 = r.CheckBreak()
	}
	if yyb1434 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1435 := &x.MatchExpressions
		yym1436 := z.DecBinary()
		_ = yym1436
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1435), d)
		}
	}
	for {
		yyj1434++
		if yyhl1434 {
			yyb1434 = yyj1434 > l
		} else {
			yyb1434 = r.CheckBreak()
		}
		if yyb1434 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1434-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1437 := z.EncBinary()
		_ = yym1437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1438 := !z.EncBinary()
			yy2arr1438 := z.EncBasicHandle().StructToArray
			var yyq1438 [3]bool
			_, _, _ = yysep1438, yyq1438, yy2arr1438
			const yyr1438 bool = false
			yyq1438[2] = len(x.Values) != 0
			var yynn1438 int
			if yyr1438 || yy2arr1438 {
				r.EncodeArrayStart(3)
			} else {
				yynn1438 = 2
				for _, b := range yyq1438 {
					if b {
						yynn1438++
					}
				}
				r.EncodeMapStart(yynn1438)
				yynn1438 = 0
			}
			if yyr1438 || yy2arr1438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1440 := z.EncBinary()
				_ = yym1440
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1441 := z.EncBinary()
				_ = yym1441
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1438 || yy2arr1438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1438 || yy2arr1438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1438[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1444 := z.EncBinary()
						_ = yym1444
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1438[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1445 := z.EncBinary()
						_ = yym1445
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1438 || yy2arr1438 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1446 := z.DecBinary()
	_ = yym1446
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1447 := r.ContainerType()
		if yyct1447 == codecSelferValueTypeMap1234 {
			yyl1447 := r.ReadMapStart()
			if yyl1447 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1447, d)
			}
		} else if yyct1447 == codecSelferValueTypeArray1234 {
			yyl1447 := r.ReadArrayStart()
			if yyl1447 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1447, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1448Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1448Slc
	var yyhl1448 bool = l >= 0
	for yyj1448 := 0; ; yyj1448++ {
		if yyhl1448 {
			if yyj1448 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1448Slc = r.DecodeBytes(yys1448Slc, true, true)
		yys1448 := string(yys1448Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1448 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1451 := &x.Values
				yym1452 := z.DecBinary()
				_ = yym1452
				if false {
				} else {
					z.F.DecSliceStringX(yyv1451, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1448)
		} // end switch yys1448
	} // end for yyj1448
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1453 int
	var yyb1453 bool
	var yyhl1453 bool = l >= 0
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1456 := &x.Values
		yym1457 := z.DecBinary()
		_ = yym1457
		if false {
		} else {
			z.F.DecSliceStringX(yyv1456, false, d)
		}
	}
	for {
		yyj1453++
		if yyhl1453 {
			yyb1453 = yyj1453 > l
		} else {
			yyb1453 = r.CheckBreak()
		}
		if yyb1453 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1453-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1458 := z.EncBinary()
	_ = yym1458
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1459 := z.DecBinary()
	_ = yym1459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1460 := z.EncBinary()
		_ = yym1460
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1461 := !z.EncBinary()
			yy2arr1461 := z.EncBasicHandle().StructToArray
			var yyq1461 [2]bool
			_, _, _ = yysep1461, yyq1461, yy2arr1461
			const yyr1461 bool = false
			yyq1461[0] = x.HardNodeAffinity != nil
			yyq1461[1] = len(x.SoftNodeAffinity) != 0
			var yynn1461 int
			if yyr1461 || yy2arr1461 {
				r.EncodeArrayStart(2)
			} else {
				yynn1461 = 0
				for _, b := range yyq1461 {
					if b {
						yynn1461++
					}
				}
				r.EncodeMapStart(yynn1461)
				yynn1461 = 0
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[0] {
					if x.HardNodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.HardNodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hardNodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HardNodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.HardNodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1461[1] {
					if x.SoftNodeAffinity == nil {
						r.EncodeNil()
					} else {
						yym1464 := z.EncBinary()
						_ = yym1464
						if false {
						} else {
							h.encSliceSoftNodeAffinityTerm(([]SoftNodeAffinityTerm)(x.SoftNodeAffinity), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1461[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("softNodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SoftNodeAffinity == nil {
						r.EncodeNil()
					} else {
						yym1465 := z.EncBinary()
						_ = yym1465
						if false {
						} else {
							h.encSliceSoftNodeAffinityTerm(([]SoftNodeAffinityTerm)(x.SoftNodeAffinity), e)
						}
					}
				}
			}
			if yyr1461 || yy2arr1461 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1466 := z.DecBinary()
	_ = yym1466
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1467 := r.ContainerType()
		if yyct1467 == codecSelferValueTypeMap1234 {
			yyl1467 := r.ReadMapStart()
			if yyl1467 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1467, d)
			}
		} else if yyct1467 == codecSelferValueTypeArray1234 {
			yyl1467 := r.ReadArrayStart()
			if yyl1467 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1467, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1468Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1468Slc
	var yyhl1468 bool = l >= 0
	for yyj1468 := 0; ; yyj1468++ {
		if yyhl1468 {
			if yyj1468 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1468Slc = r.DecodeBytes(yys1468Slc, true, true)
		yys1468 := string(yys1468Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1468 {
		case "hardNodeAffinity":
			if r.TryDecodeAsNil() {
				if x.HardNodeAffinity != nil {
					x.HardNodeAffinity = nil
				}
			} else {
				if x.HardNodeAffinity == nil {
					x.HardNodeAffinity = new(NodeSelector)
				}
				x.HardNodeAffinity.CodecDecodeSelf(d)
			}
		case "softNodeAffinity":
			if r.TryDecodeAsNil() {
				x.SoftNodeAffinity = nil
			} else {
				yyv1470 := &x.SoftNodeAffinity
				yym1471 := z.DecBinary()
				_ = yym1471
				if false {
				} else {
					h.decSliceSoftNodeAffinityTerm((*[]SoftNodeAffinityTerm)(yyv1470), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1468)
		} // end switch yys1468
	} // end for yyj1468
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1472 int
	var yyb1472 bool
	var yyhl1472 bool = l >= 0
	yyj1472++
	if yyhl1472 {
		yyb1472 = yyj1472 > l
	} else {
		yyb1472 = r.CheckBreak()
	}
	if yyb1472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HardNodeAffinity != nil {
			x.HardNodeAffinity = nil
		}
	} else {
		if x.HardNodeAffinity == nil {
			x.HardNodeAffinity = new(NodeSelector)
		}
		x.HardNodeAffinity.CodecDecodeSelf(d)
	}
	yyj1472++
	if yyhl1472 {
		yyb1472 = yyj1472 > l
	} else {
		yyb1472 = r.CheckBreak()
	}
	if yyb1472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SoftNodeAffinity = nil
	} else {
		yyv1474 := &x.SoftNodeAffinity
		yym1475 := z.DecBinary()
		_ = yym1475
		if false {
		} else {
			h.decSliceSoftNodeAffinityTerm((*[]SoftNodeAffinityTerm)(yyv1474), d)
		}
	}
	for {
		yyj1472++
		if yyhl1472 {
			yyb1472 = yyj1472 > l
		} else {
			yyb1472 = r.CheckBreak()
		}
		if yyb1472 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1472-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SoftNodeAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1476 := z.EncBinary()
		_ = yym1476
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1477 := !z.EncBinary()
			yy2arr1477 := z.EncBasicHandle().StructToArray
			var yyq1477 [2]bool
			_, _, _ = yysep1477, yyq1477, yy2arr1477
			const yyr1477 bool = false
			yyq1477[1] = len(x.MatchExpressions) != 0
			var yynn1477 int
			if yyr1477 || yy2arr1477 {
				r.EncodeArrayStart(2)
			} else {
				yynn1477 = 1
				for _, b := range yyq1477 {
					if b {
						yynn1477++
					}
				}
				r.EncodeMapStart(yynn1477)
				yynn1477 = 0
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1479 := z.EncBinary()
				_ = yym1479
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1480 := z.EncBinary()
				_ = yym1480
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1477[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1482 := z.EncBinary()
						_ = yym1482
						if false {
						} else {
							h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1477[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1483 := z.EncBinary()
						_ = yym1483
						if false {
						} else {
							h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SoftNodeAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1484 := z.DecBinary()
	_ = yym1484
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1485 := r.ContainerType()
		if yyct1485 == codecSelferValueTypeMap1234 {
			yyl1485 := r.ReadMapStart()
			if yyl1485 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1485, d)
			}
		} else if yyct1485 == codecSelferValueTypeArray1234 {
			yyl1485 := r.ReadArrayStart()
			if yyl1485 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1485, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SoftNodeAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1486Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1486Slc
	var yyhl1486 bool = l >= 0
	for yyj1486 := 0; ; yyj1486++ {
		if yyhl1486 {
			if yyj1486 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1486Slc = r.DecodeBytes(yys1486Slc, true, true)
		yys1486 := string(yys1486Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1486 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1488 := &x.MatchExpressions
				yym1489 := z.DecBinary()
				_ = yym1489
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1488), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1486)
		} // end switch yys1486
	} // end for yyj1486
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SoftNodeAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1490 int
	var yyb1490 bool
	var yyhl1490 bool = l >= 0
	yyj1490++
	if yyhl1490 {
		yyb1490 = yyj1490 > l
	} else {
		yyb1490 = r.CheckBreak()
	}
	if yyb1490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1490++
	if yyhl1490 {
		yyb1490 = yyj1490 > l
	} else {
		yyb1490 = r.CheckBreak()
	}
	if yyb1490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1492 := &x.MatchExpressions
		yym1493 := z.DecBinary()
		_ = yym1493
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1492), d)
		}
	}
	for {
		yyj1490++
		if yyhl1490 {
			yyb1490 = yyj1490 > l
		} else {
			yyb1490 = r.CheckBreak()
		}
		if yyb1490 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1490-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1494 := z.EncBinary()
		_ = yym1494
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1495 := !z.EncBinary()
			yy2arr1495 := z.EncBasicHandle().StructToArray
			var yyq1495 [16]bool
			_, _, _ = yysep1495, yyq1495, yy2arr1495
			const yyr1495 bool = false
			yyq1495[0] = len(x.Volumes) != 0
			yyq1495[2] = x.RestartPolicy != ""
			yyq1495[3] = x.TerminationGracePeriodSeconds != nil
			yyq1495[4] = x.ActiveDeadlineSeconds != nil
			yyq1495[5] = x.DNSPolicy != ""
			yyq1495[6] = len(x.NodeSelector) != 0
			yyq1495[7] = x.Affinity != nil
			yyq1495[8] = x.ServiceAccountName != ""
			yyq1495[9] = x.DeprecatedServiceAccount != ""
			yyq1495[10] = x.NodeName != ""
			yyq1495[11] = x.HostNetwork != false
			yyq1495[12] = x.HostPID != false
			yyq1495[13] = x.HostIPC != false
			yyq1495[14] = x.SecurityContext != nil
			yyq1495[15] = len(x.ImagePullSecrets) != 0
			var yynn1495 int
			if yyr1495 || yy2arr1495 {
				r.EncodeArrayStart(16)
			} else {
				yynn1495 = 1
				for _, b := range yyq1495 {
					if b {
						yynn1495++
					}
				}
				r.EncodeMapStart(yynn1495)
				yynn1495 = 0
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1497 := z.EncBinary()
						_ = yym1497
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1495[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1498 := z.EncBinary()
						_ = yym1498
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1500 := z.EncBinary()
					_ = yym1500
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1501 := z.EncBinary()
					_ = yym1501
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1495[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1504 := *x.TerminationGracePeriodSeconds
						yym1505 := z.EncBinary()
						_ = yym1505
						if false {
						} else {
							r.EncodeInt(int64(yy1504))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1495[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1506 := *x.TerminationGracePeriodSeconds
						yym1507 := z.EncBinary()
						_ = yym1507
						if false {
						} else {
							r.EncodeInt(int64(yy1506))
						}
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1509 := *x.ActiveDeadlineSeconds
						yym1510 := z.EncBinary()
						_ = yym1510
						if false {
						} else {
							r.EncodeInt(int64(yy1509))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1495[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1511 := *x.ActiveDeadlineSeconds
						yym1512 := z.EncBinary()
						_ = yym1512
						if false {
						} else {
							r.EncodeInt(int64(yy1511))
						}
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1495[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1515 := z.EncBinary()
						_ = yym1515
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1495[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1516 := z.EncBinary()
						_ = yym1516
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[7] {
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1495[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("affinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[8] {
					yym1519 := z.EncBinary()
					_ = yym1519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1495[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1520 := z.EncBinary()
					_ = yym1520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[9] {
					yym1522 := z.EncBinary()
					_ = yym1522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1495[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1523 := z.EncBinary()
					_ = yym1523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[10] {
					yym1525 := z.EncBinary()
					_ = yym1525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1495[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1526 := z.EncBinary()
					_ = yym1526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[11] {
					yym1528 := z.EncBinary()
					_ = yym1528
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1495[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1529 := z.EncBinary()
					_ = yym1529
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[12] {
					yym1531 := z.EncBinary()
					_ = yym1531
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1495[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1532 := z.EncBinary()
					_ = yym1532
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[13] {
					yym1534 := z.EncBinary()
					_ = yym1534
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1495[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1535 := z.EncBinary()
					_ = yym1535
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1495[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[15] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1538 := z.EncBinary()
						_ = yym1538
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1495[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1539 := z.EncBinary()
						_ = yym1539
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1540 := z.DecBinary()
	_ = yym1540
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1541 := r.ContainerType()
		if yyct1541 == codecSelferValueTypeMap1234 {
			yyl1541 := r.ReadMapStart()
			if yyl1541 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1541, d)
			}
		} else if yyct1541 == codecSelferValueTypeArray1234 {
			yyl1541 := r.ReadArrayStart()
			if yyl1541 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1541, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1542Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1542Slc
	var yyhl1542 bool = l >= 0
	for yyj1542 := 0; ; yyj1542++ {
		if yyhl1542 {
			if yyj1542 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1542Slc = r.DecodeBytes(yys1542Slc, true, true)
		yys1542 := string(yys1542Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1542 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1543 := &x.Volumes
				yym1544 := z.DecBinary()
				_ = yym1544
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1543), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1545 := &x.Containers
				yym1546 := z.DecBinary()
				_ = yym1546
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1545), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1549 := z.DecBinary()
				_ = yym1549
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1551 := z.DecBinary()
				_ = yym1551
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1553 := &x.NodeSelector
				yym1554 := z.DecBinary()
				_ = yym1554
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1553, false, d)
				}
			}
		case "affinity":
			if r.TryDecodeAsNil() {
				if x.Affinity != nil {
					x.Affinity = nil
				}
			} else {
				if x.Affinity == nil {
					x.Affinity = new(Affinity)
				}
				x.Affinity.CodecDecodeSelf(d)
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1563 := &x.ImagePullSecrets
				yym1564 := z.DecBinary()
				_ = yym1564
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1563), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1542)
		} // end switch yys1542
	} // end for yyj1542
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1565 int
	var yyb1565 bool
	var yyhl1565 bool = l >= 0
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1566 := &x.Volumes
		yym1567 := z.DecBinary()
		_ = yym1567
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1566), d)
		}
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1568 := &x.Containers
		yym1569 := z.DecBinary()
		_ = yym1569
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1568), d)
		}
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1572 := z.DecBinary()
		_ = yym1572
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1574 := z.DecBinary()
		_ = yym1574
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1576 := &x.NodeSelector
		yym1577 := z.DecBinary()
		_ = yym1577
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1576, false, d)
		}
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Affinity != nil {
			x.Affinity = nil
		}
	} else {
		if x.Affinity == nil {
			x.Affinity = new(Affinity)
		}
		x.Affinity.CodecDecodeSelf(d)
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1586 := &x.ImagePullSecrets
		yym1587 := z.DecBinary()
		_ = yym1587
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1586), d)
		}
	}
	for {
		yyj1565++
		if yyhl1565 {
			yyb1565 = yyj1565 > l
		} else {
			yyb1565 = r.CheckBreak()
		}
		if yyb1565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1588 := z.EncBinary()
		_ = yym1588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1589 := !z.EncBinary()
			yy2arr1589 := z.EncBasicHandle().StructToArray
			var yyq1589 [5]bool
			_, _, _ = yysep1589, yyq1589, yy2arr1589
			const yyr1589 bool = false
			yyq1589[0] = x.SELinuxOptions != nil
			yyq1589[1] = x.RunAsUser != nil
			yyq1589[2] = x.RunAsNonRoot != nil
			yyq1589[3] = len(x.SupplementalGroups) != 0
			yyq1589[4] = x.FSGroup != nil
			var yynn1589 int
			if yyr1589 || yy2arr1589 {
				r.EncodeArrayStart(5)
			} else {
				yynn1589 = 0
				for _, b := range yyq1589 {
					if b {
						yynn1589++
					}
				}
				r.EncodeMapStart(yynn1589)
				yynn1589 = 0
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1589[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1589[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1592 := *x.RunAsUser
						yym1593 := z.EncBinary()
						_ = yym1593
						if false {
						} else {
							r.EncodeInt(int64(yy1592))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1594 := *x.RunAsUser
						yym1595 := z.EncBinary()
						_ = yym1595
						if false {
						} else {
							r.EncodeInt(int64(yy1594))
						}
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1589[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1597 := *x.RunAsNonRoot
						yym1598 := z.EncBinary()
						_ = yym1598
						if false {
						} else {
							r.EncodeBool(bool(yy1597))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1599 := *x.RunAsNonRoot
						yym1600 := z.EncBinary()
						_ = yym1600
						if false {
						} else {
							r.EncodeBool(bool(yy1599))
						}
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1589[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1602 := z.EncBinary()
						_ = yym1602
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1603 := z.EncBinary()
						_ = yym1603
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1589[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1605 := *x.FSGroup
						yym1606 := z.EncBinary()
						_ = yym1606
						if false {
						} else {
							r.EncodeInt(int64(yy1605))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1607 := *x.FSGroup
						yym1608 := z.EncBinary()
						_ = yym1608
						if false {
						} else {
							r.EncodeInt(int64(yy1607))
						}
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1609 := z.DecBinary()
	_ = yym1609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1610 := r.ContainerType()
		if yyct1610 == codecSelferValueTypeMap1234 {
			yyl1610 := r.ReadMapStart()
			if yyl1610 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1610, d)
			}
		} else if yyct1610 == codecSelferValueTypeArray1234 {
			yyl1610 := r.ReadArrayStart()
			if yyl1610 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1610, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1611Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1611Slc
	var yyhl1611 bool = l >= 0
	for yyj1611 := 0; ; yyj1611++ {
		if yyhl1611 {
			if yyj1611 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1611Slc = r.DecodeBytes(yys1611Slc, true, true)
		yys1611 := string(yys1611Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1611 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1614 := z.DecBinary()
				_ = yym1614
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1616 := z.DecBinary()
				_ = yym1616
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1617 := &x.SupplementalGroups
				yym1618 := z.DecBinary()
				_ = yym1618
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1617, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1620 := z.DecBinary()
				_ = yym1620
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1611)
		} // end switch yys1611
	} // end for yyj1611
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1621 int
	var yyb1621 bool
	var yyhl1621 bool = l >= 0
	yyj1621++
	if yyhl1621 {
		yyb1621 = yyj1621 > l
	} else {
		yyb1621 = r.CheckBreak()
	}
	if yyb1621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1621++
	if yyhl1621 {
		yyb1621 = yyj1621 > l
	} else {
		yyb1621 = r.CheckBreak()
	}
	if yyb1621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1624 := z.DecBinary()
		_ = yym1624
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1621++
	if yyhl1621 {
		yyb1621 = yyj1621 > l
	} else {
		yyb1621 = r.CheckBreak()
	}
	if yyb1621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1626 := z.DecBinary()
		_ = yym1626
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1621++
	if yyhl1621 {
		yyb1621 = yyj1621 > l
	} else {
		yyb1621 = r.CheckBreak()
	}
	if yyb1621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1627 := &x.SupplementalGroups
		yym1628 := z.DecBinary()
		_ = yym1628
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1627, false, d)
		}
	}
	yyj1621++
	if yyhl1621 {
		yyb1621 = yyj1621 > l
	} else {
		yyb1621 = r.CheckBreak()
	}
	if yyb1621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1630 := z.DecBinary()
		_ = yym1630
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1621++
		if yyhl1621 {
			yyb1621 = yyj1621 > l
		} else {
			yyb1621 = r.CheckBreak()
		}
		if yyb1621 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1621-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1631 := z.EncBinary()
		_ = yym1631
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1632 := !z.EncBinary()
			yy2arr1632 := z.EncBasicHandle().StructToArray
			var yyq1632 [8]bool
			_, _, _ = yysep1632, yyq1632, yy2arr1632
			const yyr1632 bool = false
			yyq1632[0] = x.Phase != ""
			yyq1632[1] = len(x.Conditions) != 0
			yyq1632[2] = x.Message != ""
			yyq1632[3] = x.Reason != ""
			yyq1632[4] = x.HostIP != ""
			yyq1632[5] = x.PodIP != ""
			yyq1632[6] = x.StartTime != nil
			yyq1632[7] = len(x.ContainerStatuses) != 0
			var yynn1632 int
			if yyr1632 || yy2arr1632 {
				r.EncodeArrayStart(8)
			} else {
				yynn1632 = 0
				for _, b := range yyq1632 {
					if b {
						yynn1632++
					}
				}
				r.EncodeMapStart(yynn1632)
				yynn1632 = 0
			}
			if yyr1632 || yy2arr1632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1632[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1632[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1632 || yy2arr1632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1632[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1635 := z.EncBinary()
						_ = yym1635
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1632[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1636 := z.EncBinary()
						_ = yym1636
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1632 || yy2arr1632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1632[2] {
					yym1638 := z.EncBinary()
					_ = yym1638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1632[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1639 := z.EncBinary()
					_ = yym1639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1632 || yy2arr1632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1632[3] {
					yym1641 := z.EncBinary()
					_ = yym1641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1632[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1642 := z.EncBinary()
					_ = yym1642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1632 || yy2arr1632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1632[4] {
					yym1644 := z.EncBinary()
					_ = yym1644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1632[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1645 := z.EncBinary()
					_ = yym1645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1632 || yy2arr1632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1632[5] {
					yym1647 := z.EncBinary()
					_ = yym1647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1632[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1648 := z.EncBinary()
					_ = yym1648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1632 || yy2arr1632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1632[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1650 := z.EncBinary()
						_ = yym1650
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1650 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1650 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1632[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1651 := z.EncBinary()
						_ = yym1651
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1651 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1651 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1632 || yy2arr1632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1632[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1653 := z.EncBinary()
						_ = yym1653
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1632[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1654 := z.EncBinary()
						_ = yym1654
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1632 || yy2arr1632 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1655 := z.DecBinary()
	_ = yym1655
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1656 := r.ContainerType()
		if yyct1656 == codecSelferValueTypeMap1234 {
			yyl1656 := r.ReadMapStart()
			if yyl1656 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1656, d)
			}
		} else if yyct1656 == codecSelferValueTypeArray1234 {
			yyl1656 := r.ReadArrayStart()
			if yyl1656 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1656, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1657Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1657Slc
	var yyhl1657 bool = l >= 0
	for yyj1657 := 0; ; yyj1657++ {
		if yyhl1657 {
			if yyj1657 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1657Slc = r.DecodeBytes(yys1657Slc, true, true)
		yys1657 := string(yys1657Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1657 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1659 := &x.Conditions
				yym1660 := z.DecBinary()
				_ = yym1660
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1659), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1666 := z.DecBinary()
				_ = yym1666
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1666 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1666 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1667 := &x.ContainerStatuses
				yym1668 := z.DecBinary()
				_ = yym1668
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1667), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1657)
		} // end switch yys1657
	} // end for yyj1657
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1669 int
	var yyb1669 bool
	var yyhl1669 bool = l >= 0
	yyj1669++
	if yyhl1669 {
		yyb1669 = yyj1669 > l
	} else {
		yyb1669 = r.CheckBreak()
	}
	if yyb1669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1669++
	if yyhl1669 {
		yyb1669 = yyj1669 > l
	} else {
		yyb1669 = r.CheckBreak()
	}
	if yyb1669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1671 := &x.Conditions
		yym1672 := z.DecBinary()
		_ = yym1672
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1671), d)
		}
	}
	yyj1669++
	if yyhl1669 {
		yyb1669 = yyj1669 > l
	} else {
		yyb1669 = r.CheckBreak()
	}
	if yyb1669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1669++
	if yyhl1669 {
		yyb1669 = yyj1669 > l
	} else {
		yyb1669 = r.CheckBreak()
	}
	if yyb1669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1669++
	if yyhl1669 {
		yyb1669 = yyj1669 > l
	} else {
		yyb1669 = r.CheckBreak()
	}
	if yyb1669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1669++
	if yyhl1669 {
		yyb1669 = yyj1669 > l
	} else {
		yyb1669 = r.CheckBreak()
	}
	if yyb1669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1669++
	if yyhl1669 {
		yyb1669 = yyj1669 > l
	} else {
		yyb1669 = r.CheckBreak()
	}
	if yyb1669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1678 := z.DecBinary()
		_ = yym1678
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1678 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1678 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1669++
	if yyhl1669 {
		yyb1669 = yyj1669 > l
	} else {
		yyb1669 = r.CheckBreak()
	}
	if yyb1669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1679 := &x.ContainerStatuses
		yym1680 := z.DecBinary()
		_ = yym1680
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1679), d)
		}
	}
	for {
		yyj1669++
		if yyhl1669 {
			yyb1669 = yyj1669 > l
		} else {
			yyb1669 = r.CheckBreak()
		}
		if yyb1669 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1669-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1681 := z.EncBinary()
		_ = yym1681
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1682 := !z.EncBinary()
			yy2arr1682 := z.EncBasicHandle().StructToArray
			var yyq1682 [4]bool
			_, _, _ = yysep1682, yyq1682, yy2arr1682
			const yyr1682 bool = false
			yyq1682[0] = x.Kind != ""
			yyq1682[1] = x.APIVersion != ""
			yyq1682[2] = true
			yyq1682[3] = true
			var yynn1682 int
			if yyr1682 || yy2arr1682 {
				r.EncodeArrayStart(4)
			} else {
				yynn1682 = 0
				for _, b := range yyq1682 {
					if b {
						yynn1682++
					}
				}
				r.EncodeMapStart(yynn1682)
				yynn1682 = 0
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[0] {
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1682[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1685 := z.EncBinary()
					_ = yym1685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[1] {
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1682[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1688 := z.EncBinary()
					_ = yym1688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[2] {
					yy1690 := &x.ObjectMeta
					yy1690.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1682[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1691 := &x.ObjectMeta
					yy1691.CodecEncodeSelf(e)
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[3] {
					yy1693 := &x.Status
					yy1693.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1682[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1694 := &x.Status
					yy1694.CodecEncodeSelf(e)
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1695 := z.DecBinary()
	_ = yym1695
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1696 := r.ContainerType()
		if yyct1696 == codecSelferValueTypeMap1234 {
			yyl1696 := r.ReadMapStart()
			if yyl1696 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1696, d)
			}
		} else if yyct1696 == codecSelferValueTypeArray1234 {
			yyl1696 := r.ReadArrayStart()
			if yyl1696 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1696, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1697Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1697Slc
	var yyhl1697 bool = l >= 0
	for yyj1697 := 0; ; yyj1697++ {
		if yyhl1697 {
			if yyj1697 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1697Slc = r.DecodeBytes(yys1697Slc, true, true)
		yys1697 := string(yys1697Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1697 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1700 := &x.ObjectMeta
				yyv1700.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1701 := &x.Status
				yyv1701.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1697)
		} // end switch yys1697
	} // end for yyj1697
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1702 int
	var yyb1702 bool
	var yyhl1702 bool = l >= 0
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1705 := &x.ObjectMeta
		yyv1705.CodecDecodeSelf(d)
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1706 := &x.Status
		yyv1706.CodecDecodeSelf(d)
	}
	for {
		yyj1702++
		if yyhl1702 {
			yyb1702 = yyj1702 > l
		} else {
			yyb1702 = r.CheckBreak()
		}
		if yyb1702 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1702-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1707 := z.EncBinary()
		_ = yym1707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1708 := !z.EncBinary()
			yy2arr1708 := z.EncBasicHandle().StructToArray
			var yyq1708 [5]bool
			_, _, _ = yysep1708, yyq1708, yy2arr1708
			const yyr1708 bool = false
			yyq1708[0] = x.Kind != ""
			yyq1708[1] = x.APIVersion != ""
			yyq1708[2] = true
			yyq1708[3] = true
			yyq1708[4] = true
			var yynn1708 int
			if yyr1708 || yy2arr1708 {
				r.EncodeArrayStart(5)
			} else {
				yynn1708 = 0
				for _, b := range yyq1708 {
					if b {
						yynn1708++
					}
				}
				r.EncodeMapStart(yynn1708)
				yynn1708 = 0
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[0] {
					yym1710 := z.EncBinary()
					_ = yym1710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1708[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1711 := z.EncBinary()
					_ = yym1711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[1] {
					yym1713 := z.EncBinary()
					_ = yym1713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1708[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1714 := z.EncBinary()
					_ = yym1714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[2] {
					yy1716 := &x.ObjectMeta
					yy1716.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1708[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1717 := &x.ObjectMeta
					yy1717.CodecEncodeSelf(e)
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[3] {
					yy1719 := &x.Spec
					yy1719.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1708[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1720 := &x.Spec
					yy1720.CodecEncodeSelf(e)
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[4] {
					yy1722 := &x.Status
					yy1722.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1708[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1723 := &x.Status
					yy1723.CodecEncodeSelf(e)
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1724 := z.DecBinary()
	_ = yym1724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1725 := r.ContainerType()
		if yyct1725 == codecSelferValueTypeMap1234 {
			yyl1725 := r.ReadMapStart()
			if yyl1725 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1725, d)
			}
		} else if yyct1725 == codecSelferValueTypeArray1234 {
			yyl1725 := r.ReadArrayStart()
			if yyl1725 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1725, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1726Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1726Slc
	var yyhl1726 bool = l >= 0
	for yyj1726 := 0; ; yyj1726++ {
		if yyhl1726 {
			if yyj1726 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1726Slc = r.DecodeBytes(yys1726Slc, true, true)
		yys1726 := string(yys1726Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1726 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1729 := &x.ObjectMeta
				yyv1729.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1730 := &x.Spec
				yyv1730.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1731 := &x.Status
				yyv1731.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1726)
		} // end switch yys1726
	} // end for yyj1726
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1732 int
	var yyb1732 bool
	var yyhl1732 bool = l >= 0
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1735 := &x.ObjectMeta
		yyv1735.CodecDecodeSelf(d)
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1736 := &x.Spec
		yyv1736.CodecDecodeSelf(d)
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1737 := &x.Status
		yyv1737.CodecDecodeSelf(d)
	}
	for {
		yyj1732++
		if yyhl1732 {
			yyb1732 = yyj1732 > l
		} else {
			yyb1732 = r.CheckBreak()
		}
		if yyb1732 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1732-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1738 := z.EncBinary()
		_ = yym1738
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1739 := !z.EncBinary()
			yy2arr1739 := z.EncBasicHandle().StructToArray
			var yyq1739 [4]bool
			_, _, _ = yysep1739, yyq1739, yy2arr1739
			const yyr1739 bool = false
			yyq1739[0] = x.Kind != ""
			yyq1739[1] = x.APIVersion != ""
			yyq1739[2] = true
			var yynn1739 int
			if yyr1739 || yy2arr1739 {
				r.EncodeArrayStart(4)
			} else {
				yynn1739 = 1
				for _, b := range yyq1739 {
					if b {
						yynn1739++
					}
				}
				r.EncodeMapStart(yynn1739)
				yynn1739 = 0
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1739[0] {
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1739[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1742 := z.EncBinary()
					_ = yym1742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1739[1] {
					yym1744 := z.EncBinary()
					_ = yym1744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1739[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1745 := z.EncBinary()
					_ = yym1745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1739[2] {
					yy1747 := &x.ListMeta
					yym1748 := z.EncBinary()
					_ = yym1748
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1747) {
					} else {
						z.EncFallback(yy1747)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1739[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1749 := &x.ListMeta
					yym1750 := z.EncBinary()
					_ = yym1750
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1749) {
					} else {
						z.EncFallback(yy1749)
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1752 := z.EncBinary()
					_ = yym1752
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1753 := z.EncBinary()
					_ = yym1753
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1754 := z.DecBinary()
	_ = yym1754
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1755 := r.ContainerType()
		if yyct1755 == codecSelferValueTypeMap1234 {
			yyl1755 := r.ReadMapStart()
			if yyl1755 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1755, d)
			}
		} else if yyct1755 == codecSelferValueTypeArray1234 {
			yyl1755 := r.ReadArrayStart()
			if yyl1755 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1755, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1756Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1756Slc
	var yyhl1756 bool = l >= 0
	for yyj1756 := 0; ; yyj1756++ {
		if yyhl1756 {
			if yyj1756 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1756Slc = r.DecodeBytes(yys1756Slc, true, true)
		yys1756 := string(yys1756Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1756 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1759 := &x.ListMeta
				yym1760 := z.DecBinary()
				_ = yym1760
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1759) {
				} else {
					z.DecFallback(yyv1759, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1761 := &x.Items
				yym1762 := z.DecBinary()
				_ = yym1762
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1761), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1756)
		} // end switch yys1756
	} // end for yyj1756
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1763 int
	var yyb1763 bool
	var yyhl1763 bool = l >= 0
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1766 := &x.ListMeta
		yym1767 := z.DecBinary()
		_ = yym1767
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1766) {
		} else {
			z.DecFallback(yyv1766, false)
		}
	}
	yyj1763++
	if yyhl1763 {
		yyb1763 = yyj1763 > l
	} else {
		yyb1763 = r.CheckBreak()
	}
	if yyb1763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1768 := &x.Items
		yym1769 := z.DecBinary()
		_ = yym1769
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1768), d)
		}
	}
	for {
		yyj1763++
		if yyhl1763 {
			yyb1763 = yyj1763 > l
		} else {
			yyb1763 = r.CheckBreak()
		}
		if yyb1763 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1763-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1770 := z.EncBinary()
		_ = yym1770
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1771 := !z.EncBinary()
			yy2arr1771 := z.EncBasicHandle().StructToArray
			var yyq1771 [2]bool
			_, _, _ = yysep1771, yyq1771, yy2arr1771
			const yyr1771 bool = false
			yyq1771[0] = true
			yyq1771[1] = true
			var yynn1771 int
			if yyr1771 || yy2arr1771 {
				r.EncodeArrayStart(2)
			} else {
				yynn1771 = 0
				for _, b := range yyq1771 {
					if b {
						yynn1771++
					}
				}
				r.EncodeMapStart(yynn1771)
				yynn1771 = 0
			}
			if yyr1771 || yy2arr1771 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1771[0] {
					yy1773 := &x.ObjectMeta
					yy1773.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1771[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1774 := &x.ObjectMeta
					yy1774.CodecEncodeSelf(e)
				}
			}
			if yyr1771 || yy2arr1771 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1771[1] {
					yy1776 := &x.Spec
					yy1776.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1771[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1777 := &x.Spec
					yy1777.CodecEncodeSelf(e)
				}
			}
			if yyr1771 || yy2arr1771 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1778 := z.DecBinary()
	_ = yym1778
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1779 := r.ContainerType()
		if yyct1779 == codecSelferValueTypeMap1234 {
			yyl1779 := r.ReadMapStart()
			if yyl1779 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1779, d)
			}
		} else if yyct1779 == codecSelferValueTypeArray1234 {
			yyl1779 := r.ReadArrayStart()
			if yyl1779 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1779, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1780Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1780Slc
	var yyhl1780 bool = l >= 0
	for yyj1780 := 0; ; yyj1780++ {
		if yyhl1780 {
			if yyj1780 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1780Slc = r.DecodeBytes(yys1780Slc, true, true)
		yys1780 := string(yys1780Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1780 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1781 := &x.ObjectMeta
				yyv1781.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1782 := &x.Spec
				yyv1782.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1780)
		} // end switch yys1780
	} // end for yyj1780
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1783 int
	var yyb1783 bool
	var yyhl1783 bool = l >= 0
	yyj1783++
	if yyhl1783 {
		yyb1783 = yyj1783 > l
	} else {
		yyb1783 = r.CheckBreak()
	}
	if yyb1783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1784 := &x.ObjectMeta
		yyv1784.CodecDecodeSelf(d)
	}
	yyj1783++
	if yyhl1783 {
		yyb1783 = yyj1783 > l
	} else {
		yyb1783 = r.CheckBreak()
	}
	if yyb1783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1785 := &x.Spec
		yyv1785.CodecDecodeSelf(d)
	}
	for {
		yyj1783++
		if yyhl1783 {
			yyb1783 = yyj1783 > l
		} else {
			yyb1783 = r.CheckBreak()
		}
		if yyb1783 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1783-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1786 := z.EncBinary()
		_ = yym1786
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1787 := !z.EncBinary()
			yy2arr1787 := z.EncBasicHandle().StructToArray
			var yyq1787 [4]bool
			_, _, _ = yysep1787, yyq1787, yy2arr1787
			const yyr1787 bool = false
			yyq1787[0] = x.Kind != ""
			yyq1787[1] = x.APIVersion != ""
			yyq1787[2] = true
			yyq1787[3] = true
			var yynn1787 int
			if yyr1787 || yy2arr1787 {
				r.EncodeArrayStart(4)
			} else {
				yynn1787 = 0
				for _, b := range yyq1787 {
					if b {
						yynn1787++
					}
				}
				r.EncodeMapStart(yynn1787)
				yynn1787 = 0
			}
			if yyr1787 || yy2arr1787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1787[0] {
					yym1789 := z.EncBinary()
					_ = yym1789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1787[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1790 := z.EncBinary()
					_ = yym1790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1787 || yy2arr1787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1787[1] {
					yym1792 := z.EncBinary()
					_ = yym1792
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1787[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1793 := z.EncBinary()
					_ = yym1793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1787 || yy2arr1787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1787[2] {
					yy1795 := &x.ObjectMeta
					yy1795.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1787[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1796 := &x.ObjectMeta
					yy1796.CodecEncodeSelf(e)
				}
			}
			if yyr1787 || yy2arr1787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1787[3] {
					yy1798 := &x.Template
					yy1798.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1787[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1799 := &x.Template
					yy1799.CodecEncodeSelf(e)
				}
			}
			if yyr1787 || yy2arr1787 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1800 := z.DecBinary()
	_ = yym1800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1801 := r.ContainerType()
		if yyct1801 == codecSelferValueTypeMap1234 {
			yyl1801 := r.ReadMapStart()
			if yyl1801 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1801, d)
			}
		} else if yyct1801 == codecSelferValueTypeArray1234 {
			yyl1801 := r.ReadArrayStart()
			if yyl1801 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1802Slc
	var yyhl1802 bool = l >= 0
	for yyj1802 := 0; ; yyj1802++ {
		if yyhl1802 {
			if yyj1802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1802Slc = r.DecodeBytes(yys1802Slc, true, true)
		yys1802 := string(yys1802Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1802 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1805 := &x.ObjectMeta
				yyv1805.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1806 := &x.Template
				yyv1806.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1802)
		} // end switch yys1802
	} // end for yyj1802
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1807 int
	var yyb1807 bool
	var yyhl1807 bool = l >= 0
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1810 := &x.ObjectMeta
		yyv1810.CodecDecodeSelf(d)
	}
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1811 := &x.Template
		yyv1811.CodecDecodeSelf(d)
	}
	for {
		yyj1807++
		if yyhl1807 {
			yyb1807 = yyj1807 > l
		} else {
			yyb1807 = r.CheckBreak()
		}
		if yyb1807 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1807-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1812 := z.EncBinary()
		_ = yym1812
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1813 := !z.EncBinary()
			yy2arr1813 := z.EncBasicHandle().StructToArray
			var yyq1813 [4]bool
			_, _, _ = yysep1813, yyq1813, yy2arr1813
			const yyr1813 bool = false
			yyq1813[0] = x.Kind != ""
			yyq1813[1] = x.APIVersion != ""
			yyq1813[2] = true
			var yynn1813 int
			if yyr1813 || yy2arr1813 {
				r.EncodeArrayStart(4)
			} else {
				yynn1813 = 1
				for _, b := range yyq1813 {
					if b {
						yynn1813++
					}
				}
				r.EncodeMapStart(yynn1813)
				yynn1813 = 0
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1813[0] {
					yym1815 := z.EncBinary()
					_ = yym1815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1813[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1816 := z.EncBinary()
					_ = yym1816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1813[1] {
					yym1818 := z.EncBinary()
					_ = yym1818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1813[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1819 := z.EncBinary()
					_ = yym1819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1813[2] {
					yy1821 := &x.ListMeta
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1821) {
					} else {
						z.EncFallback(yy1821)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1813[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1823 := &x.ListMeta
					yym1824 := z.EncBinary()
					_ = yym1824
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1823) {
					} else {
						z.EncFallback(yy1823)
					}
				}
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1826 := z.EncBinary()
					_ = yym1826
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1827 := z.EncBinary()
					_ = yym1827
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1828 := z.DecBinary()
	_ = yym1828
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1829 := r.ContainerType()
		if yyct1829 == codecSelferValueTypeMap1234 {
			yyl1829 := r.ReadMapStart()
			if yyl1829 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1829, d)
			}
		} else if yyct1829 == codecSelferValueTypeArray1234 {
			yyl1829 := r.ReadArrayStart()
			if yyl1829 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1829, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1830Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1830Slc
	var yyhl1830 bool = l >= 0
	for yyj1830 := 0; ; yyj1830++ {
		if yyhl1830 {
			if yyj1830 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1830Slc = r.DecodeBytes(yys1830Slc, true, true)
		yys1830 := string(yys1830Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1830 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1833 := &x.ListMeta
				yym1834 := z.DecBinary()
				_ = yym1834
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1833) {
				} else {
					z.DecFallback(yyv1833, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1835 := &x.Items
				yym1836 := z.DecBinary()
				_ = yym1836
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1835), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1830)
		} // end switch yys1830
	} // end for yyj1830
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1837 int
	var yyb1837 bool
	var yyhl1837 bool = l >= 0
	yyj1837++
	if yyhl1837 {
		yyb1837 = yyj1837 > l
	} else {
		yyb1837 = r.CheckBreak()
	}
	if yyb1837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1837++
	if yyhl1837 {
		yyb1837 = yyj1837 > l
	} else {
		yyb1837 = r.CheckBreak()
	}
	if yyb1837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1837++
	if yyhl1837 {
		yyb1837 = yyj1837 > l
	} else {
		yyb1837 = r.CheckBreak()
	}
	if yyb1837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1840 := &x.ListMeta
		yym1841 := z.DecBinary()
		_ = yym1841
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1840) {
		} else {
			z.DecFallback(yyv1840, false)
		}
	}
	yyj1837++
	if yyhl1837 {
		yyb1837 = yyj1837 > l
	} else {
		yyb1837 = r.CheckBreak()
	}
	if yyb1837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1842 := &x.Items
		yym1843 := z.DecBinary()
		_ = yym1843
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1842), d)
		}
	}
	for {
		yyj1837++
		if yyhl1837 {
			yyb1837 = yyj1837 > l
		} else {
			yyb1837 = r.CheckBreak()
		}
		if yyb1837 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1837-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1844 := z.EncBinary()
		_ = yym1844
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1845 := !z.EncBinary()
			yy2arr1845 := z.EncBasicHandle().StructToArray
			var yyq1845 [3]bool
			_, _, _ = yysep1845, yyq1845, yy2arr1845
			const yyr1845 bool = false
			yyq1845[0] = x.Replicas != nil
			yyq1845[1] = len(x.Selector) != 0
			yyq1845[2] = x.Template != nil
			var yynn1845 int
			if yyr1845 || yy2arr1845 {
				r.EncodeArrayStart(3)
			} else {
				yynn1845 = 0
				for _, b := range yyq1845 {
					if b {
						yynn1845++
					}
				}
				r.EncodeMapStart(yynn1845)
				yynn1845 = 0
			}
			if yyr1845 || yy2arr1845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1845[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1847 := *x.Replicas
						yym1848 := z.EncBinary()
						_ = yym1848
						if false {
						} else {
							r.EncodeInt(int64(yy1847))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1845[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1849 := *x.Replicas
						yym1850 := z.EncBinary()
						_ = yym1850
						if false {
						} else {
							r.EncodeInt(int64(yy1849))
						}
					}
				}
			}
			if yyr1845 || yy2arr1845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1845[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1852 := z.EncBinary()
						_ = yym1852
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1845[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1853 := z.EncBinary()
						_ = yym1853
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1845 || yy2arr1845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1845[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1845[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1845 || yy2arr1845 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1855 := z.DecBinary()
	_ = yym1855
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1856 := r.ContainerType()
		if yyct1856 == codecSelferValueTypeMap1234 {
			yyl1856 := r.ReadMapStart()
			if yyl1856 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1856, d)
			}
		} else if yyct1856 == codecSelferValueTypeArray1234 {
			yyl1856 := r.ReadArrayStart()
			if yyl1856 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1856, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1857Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1857Slc
	var yyhl1857 bool = l >= 0
	for yyj1857 := 0; ; yyj1857++ {
		if yyhl1857 {
			if yyj1857 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1857Slc = r.DecodeBytes(yys1857Slc, true, true)
		yys1857 := string(yys1857Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1857 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym1859 := z.DecBinary()
				_ = yym1859
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1860 := &x.Selector
				yym1861 := z.DecBinary()
				_ = yym1861
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1860, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1857)
		} // end switch yys1857
	} // end for yyj1857
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1863 int
	var yyb1863 bool
	var yyhl1863 bool = l >= 0
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym1865 := z.DecBinary()
		_ = yym1865
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1866 := &x.Selector
		yym1867 := z.DecBinary()
		_ = yym1867
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1866, false, d)
		}
	}
	yyj1863++
	if yyhl1863 {
		yyb1863 = yyj1863 > l
	} else {
		yyb1863 = r.CheckBreak()
	}
	if yyb1863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1863++
		if yyhl1863 {
			yyb1863 = yyj1863 > l
		} else {
			yyb1863 = r.CheckBreak()
		}
		if yyb1863 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1863-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1869 := z.EncBinary()
		_ = yym1869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1870 := !z.EncBinary()
			yy2arr1870 := z.EncBasicHandle().StructToArray
			var yyq1870 [2]bool
			_, _, _ = yysep1870, yyq1870, yy2arr1870
			const yyr1870 bool = false
			yyq1870[1] = x.ObservedGeneration != 0
			var yynn1870 int
			if yyr1870 || yy2arr1870 {
				r.EncodeArrayStart(2)
			} else {
				yynn1870 = 1
				for _, b := range yyq1870 {
					if b {
						yynn1870++
					}
				}
				r.EncodeMapStart(yynn1870)
				yynn1870 = 0
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1872 := z.EncBinary()
				_ = yym1872
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1873 := z.EncBinary()
				_ = yym1873
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1870[1] {
					yym1875 := z.EncBinary()
					_ = yym1875
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1870[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1876 := z.EncBinary()
					_ = yym1876
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1877 := z.DecBinary()
	_ = yym1877
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1878 := r.ContainerType()
		if yyct1878 == codecSelferValueTypeMap1234 {
			yyl1878 := r.ReadMapStart()
			if yyl1878 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1878, d)
			}
		} else if yyct1878 == codecSelferValueTypeArray1234 {
			yyl1878 := r.ReadArrayStart()
			if yyl1878 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1878, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1879Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1879Slc
	var yyhl1879 bool = l >= 0
	for yyj1879 := 0; ; yyj1879++ {
		if yyhl1879 {
			if yyj1879 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1879Slc = r.DecodeBytes(yys1879Slc, true, true)
		yys1879 := string(yys1879Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1879 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1879)
		} // end switch yys1879
	} // end for yyj1879
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1882 int
	var yyb1882 bool
	var yyhl1882 bool = l >= 0
	yyj1882++
	if yyhl1882 {
		yyb1882 = yyj1882 > l
	} else {
		yyb1882 = r.CheckBreak()
	}
	if yyb1882 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj1882++
	if yyhl1882 {
		yyb1882 = yyj1882 > l
	} else {
		yyb1882 = r.CheckBreak()
	}
	if yyb1882 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1882++
		if yyhl1882 {
			yyb1882 = yyj1882 > l
		} else {
			yyb1882 = r.CheckBreak()
		}
		if yyb1882 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1882-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1885 := z.EncBinary()
		_ = yym1885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1886 := !z.EncBinary()
			yy2arr1886 := z.EncBasicHandle().StructToArray
			var yyq1886 [5]bool
			_, _, _ = yysep1886, yyq1886, yy2arr1886
			const yyr1886 bool = false
			yyq1886[0] = x.Kind != ""
			yyq1886[1] = x.APIVersion != ""
			yyq1886[2] = true
			yyq1886[3] = true
			yyq1886[4] = true
			var yynn1886 int
			if yyr1886 || yy2arr1886 {
				r.EncodeArrayStart(5)
			} else {
				yynn1886 = 0
				for _, b := range yyq1886 {
					if b {
						yynn1886++
					}
				}
				r.EncodeMapStart(yynn1886)
				yynn1886 = 0
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[0] {
					yym1888 := z.EncBinary()
					_ = yym1888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1886[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1889 := z.EncBinary()
					_ = yym1889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[1] {
					yym1891 := z.EncBinary()
					_ = yym1891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1886[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1892 := z.EncBinary()
					_ = yym1892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[2] {
					yy1894 := &x.ObjectMeta
					yy1894.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1886[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1895 := &x.ObjectMeta
					yy1895.CodecEncodeSelf(e)
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[3] {
					yy1897 := &x.Spec
					yy1897.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1886[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1898 := &x.Spec
					yy1898.CodecEncodeSelf(e)
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[4] {
					yy1900 := &x.Status
					yy1900.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1886[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1901 := &x.Status
					yy1901.CodecEncodeSelf(e)
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1902 := z.DecBinary()
	_ = yym1902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1903 := r.ContainerType()
		if yyct1903 == codecSelferValueTypeMap1234 {
			yyl1903 := r.ReadMapStart()
			if yyl1903 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1903, d)
			}
		} else if yyct1903 == codecSelferValueTypeArray1234 {
			yyl1903 := r.ReadArrayStart()
			if yyl1903 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1904Slc
	var yyhl1904 bool = l >= 0
	for yyj1904 := 0; ; yyj1904++ {
		if yyhl1904 {
			if yyj1904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1904Slc = r.DecodeBytes(yys1904Slc, true, true)
		yys1904 := string(yys1904Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1904 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1907 := &x.ObjectMeta
				yyv1907.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1908 := &x.Spec
				yyv1908.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1909 := &x.Status
				yyv1909.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1904)
		} // end switch yys1904
	} // end for yyj1904
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1910 int
	var yyb1910 bool
	var yyhl1910 bool = l >= 0
	yyj1910++
	if yyhl1910 {
		yyb1910 = yyj1910 > l
	} else {
		yyb1910 = r.CheckBreak()
	}
	if yyb1910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1910++
	if yyhl1910 {
		yyb1910 = yyj1910 > l
	} else {
		yyb1910 = r.CheckBreak()
	}
	if yyb1910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1910++
	if yyhl1910 {
		yyb1910 = yyj1910 > l
	} else {
		yyb1910 = r.CheckBreak()
	}
	if yyb1910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1913 := &x.ObjectMeta
		yyv1913.CodecDecodeSelf(d)
	}
	yyj1910++
	if yyhl1910 {
		yyb1910 = yyj1910 > l
	} else {
		yyb1910 = r.CheckBreak()
	}
	if yyb1910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1914 := &x.Spec
		yyv1914.CodecDecodeSelf(d)
	}
	yyj1910++
	if yyhl1910 {
		yyb1910 = yyj1910 > l
	} else {
		yyb1910 = r.CheckBreak()
	}
	if yyb1910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1915 := &x.Status
		yyv1915.CodecDecodeSelf(d)
	}
	for {
		yyj1910++
		if yyhl1910 {
			yyb1910 = yyj1910 > l
		} else {
			yyb1910 = r.CheckBreak()
		}
		if yyb1910 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1910-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1916 := z.EncBinary()
		_ = yym1916
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1917 := !z.EncBinary()
			yy2arr1917 := z.EncBasicHandle().StructToArray
			var yyq1917 [4]bool
			_, _, _ = yysep1917, yyq1917, yy2arr1917
			const yyr1917 bool = false
			yyq1917[0] = x.Kind != ""
			yyq1917[1] = x.APIVersion != ""
			yyq1917[2] = true
			var yynn1917 int
			if yyr1917 || yy2arr1917 {
				r.EncodeArrayStart(4)
			} else {
				yynn1917 = 1
				for _, b := range yyq1917 {
					if b {
						yynn1917++
					}
				}
				r.EncodeMapStart(yynn1917)
				yynn1917 = 0
			}
			if yyr1917 || yy2arr1917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1917[0] {
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1917[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1920 := z.EncBinary()
					_ = yym1920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1917 || yy2arr1917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1917[1] {
					yym1922 := z.EncBinary()
					_ = yym1922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1917[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1923 := z.EncBinary()
					_ = yym1923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1917 || yy2arr1917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1917[2] {
					yy1925 := &x.ListMeta
					yym1926 := z.EncBinary()
					_ = yym1926
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1925) {
					} else {
						z.EncFallback(yy1925)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1917[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1927 := &x.ListMeta
					yym1928 := z.EncBinary()
					_ = yym1928
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1927) {
					} else {
						z.EncFallback(yy1927)
					}
				}
			}
			if yyr1917 || yy2arr1917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1930 := z.EncBinary()
					_ = yym1930
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1931 := z.EncBinary()
					_ = yym1931
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr1917 || yy2arr1917 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1932 := z.DecBinary()
	_ = yym1932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1933 := r.ContainerType()
		if yyct1933 == codecSelferValueTypeMap1234 {
			yyl1933 := r.ReadMapStart()
			if yyl1933 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1933, d)
			}
		} else if yyct1933 == codecSelferValueTypeArray1234 {
			yyl1933 := r.ReadArrayStart()
			if yyl1933 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1934Slc
	var yyhl1934 bool = l >= 0
	for yyj1934 := 0; ; yyj1934++ {
		if yyhl1934 {
			if yyj1934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1934Slc = r.DecodeBytes(yys1934Slc, true, true)
		yys1934 := string(yys1934Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1934 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1937 := &x.ListMeta
				yym1938 := z.DecBinary()
				_ = yym1938
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1937) {
				} else {
					z.DecFallback(yyv1937, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1939 := &x.Items
				yym1940 := z.DecBinary()
				_ = yym1940
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1939), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1934)
		} // end switch yys1934
	} // end for yyj1934
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1941 int
	var yyb1941 bool
	var yyhl1941 bool = l >= 0
	yyj1941++
	if yyhl1941 {
		yyb1941 = yyj1941 > l
	} else {
		yyb1941 = r.CheckBreak()
	}
	if yyb1941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1941++
	if yyhl1941 {
		yyb1941 = yyj1941 > l
	} else {
		yyb1941 = r.CheckBreak()
	}
	if yyb1941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1941++
	if yyhl1941 {
		yyb1941 = yyj1941 > l
	} else {
		yyb1941 = r.CheckBreak()
	}
	if yyb1941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1944 := &x.ListMeta
		yym1945 := z.DecBinary()
		_ = yym1945
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1944) {
		} else {
			z.DecFallback(yyv1944, false)
		}
	}
	yyj1941++
	if yyhl1941 {
		yyb1941 = yyj1941 > l
	} else {
		yyb1941 = r.CheckBreak()
	}
	if yyb1941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1946 := &x.Items
		yym1947 := z.DecBinary()
		_ = yym1947
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1946), d)
		}
	}
	for {
		yyj1941++
		if yyhl1941 {
			yyb1941 = yyj1941 > l
		} else {
			yyb1941 = r.CheckBreak()
		}
		if yyb1941 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1941-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1948 := z.EncBinary()
	_ = yym1948
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1949 := z.DecBinary()
	_ = yym1949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1950 := z.EncBinary()
	_ = yym1950
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1951 := z.DecBinary()
	_ = yym1951
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1952 := z.EncBinary()
		_ = yym1952
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1953 := !z.EncBinary()
			yy2arr1953 := z.EncBasicHandle().StructToArray
			var yyq1953 [1]bool
			_, _, _ = yysep1953, yyq1953, yy2arr1953
			const yyr1953 bool = false
			yyq1953[0] = true
			var yynn1953 int
			if yyr1953 || yy2arr1953 {
				r.EncodeArrayStart(1)
			} else {
				yynn1953 = 0
				for _, b := range yyq1953 {
					if b {
						yynn1953++
					}
				}
				r.EncodeMapStart(yynn1953)
				yynn1953 = 0
			}
			if yyr1953 || yy2arr1953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1953[0] {
					yy1955 := &x.LoadBalancer
					yy1955.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1953[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1956 := &x.LoadBalancer
					yy1956.CodecEncodeSelf(e)
				}
			}
			if yyr1953 || yy2arr1953 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1957 := z.DecBinary()
	_ = yym1957
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1958 := r.ContainerType()
		if yyct1958 == codecSelferValueTypeMap1234 {
			yyl1958 := r.ReadMapStart()
			if yyl1958 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1958, d)
			}
		} else if yyct1958 == codecSelferValueTypeArray1234 {
			yyl1958 := r.ReadArrayStart()
			if yyl1958 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1958, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1959Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1959Slc
	var yyhl1959 bool = l >= 0
	for yyj1959 := 0; ; yyj1959++ {
		if yyhl1959 {
			if yyj1959 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1959Slc = r.DecodeBytes(yys1959Slc, true, true)
		yys1959 := string(yys1959Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1959 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1960 := &x.LoadBalancer
				yyv1960.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1959)
		} // end switch yys1959
	} // end for yyj1959
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1961 int
	var yyb1961 bool
	var yyhl1961 bool = l >= 0
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1962 := &x.LoadBalancer
		yyv1962.CodecDecodeSelf(d)
	}
	for {
		yyj1961++
		if yyhl1961 {
			yyb1961 = yyj1961 > l
		} else {
			yyb1961 = r.CheckBreak()
		}
		if yyb1961 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1961-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1963 := z.EncBinary()
		_ = yym1963
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1964 := !z.EncBinary()
			yy2arr1964 := z.EncBasicHandle().StructToArray
			var yyq1964 [1]bool
			_, _, _ = yysep1964, yyq1964, yy2arr1964
			const yyr1964 bool = false
			yyq1964[0] = len(x.Ingress) != 0
			var yynn1964 int
			if yyr1964 || yy2arr1964 {
				r.EncodeArrayStart(1)
			} else {
				yynn1964 = 0
				for _, b := range yyq1964 {
					if b {
						yynn1964++
					}
				}
				r.EncodeMapStart(yynn1964)
				yynn1964 = 0
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1964[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1966 := z.EncBinary()
						_ = yym1966
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1964[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1967 := z.EncBinary()
						_ = yym1967
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1968 := z.DecBinary()
	_ = yym1968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1969 := r.ContainerType()
		if yyct1969 == codecSelferValueTypeMap1234 {
			yyl1969 := r.ReadMapStart()
			if yyl1969 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1969, d)
			}
		} else if yyct1969 == codecSelferValueTypeArray1234 {
			yyl1969 := r.ReadArrayStart()
			if yyl1969 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1969, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1970Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1970Slc
	var yyhl1970 bool = l >= 0
	for yyj1970 := 0; ; yyj1970++ {
		if yyhl1970 {
			if yyj1970 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1970Slc = r.DecodeBytes(yys1970Slc, true, true)
		yys1970 := string(yys1970Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1970 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1971 := &x.Ingress
				yym1972 := z.DecBinary()
				_ = yym1972
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1971), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1970)
		} // end switch yys1970
	} // end for yyj1970
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1973 int
	var yyb1973 bool
	var yyhl1973 bool = l >= 0
	yyj1973++
	if yyhl1973 {
		yyb1973 = yyj1973 > l
	} else {
		yyb1973 = r.CheckBreak()
	}
	if yyb1973 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1974 := &x.Ingress
		yym1975 := z.DecBinary()
		_ = yym1975
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1974), d)
		}
	}
	for {
		yyj1973++
		if yyhl1973 {
			yyb1973 = yyj1973 > l
		} else {
			yyb1973 = r.CheckBreak()
		}
		if yyb1973 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1973-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1976 := z.EncBinary()
		_ = yym1976
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1977 := !z.EncBinary()
			yy2arr1977 := z.EncBasicHandle().StructToArray
			var yyq1977 [2]bool
			_, _, _ = yysep1977, yyq1977, yy2arr1977
			const yyr1977 bool = false
			yyq1977[0] = x.IP != ""
			yyq1977[1] = x.Hostname != ""
			var yynn1977 int
			if yyr1977 || yy2arr1977 {
				r.EncodeArrayStart(2)
			} else {
				yynn1977 = 0
				for _, b := range yyq1977 {
					if b {
						yynn1977++
					}
				}
				r.EncodeMapStart(yynn1977)
				yynn1977 = 0
			}
			if yyr1977 || yy2arr1977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1977[0] {
					yym1979 := z.EncBinary()
					_ = yym1979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1977[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1980 := z.EncBinary()
					_ = yym1980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1977 || yy2arr1977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1977[1] {
					yym1982 := z.EncBinary()
					_ = yym1982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1977[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1983 := z.EncBinary()
					_ = yym1983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1977 || yy2arr1977 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1984 := z.DecBinary()
	_ = yym1984
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1985 := r.ContainerType()
		if yyct1985 == codecSelferValueTypeMap1234 {
			yyl1985 := r.ReadMapStart()
			if yyl1985 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1985, d)
			}
		} else if yyct1985 == codecSelferValueTypeArray1234 {
			yyl1985 := r.ReadArrayStart()
			if yyl1985 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1985, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1986Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1986Slc
	var yyhl1986 bool = l >= 0
	for yyj1986 := 0; ; yyj1986++ {
		if yyhl1986 {
			if yyj1986 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1986Slc = r.DecodeBytes(yys1986Slc, true, true)
		yys1986 := string(yys1986Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1986 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1986)
		} // end switch yys1986
	} // end for yyj1986
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1989 int
	var yyb1989 bool
	var yyhl1989 bool = l >= 0
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1989++
		if yyhl1989 {
			yyb1989 = yyj1989 > l
		} else {
			yyb1989 = r.CheckBreak()
		}
		if yyb1989 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1989-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1992 := z.EncBinary()
		_ = yym1992
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1993 := !z.EncBinary()
			yy2arr1993 := z.EncBasicHandle().StructToArray
			var yyq1993 [8]bool
			_, _, _ = yysep1993, yyq1993, yy2arr1993
			const yyr1993 bool = false
			yyq1993[1] = len(x.Selector) != 0
			yyq1993[2] = x.ClusterIP != ""
			yyq1993[3] = x.Type != ""
			yyq1993[4] = len(x.ExternalIPs) != 0
			yyq1993[5] = len(x.DeprecatedPublicIPs) != 0
			yyq1993[6] = x.SessionAffinity != ""
			yyq1993[7] = x.LoadBalancerIP != ""
			var yynn1993 int
			if yyr1993 || yy2arr1993 {
				r.EncodeArrayStart(8)
			} else {
				yynn1993 = 1
				for _, b := range yyq1993 {
					if b {
						yynn1993++
					}
				}
				r.EncodeMapStart(yynn1993)
				yynn1993 = 0
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1995 := z.EncBinary()
					_ = yym1995
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1996 := z.EncBinary()
					_ = yym1996
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1998 := z.EncBinary()
						_ = yym1998
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1993[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1999 := z.EncBinary()
						_ = yym1999
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[2] {
					yym2001 := z.EncBinary()
					_ = yym2001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1993[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2002 := z.EncBinary()
					_ = yym2002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1993[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2005 := z.EncBinary()
						_ = yym2005
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1993[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2006 := z.EncBinary()
						_ = yym2006
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2008 := z.EncBinary()
						_ = yym2008
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1993[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2009 := z.EncBinary()
						_ = yym2009
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1993[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[7] {
					yym2012 := z.EncBinary()
					_ = yym2012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1993[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2013 := z.EncBinary()
					_ = yym2013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2014 := z.DecBinary()
	_ = yym2014
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2015 := r.ContainerType()
		if yyct2015 == codecSelferValueTypeMap1234 {
			yyl2015 := r.ReadMapStart()
			if yyl2015 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2015, d)
			}
		} else if yyct2015 == codecSelferValueTypeArray1234 {
			yyl2015 := r.ReadArrayStart()
			if yyl2015 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2015, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2016Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2016Slc
	var yyhl2016 bool = l >= 0
	for yyj2016 := 0; ; yyj2016++ {
		if yyhl2016 {
			if yyj2016 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2016Slc = r.DecodeBytes(yys2016Slc, true, true)
		yys2016 := string(yys2016Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2016 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2017 := &x.Ports
				yym2018 := z.DecBinary()
				_ = yym2018
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2017), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2019 := &x.Selector
				yym2020 := z.DecBinary()
				_ = yym2020
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2019, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2023 := &x.ExternalIPs
				yym2024 := z.DecBinary()
				_ = yym2024
				if false {
				} else {
					z.F.DecSliceStringX(yyv2023, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2025 := &x.DeprecatedPublicIPs
				yym2026 := z.DecBinary()
				_ = yym2026
				if false {
				} else {
					z.F.DecSliceStringX(yyv2025, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2016)
		} // end switch yys2016
	} // end for yyj2016
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2029 int
	var yyb2029 bool
	var yyhl2029 bool = l >= 0
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2030 := &x.Ports
		yym2031 := z.DecBinary()
		_ = yym2031
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2030), d)
		}
	}
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2032 := &x.Selector
		yym2033 := z.DecBinary()
		_ = yym2033
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2032, false, d)
		}
	}
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2036 := &x.ExternalIPs
		yym2037 := z.DecBinary()
		_ = yym2037
		if false {
		} else {
			z.F.DecSliceStringX(yyv2036, false, d)
		}
	}
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2038 := &x.DeprecatedPublicIPs
		yym2039 := z.DecBinary()
		_ = yym2039
		if false {
		} else {
			z.F.DecSliceStringX(yyv2038, false, d)
		}
	}
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj2029++
		if yyhl2029 {
			yyb2029 = yyj2029 > l
		} else {
			yyb2029 = r.CheckBreak()
		}
		if yyb2029 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2029-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2042 := z.EncBinary()
		_ = yym2042
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2043 := !z.EncBinary()
			yy2arr2043 := z.EncBasicHandle().StructToArray
			var yyq2043 [5]bool
			_, _, _ = yysep2043, yyq2043, yy2arr2043
			const yyr2043 bool = false
			yyq2043[0] = x.Name != ""
			yyq2043[1] = x.Protocol != ""
			yyq2043[3] = true
			yyq2043[4] = x.NodePort != 0
			var yynn2043 int
			if yyr2043 || yy2arr2043 {
				r.EncodeArrayStart(5)
			} else {
				yynn2043 = 1
				for _, b := range yyq2043 {
					if b {
						yynn2043++
					}
				}
				r.EncodeMapStart(yynn2043)
				yynn2043 = 0
			}
			if yyr2043 || yy2arr2043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2043[0] {
					yym2045 := z.EncBinary()
					_ = yym2045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2043[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2046 := z.EncBinary()
					_ = yym2046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2043 || yy2arr2043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2043[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2043[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2043 || yy2arr2043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2049 := z.EncBinary()
				_ = yym2049
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2050 := z.EncBinary()
				_ = yym2050
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2043 || yy2arr2043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2043[3] {
					yy2052 := &x.TargetPort
					yym2053 := z.EncBinary()
					_ = yym2053
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2052) {
					} else if !yym2053 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2052)
					} else {
						z.EncFallback(yy2052)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2043[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2054 := &x.TargetPort
					yym2055 := z.EncBinary()
					_ = yym2055
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2054) {
					} else if !yym2055 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2054)
					} else {
						z.EncFallback(yy2054)
					}
				}
			}
			if yyr2043 || yy2arr2043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2043[4] {
					yym2057 := z.EncBinary()
					_ = yym2057
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2043[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2058 := z.EncBinary()
					_ = yym2058
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2043 || yy2arr2043 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2059 := z.DecBinary()
	_ = yym2059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2060 := r.ContainerType()
		if yyct2060 == codecSelferValueTypeMap1234 {
			yyl2060 := r.ReadMapStart()
			if yyl2060 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2060, d)
			}
		} else if yyct2060 == codecSelferValueTypeArray1234 {
			yyl2060 := r.ReadArrayStart()
			if yyl2060 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2060, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2061Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2061Slc
	var yyhl2061 bool = l >= 0
	for yyj2061 := 0; ; yyj2061++ {
		if yyhl2061 {
			if yyj2061 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2061Slc = r.DecodeBytes(yys2061Slc, true, true)
		yys2061 := string(yys2061Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2061 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv2065 := &x.TargetPort
				yym2066 := z.DecBinary()
				_ = yym2066
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2065) {
				} else if !yym2066 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2065)
				} else {
					z.DecFallback(yyv2065, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2061)
		} // end switch yys2061
	} // end for yyj2061
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2068 int
	var yyb2068 bool
	var yyhl2068 bool = l >= 0
	yyj2068++
	if yyhl2068 {
		yyb2068 = yyj2068 > l
	} else {
		yyb2068 = r.CheckBreak()
	}
	if yyb2068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2068++
	if yyhl2068 {
		yyb2068 = yyj2068 > l
	} else {
		yyb2068 = r.CheckBreak()
	}
	if yyb2068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2068++
	if yyhl2068 {
		yyb2068 = yyj2068 > l
	} else {
		yyb2068 = r.CheckBreak()
	}
	if yyb2068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2068++
	if yyhl2068 {
		yyb2068 = yyj2068 > l
	} else {
		yyb2068 = r.CheckBreak()
	}
	if yyb2068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv2072 := &x.TargetPort
		yym2073 := z.DecBinary()
		_ = yym2073
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2072) {
		} else if !yym2073 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2072)
		} else {
			z.DecFallback(yyv2072, false)
		}
	}
	yyj2068++
	if yyhl2068 {
		yyb2068 = yyj2068 > l
	} else {
		yyb2068 = r.CheckBreak()
	}
	if yyb2068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2068++
		if yyhl2068 {
			yyb2068 = yyj2068 > l
		} else {
			yyb2068 = r.CheckBreak()
		}
		if yyb2068 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2068-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2075 := z.EncBinary()
		_ = yym2075
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2076 := !z.EncBinary()
			yy2arr2076 := z.EncBasicHandle().StructToArray
			var yyq2076 [5]bool
			_, _, _ = yysep2076, yyq2076, yy2arr2076
			const yyr2076 bool = false
			yyq2076[0] = x.Kind != ""
			yyq2076[1] = x.APIVersion != ""
			yyq2076[2] = true
			yyq2076[3] = true
			yyq2076[4] = true
			var yynn2076 int
			if yyr2076 || yy2arr2076 {
				r.EncodeArrayStart(5)
			} else {
				yynn2076 = 0
				for _, b := range yyq2076 {
					if b {
						yynn2076++
					}
				}
				r.EncodeMapStart(yynn2076)
				yynn2076 = 0
			}
			if yyr2076 || yy2arr2076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2076[0] {
					yym2078 := z.EncBinary()
					_ = yym2078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2076[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2079 := z.EncBinary()
					_ = yym2079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2076 || yy2arr2076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2076[1] {
					yym2081 := z.EncBinary()
					_ = yym2081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2076[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2082 := z.EncBinary()
					_ = yym2082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2076 || yy2arr2076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2076[2] {
					yy2084 := &x.ObjectMeta
					yy2084.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2076[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2085 := &x.ObjectMeta
					yy2085.CodecEncodeSelf(e)
				}
			}
			if yyr2076 || yy2arr2076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2076[3] {
					yy2087 := &x.Spec
					yy2087.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2076[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2088 := &x.Spec
					yy2088.CodecEncodeSelf(e)
				}
			}
			if yyr2076 || yy2arr2076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2076[4] {
					yy2090 := &x.Status
					yy2090.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2076[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2091 := &x.Status
					yy2091.CodecEncodeSelf(e)
				}
			}
			if yyr2076 || yy2arr2076 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2092 := z.DecBinary()
	_ = yym2092
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2093 := r.ContainerType()
		if yyct2093 == codecSelferValueTypeMap1234 {
			yyl2093 := r.ReadMapStart()
			if yyl2093 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2093, d)
			}
		} else if yyct2093 == codecSelferValueTypeArray1234 {
			yyl2093 := r.ReadArrayStart()
			if yyl2093 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2093, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2094Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2094Slc
	var yyhl2094 bool = l >= 0
	for yyj2094 := 0; ; yyj2094++ {
		if yyhl2094 {
			if yyj2094 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2094Slc = r.DecodeBytes(yys2094Slc, true, true)
		yys2094 := string(yys2094Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2094 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2097 := &x.ObjectMeta
				yyv2097.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2098 := &x.Spec
				yyv2098.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2099 := &x.Status
				yyv2099.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2094)
		} // end switch yys2094
	} // end for yyj2094
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2100 int
	var yyb2100 bool
	var yyhl2100 bool = l >= 0
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2103 := &x.ObjectMeta
		yyv2103.CodecDecodeSelf(d)
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2104 := &x.Spec
		yyv2104.CodecDecodeSelf(d)
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2105 := &x.Status
		yyv2105.CodecDecodeSelf(d)
	}
	for {
		yyj2100++
		if yyhl2100 {
			yyb2100 = yyj2100 > l
		} else {
			yyb2100 = r.CheckBreak()
		}
		if yyb2100 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2100-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2106 := z.EncBinary()
		_ = yym2106
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2107 := !z.EncBinary()
			yy2arr2107 := z.EncBasicHandle().StructToArray
			var yyq2107 [4]bool
			_, _, _ = yysep2107, yyq2107, yy2arr2107
			const yyr2107 bool = false
			yyq2107[0] = x.Kind != ""
			yyq2107[1] = x.APIVersion != ""
			yyq2107[2] = true
			var yynn2107 int
			if yyr2107 || yy2arr2107 {
				r.EncodeArrayStart(4)
			} else {
				yynn2107 = 1
				for _, b := range yyq2107 {
					if b {
						yynn2107++
					}
				}
				r.EncodeMapStart(yynn2107)
				yynn2107 = 0
			}
			if yyr2107 || yy2arr2107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2107[0] {
					yym2109 := z.EncBinary()
					_ = yym2109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2107[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2110 := z.EncBinary()
					_ = yym2110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2107 || yy2arr2107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2107[1] {
					yym2112 := z.EncBinary()
					_ = yym2112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2107[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2113 := z.EncBinary()
					_ = yym2113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2107 || yy2arr2107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2107[2] {
					yy2115 := &x.ListMeta
					yym2116 := z.EncBinary()
					_ = yym2116
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2115) {
					} else {
						z.EncFallback(yy2115)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2107[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2117 := &x.ListMeta
					yym2118 := z.EncBinary()
					_ = yym2118
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2117) {
					} else {
						z.EncFallback(yy2117)
					}
				}
			}
			if yyr2107 || yy2arr2107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2120 := z.EncBinary()
					_ = yym2120
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2121 := z.EncBinary()
					_ = yym2121
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2107 || yy2arr2107 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2122 := z.DecBinary()
	_ = yym2122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2123 := r.ContainerType()
		if yyct2123 == codecSelferValueTypeMap1234 {
			yyl2123 := r.ReadMapStart()
			if yyl2123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2123, d)
			}
		} else if yyct2123 == codecSelferValueTypeArray1234 {
			yyl2123 := r.ReadArrayStart()
			if yyl2123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2124Slc
	var yyhl2124 bool = l >= 0
	for yyj2124 := 0; ; yyj2124++ {
		if yyhl2124 {
			if yyj2124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2124Slc = r.DecodeBytes(yys2124Slc, true, true)
		yys2124 := string(yys2124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2124 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2127 := &x.ListMeta
				yym2128 := z.DecBinary()
				_ = yym2128
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2127) {
				} else {
					z.DecFallback(yyv2127, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2129 := &x.Items
				yym2130 := z.DecBinary()
				_ = yym2130
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2129), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2124)
		} // end switch yys2124
	} // end for yyj2124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2131 int
	var yyb2131 bool
	var yyhl2131 bool = l >= 0
	yyj2131++
	if yyhl2131 {
		yyb2131 = yyj2131 > l
	} else {
		yyb2131 = r.CheckBreak()
	}
	if yyb2131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2131++
	if yyhl2131 {
		yyb2131 = yyj2131 > l
	} else {
		yyb2131 = r.CheckBreak()
	}
	if yyb2131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2131++
	if yyhl2131 {
		yyb2131 = yyj2131 > l
	} else {
		yyb2131 = r.CheckBreak()
	}
	if yyb2131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2134 := &x.ListMeta
		yym2135 := z.DecBinary()
		_ = yym2135
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2134) {
		} else {
			z.DecFallback(yyv2134, false)
		}
	}
	yyj2131++
	if yyhl2131 {
		yyb2131 = yyj2131 > l
	} else {
		yyb2131 = r.CheckBreak()
	}
	if yyb2131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2136 := &x.Items
		yym2137 := z.DecBinary()
		_ = yym2137
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2136), d)
		}
	}
	for {
		yyj2131++
		if yyhl2131 {
			yyb2131 = yyj2131 > l
		} else {
			yyb2131 = r.CheckBreak()
		}
		if yyb2131 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2131-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2138 := z.EncBinary()
		_ = yym2138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2139 := !z.EncBinary()
			yy2arr2139 := z.EncBasicHandle().StructToArray
			var yyq2139 [5]bool
			_, _, _ = yysep2139, yyq2139, yy2arr2139
			const yyr2139 bool = false
			yyq2139[0] = x.Kind != ""
			yyq2139[1] = x.APIVersion != ""
			yyq2139[2] = true
			yyq2139[3] = len(x.Secrets) != 0
			yyq2139[4] = len(x.ImagePullSecrets) != 0
			var yynn2139 int
			if yyr2139 || yy2arr2139 {
				r.EncodeArrayStart(5)
			} else {
				yynn2139 = 0
				for _, b := range yyq2139 {
					if b {
						yynn2139++
					}
				}
				r.EncodeMapStart(yynn2139)
				yynn2139 = 0
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[0] {
					yym2141 := z.EncBinary()
					_ = yym2141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2139[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2142 := z.EncBinary()
					_ = yym2142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[1] {
					yym2144 := z.EncBinary()
					_ = yym2144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2139[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2145 := z.EncBinary()
					_ = yym2145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[2] {
					yy2147 := &x.ObjectMeta
					yy2147.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2139[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2148 := &x.ObjectMeta
					yy2148.CodecEncodeSelf(e)
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2150 := z.EncBinary()
						_ = yym2150
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2139[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2151 := z.EncBinary()
						_ = yym2151
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2153 := z.EncBinary()
						_ = yym2153
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2139[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2154 := z.EncBinary()
						_ = yym2154
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2155 := z.DecBinary()
	_ = yym2155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2156 := r.ContainerType()
		if yyct2156 == codecSelferValueTypeMap1234 {
			yyl2156 := r.ReadMapStart()
			if yyl2156 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2156, d)
			}
		} else if yyct2156 == codecSelferValueTypeArray1234 {
			yyl2156 := r.ReadArrayStart()
			if yyl2156 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2157Slc
	var yyhl2157 bool = l >= 0
	for yyj2157 := 0; ; yyj2157++ {
		if yyhl2157 {
			if yyj2157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2157Slc = r.DecodeBytes(yys2157Slc, true, true)
		yys2157 := string(yys2157Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2157 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2160 := &x.ObjectMeta
				yyv2160.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2161 := &x.Secrets
				yym2162 := z.DecBinary()
				_ = yym2162
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2161), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2163 := &x.ImagePullSecrets
				yym2164 := z.DecBinary()
				_ = yym2164
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2163), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2157)
		} // end switch yys2157
	} // end for yyj2157
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2165 int
	var yyb2165 bool
	var yyhl2165 bool = l >= 0
	yyj2165++
	if yyhl2165 {
		yyb2165 = yyj2165 > l
	} else {
		yyb2165 = r.CheckBreak()
	}
	if yyb2165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2165++
	if yyhl2165 {
		yyb2165 = yyj2165 > l
	} else {
		yyb2165 = r.CheckBreak()
	}
	if yyb2165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2165++
	if yyhl2165 {
		yyb2165 = yyj2165 > l
	} else {
		yyb2165 = r.CheckBreak()
	}
	if yyb2165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2168 := &x.ObjectMeta
		yyv2168.CodecDecodeSelf(d)
	}
	yyj2165++
	if yyhl2165 {
		yyb2165 = yyj2165 > l
	} else {
		yyb2165 = r.CheckBreak()
	}
	if yyb2165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2169 := &x.Secrets
		yym2170 := z.DecBinary()
		_ = yym2170
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2169), d)
		}
	}
	yyj2165++
	if yyhl2165 {
		yyb2165 = yyj2165 > l
	} else {
		yyb2165 = r.CheckBreak()
	}
	if yyb2165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2171 := &x.ImagePullSecrets
		yym2172 := z.DecBinary()
		_ = yym2172
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2171), d)
		}
	}
	for {
		yyj2165++
		if yyhl2165 {
			yyb2165 = yyj2165 > l
		} else {
			yyb2165 = r.CheckBreak()
		}
		if yyb2165 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2165-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2173 := z.EncBinary()
		_ = yym2173
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2174 := !z.EncBinary()
			yy2arr2174 := z.EncBasicHandle().StructToArray
			var yyq2174 [4]bool
			_, _, _ = yysep2174, yyq2174, yy2arr2174
			const yyr2174 bool = false
			yyq2174[0] = x.Kind != ""
			yyq2174[1] = x.APIVersion != ""
			yyq2174[2] = true
			var yynn2174 int
			if yyr2174 || yy2arr2174 {
				r.EncodeArrayStart(4)
			} else {
				yynn2174 = 1
				for _, b := range yyq2174 {
					if b {
						yynn2174++
					}
				}
				r.EncodeMapStart(yynn2174)
				yynn2174 = 0
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[0] {
					yym2176 := z.EncBinary()
					_ = yym2176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2174[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2177 := z.EncBinary()
					_ = yym2177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[1] {
					yym2179 := z.EncBinary()
					_ = yym2179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2174[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2174[2] {
					yy2182 := &x.ListMeta
					yym2183 := z.EncBinary()
					_ = yym2183
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2182) {
					} else {
						z.EncFallback(yy2182)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2174[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2184 := &x.ListMeta
					yym2185 := z.EncBinary()
					_ = yym2185
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2184) {
					} else {
						z.EncFallback(yy2184)
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2188 := z.EncBinary()
					_ = yym2188
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2174 || yy2arr2174 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2189 := z.DecBinary()
	_ = yym2189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2190 := r.ContainerType()
		if yyct2190 == codecSelferValueTypeMap1234 {
			yyl2190 := r.ReadMapStart()
			if yyl2190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2190, d)
			}
		} else if yyct2190 == codecSelferValueTypeArray1234 {
			yyl2190 := r.ReadArrayStart()
			if yyl2190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2191Slc
	var yyhl2191 bool = l >= 0
	for yyj2191 := 0; ; yyj2191++ {
		if yyhl2191 {
			if yyj2191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2191Slc = r.DecodeBytes(yys2191Slc, true, true)
		yys2191 := string(yys2191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2191 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2194 := &x.ListMeta
				yym2195 := z.DecBinary()
				_ = yym2195
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2194) {
				} else {
					z.DecFallback(yyv2194, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2196 := &x.Items
				yym2197 := z.DecBinary()
				_ = yym2197
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2196), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2191)
		} // end switch yys2191
	} // end for yyj2191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2198 int
	var yyb2198 bool
	var yyhl2198 bool = l >= 0
	yyj2198++
	if yyhl2198 {
		yyb2198 = yyj2198 > l
	} else {
		yyb2198 = r.CheckBreak()
	}
	if yyb2198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2198++
	if yyhl2198 {
		yyb2198 = yyj2198 > l
	} else {
		yyb2198 = r.CheckBreak()
	}
	if yyb2198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2198++
	if yyhl2198 {
		yyb2198 = yyj2198 > l
	} else {
		yyb2198 = r.CheckBreak()
	}
	if yyb2198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2201 := &x.ListMeta
		yym2202 := z.DecBinary()
		_ = yym2202
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2201) {
		} else {
			z.DecFallback(yyv2201, false)
		}
	}
	yyj2198++
	if yyhl2198 {
		yyb2198 = yyj2198 > l
	} else {
		yyb2198 = r.CheckBreak()
	}
	if yyb2198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2203 := &x.Items
		yym2204 := z.DecBinary()
		_ = yym2204
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2203), d)
		}
	}
	for {
		yyj2198++
		if yyhl2198 {
			yyb2198 = yyj2198 > l
		} else {
			yyb2198 = r.CheckBreak()
		}
		if yyb2198 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2198-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2205 := z.EncBinary()
		_ = yym2205
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2206 := !z.EncBinary()
			yy2arr2206 := z.EncBasicHandle().StructToArray
			var yyq2206 [4]bool
			_, _, _ = yysep2206, yyq2206, yy2arr2206
			const yyr2206 bool = false
			yyq2206[0] = x.Kind != ""
			yyq2206[1] = x.APIVersion != ""
			yyq2206[2] = true
			var yynn2206 int
			if yyr2206 || yy2arr2206 {
				r.EncodeArrayStart(4)
			} else {
				yynn2206 = 1
				for _, b := range yyq2206 {
					if b {
						yynn2206++
					}
				}
				r.EncodeMapStart(yynn2206)
				yynn2206 = 0
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2206[0] {
					yym2208 := z.EncBinary()
					_ = yym2208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2206[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2209 := z.EncBinary()
					_ = yym2209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2206[1] {
					yym2211 := z.EncBinary()
					_ = yym2211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2206[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2212 := z.EncBinary()
					_ = yym2212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2206[2] {
					yy2214 := &x.ObjectMeta
					yy2214.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2206[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2215 := &x.ObjectMeta
					yy2215.CodecEncodeSelf(e)
				}
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2217 := z.EncBinary()
					_ = yym2217
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2218 := z.EncBinary()
					_ = yym2218
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2219 := z.DecBinary()
	_ = yym2219
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2220 := r.ContainerType()
		if yyct2220 == codecSelferValueTypeMap1234 {
			yyl2220 := r.ReadMapStart()
			if yyl2220 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2220, d)
			}
		} else if yyct2220 == codecSelferValueTypeArray1234 {
			yyl2220 := r.ReadArrayStart()
			if yyl2220 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2220, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2221Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2221Slc
	var yyhl2221 bool = l >= 0
	for yyj2221 := 0; ; yyj2221++ {
		if yyhl2221 {
			if yyj2221 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2221Slc = r.DecodeBytes(yys2221Slc, true, true)
		yys2221 := string(yys2221Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2221 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2224 := &x.ObjectMeta
				yyv2224.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2225 := &x.Subsets
				yym2226 := z.DecBinary()
				_ = yym2226
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2225), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2221)
		} // end switch yys2221
	} // end for yyj2221
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2227 int
	var yyb2227 bool
	var yyhl2227 bool = l >= 0
	yyj2227++
	if yyhl2227 {
		yyb2227 = yyj2227 > l
	} else {
		yyb2227 = r.CheckBreak()
	}
	if yyb2227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2227++
	if yyhl2227 {
		yyb2227 = yyj2227 > l
	} else {
		yyb2227 = r.CheckBreak()
	}
	if yyb2227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2227++
	if yyhl2227 {
		yyb2227 = yyj2227 > l
	} else {
		yyb2227 = r.CheckBreak()
	}
	if yyb2227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2230 := &x.ObjectMeta
		yyv2230.CodecDecodeSelf(d)
	}
	yyj2227++
	if yyhl2227 {
		yyb2227 = yyj2227 > l
	} else {
		yyb2227 = r.CheckBreak()
	}
	if yyb2227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2231 := &x.Subsets
		yym2232 := z.DecBinary()
		_ = yym2232
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2231), d)
		}
	}
	for {
		yyj2227++
		if yyhl2227 {
			yyb2227 = yyj2227 > l
		} else {
			yyb2227 = r.CheckBreak()
		}
		if yyb2227 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2227-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2233 := z.EncBinary()
		_ = yym2233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2234 := !z.EncBinary()
			yy2arr2234 := z.EncBasicHandle().StructToArray
			var yyq2234 [3]bool
			_, _, _ = yysep2234, yyq2234, yy2arr2234
			const yyr2234 bool = false
			yyq2234[0] = len(x.Addresses) != 0
			yyq2234[1] = len(x.NotReadyAddresses) != 0
			yyq2234[2] = len(x.Ports) != 0
			var yynn2234 int
			if yyr2234 || yy2arr2234 {
				r.EncodeArrayStart(3)
			} else {
				yynn2234 = 0
				for _, b := range yyq2234 {
					if b {
						yynn2234++
					}
				}
				r.EncodeMapStart(yynn2234)
				yynn2234 = 0
			}
			if yyr2234 || yy2arr2234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2234[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2236 := z.EncBinary()
						_ = yym2236
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2234[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2237 := z.EncBinary()
						_ = yym2237
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2234 || yy2arr2234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2234[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2239 := z.EncBinary()
						_ = yym2239
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2234[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2240 := z.EncBinary()
						_ = yym2240
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2234 || yy2arr2234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2234[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2242 := z.EncBinary()
						_ = yym2242
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2234[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2243 := z.EncBinary()
						_ = yym2243
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2234 || yy2arr2234 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2244 := z.DecBinary()
	_ = yym2244
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2245 := r.ContainerType()
		if yyct2245 == codecSelferValueTypeMap1234 {
			yyl2245 := r.ReadMapStart()
			if yyl2245 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2245, d)
			}
		} else if yyct2245 == codecSelferValueTypeArray1234 {
			yyl2245 := r.ReadArrayStart()
			if yyl2245 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2245, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2246Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2246Slc
	var yyhl2246 bool = l >= 0
	for yyj2246 := 0; ; yyj2246++ {
		if yyhl2246 {
			if yyj2246 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2246Slc = r.DecodeBytes(yys2246Slc, true, true)
		yys2246 := string(yys2246Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2246 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2247 := &x.Addresses
				yym2248 := z.DecBinary()
				_ = yym2248
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2247), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2249 := &x.NotReadyAddresses
				yym2250 := z.DecBinary()
				_ = yym2250
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2249), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2251 := &x.Ports
				yym2252 := z.DecBinary()
				_ = yym2252
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2251), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2246)
		} // end switch yys2246
	} // end for yyj2246
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2253 int
	var yyb2253 bool
	var yyhl2253 bool = l >= 0
	yyj2253++
	if yyhl2253 {
		yyb2253 = yyj2253 > l
	} else {
		yyb2253 = r.CheckBreak()
	}
	if yyb2253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2254 := &x.Addresses
		yym2255 := z.DecBinary()
		_ = yym2255
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2254), d)
		}
	}
	yyj2253++
	if yyhl2253 {
		yyb2253 = yyj2253 > l
	} else {
		yyb2253 = r.CheckBreak()
	}
	if yyb2253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2256 := &x.NotReadyAddresses
		yym2257 := z.DecBinary()
		_ = yym2257
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2256), d)
		}
	}
	yyj2253++
	if yyhl2253 {
		yyb2253 = yyj2253 > l
	} else {
		yyb2253 = r.CheckBreak()
	}
	if yyb2253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2258 := &x.Ports
		yym2259 := z.DecBinary()
		_ = yym2259
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2258), d)
		}
	}
	for {
		yyj2253++
		if yyhl2253 {
			yyb2253 = yyj2253 > l
		} else {
			yyb2253 = r.CheckBreak()
		}
		if yyb2253 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2253-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2260 := z.EncBinary()
		_ = yym2260
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2261 := !z.EncBinary()
			yy2arr2261 := z.EncBasicHandle().StructToArray
			var yyq2261 [2]bool
			_, _, _ = yysep2261, yyq2261, yy2arr2261
			const yyr2261 bool = false
			yyq2261[1] = x.TargetRef != nil
			var yynn2261 int
			if yyr2261 || yy2arr2261 {
				r.EncodeArrayStart(2)
			} else {
				yynn2261 = 1
				for _, b := range yyq2261 {
					if b {
						yynn2261++
					}
				}
				r.EncodeMapStart(yynn2261)
				yynn2261 = 0
			}
			if yyr2261 || yy2arr2261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2263 := z.EncBinary()
				_ = yym2263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2264 := z.EncBinary()
				_ = yym2264
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2261 || yy2arr2261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2261[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2261[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2261 || yy2arr2261 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2266 := z.DecBinary()
	_ = yym2266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2267 := r.ContainerType()
		if yyct2267 == codecSelferValueTypeMap1234 {
			yyl2267 := r.ReadMapStart()
			if yyl2267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2267, d)
			}
		} else if yyct2267 == codecSelferValueTypeArray1234 {
			yyl2267 := r.ReadArrayStart()
			if yyl2267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2268Slc
	var yyhl2268 bool = l >= 0
	for yyj2268 := 0; ; yyj2268++ {
		if yyhl2268 {
			if yyj2268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2268Slc = r.DecodeBytes(yys2268Slc, true, true)
		yys2268 := string(yys2268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2268 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2268)
		} // end switch yys2268
	} // end for yyj2268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2271 int
	var yyb2271 bool
	var yyhl2271 bool = l >= 0
	yyj2271++
	if yyhl2271 {
		yyb2271 = yyj2271 > l
	} else {
		yyb2271 = r.CheckBreak()
	}
	if yyb2271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2271++
	if yyhl2271 {
		yyb2271 = yyj2271 > l
	} else {
		yyb2271 = r.CheckBreak()
	}
	if yyb2271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2271++
		if yyhl2271 {
			yyb2271 = yyj2271 > l
		} else {
			yyb2271 = r.CheckBreak()
		}
		if yyb2271 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2271-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2274 := z.EncBinary()
		_ = yym2274
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2275 := !z.EncBinary()
			yy2arr2275 := z.EncBasicHandle().StructToArray
			var yyq2275 [3]bool
			_, _, _ = yysep2275, yyq2275, yy2arr2275
			const yyr2275 bool = false
			yyq2275[0] = x.Name != ""
			yyq2275[2] = x.Protocol != ""
			var yynn2275 int
			if yyr2275 || yy2arr2275 {
				r.EncodeArrayStart(3)
			} else {
				yynn2275 = 1
				for _, b := range yyq2275 {
					if b {
						yynn2275++
					}
				}
				r.EncodeMapStart(yynn2275)
				yynn2275 = 0
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[0] {
					yym2277 := z.EncBinary()
					_ = yym2277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2275[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2278 := z.EncBinary()
					_ = yym2278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2280 := z.EncBinary()
				_ = yym2280
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2281 := z.EncBinary()
				_ = yym2281
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2275[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2283 := z.DecBinary()
	_ = yym2283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2284 := r.ContainerType()
		if yyct2284 == codecSelferValueTypeMap1234 {
			yyl2284 := r.ReadMapStart()
			if yyl2284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2284, d)
			}
		} else if yyct2284 == codecSelferValueTypeArray1234 {
			yyl2284 := r.ReadArrayStart()
			if yyl2284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2285Slc
	var yyhl2285 bool = l >= 0
	for yyj2285 := 0; ; yyj2285++ {
		if yyhl2285 {
			if yyj2285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2285Slc = r.DecodeBytes(yys2285Slc, true, true)
		yys2285 := string(yys2285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2285 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2285)
		} // end switch yys2285
	} // end for yyj2285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2289 int
	var yyb2289 bool
	var yyhl2289 bool = l >= 0
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2289++
		if yyhl2289 {
			yyb2289 = yyj2289 > l
		} else {
			yyb2289 = r.CheckBreak()
		}
		if yyb2289 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2289-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2293 := z.EncBinary()
		_ = yym2293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2294 := !z.EncBinary()
			yy2arr2294 := z.EncBasicHandle().StructToArray
			var yyq2294 [4]bool
			_, _, _ = yysep2294, yyq2294, yy2arr2294
			const yyr2294 bool = false
			yyq2294[0] = x.Kind != ""
			yyq2294[1] = x.APIVersion != ""
			yyq2294[2] = true
			var yynn2294 int
			if yyr2294 || yy2arr2294 {
				r.EncodeArrayStart(4)
			} else {
				yynn2294 = 1
				for _, b := range yyq2294 {
					if b {
						yynn2294++
					}
				}
				r.EncodeMapStart(yynn2294)
				yynn2294 = 0
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2294[0] {
					yym2296 := z.EncBinary()
					_ = yym2296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2294[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2297 := z.EncBinary()
					_ = yym2297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2294[1] {
					yym2299 := z.EncBinary()
					_ = yym2299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2294[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2300 := z.EncBinary()
					_ = yym2300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2294[2] {
					yy2302 := &x.ListMeta
					yym2303 := z.EncBinary()
					_ = yym2303
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2302) {
					} else {
						z.EncFallback(yy2302)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2294[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2304 := &x.ListMeta
					yym2305 := z.EncBinary()
					_ = yym2305
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2304) {
					} else {
						z.EncFallback(yy2304)
					}
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2307 := z.EncBinary()
					_ = yym2307
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2308 := z.EncBinary()
					_ = yym2308
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2309 := z.DecBinary()
	_ = yym2309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2310 := r.ContainerType()
		if yyct2310 == codecSelferValueTypeMap1234 {
			yyl2310 := r.ReadMapStart()
			if yyl2310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2310, d)
			}
		} else if yyct2310 == codecSelferValueTypeArray1234 {
			yyl2310 := r.ReadArrayStart()
			if yyl2310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2311Slc
	var yyhl2311 bool = l >= 0
	for yyj2311 := 0; ; yyj2311++ {
		if yyhl2311 {
			if yyj2311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2311Slc = r.DecodeBytes(yys2311Slc, true, true)
		yys2311 := string(yys2311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2311 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2314 := &x.ListMeta
				yym2315 := z.DecBinary()
				_ = yym2315
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2314) {
				} else {
					z.DecFallback(yyv2314, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2316 := &x.Items
				yym2317 := z.DecBinary()
				_ = yym2317
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2316), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2311)
		} // end switch yys2311
	} // end for yyj2311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2318 int
	var yyb2318 bool
	var yyhl2318 bool = l >= 0
	yyj2318++
	if yyhl2318 {
		yyb2318 = yyj2318 > l
	} else {
		yyb2318 = r.CheckBreak()
	}
	if yyb2318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2318++
	if yyhl2318 {
		yyb2318 = yyj2318 > l
	} else {
		yyb2318 = r.CheckBreak()
	}
	if yyb2318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2318++
	if yyhl2318 {
		yyb2318 = yyj2318 > l
	} else {
		yyb2318 = r.CheckBreak()
	}
	if yyb2318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2321 := &x.ListMeta
		yym2322 := z.DecBinary()
		_ = yym2322
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2321) {
		} else {
			z.DecFallback(yyv2321, false)
		}
	}
	yyj2318++
	if yyhl2318 {
		yyb2318 = yyj2318 > l
	} else {
		yyb2318 = r.CheckBreak()
	}
	if yyb2318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2323 := &x.Items
		yym2324 := z.DecBinary()
		_ = yym2324
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2323), d)
		}
	}
	for {
		yyj2318++
		if yyhl2318 {
			yyb2318 = yyj2318 > l
		} else {
			yyb2318 = r.CheckBreak()
		}
		if yyb2318 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2318-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2325 := z.EncBinary()
		_ = yym2325
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2326 := !z.EncBinary()
			yy2arr2326 := z.EncBasicHandle().StructToArray
			var yyq2326 [4]bool
			_, _, _ = yysep2326, yyq2326, yy2arr2326
			const yyr2326 bool = false
			yyq2326[0] = x.PodCIDR != ""
			yyq2326[1] = x.ExternalID != ""
			yyq2326[2] = x.ProviderID != ""
			yyq2326[3] = x.Unschedulable != false
			var yynn2326 int
			if yyr2326 || yy2arr2326 {
				r.EncodeArrayStart(4)
			} else {
				yynn2326 = 0
				for _, b := range yyq2326 {
					if b {
						yynn2326++
					}
				}
				r.EncodeMapStart(yynn2326)
				yynn2326 = 0
			}
			if yyr2326 || yy2arr2326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2326[0] {
					yym2328 := z.EncBinary()
					_ = yym2328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2326[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2329 := z.EncBinary()
					_ = yym2329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2326 || yy2arr2326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2326[1] {
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2326[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2332 := z.EncBinary()
					_ = yym2332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2326 || yy2arr2326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2326[2] {
					yym2334 := z.EncBinary()
					_ = yym2334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2326[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2335 := z.EncBinary()
					_ = yym2335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2326 || yy2arr2326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2326[3] {
					yym2337 := z.EncBinary()
					_ = yym2337
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2326[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2338 := z.EncBinary()
					_ = yym2338
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2326 || yy2arr2326 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2339 := z.DecBinary()
	_ = yym2339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2340 := r.ContainerType()
		if yyct2340 == codecSelferValueTypeMap1234 {
			yyl2340 := r.ReadMapStart()
			if yyl2340 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2340, d)
			}
		} else if yyct2340 == codecSelferValueTypeArray1234 {
			yyl2340 := r.ReadArrayStart()
			if yyl2340 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2340, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2341Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2341Slc
	var yyhl2341 bool = l >= 0
	for yyj2341 := 0; ; yyj2341++ {
		if yyhl2341 {
			if yyj2341 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2341Slc = r.DecodeBytes(yys2341Slc, true, true)
		yys2341 := string(yys2341Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2341 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2341)
		} // end switch yys2341
	} // end for yyj2341
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2346 int
	var yyb2346 bool
	var yyhl2346 bool = l >= 0
	yyj2346++
	if yyhl2346 {
		yyb2346 = yyj2346 > l
	} else {
		yyb2346 = r.CheckBreak()
	}
	if yyb2346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2346++
	if yyhl2346 {
		yyb2346 = yyj2346 > l
	} else {
		yyb2346 = r.CheckBreak()
	}
	if yyb2346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2346++
	if yyhl2346 {
		yyb2346 = yyj2346 > l
	} else {
		yyb2346 = r.CheckBreak()
	}
	if yyb2346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2346++
	if yyhl2346 {
		yyb2346 = yyj2346 > l
	} else {
		yyb2346 = r.CheckBreak()
	}
	if yyb2346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2346++
		if yyhl2346 {
			yyb2346 = yyj2346 > l
		} else {
			yyb2346 = r.CheckBreak()
		}
		if yyb2346 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2346-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2351 := z.EncBinary()
		_ = yym2351
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2352 := !z.EncBinary()
			yy2arr2352 := z.EncBasicHandle().StructToArray
			var yyq2352 [1]bool
			_, _, _ = yysep2352, yyq2352, yy2arr2352
			const yyr2352 bool = false
			var yynn2352 int
			if yyr2352 || yy2arr2352 {
				r.EncodeArrayStart(1)
			} else {
				yynn2352 = 1
				for _, b := range yyq2352 {
					if b {
						yynn2352++
					}
				}
				r.EncodeMapStart(yynn2352)
				yynn2352 = 0
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2354 := z.EncBinary()
				_ = yym2354
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2355 := z.EncBinary()
				_ = yym2355
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2356 := z.DecBinary()
	_ = yym2356
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2357 := r.ContainerType()
		if yyct2357 == codecSelferValueTypeMap1234 {
			yyl2357 := r.ReadMapStart()
			if yyl2357 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2357, d)
			}
		} else if yyct2357 == codecSelferValueTypeArray1234 {
			yyl2357 := r.ReadArrayStart()
			if yyl2357 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2357, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2358Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2358Slc
	var yyhl2358 bool = l >= 0
	for yyj2358 := 0; ; yyj2358++ {
		if yyhl2358 {
			if yyj2358 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2358Slc = r.DecodeBytes(yys2358Slc, true, true)
		yys2358 := string(yys2358Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2358 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2358)
		} // end switch yys2358
	} // end for yyj2358
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2360 int
	var yyb2360 bool
	var yyhl2360 bool = l >= 0
	yyj2360++
	if yyhl2360 {
		yyb2360 = yyj2360 > l
	} else {
		yyb2360 = r.CheckBreak()
	}
	if yyb2360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2360++
		if yyhl2360 {
			yyb2360 = yyj2360 > l
		} else {
			yyb2360 = r.CheckBreak()
		}
		if yyb2360 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2360-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2362 := z.EncBinary()
		_ = yym2362
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2363 := !z.EncBinary()
			yy2arr2363 := z.EncBasicHandle().StructToArray
			var yyq2363 [1]bool
			_, _, _ = yysep2363, yyq2363, yy2arr2363
			const yyr2363 bool = false
			yyq2363[0] = true
			var yynn2363 int
			if yyr2363 || yy2arr2363 {
				r.EncodeArrayStart(1)
			} else {
				yynn2363 = 0
				for _, b := range yyq2363 {
					if b {
						yynn2363++
					}
				}
				r.EncodeMapStart(yynn2363)
				yynn2363 = 0
			}
			if yyr2363 || yy2arr2363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2363[0] {
					yy2365 := &x.KubeletEndpoint
					yy2365.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2363[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2366 := &x.KubeletEndpoint
					yy2366.CodecEncodeSelf(e)
				}
			}
			if yyr2363 || yy2arr2363 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2367 := z.DecBinary()
	_ = yym2367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2368 := r.ContainerType()
		if yyct2368 == codecSelferValueTypeMap1234 {
			yyl2368 := r.ReadMapStart()
			if yyl2368 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2368, d)
			}
		} else if yyct2368 == codecSelferValueTypeArray1234 {
			yyl2368 := r.ReadArrayStart()
			if yyl2368 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2369Slc
	var yyhl2369 bool = l >= 0
	for yyj2369 := 0; ; yyj2369++ {
		if yyhl2369 {
			if yyj2369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2369Slc = r.DecodeBytes(yys2369Slc, true, true)
		yys2369 := string(yys2369Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2369 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2370 := &x.KubeletEndpoint
				yyv2370.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2369)
		} // end switch yys2369
	} // end for yyj2369
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2371 int
	var yyb2371 bool
	var yyhl2371 bool = l >= 0
	yyj2371++
	if yyhl2371 {
		yyb2371 = yyj2371 > l
	} else {
		yyb2371 = r.CheckBreak()
	}
	if yyb2371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2372 := &x.KubeletEndpoint
		yyv2372.CodecDecodeSelf(d)
	}
	for {
		yyj2371++
		if yyhl2371 {
			yyb2371 = yyj2371 > l
		} else {
			yyb2371 = r.CheckBreak()
		}
		if yyb2371 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2371-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2373 := z.EncBinary()
		_ = yym2373
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2374 := !z.EncBinary()
			yy2arr2374 := z.EncBasicHandle().StructToArray
			var yyq2374 [8]bool
			_, _, _ = yysep2374, yyq2374, yy2arr2374
			const yyr2374 bool = false
			var yynn2374 int
			if yyr2374 || yy2arr2374 {
				r.EncodeArrayStart(8)
			} else {
				yynn2374 = 8
				for _, b := range yyq2374 {
					if b {
						yynn2374++
					}
				}
				r.EncodeMapStart(yynn2374)
				yynn2374 = 0
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2376 := z.EncBinary()
				_ = yym2376
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2377 := z.EncBinary()
				_ = yym2377
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2379 := z.EncBinary()
				_ = yym2379
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2380 := z.EncBinary()
				_ = yym2380
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2382 := z.EncBinary()
				_ = yym2382
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2383 := z.EncBinary()
				_ = yym2383
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2385 := z.EncBinary()
				_ = yym2385
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2386 := z.EncBinary()
				_ = yym2386
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2388 := z.EncBinary()
				_ = yym2388
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2389 := z.EncBinary()
				_ = yym2389
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2391 := z.EncBinary()
				_ = yym2391
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2392 := z.EncBinary()
				_ = yym2392
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2394 := z.EncBinary()
				_ = yym2394
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2395 := z.EncBinary()
				_ = yym2395
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2397 := z.EncBinary()
				_ = yym2397
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2398 := z.EncBinary()
				_ = yym2398
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2399 := z.DecBinary()
	_ = yym2399
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2400 := r.ContainerType()
		if yyct2400 == codecSelferValueTypeMap1234 {
			yyl2400 := r.ReadMapStart()
			if yyl2400 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2400, d)
			}
		} else if yyct2400 == codecSelferValueTypeArray1234 {
			yyl2400 := r.ReadArrayStart()
			if yyl2400 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2400, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2401Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2401Slc
	var yyhl2401 bool = l >= 0
	for yyj2401 := 0; ; yyj2401++ {
		if yyhl2401 {
			if yyj2401 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2401Slc = r.DecodeBytes(yys2401Slc, true, true)
		yys2401 := string(yys2401Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2401 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2401)
		} // end switch yys2401
	} // end for yyj2401
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2410 int
	var yyb2410 bool
	var yyhl2410 bool = l >= 0
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2410++
		if yyhl2410 {
			yyb2410 = yyj2410 > l
		} else {
			yyb2410 = r.CheckBreak()
		}
		if yyb2410 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2410-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2419 := z.EncBinary()
		_ = yym2419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2420 := !z.EncBinary()
			yy2arr2420 := z.EncBasicHandle().StructToArray
			var yyq2420 [7]bool
			_, _, _ = yysep2420, yyq2420, yy2arr2420
			const yyr2420 bool = false
			yyq2420[0] = len(x.Capacity) != 0
			yyq2420[1] = len(x.Allocatable) != 0
			yyq2420[2] = x.Phase != ""
			yyq2420[3] = len(x.Conditions) != 0
			yyq2420[4] = len(x.Addresses) != 0
			yyq2420[5] = true
			yyq2420[6] = true
			var yynn2420 int
			if yyr2420 || yy2arr2420 {
				r.EncodeArrayStart(7)
			} else {
				yynn2420 = 0
				for _, b := range yyq2420 {
					if b {
						yynn2420++
					}
				}
				r.EncodeMapStart(yynn2420)
				yynn2420 = 0
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2420[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2420[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2420[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2420[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2420[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2425 := z.EncBinary()
						_ = yym2425
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2420[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2426 := z.EncBinary()
						_ = yym2426
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2420[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2428 := z.EncBinary()
						_ = yym2428
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2420[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2429 := z.EncBinary()
						_ = yym2429
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2420[5] {
					yy2431 := &x.DaemonEndpoints
					yy2431.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2420[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2432 := &x.DaemonEndpoints
					yy2432.CodecEncodeSelf(e)
				}
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2420[6] {
					yy2434 := &x.NodeInfo
					yy2434.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2420[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2435 := &x.NodeInfo
					yy2435.CodecEncodeSelf(e)
				}
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2436 := z.DecBinary()
	_ = yym2436
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2437 := r.ContainerType()
		if yyct2437 == codecSelferValueTypeMap1234 {
			yyl2437 := r.ReadMapStart()
			if yyl2437 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2437, d)
			}
		} else if yyct2437 == codecSelferValueTypeArray1234 {
			yyl2437 := r.ReadArrayStart()
			if yyl2437 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2437, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2438Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2438Slc
	var yyhl2438 bool = l >= 0
	for yyj2438 := 0; ; yyj2438++ {
		if yyhl2438 {
			if yyj2438 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2438Slc = r.DecodeBytes(yys2438Slc, true, true)
		yys2438 := string(yys2438Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2438 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2439 := &x.Capacity
				yyv2439.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2440 := &x.Allocatable
				yyv2440.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2442 := &x.Conditions
				yym2443 := z.DecBinary()
				_ = yym2443
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2442), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2444 := &x.Addresses
				yym2445 := z.DecBinary()
				_ = yym2445
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2444), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2446 := &x.DaemonEndpoints
				yyv2446.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2447 := &x.NodeInfo
				yyv2447.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2438)
		} // end switch yys2438
	} // end for yyj2438
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2448 int
	var yyb2448 bool
	var yyhl2448 bool = l >= 0
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2449 := &x.Capacity
		yyv2449.CodecDecodeSelf(d)
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2450 := &x.Allocatable
		yyv2450.CodecDecodeSelf(d)
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2452 := &x.Conditions
		yym2453 := z.DecBinary()
		_ = yym2453
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2452), d)
		}
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2454 := &x.Addresses
		yym2455 := z.DecBinary()
		_ = yym2455
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2454), d)
		}
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2456 := &x.DaemonEndpoints
		yyv2456.CodecDecodeSelf(d)
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2457 := &x.NodeInfo
		yyv2457.CodecDecodeSelf(d)
	}
	for {
		yyj2448++
		if yyhl2448 {
			yyb2448 = yyj2448 > l
		} else {
			yyb2448 = r.CheckBreak()
		}
		if yyb2448 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2448-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2458 := z.EncBinary()
	_ = yym2458
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2459 := z.DecBinary()
	_ = yym2459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2460 := z.EncBinary()
	_ = yym2460
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2461 := z.DecBinary()
	_ = yym2461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2462 := z.EncBinary()
		_ = yym2462
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2463 := !z.EncBinary()
			yy2arr2463 := z.EncBasicHandle().StructToArray
			var yyq2463 [6]bool
			_, _, _ = yysep2463, yyq2463, yy2arr2463
			const yyr2463 bool = false
			yyq2463[2] = true
			yyq2463[3] = true
			yyq2463[4] = x.Reason != ""
			yyq2463[5] = x.Message != ""
			var yynn2463 int
			if yyr2463 || yy2arr2463 {
				r.EncodeArrayStart(6)
			} else {
				yynn2463 = 2
				for _, b := range yyq2463 {
					if b {
						yynn2463++
					}
				}
				r.EncodeMapStart(yynn2463)
				yynn2463 = 0
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2463[2] {
					yy2467 := &x.LastHeartbeatTime
					yym2468 := z.EncBinary()
					_ = yym2468
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2467) {
					} else if yym2468 {
						z.EncBinaryMarshal(yy2467)
					} else if !yym2468 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2467)
					} else {
						z.EncFallback(yy2467)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2463[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2469 := &x.LastHeartbeatTime
					yym2470 := z.EncBinary()
					_ = yym2470
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2469) {
					} else if yym2470 {
						z.EncBinaryMarshal(yy2469)
					} else if !yym2470 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2469)
					} else {
						z.EncFallback(yy2469)
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2463[3] {
					yy2472 := &x.LastTransitionTime
					yym2473 := z.EncBinary()
					_ = yym2473
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2472) {
					} else if yym2473 {
						z.EncBinaryMarshal(yy2472)
					} else if !yym2473 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2472)
					} else {
						z.EncFallback(yy2472)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2463[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2474 := &x.LastTransitionTime
					yym2475 := z.EncBinary()
					_ = yym2475
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2474) {
					} else if yym2475 {
						z.EncBinaryMarshal(yy2474)
					} else if !yym2475 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2474)
					} else {
						z.EncFallback(yy2474)
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2463[4] {
					yym2477 := z.EncBinary()
					_ = yym2477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2463[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2478 := z.EncBinary()
					_ = yym2478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2463[5] {
					yym2480 := z.EncBinary()
					_ = yym2480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2463[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2481 := z.EncBinary()
					_ = yym2481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2482 := z.DecBinary()
	_ = yym2482
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2483 := r.ContainerType()
		if yyct2483 == codecSelferValueTypeMap1234 {
			yyl2483 := r.ReadMapStart()
			if yyl2483 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2483, d)
			}
		} else if yyct2483 == codecSelferValueTypeArray1234 {
			yyl2483 := r.ReadArrayStart()
			if yyl2483 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2483, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2484Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2484Slc
	var yyhl2484 bool = l >= 0
	for yyj2484 := 0; ; yyj2484++ {
		if yyhl2484 {
			if yyj2484 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2484Slc = r.DecodeBytes(yys2484Slc, true, true)
		yys2484 := string(yys2484Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2484 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2487 := &x.LastHeartbeatTime
				yym2488 := z.DecBinary()
				_ = yym2488
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2487) {
				} else if yym2488 {
					z.DecBinaryUnmarshal(yyv2487)
				} else if !yym2488 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2487)
				} else {
					z.DecFallback(yyv2487, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2489 := &x.LastTransitionTime
				yym2490 := z.DecBinary()
				_ = yym2490
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2489) {
				} else if yym2490 {
					z.DecBinaryUnmarshal(yyv2489)
				} else if !yym2490 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2489)
				} else {
					z.DecFallback(yyv2489, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2484)
		} // end switch yys2484
	} // end for yyj2484
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2493 int
	var yyb2493 bool
	var yyhl2493 bool = l >= 0
	yyj2493++
	if yyhl2493 {
		yyb2493 = yyj2493 > l
	} else {
		yyb2493 = r.CheckBreak()
	}
	if yyb2493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2493++
	if yyhl2493 {
		yyb2493 = yyj2493 > l
	} else {
		yyb2493 = r.CheckBreak()
	}
	if yyb2493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2493++
	if yyhl2493 {
		yyb2493 = yyj2493 > l
	} else {
		yyb2493 = r.CheckBreak()
	}
	if yyb2493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2496 := &x.LastHeartbeatTime
		yym2497 := z.DecBinary()
		_ = yym2497
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2496) {
		} else if yym2497 {
			z.DecBinaryUnmarshal(yyv2496)
		} else if !yym2497 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2496)
		} else {
			z.DecFallback(yyv2496, false)
		}
	}
	yyj2493++
	if yyhl2493 {
		yyb2493 = yyj2493 > l
	} else {
		yyb2493 = r.CheckBreak()
	}
	if yyb2493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2498 := &x.LastTransitionTime
		yym2499 := z.DecBinary()
		_ = yym2499
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2498) {
		} else if yym2499 {
			z.DecBinaryUnmarshal(yyv2498)
		} else if !yym2499 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2498)
		} else {
			z.DecFallback(yyv2498, false)
		}
	}
	yyj2493++
	if yyhl2493 {
		yyb2493 = yyj2493 > l
	} else {
		yyb2493 = r.CheckBreak()
	}
	if yyb2493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2493++
	if yyhl2493 {
		yyb2493 = yyj2493 > l
	} else {
		yyb2493 = r.CheckBreak()
	}
	if yyb2493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2493++
		if yyhl2493 {
			yyb2493 = yyj2493 > l
		} else {
			yyb2493 = r.CheckBreak()
		}
		if yyb2493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2502 := z.EncBinary()
	_ = yym2502
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2503 := z.DecBinary()
	_ = yym2503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2504 := z.EncBinary()
		_ = yym2504
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2505 := !z.EncBinary()
			yy2arr2505 := z.EncBasicHandle().StructToArray
			var yyq2505 [2]bool
			_, _, _ = yysep2505, yyq2505, yy2arr2505
			const yyr2505 bool = false
			var yynn2505 int
			if yyr2505 || yy2arr2505 {
				r.EncodeArrayStart(2)
			} else {
				yynn2505 = 2
				for _, b := range yyq2505 {
					if b {
						yynn2505++
					}
				}
				r.EncodeMapStart(yynn2505)
				yynn2505 = 0
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2508 := z.EncBinary()
				_ = yym2508
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2509 := z.EncBinary()
				_ = yym2509
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2505 || yy2arr2505 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2510 := z.DecBinary()
	_ = yym2510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2511 := r.ContainerType()
		if yyct2511 == codecSelferValueTypeMap1234 {
			yyl2511 := r.ReadMapStart()
			if yyl2511 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2511, d)
			}
		} else if yyct2511 == codecSelferValueTypeArray1234 {
			yyl2511 := r.ReadArrayStart()
			if yyl2511 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2511, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2512Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2512Slc
	var yyhl2512 bool = l >= 0
	for yyj2512 := 0; ; yyj2512++ {
		if yyhl2512 {
			if yyj2512 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2512Slc = r.DecodeBytes(yys2512Slc, true, true)
		yys2512 := string(yys2512Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2512 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2512)
		} // end switch yys2512
	} // end for yyj2512
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2515 int
	var yyb2515 bool
	var yyhl2515 bool = l >= 0
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2515++
		if yyhl2515 {
			yyb2515 = yyj2515 > l
		} else {
			yyb2515 = r.CheckBreak()
		}
		if yyb2515 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2515-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2518 := z.EncBinary()
	_ = yym2518
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2519 := z.DecBinary()
	_ = yym2519
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2520 := z.EncBinary()
		_ = yym2520
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2521 := z.DecBinary()
	_ = yym2521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2522 := z.EncBinary()
		_ = yym2522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2523 := !z.EncBinary()
			yy2arr2523 := z.EncBasicHandle().StructToArray
			var yyq2523 [5]bool
			_, _, _ = yysep2523, yyq2523, yy2arr2523
			const yyr2523 bool = false
			yyq2523[0] = x.Kind != ""
			yyq2523[1] = x.APIVersion != ""
			yyq2523[2] = true
			yyq2523[3] = true
			yyq2523[4] = true
			var yynn2523 int
			if yyr2523 || yy2arr2523 {
				r.EncodeArrayStart(5)
			} else {
				yynn2523 = 0
				for _, b := range yyq2523 {
					if b {
						yynn2523++
					}
				}
				r.EncodeMapStart(yynn2523)
				yynn2523 = 0
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[0] {
					yym2525 := z.EncBinary()
					_ = yym2525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2523[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2526 := z.EncBinary()
					_ = yym2526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[1] {
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2523[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[2] {
					yy2531 := &x.ObjectMeta
					yy2531.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2523[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2532 := &x.ObjectMeta
					yy2532.CodecEncodeSelf(e)
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[3] {
					yy2534 := &x.Spec
					yy2534.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2523[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2535 := &x.Spec
					yy2535.CodecEncodeSelf(e)
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[4] {
					yy2537 := &x.Status
					yy2537.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2523[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2538 := &x.Status
					yy2538.CodecEncodeSelf(e)
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2539 := z.DecBinary()
	_ = yym2539
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2540 := r.ContainerType()
		if yyct2540 == codecSelferValueTypeMap1234 {
			yyl2540 := r.ReadMapStart()
			if yyl2540 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2540, d)
			}
		} else if yyct2540 == codecSelferValueTypeArray1234 {
			yyl2540 := r.ReadArrayStart()
			if yyl2540 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2540, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2541Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2541Slc
	var yyhl2541 bool = l >= 0
	for yyj2541 := 0; ; yyj2541++ {
		if yyhl2541 {
			if yyj2541 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2541Slc = r.DecodeBytes(yys2541Slc, true, true)
		yys2541 := string(yys2541Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2541 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2544 := &x.ObjectMeta
				yyv2544.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2545 := &x.Spec
				yyv2545.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2546 := &x.Status
				yyv2546.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2541)
		} // end switch yys2541
	} // end for yyj2541
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2547 int
	var yyb2547 bool
	var yyhl2547 bool = l >= 0
	yyj2547++
	if yyhl2547 {
		yyb2547 = yyj2547 > l
	} else {
		yyb2547 = r.CheckBreak()
	}
	if yyb2547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2547++
	if yyhl2547 {
		yyb2547 = yyj2547 > l
	} else {
		yyb2547 = r.CheckBreak()
	}
	if yyb2547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2547++
	if yyhl2547 {
		yyb2547 = yyj2547 > l
	} else {
		yyb2547 = r.CheckBreak()
	}
	if yyb2547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2550 := &x.ObjectMeta
		yyv2550.CodecDecodeSelf(d)
	}
	yyj2547++
	if yyhl2547 {
		yyb2547 = yyj2547 > l
	} else {
		yyb2547 = r.CheckBreak()
	}
	if yyb2547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2551 := &x.Spec
		yyv2551.CodecDecodeSelf(d)
	}
	yyj2547++
	if yyhl2547 {
		yyb2547 = yyj2547 > l
	} else {
		yyb2547 = r.CheckBreak()
	}
	if yyb2547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2552 := &x.Status
		yyv2552.CodecDecodeSelf(d)
	}
	for {
		yyj2547++
		if yyhl2547 {
			yyb2547 = yyj2547 > l
		} else {
			yyb2547 = r.CheckBreak()
		}
		if yyb2547 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2547-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2553 := z.EncBinary()
		_ = yym2553
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2554 := !z.EncBinary()
			yy2arr2554 := z.EncBasicHandle().StructToArray
			var yyq2554 [4]bool
			_, _, _ = yysep2554, yyq2554, yy2arr2554
			const yyr2554 bool = false
			yyq2554[0] = x.Kind != ""
			yyq2554[1] = x.APIVersion != ""
			yyq2554[2] = true
			var yynn2554 int
			if yyr2554 || yy2arr2554 {
				r.EncodeArrayStart(4)
			} else {
				yynn2554 = 1
				for _, b := range yyq2554 {
					if b {
						yynn2554++
					}
				}
				r.EncodeMapStart(yynn2554)
				yynn2554 = 0
			}
			if yyr2554 || yy2arr2554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2554[0] {
					yym2556 := z.EncBinary()
					_ = yym2556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2554[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2557 := z.EncBinary()
					_ = yym2557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2554 || yy2arr2554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2554[1] {
					yym2559 := z.EncBinary()
					_ = yym2559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2554[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2560 := z.EncBinary()
					_ = yym2560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2554 || yy2arr2554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2554[2] {
					yy2562 := &x.ListMeta
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2562) {
					} else {
						z.EncFallback(yy2562)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2554[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2564 := &x.ListMeta
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2564) {
					} else {
						z.EncFallback(yy2564)
					}
				}
			}
			if yyr2554 || yy2arr2554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2567 := z.EncBinary()
					_ = yym2567
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2568 := z.EncBinary()
					_ = yym2568
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2554 || yy2arr2554 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2569 := z.DecBinary()
	_ = yym2569
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2570 := r.ContainerType()
		if yyct2570 == codecSelferValueTypeMap1234 {
			yyl2570 := r.ReadMapStart()
			if yyl2570 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2570, d)
			}
		} else if yyct2570 == codecSelferValueTypeArray1234 {
			yyl2570 := r.ReadArrayStart()
			if yyl2570 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2570, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2571Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2571Slc
	var yyhl2571 bool = l >= 0
	for yyj2571 := 0; ; yyj2571++ {
		if yyhl2571 {
			if yyj2571 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2571Slc = r.DecodeBytes(yys2571Slc, true, true)
		yys2571 := string(yys2571Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2571 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2574 := &x.ListMeta
				yym2575 := z.DecBinary()
				_ = yym2575
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2574) {
				} else {
					z.DecFallback(yyv2574, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2576 := &x.Items
				yym2577 := z.DecBinary()
				_ = yym2577
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2576), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2571)
		} // end switch yys2571
	} // end for yyj2571
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2578 int
	var yyb2578 bool
	var yyhl2578 bool = l >= 0
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2581 := &x.ListMeta
		yym2582 := z.DecBinary()
		_ = yym2582
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2581) {
		} else {
			z.DecFallback(yyv2581, false)
		}
	}
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2583 := &x.Items
		yym2584 := z.DecBinary()
		_ = yym2584
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2583), d)
		}
	}
	for {
		yyj2578++
		if yyhl2578 {
			yyb2578 = yyj2578 > l
		} else {
			yyb2578 = r.CheckBreak()
		}
		if yyb2578 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2578-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2585 := z.EncBinary()
	_ = yym2585
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2586 := z.DecBinary()
	_ = yym2586
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2587 := z.EncBinary()
		_ = yym2587
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2588 := !z.EncBinary()
			yy2arr2588 := z.EncBasicHandle().StructToArray
			var yyq2588 [1]bool
			_, _, _ = yysep2588, yyq2588, yy2arr2588
			const yyr2588 bool = false
			yyq2588[0] = len(x.Finalizers) != 0
			var yynn2588 int
			if yyr2588 || yy2arr2588 {
				r.EncodeArrayStart(1)
			} else {
				yynn2588 = 0
				for _, b := range yyq2588 {
					if b {
						yynn2588++
					}
				}
				r.EncodeMapStart(yynn2588)
				yynn2588 = 0
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2588[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2590 := z.EncBinary()
						_ = yym2590
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2588[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2591 := z.EncBinary()
						_ = yym2591
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2592 := z.DecBinary()
	_ = yym2592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2593 := r.ContainerType()
		if yyct2593 == codecSelferValueTypeMap1234 {
			yyl2593 := r.ReadMapStart()
			if yyl2593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2593, d)
			}
		} else if yyct2593 == codecSelferValueTypeArray1234 {
			yyl2593 := r.ReadArrayStart()
			if yyl2593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2594Slc
	var yyhl2594 bool = l >= 0
	for yyj2594 := 0; ; yyj2594++ {
		if yyhl2594 {
			if yyj2594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2594Slc = r.DecodeBytes(yys2594Slc, true, true)
		yys2594 := string(yys2594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2594 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2595 := &x.Finalizers
				yym2596 := z.DecBinary()
				_ = yym2596
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2595), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2594)
		} // end switch yys2594
	} // end for yyj2594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2597 int
	var yyb2597 bool
	var yyhl2597 bool = l >= 0
	yyj2597++
	if yyhl2597 {
		yyb2597 = yyj2597 > l
	} else {
		yyb2597 = r.CheckBreak()
	}
	if yyb2597 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2598 := &x.Finalizers
		yym2599 := z.DecBinary()
		_ = yym2599
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2598), d)
		}
	}
	for {
		yyj2597++
		if yyhl2597 {
			yyb2597 = yyj2597 > l
		} else {
			yyb2597 = r.CheckBreak()
		}
		if yyb2597 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2597-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2600 := z.EncBinary()
		_ = yym2600
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2601 := !z.EncBinary()
			yy2arr2601 := z.EncBasicHandle().StructToArray
			var yyq2601 [1]bool
			_, _, _ = yysep2601, yyq2601, yy2arr2601
			const yyr2601 bool = false
			yyq2601[0] = x.Phase != ""
			var yynn2601 int
			if yyr2601 || yy2arr2601 {
				r.EncodeArrayStart(1)
			} else {
				yynn2601 = 0
				for _, b := range yyq2601 {
					if b {
						yynn2601++
					}
				}
				r.EncodeMapStart(yynn2601)
				yynn2601 = 0
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2601[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2601[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2603 := z.DecBinary()
	_ = yym2603
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2604 := r.ContainerType()
		if yyct2604 == codecSelferValueTypeMap1234 {
			yyl2604 := r.ReadMapStart()
			if yyl2604 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2604, d)
			}
		} else if yyct2604 == codecSelferValueTypeArray1234 {
			yyl2604 := r.ReadArrayStart()
			if yyl2604 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2604, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2605Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2605Slc
	var yyhl2605 bool = l >= 0
	for yyj2605 := 0; ; yyj2605++ {
		if yyhl2605 {
			if yyj2605 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2605Slc = r.DecodeBytes(yys2605Slc, true, true)
		yys2605 := string(yys2605Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2605 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2605)
		} // end switch yys2605
	} // end for yyj2605
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2607 int
	var yyb2607 bool
	var yyhl2607 bool = l >= 0
	yyj2607++
	if yyhl2607 {
		yyb2607 = yyj2607 > l
	} else {
		yyb2607 = r.CheckBreak()
	}
	if yyb2607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2607++
		if yyhl2607 {
			yyb2607 = yyj2607 > l
		} else {
			yyb2607 = r.CheckBreak()
		}
		if yyb2607 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2607-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2609 := z.EncBinary()
	_ = yym2609
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2610 := z.DecBinary()
	_ = yym2610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2611 := z.EncBinary()
		_ = yym2611
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2612 := !z.EncBinary()
			yy2arr2612 := z.EncBasicHandle().StructToArray
			var yyq2612 [5]bool
			_, _, _ = yysep2612, yyq2612, yy2arr2612
			const yyr2612 bool = false
			yyq2612[0] = x.Kind != ""
			yyq2612[1] = x.APIVersion != ""
			yyq2612[2] = true
			yyq2612[3] = true
			yyq2612[4] = true
			var yynn2612 int
			if yyr2612 || yy2arr2612 {
				r.EncodeArrayStart(5)
			} else {
				yynn2612 = 0
				for _, b := range yyq2612 {
					if b {
						yynn2612++
					}
				}
				r.EncodeMapStart(yynn2612)
				yynn2612 = 0
			}
			if yyr2612 || yy2arr2612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2612[0] {
					yym2614 := z.EncBinary()
					_ = yym2614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2612[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2615 := z.EncBinary()
					_ = yym2615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2612 || yy2arr2612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2612[1] {
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2612[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2612 || yy2arr2612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2612[2] {
					yy2620 := &x.ObjectMeta
					yy2620.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2612[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2621 := &x.ObjectMeta
					yy2621.CodecEncodeSelf(e)
				}
			}
			if yyr2612 || yy2arr2612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2612[3] {
					yy2623 := &x.Spec
					yy2623.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2612[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2624 := &x.Spec
					yy2624.CodecEncodeSelf(e)
				}
			}
			if yyr2612 || yy2arr2612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2612[4] {
					yy2626 := &x.Status
					yy2626.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2612[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2627 := &x.Status
					yy2627.CodecEncodeSelf(e)
				}
			}
			if yyr2612 || yy2arr2612 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2628 := z.DecBinary()
	_ = yym2628
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2629 := r.ContainerType()
		if yyct2629 == codecSelferValueTypeMap1234 {
			yyl2629 := r.ReadMapStart()
			if yyl2629 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2629, d)
			}
		} else if yyct2629 == codecSelferValueTypeArray1234 {
			yyl2629 := r.ReadArrayStart()
			if yyl2629 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2629, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2630Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2630Slc
	var yyhl2630 bool = l >= 0
	for yyj2630 := 0; ; yyj2630++ {
		if yyhl2630 {
			if yyj2630 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2630Slc = r.DecodeBytes(yys2630Slc, true, true)
		yys2630 := string(yys2630Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2630 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2633 := &x.ObjectMeta
				yyv2633.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2634 := &x.Spec
				yyv2634.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2635 := &x.Status
				yyv2635.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2630)
		} // end switch yys2630
	} // end for yyj2630
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2636 int
	var yyb2636 bool
	var yyhl2636 bool = l >= 0
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2639 := &x.ObjectMeta
		yyv2639.CodecDecodeSelf(d)
	}
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2640 := &x.Spec
		yyv2640.CodecDecodeSelf(d)
	}
	yyj2636++
	if yyhl2636 {
		yyb2636 = yyj2636 > l
	} else {
		yyb2636 = r.CheckBreak()
	}
	if yyb2636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2641 := &x.Status
		yyv2641.CodecDecodeSelf(d)
	}
	for {
		yyj2636++
		if yyhl2636 {
			yyb2636 = yyj2636 > l
		} else {
			yyb2636 = r.CheckBreak()
		}
		if yyb2636 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2636-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2642 := z.EncBinary()
		_ = yym2642
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2643 := !z.EncBinary()
			yy2arr2643 := z.EncBasicHandle().StructToArray
			var yyq2643 [4]bool
			_, _, _ = yysep2643, yyq2643, yy2arr2643
			const yyr2643 bool = false
			yyq2643[0] = x.Kind != ""
			yyq2643[1] = x.APIVersion != ""
			yyq2643[2] = true
			var yynn2643 int
			if yyr2643 || yy2arr2643 {
				r.EncodeArrayStart(4)
			} else {
				yynn2643 = 1
				for _, b := range yyq2643 {
					if b {
						yynn2643++
					}
				}
				r.EncodeMapStart(yynn2643)
				yynn2643 = 0
			}
			if yyr2643 || yy2arr2643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2643[0] {
					yym2645 := z.EncBinary()
					_ = yym2645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2643[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2646 := z.EncBinary()
					_ = yym2646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2643 || yy2arr2643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2643[1] {
					yym2648 := z.EncBinary()
					_ = yym2648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2643[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2643 || yy2arr2643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2643[2] {
					yy2651 := &x.ListMeta
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2651) {
					} else {
						z.EncFallback(yy2651)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2643[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2653 := &x.ListMeta
					yym2654 := z.EncBinary()
					_ = yym2654
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2653) {
					} else {
						z.EncFallback(yy2653)
					}
				}
			}
			if yyr2643 || yy2arr2643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2656 := z.EncBinary()
					_ = yym2656
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2657 := z.EncBinary()
					_ = yym2657
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2643 || yy2arr2643 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2658 := z.DecBinary()
	_ = yym2658
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2659 := r.ContainerType()
		if yyct2659 == codecSelferValueTypeMap1234 {
			yyl2659 := r.ReadMapStart()
			if yyl2659 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2659, d)
			}
		} else if yyct2659 == codecSelferValueTypeArray1234 {
			yyl2659 := r.ReadArrayStart()
			if yyl2659 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2659, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2660Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2660Slc
	var yyhl2660 bool = l >= 0
	for yyj2660 := 0; ; yyj2660++ {
		if yyhl2660 {
			if yyj2660 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2660Slc = r.DecodeBytes(yys2660Slc, true, true)
		yys2660 := string(yys2660Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2660 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2663 := &x.ListMeta
				yym2664 := z.DecBinary()
				_ = yym2664
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2663) {
				} else {
					z.DecFallback(yyv2663, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2665 := &x.Items
				yym2666 := z.DecBinary()
				_ = yym2666
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2665), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2660)
		} // end switch yys2660
	} // end for yyj2660
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2667 int
	var yyb2667 bool
	var yyhl2667 bool = l >= 0
	yyj2667++
	if yyhl2667 {
		yyb2667 = yyj2667 > l
	} else {
		yyb2667 = r.CheckBreak()
	}
	if yyb2667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2667++
	if yyhl2667 {
		yyb2667 = yyj2667 > l
	} else {
		yyb2667 = r.CheckBreak()
	}
	if yyb2667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2667++
	if yyhl2667 {
		yyb2667 = yyj2667 > l
	} else {
		yyb2667 = r.CheckBreak()
	}
	if yyb2667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2670 := &x.ListMeta
		yym2671 := z.DecBinary()
		_ = yym2671
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2670) {
		} else {
			z.DecFallback(yyv2670, false)
		}
	}
	yyj2667++
	if yyhl2667 {
		yyb2667 = yyj2667 > l
	} else {
		yyb2667 = r.CheckBreak()
	}
	if yyb2667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2672 := &x.Items
		yym2673 := z.DecBinary()
		_ = yym2673
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2672), d)
		}
	}
	for {
		yyj2667++
		if yyhl2667 {
			yyb2667 = yyj2667 > l
		} else {
			yyb2667 = r.CheckBreak()
		}
		if yyb2667 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2667-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2674 := z.EncBinary()
		_ = yym2674
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2675 := !z.EncBinary()
			yy2arr2675 := z.EncBasicHandle().StructToArray
			var yyq2675 [4]bool
			_, _, _ = yysep2675, yyq2675, yy2arr2675
			const yyr2675 bool = false
			yyq2675[0] = x.Kind != ""
			yyq2675[1] = x.APIVersion != ""
			yyq2675[2] = true
			var yynn2675 int
			if yyr2675 || yy2arr2675 {
				r.EncodeArrayStart(4)
			} else {
				yynn2675 = 1
				for _, b := range yyq2675 {
					if b {
						yynn2675++
					}
				}
				r.EncodeMapStart(yynn2675)
				yynn2675 = 0
			}
			if yyr2675 || yy2arr2675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2675[0] {
					yym2677 := z.EncBinary()
					_ = yym2677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2675[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2678 := z.EncBinary()
					_ = yym2678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2675 || yy2arr2675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2675[1] {
					yym2680 := z.EncBinary()
					_ = yym2680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2675[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2681 := z.EncBinary()
					_ = yym2681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2675 || yy2arr2675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2675[2] {
					yy2683 := &x.ObjectMeta
					yy2683.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2675[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2684 := &x.ObjectMeta
					yy2684.CodecEncodeSelf(e)
				}
			}
			if yyr2675 || yy2arr2675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2686 := &x.Target
				yy2686.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2687 := &x.Target
				yy2687.CodecEncodeSelf(e)
			}
			if yyr2675 || yy2arr2675 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2688 := z.DecBinary()
	_ = yym2688
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2689 := r.ContainerType()
		if yyct2689 == codecSelferValueTypeMap1234 {
			yyl2689 := r.ReadMapStart()
			if yyl2689 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2689, d)
			}
		} else if yyct2689 == codecSelferValueTypeArray1234 {
			yyl2689 := r.ReadArrayStart()
			if yyl2689 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2689, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2690Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2690Slc
	var yyhl2690 bool = l >= 0
	for yyj2690 := 0; ; yyj2690++ {
		if yyhl2690 {
			if yyj2690 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2690Slc = r.DecodeBytes(yys2690Slc, true, true)
		yys2690 := string(yys2690Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2690 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2693 := &x.ObjectMeta
				yyv2693.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2694 := &x.Target
				yyv2694.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2690)
		} // end switch yys2690
	} // end for yyj2690
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2695 int
	var yyb2695 bool
	var yyhl2695 bool = l >= 0
	yyj2695++
	if yyhl2695 {
		yyb2695 = yyj2695 > l
	} else {
		yyb2695 = r.CheckBreak()
	}
	if yyb2695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2695++
	if yyhl2695 {
		yyb2695 = yyj2695 > l
	} else {
		yyb2695 = r.CheckBreak()
	}
	if yyb2695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2695++
	if yyhl2695 {
		yyb2695 = yyj2695 > l
	} else {
		yyb2695 = r.CheckBreak()
	}
	if yyb2695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2698 := &x.ObjectMeta
		yyv2698.CodecDecodeSelf(d)
	}
	yyj2695++
	if yyhl2695 {
		yyb2695 = yyj2695 > l
	} else {
		yyb2695 = r.CheckBreak()
	}
	if yyb2695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2699 := &x.Target
		yyv2699.CodecDecodeSelf(d)
	}
	for {
		yyj2695++
		if yyhl2695 {
			yyb2695 = yyj2695 > l
		} else {
			yyb2695 = r.CheckBreak()
		}
		if yyb2695 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2695-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2700 := z.EncBinary()
		_ = yym2700
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2701 := !z.EncBinary()
			yy2arr2701 := z.EncBasicHandle().StructToArray
			var yyq2701 [3]bool
			_, _, _ = yysep2701, yyq2701, yy2arr2701
			const yyr2701 bool = false
			yyq2701[0] = x.Kind != ""
			yyq2701[1] = x.APIVersion != ""
			var yynn2701 int
			if yyr2701 || yy2arr2701 {
				r.EncodeArrayStart(3)
			} else {
				yynn2701 = 1
				for _, b := range yyq2701 {
					if b {
						yynn2701++
					}
				}
				r.EncodeMapStart(yynn2701)
				yynn2701 = 0
			}
			if yyr2701 || yy2arr2701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2701[0] {
					yym2703 := z.EncBinary()
					_ = yym2703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2701[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2704 := z.EncBinary()
					_ = yym2704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2701 || yy2arr2701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2701[1] {
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2701[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2707 := z.EncBinary()
					_ = yym2707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2701 || yy2arr2701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2709 := *x.GracePeriodSeconds
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeInt(int64(yy2709))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2711 := *x.GracePeriodSeconds
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else {
						r.EncodeInt(int64(yy2711))
					}
				}
			}
			if yyr2701 || yy2arr2701 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2713 := z.DecBinary()
	_ = yym2713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2714 := r.ContainerType()
		if yyct2714 == codecSelferValueTypeMap1234 {
			yyl2714 := r.ReadMapStart()
			if yyl2714 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2714, d)
			}
		} else if yyct2714 == codecSelferValueTypeArray1234 {
			yyl2714 := r.ReadArrayStart()
			if yyl2714 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2715Slc
	var yyhl2715 bool = l >= 0
	for yyj2715 := 0; ; yyj2715++ {
		if yyhl2715 {
			if yyj2715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2715Slc = r.DecodeBytes(yys2715Slc, true, true)
		yys2715 := string(yys2715Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2715 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2719 := z.DecBinary()
				_ = yym2719
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2715)
		} // end switch yys2715
	} // end for yyj2715
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2720 int
	var yyb2720 bool
	var yyhl2720 bool = l >= 0
	yyj2720++
	if yyhl2720 {
		yyb2720 = yyj2720 > l
	} else {
		yyb2720 = r.CheckBreak()
	}
	if yyb2720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2720++
	if yyhl2720 {
		yyb2720 = yyj2720 > l
	} else {
		yyb2720 = r.CheckBreak()
	}
	if yyb2720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2720++
	if yyhl2720 {
		yyb2720 = yyj2720 > l
	} else {
		yyb2720 = r.CheckBreak()
	}
	if yyb2720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2724 := z.DecBinary()
		_ = yym2724
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2720++
		if yyhl2720 {
			yyb2720 = yyj2720 > l
		} else {
			yyb2720 = r.CheckBreak()
		}
		if yyb2720 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2720-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2725 := z.EncBinary()
		_ = yym2725
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2726 := !z.EncBinary()
			yy2arr2726 := z.EncBasicHandle().StructToArray
			var yyq2726 [4]bool
			_, _, _ = yysep2726, yyq2726, yy2arr2726
			const yyr2726 bool = false
			yyq2726[0] = x.Kind != ""
			yyq2726[1] = x.APIVersion != ""
			var yynn2726 int
			if yyr2726 || yy2arr2726 {
				r.EncodeArrayStart(4)
			} else {
				yynn2726 = 2
				for _, b := range yyq2726 {
					if b {
						yynn2726++
					}
				}
				r.EncodeMapStart(yynn2726)
				yynn2726 = 0
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2726[0] {
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2726[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2726[1] {
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2726[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2734 := z.EncBinary()
				_ = yym2734
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2735 := z.EncBinary()
				_ = yym2735
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2737 := z.EncBinary()
				_ = yym2737
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2738 := z.EncBinary()
				_ = yym2738
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr2726 || yy2arr2726 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2739 := z.DecBinary()
	_ = yym2739
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2740 := r.ContainerType()
		if yyct2740 == codecSelferValueTypeMap1234 {
			yyl2740 := r.ReadMapStart()
			if yyl2740 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2740, d)
			}
		} else if yyct2740 == codecSelferValueTypeArray1234 {
			yyl2740 := r.ReadArrayStart()
			if yyl2740 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2740, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2741Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2741Slc
	var yyhl2741 bool = l >= 0
	for yyj2741 := 0; ; yyj2741++ {
		if yyhl2741 {
			if yyj2741 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2741Slc = r.DecodeBytes(yys2741Slc, true, true)
		yys2741 := string(yys2741Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2741 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2741)
		} // end switch yys2741
	} // end for yyj2741
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2746 int
	var yyb2746 bool
	var yyhl2746 bool = l >= 0
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj2746++
		if yyhl2746 {
			yyb2746 = yyj2746 > l
		} else {
			yyb2746 = r.CheckBreak()
		}
		if yyb2746 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2746-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2751 := z.EncBinary()
		_ = yym2751
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2752 := !z.EncBinary()
			yy2arr2752 := z.EncBasicHandle().StructToArray
			var yyq2752 [7]bool
			_, _, _ = yysep2752, yyq2752, yy2arr2752
			const yyr2752 bool = false
			yyq2752[0] = x.Kind != ""
			yyq2752[1] = x.APIVersion != ""
			yyq2752[2] = x.LabelSelector != ""
			yyq2752[3] = x.FieldSelector != ""
			yyq2752[4] = x.Watch != false
			yyq2752[5] = x.ResourceVersion != ""
			yyq2752[6] = x.TimeoutSeconds != nil
			var yynn2752 int
			if yyr2752 || yy2arr2752 {
				r.EncodeArrayStart(7)
			} else {
				yynn2752 = 0
				for _, b := range yyq2752 {
					if b {
						yynn2752++
					}
				}
				r.EncodeMapStart(yynn2752)
				yynn2752 = 0
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[0] {
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2752[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[1] {
					yym2757 := z.EncBinary()
					_ = yym2757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2752[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2758 := z.EncBinary()
					_ = yym2758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[2] {
					yym2760 := z.EncBinary()
					_ = yym2760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2752[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[3] {
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2752[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[4] {
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2752[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2767 := z.EncBinary()
					_ = yym2767
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[5] {
					yym2769 := z.EncBinary()
					_ = yym2769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2752[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2770 := z.EncBinary()
					_ = yym2770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2772 := *x.TimeoutSeconds
						yym2773 := z.EncBinary()
						_ = yym2773
						if false {
						} else {
							r.EncodeInt(int64(yy2772))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2752[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2774 := *x.TimeoutSeconds
						yym2775 := z.EncBinary()
						_ = yym2775
						if false {
						} else {
							r.EncodeInt(int64(yy2774))
						}
					}
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2776 := z.DecBinary()
	_ = yym2776
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2777 := r.ContainerType()
		if yyct2777 == codecSelferValueTypeMap1234 {
			yyl2777 := r.ReadMapStart()
			if yyl2777 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2777, d)
			}
		} else if yyct2777 == codecSelferValueTypeArray1234 {
			yyl2777 := r.ReadArrayStart()
			if yyl2777 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2777, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2778Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2778Slc
	var yyhl2778 bool = l >= 0
	for yyj2778 := 0; ; yyj2778++ {
		if yyhl2778 {
			if yyj2778 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2778Slc = r.DecodeBytes(yys2778Slc, true, true)
		yys2778 := string(yys2778Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2778 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2786 := z.DecBinary()
				_ = yym2786
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2778)
		} // end switch yys2778
	} // end for yyj2778
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2787 int
	var yyb2787 bool
	var yyhl2787 bool = l >= 0
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2795 := z.DecBinary()
		_ = yym2795
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2787++
		if yyhl2787 {
			yyb2787 = yyj2787 > l
		} else {
			yyb2787 = r.CheckBreak()
		}
		if yyb2787 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2787-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2796 := z.EncBinary()
		_ = yym2796
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2797 := !z.EncBinary()
			yy2arr2797 := z.EncBasicHandle().StructToArray
			var yyq2797 [10]bool
			_, _, _ = yysep2797, yyq2797, yy2arr2797
			const yyr2797 bool = false
			yyq2797[0] = x.Kind != ""
			yyq2797[1] = x.APIVersion != ""
			yyq2797[2] = x.Container != ""
			yyq2797[3] = x.Follow != false
			yyq2797[4] = x.Previous != false
			yyq2797[5] = x.SinceSeconds != nil
			yyq2797[6] = x.SinceTime != nil
			yyq2797[7] = x.Timestamps != false
			yyq2797[8] = x.TailLines != nil
			yyq2797[9] = x.LimitBytes != nil
			var yynn2797 int
			if yyr2797 || yy2arr2797 {
				r.EncodeArrayStart(10)
			} else {
				yynn2797 = 0
				for _, b := range yyq2797 {
					if b {
						yynn2797++
					}
				}
				r.EncodeMapStart(yynn2797)
				yynn2797 = 0
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[0] {
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2797[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2800 := z.EncBinary()
					_ = yym2800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[1] {
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2797[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2803 := z.EncBinary()
					_ = yym2803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[2] {
					yym2805 := z.EncBinary()
					_ = yym2805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2797[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2806 := z.EncBinary()
					_ = yym2806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[3] {
					yym2808 := z.EncBinary()
					_ = yym2808
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2797[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[4] {
					yym2811 := z.EncBinary()
					_ = yym2811
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2797[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2812 := z.EncBinary()
					_ = yym2812
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2814 := *x.SinceSeconds
						yym2815 := z.EncBinary()
						_ = yym2815
						if false {
						} else {
							r.EncodeInt(int64(yy2814))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2797[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2816 := *x.SinceSeconds
						yym2817 := z.EncBinary()
						_ = yym2817
						if false {
						} else {
							r.EncodeInt(int64(yy2816))
						}
					}
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2819 := z.EncBinary()
						_ = yym2819
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2819 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2819 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2797[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2820 := z.EncBinary()
						_ = yym2820
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2820 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2820 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[7] {
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2797[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2823 := z.EncBinary()
					_ = yym2823
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2825 := *x.TailLines
						yym2826 := z.EncBinary()
						_ = yym2826
						if false {
						} else {
							r.EncodeInt(int64(yy2825))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2797[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2827 := *x.TailLines
						yym2828 := z.EncBinary()
						_ = yym2828
						if false {
						} else {
							r.EncodeInt(int64(yy2827))
						}
					}
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2830 := *x.LimitBytes
						yym2831 := z.EncBinary()
						_ = yym2831
						if false {
						} else {
							r.EncodeInt(int64(yy2830))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2797[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2832 := *x.LimitBytes
						yym2833 := z.EncBinary()
						_ = yym2833
						if false {
						} else {
							r.EncodeInt(int64(yy2832))
						}
					}
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2834 := z.DecBinary()
	_ = yym2834
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2835 := r.ContainerType()
		if yyct2835 == codecSelferValueTypeMap1234 {
			yyl2835 := r.ReadMapStart()
			if yyl2835 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2835, d)
			}
		} else if yyct2835 == codecSelferValueTypeArray1234 {
			yyl2835 := r.ReadArrayStart()
			if yyl2835 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2835, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2836Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2836Slc
	var yyhl2836 bool = l >= 0
	for yyj2836 := 0; ; yyj2836++ {
		if yyhl2836 {
			if yyj2836 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2836Slc = r.DecodeBytes(yys2836Slc, true, true)
		yys2836 := string(yys2836Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2836 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2843 := z.DecBinary()
				_ = yym2843
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2845 := z.DecBinary()
				_ = yym2845
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2845 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2845 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2848 := z.DecBinary()
				_ = yym2848
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2850 := z.DecBinary()
				_ = yym2850
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2836)
		} // end switch yys2836
	} // end for yyj2836
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2851 int
	var yyb2851 bool
	var yyhl2851 bool = l >= 0
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2858 := z.DecBinary()
		_ = yym2858
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2860 := z.DecBinary()
		_ = yym2860
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2860 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2860 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2863 := z.DecBinary()
		_ = yym2863
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2865 := z.DecBinary()
		_ = yym2865
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2851++
		if yyhl2851 {
			yyb2851 = yyj2851 > l
		} else {
			yyb2851 = r.CheckBreak()
		}
		if yyb2851 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2851-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2866 := z.EncBinary()
		_ = yym2866
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2867 := !z.EncBinary()
			yy2arr2867 := z.EncBasicHandle().StructToArray
			var yyq2867 [7]bool
			_, _, _ = yysep2867, yyq2867, yy2arr2867
			const yyr2867 bool = false
			yyq2867[0] = x.Kind != ""
			yyq2867[1] = x.APIVersion != ""
			yyq2867[2] = x.Stdin != false
			yyq2867[3] = x.Stdout != false
			yyq2867[4] = x.Stderr != false
			yyq2867[5] = x.TTY != false
			yyq2867[6] = x.Container != ""
			var yynn2867 int
			if yyr2867 || yy2arr2867 {
				r.EncodeArrayStart(7)
			} else {
				yynn2867 = 0
				for _, b := range yyq2867 {
					if b {
						yynn2867++
					}
				}
				r.EncodeMapStart(yynn2867)
				yynn2867 = 0
			}
			if yyr2867 || yy2arr2867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2867[0] {
					yym2869 := z.EncBinary()
					_ = yym2869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2867[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2870 := z.EncBinary()
					_ = yym2870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2867 || yy2arr2867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2867[1] {
					yym2872 := z.EncBinary()
					_ = yym2872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2867[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2873 := z.EncBinary()
					_ = yym2873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2867 || yy2arr2867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2867[2] {
					yym2875 := z.EncBinary()
					_ = yym2875
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2867[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2867 || yy2arr2867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2867[3] {
					yym2878 := z.EncBinary()
					_ = yym2878
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2867[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2879 := z.EncBinary()
					_ = yym2879
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2867 || yy2arr2867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2867[4] {
					yym2881 := z.EncBinary()
					_ = yym2881
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2867[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2882 := z.EncBinary()
					_ = yym2882
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2867 || yy2arr2867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2867[5] {
					yym2884 := z.EncBinary()
					_ = yym2884
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2867[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2885 := z.EncBinary()
					_ = yym2885
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2867 || yy2arr2867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2867[6] {
					yym2887 := z.EncBinary()
					_ = yym2887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2867[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2888 := z.EncBinary()
					_ = yym2888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2867 || yy2arr2867 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2889 := z.DecBinary()
	_ = yym2889
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2890 := r.ContainerType()
		if yyct2890 == codecSelferValueTypeMap1234 {
			yyl2890 := r.ReadMapStart()
			if yyl2890 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2890, d)
			}
		} else if yyct2890 == codecSelferValueTypeArray1234 {
			yyl2890 := r.ReadArrayStart()
			if yyl2890 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2890, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2891Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2891Slc
	var yyhl2891 bool = l >= 0
	for yyj2891 := 0; ; yyj2891++ {
		if yyhl2891 {
			if yyj2891 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2891Slc = r.DecodeBytes(yys2891Slc, true, true)
		yys2891 := string(yys2891Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2891 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2891)
		} // end switch yys2891
	} // end for yyj2891
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2899 int
	var yyb2899 bool
	var yyhl2899 bool = l >= 0
	yyj2899++
	if yyhl2899 {
		yyb2899 = yyj2899 > l
	} else {
		yyb2899 = r.CheckBreak()
	}
	if yyb2899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2899++
	if yyhl2899 {
		yyb2899 = yyj2899 > l
	} else {
		yyb2899 = r.CheckBreak()
	}
	if yyb2899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2899++
	if yyhl2899 {
		yyb2899 = yyj2899 > l
	} else {
		yyb2899 = r.CheckBreak()
	}
	if yyb2899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2899++
	if yyhl2899 {
		yyb2899 = yyj2899 > l
	} else {
		yyb2899 = r.CheckBreak()
	}
	if yyb2899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2899++
	if yyhl2899 {
		yyb2899 = yyj2899 > l
	} else {
		yyb2899 = r.CheckBreak()
	}
	if yyb2899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2899++
	if yyhl2899 {
		yyb2899 = yyj2899 > l
	} else {
		yyb2899 = r.CheckBreak()
	}
	if yyb2899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2899++
	if yyhl2899 {
		yyb2899 = yyj2899 > l
	} else {
		yyb2899 = r.CheckBreak()
	}
	if yyb2899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2899++
		if yyhl2899 {
			yyb2899 = yyj2899 > l
		} else {
			yyb2899 = r.CheckBreak()
		}
		if yyb2899 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2899-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2907 := z.EncBinary()
		_ = yym2907
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2908 := !z.EncBinary()
			yy2arr2908 := z.EncBasicHandle().StructToArray
			var yyq2908 [8]bool
			_, _, _ = yysep2908, yyq2908, yy2arr2908
			const yyr2908 bool = false
			yyq2908[0] = x.Kind != ""
			yyq2908[1] = x.APIVersion != ""
			yyq2908[2] = x.Stdin != false
			yyq2908[3] = x.Stdout != false
			yyq2908[4] = x.Stderr != false
			yyq2908[5] = x.TTY != false
			yyq2908[6] = x.Container != ""
			var yynn2908 int
			if yyr2908 || yy2arr2908 {
				r.EncodeArrayStart(8)
			} else {
				yynn2908 = 1
				for _, b := range yyq2908 {
					if b {
						yynn2908++
					}
				}
				r.EncodeMapStart(yynn2908)
				yynn2908 = 0
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[0] {
					yym2910 := z.EncBinary()
					_ = yym2910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2908[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2911 := z.EncBinary()
					_ = yym2911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[1] {
					yym2913 := z.EncBinary()
					_ = yym2913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2908[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[2] {
					yym2916 := z.EncBinary()
					_ = yym2916
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2908[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2917 := z.EncBinary()
					_ = yym2917
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[3] {
					yym2919 := z.EncBinary()
					_ = yym2919
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2908[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2920 := z.EncBinary()
					_ = yym2920
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[4] {
					yym2922 := z.EncBinary()
					_ = yym2922
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2908[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2923 := z.EncBinary()
					_ = yym2923
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[5] {
					yym2925 := z.EncBinary()
					_ = yym2925
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2908[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2926 := z.EncBinary()
					_ = yym2926
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2908[6] {
					yym2928 := z.EncBinary()
					_ = yym2928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2908[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2929 := z.EncBinary()
					_ = yym2929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2932 := z.EncBinary()
					_ = yym2932
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr2908 || yy2arr2908 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2933 := z.DecBinary()
	_ = yym2933
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2934 := r.ContainerType()
		if yyct2934 == codecSelferValueTypeMap1234 {
			yyl2934 := r.ReadMapStart()
			if yyl2934 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2934, d)
			}
		} else if yyct2934 == codecSelferValueTypeArray1234 {
			yyl2934 := r.ReadArrayStart()
			if yyl2934 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2934, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2935Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2935Slc
	var yyhl2935 bool = l >= 0
	for yyj2935 := 0; ; yyj2935++ {
		if yyhl2935 {
			if yyj2935 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2935Slc = r.DecodeBytes(yys2935Slc, true, true)
		yys2935 := string(yys2935Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2935 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2943 := &x.Command
				yym2944 := z.DecBinary()
				_ = yym2944
				if false {
				} else {
					z.F.DecSliceStringX(yyv2943, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2935)
		} // end switch yys2935
	} // end for yyj2935
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2945 int
	var yyb2945 bool
	var yyhl2945 bool = l >= 0
	yyj2945++
	if yyhl2945 {
		yyb2945 = yyj2945 > l
	} else {
		yyb2945 = r.CheckBreak()
	}
	if yyb2945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2945++
	if yyhl2945 {
		yyb2945 = yyj2945 > l
	} else {
		yyb2945 = r.CheckBreak()
	}
	if yyb2945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2945++
	if yyhl2945 {
		yyb2945 = yyj2945 > l
	} else {
		yyb2945 = r.CheckBreak()
	}
	if yyb2945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2945++
	if yyhl2945 {
		yyb2945 = yyj2945 > l
	} else {
		yyb2945 = r.CheckBreak()
	}
	if yyb2945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2945++
	if yyhl2945 {
		yyb2945 = yyj2945 > l
	} else {
		yyb2945 = r.CheckBreak()
	}
	if yyb2945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2945++
	if yyhl2945 {
		yyb2945 = yyj2945 > l
	} else {
		yyb2945 = r.CheckBreak()
	}
	if yyb2945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2945++
	if yyhl2945 {
		yyb2945 = yyj2945 > l
	} else {
		yyb2945 = r.CheckBreak()
	}
	if yyb2945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2945++
	if yyhl2945 {
		yyb2945 = yyj2945 > l
	} else {
		yyb2945 = r.CheckBreak()
	}
	if yyb2945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2953 := &x.Command
		yym2954 := z.DecBinary()
		_ = yym2954
		if false {
		} else {
			z.F.DecSliceStringX(yyv2953, false, d)
		}
	}
	for {
		yyj2945++
		if yyhl2945 {
			yyb2945 = yyj2945 > l
		} else {
			yyb2945 = r.CheckBreak()
		}
		if yyb2945 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2945-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2955 := z.EncBinary()
		_ = yym2955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2956 := !z.EncBinary()
			yy2arr2956 := z.EncBasicHandle().StructToArray
			var yyq2956 [3]bool
			_, _, _ = yysep2956, yyq2956, yy2arr2956
			const yyr2956 bool = false
			yyq2956[0] = x.Kind != ""
			yyq2956[1] = x.APIVersion != ""
			yyq2956[2] = x.Path != ""
			var yynn2956 int
			if yyr2956 || yy2arr2956 {
				r.EncodeArrayStart(3)
			} else {
				yynn2956 = 0
				for _, b := range yyq2956 {
					if b {
						yynn2956++
					}
				}
				r.EncodeMapStart(yynn2956)
				yynn2956 = 0
			}
			if yyr2956 || yy2arr2956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2956[0] {
					yym2958 := z.EncBinary()
					_ = yym2958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2956[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2959 := z.EncBinary()
					_ = yym2959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2956 || yy2arr2956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2956[1] {
					yym2961 := z.EncBinary()
					_ = yym2961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2956[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2956 || yy2arr2956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2956[2] {
					yym2964 := z.EncBinary()
					_ = yym2964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2956[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr2956 || yy2arr2956 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2966 := z.DecBinary()
	_ = yym2966
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2967 := r.ContainerType()
		if yyct2967 == codecSelferValueTypeMap1234 {
			yyl2967 := r.ReadMapStart()
			if yyl2967 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2967, d)
			}
		} else if yyct2967 == codecSelferValueTypeArray1234 {
			yyl2967 := r.ReadArrayStart()
			if yyl2967 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2967, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2968Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2968Slc
	var yyhl2968 bool = l >= 0
	for yyj2968 := 0; ; yyj2968++ {
		if yyhl2968 {
			if yyj2968 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2968Slc = r.DecodeBytes(yys2968Slc, true, true)
		yys2968 := string(yys2968Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2968 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2968)
		} // end switch yys2968
	} // end for yyj2968
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2972 int
	var yyb2972 bool
	var yyhl2972 bool = l >= 0
	yyj2972++
	if yyhl2972 {
		yyb2972 = yyj2972 > l
	} else {
		yyb2972 = r.CheckBreak()
	}
	if yyb2972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2972++
	if yyhl2972 {
		yyb2972 = yyj2972 > l
	} else {
		yyb2972 = r.CheckBreak()
	}
	if yyb2972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2972++
	if yyhl2972 {
		yyb2972 = yyj2972 > l
	} else {
		yyb2972 = r.CheckBreak()
	}
	if yyb2972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2972++
		if yyhl2972 {
			yyb2972 = yyj2972 > l
		} else {
			yyb2972 = r.CheckBreak()
		}
		if yyb2972 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2972-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2976 := z.EncBinary()
		_ = yym2976
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2977 := !z.EncBinary()
			yy2arr2977 := z.EncBasicHandle().StructToArray
			var yyq2977 [7]bool
			_, _, _ = yysep2977, yyq2977, yy2arr2977
			const yyr2977 bool = false
			yyq2977[0] = x.Kind != ""
			yyq2977[1] = x.Namespace != ""
			yyq2977[2] = x.Name != ""
			yyq2977[3] = x.UID != ""
			yyq2977[4] = x.APIVersion != ""
			yyq2977[5] = x.ResourceVersion != ""
			yyq2977[6] = x.FieldPath != ""
			var yynn2977 int
			if yyr2977 || yy2arr2977 {
				r.EncodeArrayStart(7)
			} else {
				yynn2977 = 0
				for _, b := range yyq2977 {
					if b {
						yynn2977++
					}
				}
				r.EncodeMapStart(yynn2977)
				yynn2977 = 0
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2977[0] {
					yym2979 := z.EncBinary()
					_ = yym2979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2977[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2980 := z.EncBinary()
					_ = yym2980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2977[1] {
					yym2982 := z.EncBinary()
					_ = yym2982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2977[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2983 := z.EncBinary()
					_ = yym2983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2977[2] {
					yym2985 := z.EncBinary()
					_ = yym2985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2977[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2986 := z.EncBinary()
					_ = yym2986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2977[3] {
					yym2988 := z.EncBinary()
					_ = yym2988
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2977[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2989 := z.EncBinary()
					_ = yym2989
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2977[4] {
					yym2991 := z.EncBinary()
					_ = yym2991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2977[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2992 := z.EncBinary()
					_ = yym2992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2977[5] {
					yym2994 := z.EncBinary()
					_ = yym2994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2977[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2995 := z.EncBinary()
					_ = yym2995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2977[6] {
					yym2997 := z.EncBinary()
					_ = yym2997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2977[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2998 := z.EncBinary()
					_ = yym2998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2999 := z.DecBinary()
	_ = yym2999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3000 := r.ContainerType()
		if yyct3000 == codecSelferValueTypeMap1234 {
			yyl3000 := r.ReadMapStart()
			if yyl3000 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3000, d)
			}
		} else if yyct3000 == codecSelferValueTypeArray1234 {
			yyl3000 := r.ReadArrayStart()
			if yyl3000 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3001Slc
	var yyhl3001 bool = l >= 0
	for yyj3001 := 0; ; yyj3001++ {
		if yyhl3001 {
			if yyj3001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3001Slc = r.DecodeBytes(yys3001Slc, true, true)
		yys3001 := string(yys3001Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3001 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3001)
		} // end switch yys3001
	} // end for yyj3001
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3009 int
	var yyb3009 bool
	var yyhl3009 bool = l >= 0
	yyj3009++
	if yyhl3009 {
		yyb3009 = yyj3009 > l
	} else {
		yyb3009 = r.CheckBreak()
	}
	if yyb3009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3009++
	if yyhl3009 {
		yyb3009 = yyj3009 > l
	} else {
		yyb3009 = r.CheckBreak()
	}
	if yyb3009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3009++
	if yyhl3009 {
		yyb3009 = yyj3009 > l
	} else {
		yyb3009 = r.CheckBreak()
	}
	if yyb3009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3009++
	if yyhl3009 {
		yyb3009 = yyj3009 > l
	} else {
		yyb3009 = r.CheckBreak()
	}
	if yyb3009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3009++
	if yyhl3009 {
		yyb3009 = yyj3009 > l
	} else {
		yyb3009 = r.CheckBreak()
	}
	if yyb3009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3009++
	if yyhl3009 {
		yyb3009 = yyj3009 > l
	} else {
		yyb3009 = r.CheckBreak()
	}
	if yyb3009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3009++
	if yyhl3009 {
		yyb3009 = yyj3009 > l
	} else {
		yyb3009 = r.CheckBreak()
	}
	if yyb3009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3009++
		if yyhl3009 {
			yyb3009 = yyj3009 > l
		} else {
			yyb3009 = r.CheckBreak()
		}
		if yyb3009 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3009-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3017 := z.EncBinary()
		_ = yym3017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3018 := !z.EncBinary()
			yy2arr3018 := z.EncBasicHandle().StructToArray
			var yyq3018 [1]bool
			_, _, _ = yysep3018, yyq3018, yy2arr3018
			const yyr3018 bool = false
			yyq3018[0] = x.Name != ""
			var yynn3018 int
			if yyr3018 || yy2arr3018 {
				r.EncodeArrayStart(1)
			} else {
				yynn3018 = 0
				for _, b := range yyq3018 {
					if b {
						yynn3018++
					}
				}
				r.EncodeMapStart(yynn3018)
				yynn3018 = 0
			}
			if yyr3018 || yy2arr3018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3018[0] {
					yym3020 := z.EncBinary()
					_ = yym3020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3018[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3021 := z.EncBinary()
					_ = yym3021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3018 || yy2arr3018 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3022 := z.DecBinary()
	_ = yym3022
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3023 := r.ContainerType()
		if yyct3023 == codecSelferValueTypeMap1234 {
			yyl3023 := r.ReadMapStart()
			if yyl3023 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3023, d)
			}
		} else if yyct3023 == codecSelferValueTypeArray1234 {
			yyl3023 := r.ReadArrayStart()
			if yyl3023 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3023, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3024Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3024Slc
	var yyhl3024 bool = l >= 0
	for yyj3024 := 0; ; yyj3024++ {
		if yyhl3024 {
			if yyj3024 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3024Slc = r.DecodeBytes(yys3024Slc, true, true)
		yys3024 := string(yys3024Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3024 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3024)
		} // end switch yys3024
	} // end for yyj3024
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3026 int
	var yyb3026 bool
	var yyhl3026 bool = l >= 0
	yyj3026++
	if yyhl3026 {
		yyb3026 = yyj3026 > l
	} else {
		yyb3026 = r.CheckBreak()
	}
	if yyb3026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3026++
		if yyhl3026 {
			yyb3026 = yyj3026 > l
		} else {
			yyb3026 = r.CheckBreak()
		}
		if yyb3026 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3026-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3028 := z.EncBinary()
		_ = yym3028
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3029 := !z.EncBinary()
			yy2arr3029 := z.EncBasicHandle().StructToArray
			var yyq3029 [3]bool
			_, _, _ = yysep3029, yyq3029, yy2arr3029
			const yyr3029 bool = false
			yyq3029[0] = x.Kind != ""
			yyq3029[1] = x.APIVersion != ""
			yyq3029[2] = true
			var yynn3029 int
			if yyr3029 || yy2arr3029 {
				r.EncodeArrayStart(3)
			} else {
				yynn3029 = 0
				for _, b := range yyq3029 {
					if b {
						yynn3029++
					}
				}
				r.EncodeMapStart(yynn3029)
				yynn3029 = 0
			}
			if yyr3029 || yy2arr3029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3029[0] {
					yym3031 := z.EncBinary()
					_ = yym3031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3029[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3032 := z.EncBinary()
					_ = yym3032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3029 || yy2arr3029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3029[1] {
					yym3034 := z.EncBinary()
					_ = yym3034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3029[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3035 := z.EncBinary()
					_ = yym3035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3029 || yy2arr3029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3029[2] {
					yy3037 := &x.Reference
					yy3037.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3029[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3038 := &x.Reference
					yy3038.CodecEncodeSelf(e)
				}
			}
			if yyr3029 || yy2arr3029 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3039 := z.DecBinary()
	_ = yym3039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3040 := r.ContainerType()
		if yyct3040 == codecSelferValueTypeMap1234 {
			yyl3040 := r.ReadMapStart()
			if yyl3040 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3040, d)
			}
		} else if yyct3040 == codecSelferValueTypeArray1234 {
			yyl3040 := r.ReadArrayStart()
			if yyl3040 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3040, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3041Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3041Slc
	var yyhl3041 bool = l >= 0
	for yyj3041 := 0; ; yyj3041++ {
		if yyhl3041 {
			if yyj3041 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3041Slc = r.DecodeBytes(yys3041Slc, true, true)
		yys3041 := string(yys3041Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3041 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3044 := &x.Reference
				yyv3044.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3041)
		} // end switch yys3041
	} // end for yyj3041
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3045 int
	var yyb3045 bool
	var yyhl3045 bool = l >= 0
	yyj3045++
	if yyhl3045 {
		yyb3045 = yyj3045 > l
	} else {
		yyb3045 = r.CheckBreak()
	}
	if yyb3045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3045++
	if yyhl3045 {
		yyb3045 = yyj3045 > l
	} else {
		yyb3045 = r.CheckBreak()
	}
	if yyb3045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3045++
	if yyhl3045 {
		yyb3045 = yyj3045 > l
	} else {
		yyb3045 = r.CheckBreak()
	}
	if yyb3045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3048 := &x.Reference
		yyv3048.CodecDecodeSelf(d)
	}
	for {
		yyj3045++
		if yyhl3045 {
			yyb3045 = yyj3045 > l
		} else {
			yyb3045 = r.CheckBreak()
		}
		if yyb3045 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3045-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3049 := z.EncBinary()
		_ = yym3049
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3050 := !z.EncBinary()
			yy2arr3050 := z.EncBasicHandle().StructToArray
			var yyq3050 [2]bool
			_, _, _ = yysep3050, yyq3050, yy2arr3050
			const yyr3050 bool = false
			yyq3050[0] = x.Component != ""
			yyq3050[1] = x.Host != ""
			var yynn3050 int
			if yyr3050 || yy2arr3050 {
				r.EncodeArrayStart(2)
			} else {
				yynn3050 = 0
				for _, b := range yyq3050 {
					if b {
						yynn3050++
					}
				}
				r.EncodeMapStart(yynn3050)
				yynn3050 = 0
			}
			if yyr3050 || yy2arr3050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3050[0] {
					yym3052 := z.EncBinary()
					_ = yym3052
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3050[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3053 := z.EncBinary()
					_ = yym3053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3050 || yy2arr3050 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3050[1] {
					yym3055 := z.EncBinary()
					_ = yym3055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3050[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3056 := z.EncBinary()
					_ = yym3056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3050 || yy2arr3050 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3057 := z.DecBinary()
	_ = yym3057
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3058 := r.ContainerType()
		if yyct3058 == codecSelferValueTypeMap1234 {
			yyl3058 := r.ReadMapStart()
			if yyl3058 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3058, d)
			}
		} else if yyct3058 == codecSelferValueTypeArray1234 {
			yyl3058 := r.ReadArrayStart()
			if yyl3058 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3058, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3059Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3059Slc
	var yyhl3059 bool = l >= 0
	for yyj3059 := 0; ; yyj3059++ {
		if yyhl3059 {
			if yyj3059 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3059Slc = r.DecodeBytes(yys3059Slc, true, true)
		yys3059 := string(yys3059Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3059 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3059)
		} // end switch yys3059
	} // end for yyj3059
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3062 int
	var yyb3062 bool
	var yyhl3062 bool = l >= 0
	yyj3062++
	if yyhl3062 {
		yyb3062 = yyj3062 > l
	} else {
		yyb3062 = r.CheckBreak()
	}
	if yyb3062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3062++
	if yyhl3062 {
		yyb3062 = yyj3062 > l
	} else {
		yyb3062 = r.CheckBreak()
	}
	if yyb3062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3062++
		if yyhl3062 {
			yyb3062 = yyj3062 > l
		} else {
			yyb3062 = r.CheckBreak()
		}
		if yyb3062 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3062-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3065 := z.EncBinary()
		_ = yym3065
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3066 := !z.EncBinary()
			yy2arr3066 := z.EncBasicHandle().StructToArray
			var yyq3066 [11]bool
			_, _, _ = yysep3066, yyq3066, yy2arr3066
			const yyr3066 bool = false
			yyq3066[0] = x.Kind != ""
			yyq3066[1] = x.APIVersion != ""
			yyq3066[4] = x.Reason != ""
			yyq3066[5] = x.Message != ""
			yyq3066[6] = true
			yyq3066[7] = true
			yyq3066[8] = true
			yyq3066[9] = x.Count != 0
			yyq3066[10] = x.Type != ""
			var yynn3066 int
			if yyr3066 || yy2arr3066 {
				r.EncodeArrayStart(11)
			} else {
				yynn3066 = 2
				for _, b := range yyq3066 {
					if b {
						yynn3066++
					}
				}
				r.EncodeMapStart(yynn3066)
				yynn3066 = 0
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[0] {
					yym3068 := z.EncBinary()
					_ = yym3068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3066[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3069 := z.EncBinary()
					_ = yym3069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[1] {
					yym3071 := z.EncBinary()
					_ = yym3071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3066[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3072 := z.EncBinary()
					_ = yym3072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3074 := &x.ObjectMeta
				yy3074.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3075 := &x.ObjectMeta
				yy3075.CodecEncodeSelf(e)
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3077 := &x.InvolvedObject
				yy3077.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3078 := &x.InvolvedObject
				yy3078.CodecEncodeSelf(e)
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[4] {
					yym3080 := z.EncBinary()
					_ = yym3080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3066[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3081 := z.EncBinary()
					_ = yym3081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[5] {
					yym3083 := z.EncBinary()
					_ = yym3083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3066[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3084 := z.EncBinary()
					_ = yym3084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[6] {
					yy3086 := &x.Source
					yy3086.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3087 := &x.Source
					yy3087.CodecEncodeSelf(e)
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[7] {
					yy3089 := &x.FirstTimestamp
					yym3090 := z.EncBinary()
					_ = yym3090
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3089) {
					} else if yym3090 {
						z.EncBinaryMarshal(yy3089)
					} else if !yym3090 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3089)
					} else {
						z.EncFallback(yy3089)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3091 := &x.FirstTimestamp
					yym3092 := z.EncBinary()
					_ = yym3092
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3091) {
					} else if yym3092 {
						z.EncBinaryMarshal(yy3091)
					} else if !yym3092 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3091)
					} else {
						z.EncFallback(yy3091)
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[8] {
					yy3094 := &x.LastTimestamp
					yym3095 := z.EncBinary()
					_ = yym3095
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3094) {
					} else if yym3095 {
						z.EncBinaryMarshal(yy3094)
					} else if !yym3095 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3094)
					} else {
						z.EncFallback(yy3094)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3096 := &x.LastTimestamp
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3096) {
					} else if yym3097 {
						z.EncBinaryMarshal(yy3096)
					} else if !yym3097 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3096)
					} else {
						z.EncFallback(yy3096)
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[9] {
					yym3099 := z.EncBinary()
					_ = yym3099
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3066[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3100 := z.EncBinary()
					_ = yym3100
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[10] {
					yym3102 := z.EncBinary()
					_ = yym3102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3066[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3103 := z.EncBinary()
					_ = yym3103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3104 := z.DecBinary()
	_ = yym3104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3105 := r.ContainerType()
		if yyct3105 == codecSelferValueTypeMap1234 {
			yyl3105 := r.ReadMapStart()
			if yyl3105 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3105, d)
			}
		} else if yyct3105 == codecSelferValueTypeArray1234 {
			yyl3105 := r.ReadArrayStart()
			if yyl3105 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3105, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3106Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3106Slc
	var yyhl3106 bool = l >= 0
	for yyj3106 := 0; ; yyj3106++ {
		if yyhl3106 {
			if yyj3106 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3106Slc = r.DecodeBytes(yys3106Slc, true, true)
		yys3106 := string(yys3106Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3106 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3109 := &x.ObjectMeta
				yyv3109.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3110 := &x.InvolvedObject
				yyv3110.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3113 := &x.Source
				yyv3113.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3114 := &x.FirstTimestamp
				yym3115 := z.DecBinary()
				_ = yym3115
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3114) {
				} else if yym3115 {
					z.DecBinaryUnmarshal(yyv3114)
				} else if !yym3115 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3114)
				} else {
					z.DecFallback(yyv3114, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3116 := &x.LastTimestamp
				yym3117 := z.DecBinary()
				_ = yym3117
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3116) {
				} else if yym3117 {
					z.DecBinaryUnmarshal(yyv3116)
				} else if !yym3117 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3116)
				} else {
					z.DecFallback(yyv3116, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3106)
		} // end switch yys3106
	} // end for yyj3106
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3120 int
	var yyb3120 bool
	var yyhl3120 bool = l >= 0
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3123 := &x.ObjectMeta
		yyv3123.CodecDecodeSelf(d)
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3124 := &x.InvolvedObject
		yyv3124.CodecDecodeSelf(d)
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3127 := &x.Source
		yyv3127.CodecDecodeSelf(d)
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3128 := &x.FirstTimestamp
		yym3129 := z.DecBinary()
		_ = yym3129
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3128) {
		} else if yym3129 {
			z.DecBinaryUnmarshal(yyv3128)
		} else if !yym3129 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3128)
		} else {
			z.DecFallback(yyv3128, false)
		}
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3130 := &x.LastTimestamp
		yym3131 := z.DecBinary()
		_ = yym3131
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3130) {
		} else if yym3131 {
			z.DecBinaryUnmarshal(yyv3130)
		} else if !yym3131 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3130)
		} else {
			z.DecFallback(yyv3130, false)
		}
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3120++
		if yyhl3120 {
			yyb3120 = yyj3120 > l
		} else {
			yyb3120 = r.CheckBreak()
		}
		if yyb3120 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3120-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3134 := z.EncBinary()
		_ = yym3134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3135 := !z.EncBinary()
			yy2arr3135 := z.EncBasicHandle().StructToArray
			var yyq3135 [4]bool
			_, _, _ = yysep3135, yyq3135, yy2arr3135
			const yyr3135 bool = false
			yyq3135[0] = x.Kind != ""
			yyq3135[1] = x.APIVersion != ""
			yyq3135[2] = true
			var yynn3135 int
			if yyr3135 || yy2arr3135 {
				r.EncodeArrayStart(4)
			} else {
				yynn3135 = 1
				for _, b := range yyq3135 {
					if b {
						yynn3135++
					}
				}
				r.EncodeMapStart(yynn3135)
				yynn3135 = 0
			}
			if yyr3135 || yy2arr3135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3135[0] {
					yym3137 := z.EncBinary()
					_ = yym3137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3135[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3138 := z.EncBinary()
					_ = yym3138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3135 || yy2arr3135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3135[1] {
					yym3140 := z.EncBinary()
					_ = yym3140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3135[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3141 := z.EncBinary()
					_ = yym3141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3135 || yy2arr3135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3135[2] {
					yy3143 := &x.ListMeta
					yym3144 := z.EncBinary()
					_ = yym3144
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3143) {
					} else {
						z.EncFallback(yy3143)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3135[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3145 := &x.ListMeta
					yym3146 := z.EncBinary()
					_ = yym3146
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3145) {
					} else {
						z.EncFallback(yy3145)
					}
				}
			}
			if yyr3135 || yy2arr3135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3148 := z.EncBinary()
					_ = yym3148
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3135 || yy2arr3135 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3150 := z.DecBinary()
	_ = yym3150
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3151 := r.ContainerType()
		if yyct3151 == codecSelferValueTypeMap1234 {
			yyl3151 := r.ReadMapStart()
			if yyl3151 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3151, d)
			}
		} else if yyct3151 == codecSelferValueTypeArray1234 {
			yyl3151 := r.ReadArrayStart()
			if yyl3151 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3151, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3152Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3152Slc
	var yyhl3152 bool = l >= 0
	for yyj3152 := 0; ; yyj3152++ {
		if yyhl3152 {
			if yyj3152 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3152Slc = r.DecodeBytes(yys3152Slc, true, true)
		yys3152 := string(yys3152Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3152 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3155 := &x.ListMeta
				yym3156 := z.DecBinary()
				_ = yym3156
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3155) {
				} else {
					z.DecFallback(yyv3155, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3157 := &x.Items
				yym3158 := z.DecBinary()
				_ = yym3158
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3157), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3152)
		} // end switch yys3152
	} // end for yyj3152
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3159 int
	var yyb3159 bool
	var yyhl3159 bool = l >= 0
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3162 := &x.ListMeta
		yym3163 := z.DecBinary()
		_ = yym3163
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3162) {
		} else {
			z.DecFallback(yyv3162, false)
		}
	}
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3164 := &x.Items
		yym3165 := z.DecBinary()
		_ = yym3165
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3164), d)
		}
	}
	for {
		yyj3159++
		if yyhl3159 {
			yyb3159 = yyj3159 > l
		} else {
			yyb3159 = r.CheckBreak()
		}
		if yyb3159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3166 := z.EncBinary()
		_ = yym3166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3167 := !z.EncBinary()
			yy2arr3167 := z.EncBasicHandle().StructToArray
			var yyq3167 [4]bool
			_, _, _ = yysep3167, yyq3167, yy2arr3167
			const yyr3167 bool = false
			yyq3167[0] = x.Kind != ""
			yyq3167[1] = x.APIVersion != ""
			yyq3167[2] = true
			var yynn3167 int
			if yyr3167 || yy2arr3167 {
				r.EncodeArrayStart(4)
			} else {
				yynn3167 = 1
				for _, b := range yyq3167 {
					if b {
						yynn3167++
					}
				}
				r.EncodeMapStart(yynn3167)
				yynn3167 = 0
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[0] {
					yym3169 := z.EncBinary()
					_ = yym3169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3167[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3170 := z.EncBinary()
					_ = yym3170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[1] {
					yym3172 := z.EncBinary()
					_ = yym3172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3167[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3173 := z.EncBinary()
					_ = yym3173
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[2] {
					yy3175 := &x.ListMeta
					yym3176 := z.EncBinary()
					_ = yym3176
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3175) {
					} else {
						z.EncFallback(yy3175)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3167[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3177 := &x.ListMeta
					yym3178 := z.EncBinary()
					_ = yym3178
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3177) {
					} else {
						z.EncFallback(yy3177)
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3181 := z.EncBinary()
					_ = yym3181
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3182 := z.DecBinary()
	_ = yym3182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3183 := r.ContainerType()
		if yyct3183 == codecSelferValueTypeMap1234 {
			yyl3183 := r.ReadMapStart()
			if yyl3183 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3183, d)
			}
		} else if yyct3183 == codecSelferValueTypeArray1234 {
			yyl3183 := r.ReadArrayStart()
			if yyl3183 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3183, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3184Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3184Slc
	var yyhl3184 bool = l >= 0
	for yyj3184 := 0; ; yyj3184++ {
		if yyhl3184 {
			if yyj3184 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3184Slc = r.DecodeBytes(yys3184Slc, true, true)
		yys3184 := string(yys3184Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3184 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3187 := &x.ListMeta
				yym3188 := z.DecBinary()
				_ = yym3188
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3187) {
				} else {
					z.DecFallback(yyv3187, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3189 := &x.Items
				yym3190 := z.DecBinary()
				_ = yym3190
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3189), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3184)
		} // end switch yys3184
	} // end for yyj3184
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3191 int
	var yyb3191 bool
	var yyhl3191 bool = l >= 0
	yyj3191++
	if yyhl3191 {
		yyb3191 = yyj3191 > l
	} else {
		yyb3191 = r.CheckBreak()
	}
	if yyb3191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3191++
	if yyhl3191 {
		yyb3191 = yyj3191 > l
	} else {
		yyb3191 = r.CheckBreak()
	}
	if yyb3191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3191++
	if yyhl3191 {
		yyb3191 = yyj3191 > l
	} else {
		yyb3191 = r.CheckBreak()
	}
	if yyb3191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3194 := &x.ListMeta
		yym3195 := z.DecBinary()
		_ = yym3195
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3194) {
		} else {
			z.DecFallback(yyv3194, false)
		}
	}
	yyj3191++
	if yyhl3191 {
		yyb3191 = yyj3191 > l
	} else {
		yyb3191 = r.CheckBreak()
	}
	if yyb3191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3196 := &x.Items
		yym3197 := z.DecBinary()
		_ = yym3197
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3196), d)
		}
	}
	for {
		yyj3191++
		if yyhl3191 {
			yyb3191 = yyj3191 > l
		} else {
			yyb3191 = r.CheckBreak()
		}
		if yyb3191 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3191-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3198 := z.EncBinary()
	_ = yym3198
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3199 := z.DecBinary()
	_ = yym3199
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3200 := z.EncBinary()
		_ = yym3200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3201 := !z.EncBinary()
			yy2arr3201 := z.EncBasicHandle().StructToArray
			var yyq3201 [6]bool
			_, _, _ = yysep3201, yyq3201, yy2arr3201
			const yyr3201 bool = false
			yyq3201[0] = x.Type != ""
			yyq3201[1] = len(x.Max) != 0
			yyq3201[2] = len(x.Min) != 0
			yyq3201[3] = len(x.Default) != 0
			yyq3201[4] = len(x.DefaultRequest) != 0
			yyq3201[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3201 int
			if yyr3201 || yy2arr3201 {
				r.EncodeArrayStart(6)
			} else {
				yynn3201 = 0
				for _, b := range yyq3201 {
					if b {
						yynn3201++
					}
				}
				r.EncodeMapStart(yynn3201)
				yynn3201 = 0
			}
			if yyr3201 || yy2arr3201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3201[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3201[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3201 || yy2arr3201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3201[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3201[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3201 || yy2arr3201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3201[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3201[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3201 || yy2arr3201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3201[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3201[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3201 || yy2arr3201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3201[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3201[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3201 || yy2arr3201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3201[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3201[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3201 || yy2arr3201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3208 := z.DecBinary()
	_ = yym3208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3209 := r.ContainerType()
		if yyct3209 == codecSelferValueTypeMap1234 {
			yyl3209 := r.ReadMapStart()
			if yyl3209 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3209, d)
			}
		} else if yyct3209 == codecSelferValueTypeArray1234 {
			yyl3209 := r.ReadArrayStart()
			if yyl3209 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3210Slc
	var yyhl3210 bool = l >= 0
	for yyj3210 := 0; ; yyj3210++ {
		if yyhl3210 {
			if yyj3210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3210Slc = r.DecodeBytes(yys3210Slc, true, true)
		yys3210 := string(yys3210Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3210 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3212 := &x.Max
				yyv3212.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3213 := &x.Min
				yyv3213.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3214 := &x.Default
				yyv3214.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3215 := &x.DefaultRequest
				yyv3215.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3216 := &x.MaxLimitRequestRatio
				yyv3216.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3210)
		} // end switch yys3210
	} // end for yyj3210
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3217 int
	var yyb3217 bool
	var yyhl3217 bool = l >= 0
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3219 := &x.Max
		yyv3219.CodecDecodeSelf(d)
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3220 := &x.Min
		yyv3220.CodecDecodeSelf(d)
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3221 := &x.Default
		yyv3221.CodecDecodeSelf(d)
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3222 := &x.DefaultRequest
		yyv3222.CodecDecodeSelf(d)
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3223 := &x.MaxLimitRequestRatio
		yyv3223.CodecDecodeSelf(d)
	}
	for {
		yyj3217++
		if yyhl3217 {
			yyb3217 = yyj3217 > l
		} else {
			yyb3217 = r.CheckBreak()
		}
		if yyb3217 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3217-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3224 := z.EncBinary()
		_ = yym3224
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3225 := !z.EncBinary()
			yy2arr3225 := z.EncBasicHandle().StructToArray
			var yyq3225 [1]bool
			_, _, _ = yysep3225, yyq3225, yy2arr3225
			const yyr3225 bool = false
			var yynn3225 int
			if yyr3225 || yy2arr3225 {
				r.EncodeArrayStart(1)
			} else {
				yynn3225 = 1
				for _, b := range yyq3225 {
					if b {
						yynn3225++
					}
				}
				r.EncodeMapStart(yynn3225)
				yynn3225 = 0
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3228 := z.EncBinary()
					_ = yym3228
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3229 := z.DecBinary()
	_ = yym3229
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3230 := r.ContainerType()
		if yyct3230 == codecSelferValueTypeMap1234 {
			yyl3230 := r.ReadMapStart()
			if yyl3230 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3230, d)
			}
		} else if yyct3230 == codecSelferValueTypeArray1234 {
			yyl3230 := r.ReadArrayStart()
			if yyl3230 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3230, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3231Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3231Slc
	var yyhl3231 bool = l >= 0
	for yyj3231 := 0; ; yyj3231++ {
		if yyhl3231 {
			if yyj3231 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3231Slc = r.DecodeBytes(yys3231Slc, true, true)
		yys3231 := string(yys3231Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3231 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3232 := &x.Limits
				yym3233 := z.DecBinary()
				_ = yym3233
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3232), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3231)
		} // end switch yys3231
	} // end for yyj3231
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3234 int
	var yyb3234 bool
	var yyhl3234 bool = l >= 0
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3235 := &x.Limits
		yym3236 := z.DecBinary()
		_ = yym3236
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3235), d)
		}
	}
	for {
		yyj3234++
		if yyhl3234 {
			yyb3234 = yyj3234 > l
		} else {
			yyb3234 = r.CheckBreak()
		}
		if yyb3234 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3234-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3237 := z.EncBinary()
		_ = yym3237
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3238 := !z.EncBinary()
			yy2arr3238 := z.EncBasicHandle().StructToArray
			var yyq3238 [4]bool
			_, _, _ = yysep3238, yyq3238, yy2arr3238
			const yyr3238 bool = false
			yyq3238[0] = x.Kind != ""
			yyq3238[1] = x.APIVersion != ""
			yyq3238[2] = true
			yyq3238[3] = true
			var yynn3238 int
			if yyr3238 || yy2arr3238 {
				r.EncodeArrayStart(4)
			} else {
				yynn3238 = 0
				for _, b := range yyq3238 {
					if b {
						yynn3238++
					}
				}
				r.EncodeMapStart(yynn3238)
				yynn3238 = 0
			}
			if yyr3238 || yy2arr3238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3238[0] {
					yym3240 := z.EncBinary()
					_ = yym3240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3238[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3241 := z.EncBinary()
					_ = yym3241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3238 || yy2arr3238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3238[1] {
					yym3243 := z.EncBinary()
					_ = yym3243
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3238[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3244 := z.EncBinary()
					_ = yym3244
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3238 || yy2arr3238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3238[2] {
					yy3246 := &x.ObjectMeta
					yy3246.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3238[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3247 := &x.ObjectMeta
					yy3247.CodecEncodeSelf(e)
				}
			}
			if yyr3238 || yy2arr3238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3238[3] {
					yy3249 := &x.Spec
					yy3249.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3238[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3250 := &x.Spec
					yy3250.CodecEncodeSelf(e)
				}
			}
			if yyr3238 || yy2arr3238 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3251 := z.DecBinary()
	_ = yym3251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3252 := r.ContainerType()
		if yyct3252 == codecSelferValueTypeMap1234 {
			yyl3252 := r.ReadMapStart()
			if yyl3252 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3252, d)
			}
		} else if yyct3252 == codecSelferValueTypeArray1234 {
			yyl3252 := r.ReadArrayStart()
			if yyl3252 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3253Slc
	var yyhl3253 bool = l >= 0
	for yyj3253 := 0; ; yyj3253++ {
		if yyhl3253 {
			if yyj3253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3253Slc = r.DecodeBytes(yys3253Slc, true, true)
		yys3253 := string(yys3253Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3253 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3256 := &x.ObjectMeta
				yyv3256.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3257 := &x.Spec
				yyv3257.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3253)
		} // end switch yys3253
	} // end for yyj3253
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3258 int
	var yyb3258 bool
	var yyhl3258 bool = l >= 0
	yyj3258++
	if yyhl3258 {
		yyb3258 = yyj3258 > l
	} else {
		yyb3258 = r.CheckBreak()
	}
	if yyb3258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3258++
	if yyhl3258 {
		yyb3258 = yyj3258 > l
	} else {
		yyb3258 = r.CheckBreak()
	}
	if yyb3258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3258++
	if yyhl3258 {
		yyb3258 = yyj3258 > l
	} else {
		yyb3258 = r.CheckBreak()
	}
	if yyb3258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3261 := &x.ObjectMeta
		yyv3261.CodecDecodeSelf(d)
	}
	yyj3258++
	if yyhl3258 {
		yyb3258 = yyj3258 > l
	} else {
		yyb3258 = r.CheckBreak()
	}
	if yyb3258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3262 := &x.Spec
		yyv3262.CodecDecodeSelf(d)
	}
	for {
		yyj3258++
		if yyhl3258 {
			yyb3258 = yyj3258 > l
		} else {
			yyb3258 = r.CheckBreak()
		}
		if yyb3258 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3258-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3263 := z.EncBinary()
		_ = yym3263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3264 := !z.EncBinary()
			yy2arr3264 := z.EncBasicHandle().StructToArray
			var yyq3264 [4]bool
			_, _, _ = yysep3264, yyq3264, yy2arr3264
			const yyr3264 bool = false
			yyq3264[0] = x.Kind != ""
			yyq3264[1] = x.APIVersion != ""
			yyq3264[2] = true
			var yynn3264 int
			if yyr3264 || yy2arr3264 {
				r.EncodeArrayStart(4)
			} else {
				yynn3264 = 1
				for _, b := range yyq3264 {
					if b {
						yynn3264++
					}
				}
				r.EncodeMapStart(yynn3264)
				yynn3264 = 0
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3264[0] {
					yym3266 := z.EncBinary()
					_ = yym3266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3264[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3267 := z.EncBinary()
					_ = yym3267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3264[1] {
					yym3269 := z.EncBinary()
					_ = yym3269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3264[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3270 := z.EncBinary()
					_ = yym3270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3264[2] {
					yy3272 := &x.ListMeta
					yym3273 := z.EncBinary()
					_ = yym3273
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3272) {
					} else {
						z.EncFallback(yy3272)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3264[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3274 := &x.ListMeta
					yym3275 := z.EncBinary()
					_ = yym3275
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3274) {
					} else {
						z.EncFallback(yy3274)
					}
				}
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3277 := z.EncBinary()
					_ = yym3277
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3278 := z.EncBinary()
					_ = yym3278
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3264 || yy2arr3264 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3279 := z.DecBinary()
	_ = yym3279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3280 := r.ContainerType()
		if yyct3280 == codecSelferValueTypeMap1234 {
			yyl3280 := r.ReadMapStart()
			if yyl3280 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3280, d)
			}
		} else if yyct3280 == codecSelferValueTypeArray1234 {
			yyl3280 := r.ReadArrayStart()
			if yyl3280 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3280, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3281Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3281Slc
	var yyhl3281 bool = l >= 0
	for yyj3281 := 0; ; yyj3281++ {
		if yyhl3281 {
			if yyj3281 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3281Slc = r.DecodeBytes(yys3281Slc, true, true)
		yys3281 := string(yys3281Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3281 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3284 := &x.ListMeta
				yym3285 := z.DecBinary()
				_ = yym3285
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3284) {
				} else {
					z.DecFallback(yyv3284, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3286 := &x.Items
				yym3287 := z.DecBinary()
				_ = yym3287
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3286), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3281)
		} // end switch yys3281
	} // end for yyj3281
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3288 int
	var yyb3288 bool
	var yyhl3288 bool = l >= 0
	yyj3288++
	if yyhl3288 {
		yyb3288 = yyj3288 > l
	} else {
		yyb3288 = r.CheckBreak()
	}
	if yyb3288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3288++
	if yyhl3288 {
		yyb3288 = yyj3288 > l
	} else {
		yyb3288 = r.CheckBreak()
	}
	if yyb3288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3288++
	if yyhl3288 {
		yyb3288 = yyj3288 > l
	} else {
		yyb3288 = r.CheckBreak()
	}
	if yyb3288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3291 := &x.ListMeta
		yym3292 := z.DecBinary()
		_ = yym3292
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3291) {
		} else {
			z.DecFallback(yyv3291, false)
		}
	}
	yyj3288++
	if yyhl3288 {
		yyb3288 = yyj3288 > l
	} else {
		yyb3288 = r.CheckBreak()
	}
	if yyb3288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3293 := &x.Items
		yym3294 := z.DecBinary()
		_ = yym3294
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3293), d)
		}
	}
	for {
		yyj3288++
		if yyhl3288 {
			yyb3288 = yyj3288 > l
		} else {
			yyb3288 = r.CheckBreak()
		}
		if yyb3288 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3288-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3295 := z.EncBinary()
		_ = yym3295
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3296 := !z.EncBinary()
			yy2arr3296 := z.EncBasicHandle().StructToArray
			var yyq3296 [1]bool
			_, _, _ = yysep3296, yyq3296, yy2arr3296
			const yyr3296 bool = false
			yyq3296[0] = len(x.Hard) != 0
			var yynn3296 int
			if yyr3296 || yy2arr3296 {
				r.EncodeArrayStart(1)
			} else {
				yynn3296 = 0
				for _, b := range yyq3296 {
					if b {
						yynn3296++
					}
				}
				r.EncodeMapStart(yynn3296)
				yynn3296 = 0
			}
			if yyr3296 || yy2arr3296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3296[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3296[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3296 || yy2arr3296 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3298 := z.DecBinary()
	_ = yym3298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3299 := r.ContainerType()
		if yyct3299 == codecSelferValueTypeMap1234 {
			yyl3299 := r.ReadMapStart()
			if yyl3299 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3299, d)
			}
		} else if yyct3299 == codecSelferValueTypeArray1234 {
			yyl3299 := r.ReadArrayStart()
			if yyl3299 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3300Slc
	var yyhl3300 bool = l >= 0
	for yyj3300 := 0; ; yyj3300++ {
		if yyhl3300 {
			if yyj3300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3300Slc = r.DecodeBytes(yys3300Slc, true, true)
		yys3300 := string(yys3300Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3300 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3301 := &x.Hard
				yyv3301.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3300)
		} // end switch yys3300
	} // end for yyj3300
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3302 int
	var yyb3302 bool
	var yyhl3302 bool = l >= 0
	yyj3302++
	if yyhl3302 {
		yyb3302 = yyj3302 > l
	} else {
		yyb3302 = r.CheckBreak()
	}
	if yyb3302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3303 := &x.Hard
		yyv3303.CodecDecodeSelf(d)
	}
	for {
		yyj3302++
		if yyhl3302 {
			yyb3302 = yyj3302 > l
		} else {
			yyb3302 = r.CheckBreak()
		}
		if yyb3302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3304 := z.EncBinary()
		_ = yym3304
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3305 := !z.EncBinary()
			yy2arr3305 := z.EncBasicHandle().StructToArray
			var yyq3305 [2]bool
			_, _, _ = yysep3305, yyq3305, yy2arr3305
			const yyr3305 bool = false
			yyq3305[0] = len(x.Hard) != 0
			yyq3305[1] = len(x.Used) != 0
			var yynn3305 int
			if yyr3305 || yy2arr3305 {
				r.EncodeArrayStart(2)
			} else {
				yynn3305 = 0
				for _, b := range yyq3305 {
					if b {
						yynn3305++
					}
				}
				r.EncodeMapStart(yynn3305)
				yynn3305 = 0
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3305[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3305[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3305[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3305[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3308 := z.DecBinary()
	_ = yym3308
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3309 := r.ContainerType()
		if yyct3309 == codecSelferValueTypeMap1234 {
			yyl3309 := r.ReadMapStart()
			if yyl3309 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3309, d)
			}
		} else if yyct3309 == codecSelferValueTypeArray1234 {
			yyl3309 := r.ReadArrayStart()
			if yyl3309 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3309, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3310Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3310Slc
	var yyhl3310 bool = l >= 0
	for yyj3310 := 0; ; yyj3310++ {
		if yyhl3310 {
			if yyj3310 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3310Slc = r.DecodeBytes(yys3310Slc, true, true)
		yys3310 := string(yys3310Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3310 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3311 := &x.Hard
				yyv3311.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3312 := &x.Used
				yyv3312.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3310)
		} // end switch yys3310
	} // end for yyj3310
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3313 int
	var yyb3313 bool
	var yyhl3313 bool = l >= 0
	yyj3313++
	if yyhl3313 {
		yyb3313 = yyj3313 > l
	} else {
		yyb3313 = r.CheckBreak()
	}
	if yyb3313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3314 := &x.Hard
		yyv3314.CodecDecodeSelf(d)
	}
	yyj3313++
	if yyhl3313 {
		yyb3313 = yyj3313 > l
	} else {
		yyb3313 = r.CheckBreak()
	}
	if yyb3313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3315 := &x.Used
		yyv3315.CodecDecodeSelf(d)
	}
	for {
		yyj3313++
		if yyhl3313 {
			yyb3313 = yyj3313 > l
		} else {
			yyb3313 = r.CheckBreak()
		}
		if yyb3313 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3313-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3316 := z.EncBinary()
		_ = yym3316
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3317 := !z.EncBinary()
			yy2arr3317 := z.EncBasicHandle().StructToArray
			var yyq3317 [5]bool
			_, _, _ = yysep3317, yyq3317, yy2arr3317
			const yyr3317 bool = false
			yyq3317[0] = x.Kind != ""
			yyq3317[1] = x.APIVersion != ""
			yyq3317[2] = true
			yyq3317[3] = true
			yyq3317[4] = true
			var yynn3317 int
			if yyr3317 || yy2arr3317 {
				r.EncodeArrayStart(5)
			} else {
				yynn3317 = 0
				for _, b := range yyq3317 {
					if b {
						yynn3317++
					}
				}
				r.EncodeMapStart(yynn3317)
				yynn3317 = 0
			}
			if yyr3317 || yy2arr3317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3317[0] {
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3317[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3320 := z.EncBinary()
					_ = yym3320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3317 || yy2arr3317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3317[1] {
					yym3322 := z.EncBinary()
					_ = yym3322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3317[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3323 := z.EncBinary()
					_ = yym3323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3317 || yy2arr3317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3317[2] {
					yy3325 := &x.ObjectMeta
					yy3325.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3317[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3326 := &x.ObjectMeta
					yy3326.CodecEncodeSelf(e)
				}
			}
			if yyr3317 || yy2arr3317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3317[3] {
					yy3328 := &x.Spec
					yy3328.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3317[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3329 := &x.Spec
					yy3329.CodecEncodeSelf(e)
				}
			}
			if yyr3317 || yy2arr3317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3317[4] {
					yy3331 := &x.Status
					yy3331.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3317[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3332 := &x.Status
					yy3332.CodecEncodeSelf(e)
				}
			}
			if yyr3317 || yy2arr3317 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3333 := z.DecBinary()
	_ = yym3333
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3334 := r.ContainerType()
		if yyct3334 == codecSelferValueTypeMap1234 {
			yyl3334 := r.ReadMapStart()
			if yyl3334 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3334, d)
			}
		} else if yyct3334 == codecSelferValueTypeArray1234 {
			yyl3334 := r.ReadArrayStart()
			if yyl3334 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3334, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3335Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3335Slc
	var yyhl3335 bool = l >= 0
	for yyj3335 := 0; ; yyj3335++ {
		if yyhl3335 {
			if yyj3335 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3335Slc = r.DecodeBytes(yys3335Slc, true, true)
		yys3335 := string(yys3335Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3335 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3338 := &x.ObjectMeta
				yyv3338.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3339 := &x.Spec
				yyv3339.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3340 := &x.Status
				yyv3340.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3335)
		} // end switch yys3335
	} // end for yyj3335
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3341 int
	var yyb3341 bool
	var yyhl3341 bool = l >= 0
	yyj3341++
	if yyhl3341 {
		yyb3341 = yyj3341 > l
	} else {
		yyb3341 = r.CheckBreak()
	}
	if yyb3341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3341++
	if yyhl3341 {
		yyb3341 = yyj3341 > l
	} else {
		yyb3341 = r.CheckBreak()
	}
	if yyb3341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3341++
	if yyhl3341 {
		yyb3341 = yyj3341 > l
	} else {
		yyb3341 = r.CheckBreak()
	}
	if yyb3341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3344 := &x.ObjectMeta
		yyv3344.CodecDecodeSelf(d)
	}
	yyj3341++
	if yyhl3341 {
		yyb3341 = yyj3341 > l
	} else {
		yyb3341 = r.CheckBreak()
	}
	if yyb3341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3345 := &x.Spec
		yyv3345.CodecDecodeSelf(d)
	}
	yyj3341++
	if yyhl3341 {
		yyb3341 = yyj3341 > l
	} else {
		yyb3341 = r.CheckBreak()
	}
	if yyb3341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3346 := &x.Status
		yyv3346.CodecDecodeSelf(d)
	}
	for {
		yyj3341++
		if yyhl3341 {
			yyb3341 = yyj3341 > l
		} else {
			yyb3341 = r.CheckBreak()
		}
		if yyb3341 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3341-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3347 := z.EncBinary()
		_ = yym3347
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3348 := !z.EncBinary()
			yy2arr3348 := z.EncBasicHandle().StructToArray
			var yyq3348 [4]bool
			_, _, _ = yysep3348, yyq3348, yy2arr3348
			const yyr3348 bool = false
			yyq3348[0] = x.Kind != ""
			yyq3348[1] = x.APIVersion != ""
			yyq3348[2] = true
			var yynn3348 int
			if yyr3348 || yy2arr3348 {
				r.EncodeArrayStart(4)
			} else {
				yynn3348 = 1
				for _, b := range yyq3348 {
					if b {
						yynn3348++
					}
				}
				r.EncodeMapStart(yynn3348)
				yynn3348 = 0
			}
			if yyr3348 || yy2arr3348 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3348[0] {
					yym3350 := z.EncBinary()
					_ = yym3350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3348[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3351 := z.EncBinary()
					_ = yym3351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3348 || yy2arr3348 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3348[1] {
					yym3353 := z.EncBinary()
					_ = yym3353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3348[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3354 := z.EncBinary()
					_ = yym3354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3348 || yy2arr3348 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3348[2] {
					yy3356 := &x.ListMeta
					yym3357 := z.EncBinary()
					_ = yym3357
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3356) {
					} else {
						z.EncFallback(yy3356)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3348[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3358 := &x.ListMeta
					yym3359 := z.EncBinary()
					_ = yym3359
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3358) {
					} else {
						z.EncFallback(yy3358)
					}
				}
			}
			if yyr3348 || yy2arr3348 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3361 := z.EncBinary()
					_ = yym3361
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3362 := z.EncBinary()
					_ = yym3362
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3348 || yy2arr3348 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3363 := z.DecBinary()
	_ = yym3363
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3364 := r.ContainerType()
		if yyct3364 == codecSelferValueTypeMap1234 {
			yyl3364 := r.ReadMapStart()
			if yyl3364 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3364, d)
			}
		} else if yyct3364 == codecSelferValueTypeArray1234 {
			yyl3364 := r.ReadArrayStart()
			if yyl3364 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3364, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3365Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3365Slc
	var yyhl3365 bool = l >= 0
	for yyj3365 := 0; ; yyj3365++ {
		if yyhl3365 {
			if yyj3365 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3365Slc = r.DecodeBytes(yys3365Slc, true, true)
		yys3365 := string(yys3365Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3365 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3368 := &x.ListMeta
				yym3369 := z.DecBinary()
				_ = yym3369
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3368) {
				} else {
					z.DecFallback(yyv3368, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3370 := &x.Items
				yym3371 := z.DecBinary()
				_ = yym3371
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3370), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3365)
		} // end switch yys3365
	} // end for yyj3365
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3372 int
	var yyb3372 bool
	var yyhl3372 bool = l >= 0
	yyj3372++
	if yyhl3372 {
		yyb3372 = yyj3372 > l
	} else {
		yyb3372 = r.CheckBreak()
	}
	if yyb3372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3372++
	if yyhl3372 {
		yyb3372 = yyj3372 > l
	} else {
		yyb3372 = r.CheckBreak()
	}
	if yyb3372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3372++
	if yyhl3372 {
		yyb3372 = yyj3372 > l
	} else {
		yyb3372 = r.CheckBreak()
	}
	if yyb3372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3375 := &x.ListMeta
		yym3376 := z.DecBinary()
		_ = yym3376
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3375) {
		} else {
			z.DecFallback(yyv3375, false)
		}
	}
	yyj3372++
	if yyhl3372 {
		yyb3372 = yyj3372 > l
	} else {
		yyb3372 = r.CheckBreak()
	}
	if yyb3372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3377 := &x.Items
		yym3378 := z.DecBinary()
		_ = yym3378
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3377), d)
		}
	}
	for {
		yyj3372++
		if yyhl3372 {
			yyb3372 = yyj3372 > l
		} else {
			yyb3372 = r.CheckBreak()
		}
		if yyb3372 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3372-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3379 := z.EncBinary()
		_ = yym3379
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3380 := !z.EncBinary()
			yy2arr3380 := z.EncBasicHandle().StructToArray
			var yyq3380 [5]bool
			_, _, _ = yysep3380, yyq3380, yy2arr3380
			const yyr3380 bool = false
			yyq3380[0] = x.Kind != ""
			yyq3380[1] = x.APIVersion != ""
			yyq3380[2] = true
			yyq3380[3] = len(x.Data) != 0
			yyq3380[4] = x.Type != ""
			var yynn3380 int
			if yyr3380 || yy2arr3380 {
				r.EncodeArrayStart(5)
			} else {
				yynn3380 = 0
				for _, b := range yyq3380 {
					if b {
						yynn3380++
					}
				}
				r.EncodeMapStart(yynn3380)
				yynn3380 = 0
			}
			if yyr3380 || yy2arr3380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3380[0] {
					yym3382 := z.EncBinary()
					_ = yym3382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3380[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3383 := z.EncBinary()
					_ = yym3383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3380 || yy2arr3380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3380[1] {
					yym3385 := z.EncBinary()
					_ = yym3385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3380[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3386 := z.EncBinary()
					_ = yym3386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3380 || yy2arr3380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3380[2] {
					yy3388 := &x.ObjectMeta
					yy3388.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3380[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3389 := &x.ObjectMeta
					yy3389.CodecEncodeSelf(e)
				}
			}
			if yyr3380 || yy2arr3380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3380[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3391 := z.EncBinary()
						_ = yym3391
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3380[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3392 := z.EncBinary()
						_ = yym3392
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3380 || yy2arr3380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3380[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3380[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3380 || yy2arr3380 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3394 := z.DecBinary()
	_ = yym3394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3395 := r.ContainerType()
		if yyct3395 == codecSelferValueTypeMap1234 {
			yyl3395 := r.ReadMapStart()
			if yyl3395 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3395, d)
			}
		} else if yyct3395 == codecSelferValueTypeArray1234 {
			yyl3395 := r.ReadArrayStart()
			if yyl3395 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3395, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3396Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3396Slc
	var yyhl3396 bool = l >= 0
	for yyj3396 := 0; ; yyj3396++ {
		if yyhl3396 {
			if yyj3396 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3396Slc = r.DecodeBytes(yys3396Slc, true, true)
		yys3396 := string(yys3396Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3396 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3399 := &x.ObjectMeta
				yyv3399.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3400 := &x.Data
				yym3401 := z.DecBinary()
				_ = yym3401
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3400), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3396)
		} // end switch yys3396
	} // end for yyj3396
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3403 int
	var yyb3403 bool
	var yyhl3403 bool = l >= 0
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3406 := &x.ObjectMeta
		yyv3406.CodecDecodeSelf(d)
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3407 := &x.Data
		yym3408 := z.DecBinary()
		_ = yym3408
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3407), d)
		}
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3403++
		if yyhl3403 {
			yyb3403 = yyj3403 > l
		} else {
			yyb3403 = r.CheckBreak()
		}
		if yyb3403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3410 := z.EncBinary()
	_ = yym3410
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3411 := z.DecBinary()
	_ = yym3411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3412 := z.EncBinary()
		_ = yym3412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3413 := !z.EncBinary()
			yy2arr3413 := z.EncBasicHandle().StructToArray
			var yyq3413 [4]bool
			_, _, _ = yysep3413, yyq3413, yy2arr3413
			const yyr3413 bool = false
			yyq3413[0] = x.Kind != ""
			yyq3413[1] = x.APIVersion != ""
			yyq3413[2] = true
			var yynn3413 int
			if yyr3413 || yy2arr3413 {
				r.EncodeArrayStart(4)
			} else {
				yynn3413 = 1
				for _, b := range yyq3413 {
					if b {
						yynn3413++
					}
				}
				r.EncodeMapStart(yynn3413)
				yynn3413 = 0
			}
			if yyr3413 || yy2arr3413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3413[0] {
					yym3415 := z.EncBinary()
					_ = yym3415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3413[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3416 := z.EncBinary()
					_ = yym3416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3413 || yy2arr3413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3413[1] {
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3413[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3419 := z.EncBinary()
					_ = yym3419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3413 || yy2arr3413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3413[2] {
					yy3421 := &x.ListMeta
					yym3422 := z.EncBinary()
					_ = yym3422
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3421) {
					} else {
						z.EncFallback(yy3421)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3413[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3423 := &x.ListMeta
					yym3424 := z.EncBinary()
					_ = yym3424
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3423) {
					} else {
						z.EncFallback(yy3423)
					}
				}
			}
			if yyr3413 || yy2arr3413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3426 := z.EncBinary()
					_ = yym3426
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3427 := z.EncBinary()
					_ = yym3427
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3413 || yy2arr3413 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3428 := z.DecBinary()
	_ = yym3428
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3429 := r.ContainerType()
		if yyct3429 == codecSelferValueTypeMap1234 {
			yyl3429 := r.ReadMapStart()
			if yyl3429 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3429, d)
			}
		} else if yyct3429 == codecSelferValueTypeArray1234 {
			yyl3429 := r.ReadArrayStart()
			if yyl3429 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3429, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3430Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3430Slc
	var yyhl3430 bool = l >= 0
	for yyj3430 := 0; ; yyj3430++ {
		if yyhl3430 {
			if yyj3430 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3430Slc = r.DecodeBytes(yys3430Slc, true, true)
		yys3430 := string(yys3430Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3430 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3433 := &x.ListMeta
				yym3434 := z.DecBinary()
				_ = yym3434
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3433) {
				} else {
					z.DecFallback(yyv3433, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3435 := &x.Items
				yym3436 := z.DecBinary()
				_ = yym3436
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3435), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3430)
		} // end switch yys3430
	} // end for yyj3430
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3437 int
	var yyb3437 bool
	var yyhl3437 bool = l >= 0
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3440 := &x.ListMeta
		yym3441 := z.DecBinary()
		_ = yym3441
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3440) {
		} else {
			z.DecFallback(yyv3440, false)
		}
	}
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3442 := &x.Items
		yym3443 := z.DecBinary()
		_ = yym3443
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3442), d)
		}
	}
	for {
		yyj3437++
		if yyhl3437 {
			yyb3437 = yyj3437 > l
		} else {
			yyb3437 = r.CheckBreak()
		}
		if yyb3437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3444 := z.EncBinary()
	_ = yym3444
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3445 := z.DecBinary()
	_ = yym3445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3446 := z.EncBinary()
		_ = yym3446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3447 := !z.EncBinary()
			yy2arr3447 := z.EncBasicHandle().StructToArray
			var yyq3447 [4]bool
			_, _, _ = yysep3447, yyq3447, yy2arr3447
			const yyr3447 bool = false
			yyq3447[2] = x.Message != ""
			yyq3447[3] = x.Error != ""
			var yynn3447 int
			if yyr3447 || yy2arr3447 {
				r.EncodeArrayStart(4)
			} else {
				yynn3447 = 2
				for _, b := range yyq3447 {
					if b {
						yynn3447++
					}
				}
				r.EncodeMapStart(yynn3447)
				yynn3447 = 0
			}
			if yyr3447 || yy2arr3447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3447 || yy2arr3447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3447 || yy2arr3447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3447[2] {
					yym3451 := z.EncBinary()
					_ = yym3451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3447[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3452 := z.EncBinary()
					_ = yym3452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3447 || yy2arr3447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3447[3] {
					yym3454 := z.EncBinary()
					_ = yym3454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3447[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3455 := z.EncBinary()
					_ = yym3455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3447 || yy2arr3447 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3456 := z.DecBinary()
	_ = yym3456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3457 := r.ContainerType()
		if yyct3457 == codecSelferValueTypeMap1234 {
			yyl3457 := r.ReadMapStart()
			if yyl3457 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3457, d)
			}
		} else if yyct3457 == codecSelferValueTypeArray1234 {
			yyl3457 := r.ReadArrayStart()
			if yyl3457 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3457, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3458Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3458Slc
	var yyhl3458 bool = l >= 0
	for yyj3458 := 0; ; yyj3458++ {
		if yyhl3458 {
			if yyj3458 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3458Slc = r.DecodeBytes(yys3458Slc, true, true)
		yys3458 := string(yys3458Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3458 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3458)
		} // end switch yys3458
	} // end for yyj3458
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3463 int
	var yyb3463 bool
	var yyhl3463 bool = l >= 0
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3463++
		if yyhl3463 {
			yyb3463 = yyj3463 > l
		} else {
			yyb3463 = r.CheckBreak()
		}
		if yyb3463 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3463-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3468 := z.EncBinary()
		_ = yym3468
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3469 := !z.EncBinary()
			yy2arr3469 := z.EncBasicHandle().StructToArray
			var yyq3469 [4]bool
			_, _, _ = yysep3469, yyq3469, yy2arr3469
			const yyr3469 bool = false
			yyq3469[0] = x.Kind != ""
			yyq3469[1] = x.APIVersion != ""
			yyq3469[2] = true
			yyq3469[3] = len(x.Conditions) != 0
			var yynn3469 int
			if yyr3469 || yy2arr3469 {
				r.EncodeArrayStart(4)
			} else {
				yynn3469 = 0
				for _, b := range yyq3469 {
					if b {
						yynn3469++
					}
				}
				r.EncodeMapStart(yynn3469)
				yynn3469 = 0
			}
			if yyr3469 || yy2arr3469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3469[0] {
					yym3471 := z.EncBinary()
					_ = yym3471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3469[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3472 := z.EncBinary()
					_ = yym3472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3469 || yy2arr3469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3469[1] {
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3469[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3475 := z.EncBinary()
					_ = yym3475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3469 || yy2arr3469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3469[2] {
					yy3477 := &x.ObjectMeta
					yy3477.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3469[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3478 := &x.ObjectMeta
					yy3478.CodecEncodeSelf(e)
				}
			}
			if yyr3469 || yy2arr3469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3469[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3480 := z.EncBinary()
						_ = yym3480
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3469[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3481 := z.EncBinary()
						_ = yym3481
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3469 || yy2arr3469 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3482 := z.DecBinary()
	_ = yym3482
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3483 := r.ContainerType()
		if yyct3483 == codecSelferValueTypeMap1234 {
			yyl3483 := r.ReadMapStart()
			if yyl3483 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3483, d)
			}
		} else if yyct3483 == codecSelferValueTypeArray1234 {
			yyl3483 := r.ReadArrayStart()
			if yyl3483 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3483, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3484Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3484Slc
	var yyhl3484 bool = l >= 0
	for yyj3484 := 0; ; yyj3484++ {
		if yyhl3484 {
			if yyj3484 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3484Slc = r.DecodeBytes(yys3484Slc, true, true)
		yys3484 := string(yys3484Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3484 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3487 := &x.ObjectMeta
				yyv3487.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3488 := &x.Conditions
				yym3489 := z.DecBinary()
				_ = yym3489
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3488), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3484)
		} // end switch yys3484
	} // end for yyj3484
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3490 int
	var yyb3490 bool
	var yyhl3490 bool = l >= 0
	yyj3490++
	if yyhl3490 {
		yyb3490 = yyj3490 > l
	} else {
		yyb3490 = r.CheckBreak()
	}
	if yyb3490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3490++
	if yyhl3490 {
		yyb3490 = yyj3490 > l
	} else {
		yyb3490 = r.CheckBreak()
	}
	if yyb3490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3490++
	if yyhl3490 {
		yyb3490 = yyj3490 > l
	} else {
		yyb3490 = r.CheckBreak()
	}
	if yyb3490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3493 := &x.ObjectMeta
		yyv3493.CodecDecodeSelf(d)
	}
	yyj3490++
	if yyhl3490 {
		yyb3490 = yyj3490 > l
	} else {
		yyb3490 = r.CheckBreak()
	}
	if yyb3490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3494 := &x.Conditions
		yym3495 := z.DecBinary()
		_ = yym3495
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3494), d)
		}
	}
	for {
		yyj3490++
		if yyhl3490 {
			yyb3490 = yyj3490 > l
		} else {
			yyb3490 = r.CheckBreak()
		}
		if yyb3490 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3490-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3496 := z.EncBinary()
		_ = yym3496
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3497 := !z.EncBinary()
			yy2arr3497 := z.EncBasicHandle().StructToArray
			var yyq3497 [4]bool
			_, _, _ = yysep3497, yyq3497, yy2arr3497
			const yyr3497 bool = false
			yyq3497[0] = x.Kind != ""
			yyq3497[1] = x.APIVersion != ""
			yyq3497[2] = true
			var yynn3497 int
			if yyr3497 || yy2arr3497 {
				r.EncodeArrayStart(4)
			} else {
				yynn3497 = 1
				for _, b := range yyq3497 {
					if b {
						yynn3497++
					}
				}
				r.EncodeMapStart(yynn3497)
				yynn3497 = 0
			}
			if yyr3497 || yy2arr3497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3497[0] {
					yym3499 := z.EncBinary()
					_ = yym3499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3497[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3500 := z.EncBinary()
					_ = yym3500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3497 || yy2arr3497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3497[1] {
					yym3502 := z.EncBinary()
					_ = yym3502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3497[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3503 := z.EncBinary()
					_ = yym3503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3497 || yy2arr3497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3497[2] {
					yy3505 := &x.ListMeta
					yym3506 := z.EncBinary()
					_ = yym3506
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3505) {
					} else {
						z.EncFallback(yy3505)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3497[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3507 := &x.ListMeta
					yym3508 := z.EncBinary()
					_ = yym3508
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3507) {
					} else {
						z.EncFallback(yy3507)
					}
				}
			}
			if yyr3497 || yy2arr3497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3510 := z.EncBinary()
					_ = yym3510
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3511 := z.EncBinary()
					_ = yym3511
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3497 || yy2arr3497 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3512 := z.DecBinary()
	_ = yym3512
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3513 := r.ContainerType()
		if yyct3513 == codecSelferValueTypeMap1234 {
			yyl3513 := r.ReadMapStart()
			if yyl3513 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3513, d)
			}
		} else if yyct3513 == codecSelferValueTypeArray1234 {
			yyl3513 := r.ReadArrayStart()
			if yyl3513 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3513, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3514Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3514Slc
	var yyhl3514 bool = l >= 0
	for yyj3514 := 0; ; yyj3514++ {
		if yyhl3514 {
			if yyj3514 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3514Slc = r.DecodeBytes(yys3514Slc, true, true)
		yys3514 := string(yys3514Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3514 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3517 := &x.ListMeta
				yym3518 := z.DecBinary()
				_ = yym3518
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3517) {
				} else {
					z.DecFallback(yyv3517, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3519 := &x.Items
				yym3520 := z.DecBinary()
				_ = yym3520
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3519), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3514)
		} // end switch yys3514
	} // end for yyj3514
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3521 int
	var yyb3521 bool
	var yyhl3521 bool = l >= 0
	yyj3521++
	if yyhl3521 {
		yyb3521 = yyj3521 > l
	} else {
		yyb3521 = r.CheckBreak()
	}
	if yyb3521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3521++
	if yyhl3521 {
		yyb3521 = yyj3521 > l
	} else {
		yyb3521 = r.CheckBreak()
	}
	if yyb3521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3521++
	if yyhl3521 {
		yyb3521 = yyj3521 > l
	} else {
		yyb3521 = r.CheckBreak()
	}
	if yyb3521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3524 := &x.ListMeta
		yym3525 := z.DecBinary()
		_ = yym3525
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3524) {
		} else {
			z.DecFallback(yyv3524, false)
		}
	}
	yyj3521++
	if yyhl3521 {
		yyb3521 = yyj3521 > l
	} else {
		yyb3521 = r.CheckBreak()
	}
	if yyb3521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3526 := &x.Items
		yym3527 := z.DecBinary()
		_ = yym3527
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3526), d)
		}
	}
	for {
		yyj3521++
		if yyhl3521 {
			yyb3521 = yyj3521 > l
		} else {
			yyb3521 = r.CheckBreak()
		}
		if yyb3521 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3521-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3528 := z.EncBinary()
		_ = yym3528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3529 := !z.EncBinary()
			yy2arr3529 := z.EncBasicHandle().StructToArray
			var yyq3529 [1]bool
			_, _, _ = yysep3529, yyq3529, yy2arr3529
			const yyr3529 bool = false
			yyq3529[0] = len(x.Items) != 0
			var yynn3529 int
			if yyr3529 || yy2arr3529 {
				r.EncodeArrayStart(1)
			} else {
				yynn3529 = 0
				for _, b := range yyq3529 {
					if b {
						yynn3529++
					}
				}
				r.EncodeMapStart(yynn3529)
				yynn3529 = 0
			}
			if yyr3529 || yy2arr3529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3529[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3531 := z.EncBinary()
						_ = yym3531
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3529[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3532 := z.EncBinary()
						_ = yym3532
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr3529 || yy2arr3529 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3533 := z.DecBinary()
	_ = yym3533
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3534 := r.ContainerType()
		if yyct3534 == codecSelferValueTypeMap1234 {
			yyl3534 := r.ReadMapStart()
			if yyl3534 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3534, d)
			}
		} else if yyct3534 == codecSelferValueTypeArray1234 {
			yyl3534 := r.ReadArrayStart()
			if yyl3534 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3534, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3535Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3535Slc
	var yyhl3535 bool = l >= 0
	for yyj3535 := 0; ; yyj3535++ {
		if yyhl3535 {
			if yyj3535 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3535Slc = r.DecodeBytes(yys3535Slc, true, true)
		yys3535 := string(yys3535Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3535 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3536 := &x.Items
				yym3537 := z.DecBinary()
				_ = yym3537
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3536), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3535)
		} // end switch yys3535
	} // end for yyj3535
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3538 int
	var yyb3538 bool
	var yyhl3538 bool = l >= 0
	yyj3538++
	if yyhl3538 {
		yyb3538 = yyj3538 > l
	} else {
		yyb3538 = r.CheckBreak()
	}
	if yyb3538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3539 := &x.Items
		yym3540 := z.DecBinary()
		_ = yym3540
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3539), d)
		}
	}
	for {
		yyj3538++
		if yyhl3538 {
			yyb3538 = yyj3538 > l
		} else {
			yyb3538 = r.CheckBreak()
		}
		if yyb3538 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3538-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3541 := z.EncBinary()
		_ = yym3541
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3542 := !z.EncBinary()
			yy2arr3542 := z.EncBasicHandle().StructToArray
			var yyq3542 [2]bool
			_, _, _ = yysep3542, yyq3542, yy2arr3542
			const yyr3542 bool = false
			var yynn3542 int
			if yyr3542 || yy2arr3542 {
				r.EncodeArrayStart(2)
			} else {
				yynn3542 = 2
				for _, b := range yyq3542 {
					if b {
						yynn3542++
					}
				}
				r.EncodeMapStart(yynn3542)
				yynn3542 = 0
			}
			if yyr3542 || yy2arr3542 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3544 := z.EncBinary()
				_ = yym3544
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3545 := z.EncBinary()
				_ = yym3545
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3542 || yy2arr3542 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3547 := &x.FieldRef
				yy3547.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3548 := &x.FieldRef
				yy3548.CodecEncodeSelf(e)
			}
			if yyr3542 || yy2arr3542 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3549 := z.DecBinary()
	_ = yym3549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3550 := r.ContainerType()
		if yyct3550 == codecSelferValueTypeMap1234 {
			yyl3550 := r.ReadMapStart()
			if yyl3550 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3550, d)
			}
		} else if yyct3550 == codecSelferValueTypeArray1234 {
			yyl3550 := r.ReadArrayStart()
			if yyl3550 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3551Slc
	var yyhl3551 bool = l >= 0
	for yyj3551 := 0; ; yyj3551++ {
		if yyhl3551 {
			if yyj3551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3551Slc = r.DecodeBytes(yys3551Slc, true, true)
		yys3551 := string(yys3551Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3551 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3553 := &x.FieldRef
				yyv3553.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3551)
		} // end switch yys3551
	} // end for yyj3551
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3554 int
	var yyb3554 bool
	var yyhl3554 bool = l >= 0
	yyj3554++
	if yyhl3554 {
		yyb3554 = yyj3554 > l
	} else {
		yyb3554 = r.CheckBreak()
	}
	if yyb3554 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3554++
	if yyhl3554 {
		yyb3554 = yyj3554 > l
	} else {
		yyb3554 = r.CheckBreak()
	}
	if yyb3554 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3556 := &x.FieldRef
		yyv3556.CodecDecodeSelf(d)
	}
	for {
		yyj3554++
		if yyhl3554 {
			yyb3554 = yyj3554 > l
		} else {
			yyb3554 = r.CheckBreak()
		}
		if yyb3554 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3554-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3557 := z.EncBinary()
		_ = yym3557
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3558 := !z.EncBinary()
			yy2arr3558 := z.EncBasicHandle().StructToArray
			var yyq3558 [5]bool
			_, _, _ = yysep3558, yyq3558, yy2arr3558
			const yyr3558 bool = false
			yyq3558[0] = x.Capabilities != nil
			yyq3558[1] = x.Privileged != nil
			yyq3558[2] = x.SELinuxOptions != nil
			yyq3558[3] = x.RunAsUser != nil
			yyq3558[4] = x.RunAsNonRoot != nil
			var yynn3558 int
			if yyr3558 || yy2arr3558 {
				r.EncodeArrayStart(5)
			} else {
				yynn3558 = 0
				for _, b := range yyq3558 {
					if b {
						yynn3558++
					}
				}
				r.EncodeMapStart(yynn3558)
				yynn3558 = 0
			}
			if yyr3558 || yy2arr3558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3558[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3558[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3558 || yy2arr3558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3558[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3561 := *x.Privileged
						yym3562 := z.EncBinary()
						_ = yym3562
						if false {
						} else {
							r.EncodeBool(bool(yy3561))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3558[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3563 := *x.Privileged
						yym3564 := z.EncBinary()
						_ = yym3564
						if false {
						} else {
							r.EncodeBool(bool(yy3563))
						}
					}
				}
			}
			if yyr3558 || yy2arr3558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3558[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3558[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3558 || yy2arr3558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3558[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3567 := *x.RunAsUser
						yym3568 := z.EncBinary()
						_ = yym3568
						if false {
						} else {
							r.EncodeInt(int64(yy3567))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3558[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3569 := *x.RunAsUser
						yym3570 := z.EncBinary()
						_ = yym3570
						if false {
						} else {
							r.EncodeInt(int64(yy3569))
						}
					}
				}
			}
			if yyr3558 || yy2arr3558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3558[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3572 := *x.RunAsNonRoot
						yym3573 := z.EncBinary()
						_ = yym3573
						if false {
						} else {
							r.EncodeBool(bool(yy3572))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3558[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3574 := *x.RunAsNonRoot
						yym3575 := z.EncBinary()
						_ = yym3575
						if false {
						} else {
							r.EncodeBool(bool(yy3574))
						}
					}
				}
			}
			if yyr3558 || yy2arr3558 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3576 := z.DecBinary()
	_ = yym3576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3577 := r.ContainerType()
		if yyct3577 == codecSelferValueTypeMap1234 {
			yyl3577 := r.ReadMapStart()
			if yyl3577 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3577, d)
			}
		} else if yyct3577 == codecSelferValueTypeArray1234 {
			yyl3577 := r.ReadArrayStart()
			if yyl3577 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3578Slc
	var yyhl3578 bool = l >= 0
	for yyj3578 := 0; ; yyj3578++ {
		if yyhl3578 {
			if yyj3578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3578Slc = r.DecodeBytes(yys3578Slc, true, true)
		yys3578 := string(yys3578Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3578 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3581 := z.DecBinary()
				_ = yym3581
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3584 := z.DecBinary()
				_ = yym3584
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3586 := z.DecBinary()
				_ = yym3586
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3578)
		} // end switch yys3578
	} // end for yyj3578
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3587 int
	var yyb3587 bool
	var yyhl3587 bool = l >= 0
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3590 := z.DecBinary()
		_ = yym3590
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3593 := z.DecBinary()
		_ = yym3593
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3595 := z.DecBinary()
		_ = yym3595
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3587++
		if yyhl3587 {
			yyb3587 = yyj3587 > l
		} else {
			yyb3587 = r.CheckBreak()
		}
		if yyb3587 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3587-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3596 := z.EncBinary()
		_ = yym3596
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3597 := !z.EncBinary()
			yy2arr3597 := z.EncBasicHandle().StructToArray
			var yyq3597 [4]bool
			_, _, _ = yysep3597, yyq3597, yy2arr3597
			const yyr3597 bool = false
			yyq3597[0] = x.User != ""
			yyq3597[1] = x.Role != ""
			yyq3597[2] = x.Type != ""
			yyq3597[3] = x.Level != ""
			var yynn3597 int
			if yyr3597 || yy2arr3597 {
				r.EncodeArrayStart(4)
			} else {
				yynn3597 = 0
				for _, b := range yyq3597 {
					if b {
						yynn3597++
					}
				}
				r.EncodeMapStart(yynn3597)
				yynn3597 = 0
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3597[0] {
					yym3599 := z.EncBinary()
					_ = yym3599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3597[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3600 := z.EncBinary()
					_ = yym3600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3597[1] {
					yym3602 := z.EncBinary()
					_ = yym3602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3597[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3603 := z.EncBinary()
					_ = yym3603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3597[2] {
					yym3605 := z.EncBinary()
					_ = yym3605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3597[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3606 := z.EncBinary()
					_ = yym3606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3597[3] {
					yym3608 := z.EncBinary()
					_ = yym3608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3597[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3609 := z.EncBinary()
					_ = yym3609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3597 || yy2arr3597 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3610 := z.DecBinary()
	_ = yym3610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3611 := r.ContainerType()
		if yyct3611 == codecSelferValueTypeMap1234 {
			yyl3611 := r.ReadMapStart()
			if yyl3611 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3611, d)
			}
		} else if yyct3611 == codecSelferValueTypeArray1234 {
			yyl3611 := r.ReadArrayStart()
			if yyl3611 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3611, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3612Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3612Slc
	var yyhl3612 bool = l >= 0
	for yyj3612 := 0; ; yyj3612++ {
		if yyhl3612 {
			if yyj3612 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3612Slc = r.DecodeBytes(yys3612Slc, true, true)
		yys3612 := string(yys3612Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3612 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3612)
		} // end switch yys3612
	} // end for yyj3612
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3617 int
	var yyb3617 bool
	var yyhl3617 bool = l >= 0
	yyj3617++
	if yyhl3617 {
		yyb3617 = yyj3617 > l
	} else {
		yyb3617 = r.CheckBreak()
	}
	if yyb3617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3617++
	if yyhl3617 {
		yyb3617 = yyj3617 > l
	} else {
		yyb3617 = r.CheckBreak()
	}
	if yyb3617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3617++
	if yyhl3617 {
		yyb3617 = yyj3617 > l
	} else {
		yyb3617 = r.CheckBreak()
	}
	if yyb3617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3617++
	if yyhl3617 {
		yyb3617 = yyj3617 > l
	} else {
		yyb3617 = r.CheckBreak()
	}
	if yyb3617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3617++
		if yyhl3617 {
			yyb3617 = yyj3617 > l
		} else {
			yyb3617 = r.CheckBreak()
		}
		if yyb3617 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3617-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3622 := z.EncBinary()
		_ = yym3622
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3623 := !z.EncBinary()
			yy2arr3623 := z.EncBasicHandle().StructToArray
			var yyq3623 [5]bool
			_, _, _ = yysep3623, yyq3623, yy2arr3623
			const yyr3623 bool = false
			yyq3623[0] = x.Kind != ""
			yyq3623[1] = x.APIVersion != ""
			yyq3623[2] = true
			var yynn3623 int
			if yyr3623 || yy2arr3623 {
				r.EncodeArrayStart(5)
			} else {
				yynn3623 = 2
				for _, b := range yyq3623 {
					if b {
						yynn3623++
					}
				}
				r.EncodeMapStart(yynn3623)
				yynn3623 = 0
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3623[0] {
					yym3625 := z.EncBinary()
					_ = yym3625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3623[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3626 := z.EncBinary()
					_ = yym3626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3623[1] {
					yym3628 := z.EncBinary()
					_ = yym3628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3623[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3629 := z.EncBinary()
					_ = yym3629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3623[2] {
					yy3631 := &x.ObjectMeta
					yy3631.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3623[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3632 := &x.ObjectMeta
					yy3632.CodecEncodeSelf(e)
				}
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3634 := z.EncBinary()
				_ = yym3634
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3635 := z.EncBinary()
				_ = yym3635
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3637 := z.EncBinary()
					_ = yym3637
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3638 := z.EncBinary()
					_ = yym3638
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3639 := z.DecBinary()
	_ = yym3639
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3640 := r.ContainerType()
		if yyct3640 == codecSelferValueTypeMap1234 {
			yyl3640 := r.ReadMapStart()
			if yyl3640 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3640, d)
			}
		} else if yyct3640 == codecSelferValueTypeArray1234 {
			yyl3640 := r.ReadArrayStart()
			if yyl3640 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3640, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3641Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3641Slc
	var yyhl3641 bool = l >= 0
	for yyj3641 := 0; ; yyj3641++ {
		if yyhl3641 {
			if yyj3641 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3641Slc = r.DecodeBytes(yys3641Slc, true, true)
		yys3641 := string(yys3641Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3641 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3644 := &x.ObjectMeta
				yyv3644.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3646 := &x.Data
				yym3647 := z.DecBinary()
				_ = yym3647
				if false {
				} else {
					*yyv3646 = r.DecodeBytes(*(*[]byte)(yyv3646), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3641)
		} // end switch yys3641
	} // end for yyj3641
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3648 int
	var yyb3648 bool
	var yyhl3648 bool = l >= 0
	yyj3648++
	if yyhl3648 {
		yyb3648 = yyj3648 > l
	} else {
		yyb3648 = r.CheckBreak()
	}
	if yyb3648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3648++
	if yyhl3648 {
		yyb3648 = yyj3648 > l
	} else {
		yyb3648 = r.CheckBreak()
	}
	if yyb3648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3648++
	if yyhl3648 {
		yyb3648 = yyj3648 > l
	} else {
		yyb3648 = r.CheckBreak()
	}
	if yyb3648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3651 := &x.ObjectMeta
		yyv3651.CodecDecodeSelf(d)
	}
	yyj3648++
	if yyhl3648 {
		yyb3648 = yyj3648 > l
	} else {
		yyb3648 = r.CheckBreak()
	}
	if yyb3648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3648++
	if yyhl3648 {
		yyb3648 = yyj3648 > l
	} else {
		yyb3648 = r.CheckBreak()
	}
	if yyb3648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3653 := &x.Data
		yym3654 := z.DecBinary()
		_ = yym3654
		if false {
		} else {
			*yyv3653 = r.DecodeBytes(*(*[]byte)(yyv3653), false, false)
		}
	}
	for {
		yyj3648++
		if yyhl3648 {
			yyb3648 = yyj3648 > l
		} else {
			yyb3648 = r.CheckBreak()
		}
		if yyb3648 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3648-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3655 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3655.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3656 := *v
	yyh3656, yyl3656 := z.DecSliceHelperStart()
	var yyc3656 bool
	if yyl3656 == 0 {
		if yyv3656 == nil {
			yyv3656 = []PersistentVolumeAccessMode{}
			yyc3656 = true
		} else if len(yyv3656) != 0 {
			yyv3656 = yyv3656[:0]
			yyc3656 = true
		}
	} else if yyl3656 > 0 {
		var yyrr3656, yyrl3656 int
		var yyrt3656 bool
		if yyl3656 > cap(yyv3656) {

			yyrl3656, yyrt3656 = z.DecInferLen(yyl3656, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3656 {
				if yyrl3656 <= cap(yyv3656) {
					yyv3656 = yyv3656[:yyrl3656]
				} else {
					yyv3656 = make([]PersistentVolumeAccessMode, yyrl3656)
				}
			} else {
				yyv3656 = make([]PersistentVolumeAccessMode, yyrl3656)
			}
			yyc3656 = true
			yyrr3656 = len(yyv3656)
		} else if yyl3656 != len(yyv3656) {
			yyv3656 = yyv3656[:yyl3656]
			yyc3656 = true
		}
		yyj3656 := 0
		for ; yyj3656 < yyrr3656; yyj3656++ {
			yyh3656.ElemContainerState(yyj3656)
			if r.TryDecodeAsNil() {
				yyv3656[yyj3656] = ""
			} else {
				yyv3656[yyj3656] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3656 {
			for ; yyj3656 < yyl3656; yyj3656++ {
				yyv3656 = append(yyv3656, "")
				yyh3656.ElemContainerState(yyj3656)
				if r.TryDecodeAsNil() {
					yyv3656[yyj3656] = ""
				} else {
					yyv3656[yyj3656] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3656 := 0
		for ; !r.CheckBreak(); yyj3656++ {

			if yyj3656 >= len(yyv3656) {
				yyv3656 = append(yyv3656, "") // var yyz3656 PersistentVolumeAccessMode
				yyc3656 = true
			}
			yyh3656.ElemContainerState(yyj3656)
			if yyj3656 < len(yyv3656) {
				if r.TryDecodeAsNil() {
					yyv3656[yyj3656] = ""
				} else {
					yyv3656[yyj3656] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3656 < len(yyv3656) {
			yyv3656 = yyv3656[:yyj3656]
			yyc3656 = true
		} else if yyj3656 == 0 && yyv3656 == nil {
			yyv3656 = []PersistentVolumeAccessMode{}
			yyc3656 = true
		}
	}
	yyh3656.End()
	if yyc3656 {
		*v = yyv3656
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3660 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3661 := &yyv3660
		yy3661.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3662 := *v
	yyh3662, yyl3662 := z.DecSliceHelperStart()
	var yyc3662 bool
	if yyl3662 == 0 {
		if yyv3662 == nil {
			yyv3662 = []PersistentVolume{}
			yyc3662 = true
		} else if len(yyv3662) != 0 {
			yyv3662 = yyv3662[:0]
			yyc3662 = true
		}
	} else if yyl3662 > 0 {
		var yyrr3662, yyrl3662 int
		var yyrt3662 bool
		if yyl3662 > cap(yyv3662) {

			yyrg3662 := len(yyv3662) > 0
			yyv23662 := yyv3662
			yyrl3662, yyrt3662 = z.DecInferLen(yyl3662, z.DecBasicHandle().MaxInitLen, 392)
			if yyrt3662 {
				if yyrl3662 <= cap(yyv3662) {
					yyv3662 = yyv3662[:yyrl3662]
				} else {
					yyv3662 = make([]PersistentVolume, yyrl3662)
				}
			} else {
				yyv3662 = make([]PersistentVolume, yyrl3662)
			}
			yyc3662 = true
			yyrr3662 = len(yyv3662)
			if yyrg3662 {
				copy(yyv3662, yyv23662)
			}
		} else if yyl3662 != len(yyv3662) {
			yyv3662 = yyv3662[:yyl3662]
			yyc3662 = true
		}
		yyj3662 := 0
		for ; yyj3662 < yyrr3662; yyj3662++ {
			yyh3662.ElemContainerState(yyj3662)
			if r.TryDecodeAsNil() {
				yyv3662[yyj3662] = PersistentVolume{}
			} else {
				yyv3663 := &yyv3662[yyj3662]
				yyv3663.CodecDecodeSelf(d)
			}

		}
		if yyrt3662 {
			for ; yyj3662 < yyl3662; yyj3662++ {
				yyv3662 = append(yyv3662, PersistentVolume{})
				yyh3662.ElemContainerState(yyj3662)
				if r.TryDecodeAsNil() {
					yyv3662[yyj3662] = PersistentVolume{}
				} else {
					yyv3664 := &yyv3662[yyj3662]
					yyv3664.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3662 := 0
		for ; !r.CheckBreak(); yyj3662++ {

			if yyj3662 >= len(yyv3662) {
				yyv3662 = append(yyv3662, PersistentVolume{}) // var yyz3662 PersistentVolume
				yyc3662 = true
			}
			yyh3662.ElemContainerState(yyj3662)
			if yyj3662 < len(yyv3662) {
				if r.TryDecodeAsNil() {
					yyv3662[yyj3662] = PersistentVolume{}
				} else {
					yyv3665 := &yyv3662[yyj3662]
					yyv3665.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3662 < len(yyv3662) {
			yyv3662 = yyv3662[:yyj3662]
			yyc3662 = true
		} else if yyj3662 == 0 && yyv3662 == nil {
			yyv3662 = []PersistentVolume{}
			yyc3662 = true
		}
	}
	yyh3662.End()
	if yyc3662 {
		*v = yyv3662
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3666 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3667 := &yyv3666
		yy3667.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3668 := *v
	yyh3668, yyl3668 := z.DecSliceHelperStart()
	var yyc3668 bool
	if yyl3668 == 0 {
		if yyv3668 == nil {
			yyv3668 = []PersistentVolumeClaim{}
			yyc3668 = true
		} else if len(yyv3668) != 0 {
			yyv3668 = yyv3668[:0]
			yyc3668 = true
		}
	} else if yyl3668 > 0 {
		var yyrr3668, yyrl3668 int
		var yyrt3668 bool
		if yyl3668 > cap(yyv3668) {

			yyrg3668 := len(yyv3668) > 0
			yyv23668 := yyv3668
			yyrl3668, yyrt3668 = z.DecInferLen(yyl3668, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt3668 {
				if yyrl3668 <= cap(yyv3668) {
					yyv3668 = yyv3668[:yyrl3668]
				} else {
					yyv3668 = make([]PersistentVolumeClaim, yyrl3668)
				}
			} else {
				yyv3668 = make([]PersistentVolumeClaim, yyrl3668)
			}
			yyc3668 = true
			yyrr3668 = len(yyv3668)
			if yyrg3668 {
				copy(yyv3668, yyv23668)
			}
		} else if yyl3668 != len(yyv3668) {
			yyv3668 = yyv3668[:yyl3668]
			yyc3668 = true
		}
		yyj3668 := 0
		for ; yyj3668 < yyrr3668; yyj3668++ {
			yyh3668.ElemContainerState(yyj3668)
			if r.TryDecodeAsNil() {
				yyv3668[yyj3668] = PersistentVolumeClaim{}
			} else {
				yyv3669 := &yyv3668[yyj3668]
				yyv3669.CodecDecodeSelf(d)
			}

		}
		if yyrt3668 {
			for ; yyj3668 < yyl3668; yyj3668++ {
				yyv3668 = append(yyv3668, PersistentVolumeClaim{})
				yyh3668.ElemContainerState(yyj3668)
				if r.TryDecodeAsNil() {
					yyv3668[yyj3668] = PersistentVolumeClaim{}
				} else {
					yyv3670 := &yyv3668[yyj3668]
					yyv3670.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3668 := 0
		for ; !r.CheckBreak(); yyj3668++ {

			if yyj3668 >= len(yyv3668) {
				yyv3668 = append(yyv3668, PersistentVolumeClaim{}) // var yyz3668 PersistentVolumeClaim
				yyc3668 = true
			}
			yyh3668.ElemContainerState(yyj3668)
			if yyj3668 < len(yyv3668) {
				if r.TryDecodeAsNil() {
					yyv3668[yyj3668] = PersistentVolumeClaim{}
				} else {
					yyv3671 := &yyv3668[yyj3668]
					yyv3671.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3668 < len(yyv3668) {
			yyv3668 = yyv3668[:yyj3668]
			yyc3668 = true
		} else if yyj3668 == 0 && yyv3668 == nil {
			yyv3668 = []PersistentVolumeClaim{}
			yyc3668 = true
		}
	}
	yyh3668.End()
	if yyc3668 {
		*v = yyv3668
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3672 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3672.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3673 := *v
	yyh3673, yyl3673 := z.DecSliceHelperStart()
	var yyc3673 bool
	if yyl3673 == 0 {
		if yyv3673 == nil {
			yyv3673 = []Capability{}
			yyc3673 = true
		} else if len(yyv3673) != 0 {
			yyv3673 = yyv3673[:0]
			yyc3673 = true
		}
	} else if yyl3673 > 0 {
		var yyrr3673, yyrl3673 int
		var yyrt3673 bool
		if yyl3673 > cap(yyv3673) {

			yyrl3673, yyrt3673 = z.DecInferLen(yyl3673, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3673 {
				if yyrl3673 <= cap(yyv3673) {
					yyv3673 = yyv3673[:yyrl3673]
				} else {
					yyv3673 = make([]Capability, yyrl3673)
				}
			} else {
				yyv3673 = make([]Capability, yyrl3673)
			}
			yyc3673 = true
			yyrr3673 = len(yyv3673)
		} else if yyl3673 != len(yyv3673) {
			yyv3673 = yyv3673[:yyl3673]
			yyc3673 = true
		}
		yyj3673 := 0
		for ; yyj3673 < yyrr3673; yyj3673++ {
			yyh3673.ElemContainerState(yyj3673)
			if r.TryDecodeAsNil() {
				yyv3673[yyj3673] = ""
			} else {
				yyv3673[yyj3673] = Capability(r.DecodeString())
			}

		}
		if yyrt3673 {
			for ; yyj3673 < yyl3673; yyj3673++ {
				yyv3673 = append(yyv3673, "")
				yyh3673.ElemContainerState(yyj3673)
				if r.TryDecodeAsNil() {
					yyv3673[yyj3673] = ""
				} else {
					yyv3673[yyj3673] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj3673 := 0
		for ; !r.CheckBreak(); yyj3673++ {

			if yyj3673 >= len(yyv3673) {
				yyv3673 = append(yyv3673, "") // var yyz3673 Capability
				yyc3673 = true
			}
			yyh3673.ElemContainerState(yyj3673)
			if yyj3673 < len(yyv3673) {
				if r.TryDecodeAsNil() {
					yyv3673[yyj3673] = ""
				} else {
					yyv3673[yyj3673] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3673 < len(yyv3673) {
			yyv3673 = yyv3673[:yyj3673]
			yyc3673 = true
		} else if yyj3673 == 0 && yyv3673 == nil {
			yyv3673 = []Capability{}
			yyc3673 = true
		}
	}
	yyh3673.End()
	if yyc3673 {
		*v = yyv3673
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3677 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3678 := &yyv3677
		yy3678.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3679 := *v
	yyh3679, yyl3679 := z.DecSliceHelperStart()
	var yyc3679 bool
	if yyl3679 == 0 {
		if yyv3679 == nil {
			yyv3679 = []ContainerPort{}
			yyc3679 = true
		} else if len(yyv3679) != 0 {
			yyv3679 = yyv3679[:0]
			yyc3679 = true
		}
	} else if yyl3679 > 0 {
		var yyrr3679, yyrl3679 int
		var yyrt3679 bool
		if yyl3679 > cap(yyv3679) {

			yyrg3679 := len(yyv3679) > 0
			yyv23679 := yyv3679
			yyrl3679, yyrt3679 = z.DecInferLen(yyl3679, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3679 {
				if yyrl3679 <= cap(yyv3679) {
					yyv3679 = yyv3679[:yyrl3679]
				} else {
					yyv3679 = make([]ContainerPort, yyrl3679)
				}
			} else {
				yyv3679 = make([]ContainerPort, yyrl3679)
			}
			yyc3679 = true
			yyrr3679 = len(yyv3679)
			if yyrg3679 {
				copy(yyv3679, yyv23679)
			}
		} else if yyl3679 != len(yyv3679) {
			yyv3679 = yyv3679[:yyl3679]
			yyc3679 = true
		}
		yyj3679 := 0
		for ; yyj3679 < yyrr3679; yyj3679++ {
			yyh3679.ElemContainerState(yyj3679)
			if r.TryDecodeAsNil() {
				yyv3679[yyj3679] = ContainerPort{}
			} else {
				yyv3680 := &yyv3679[yyj3679]
				yyv3680.CodecDecodeSelf(d)
			}

		}
		if yyrt3679 {
			for ; yyj3679 < yyl3679; yyj3679++ {
				yyv3679 = append(yyv3679, ContainerPort{})
				yyh3679.ElemContainerState(yyj3679)
				if r.TryDecodeAsNil() {
					yyv3679[yyj3679] = ContainerPort{}
				} else {
					yyv3681 := &yyv3679[yyj3679]
					yyv3681.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3679 := 0
		for ; !r.CheckBreak(); yyj3679++ {

			if yyj3679 >= len(yyv3679) {
				yyv3679 = append(yyv3679, ContainerPort{}) // var yyz3679 ContainerPort
				yyc3679 = true
			}
			yyh3679.ElemContainerState(yyj3679)
			if yyj3679 < len(yyv3679) {
				if r.TryDecodeAsNil() {
					yyv3679[yyj3679] = ContainerPort{}
				} else {
					yyv3682 := &yyv3679[yyj3679]
					yyv3682.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3679 < len(yyv3679) {
			yyv3679 = yyv3679[:yyj3679]
			yyc3679 = true
		} else if yyj3679 == 0 && yyv3679 == nil {
			yyv3679 = []ContainerPort{}
			yyc3679 = true
		}
	}
	yyh3679.End()
	if yyc3679 {
		*v = yyv3679
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3683 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3684 := &yyv3683
		yy3684.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3685 := *v
	yyh3685, yyl3685 := z.DecSliceHelperStart()
	var yyc3685 bool
	if yyl3685 == 0 {
		if yyv3685 == nil {
			yyv3685 = []EnvVar{}
			yyc3685 = true
		} else if len(yyv3685) != 0 {
			yyv3685 = yyv3685[:0]
			yyc3685 = true
		}
	} else if yyl3685 > 0 {
		var yyrr3685, yyrl3685 int
		var yyrt3685 bool
		if yyl3685 > cap(yyv3685) {

			yyrg3685 := len(yyv3685) > 0
			yyv23685 := yyv3685
			yyrl3685, yyrt3685 = z.DecInferLen(yyl3685, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3685 {
				if yyrl3685 <= cap(yyv3685) {
					yyv3685 = yyv3685[:yyrl3685]
				} else {
					yyv3685 = make([]EnvVar, yyrl3685)
				}
			} else {
				yyv3685 = make([]EnvVar, yyrl3685)
			}
			yyc3685 = true
			yyrr3685 = len(yyv3685)
			if yyrg3685 {
				copy(yyv3685, yyv23685)
			}
		} else if yyl3685 != len(yyv3685) {
			yyv3685 = yyv3685[:yyl3685]
			yyc3685 = true
		}
		yyj3685 := 0
		for ; yyj3685 < yyrr3685; yyj3685++ {
			yyh3685.ElemContainerState(yyj3685)
			if r.TryDecodeAsNil() {
				yyv3685[yyj3685] = EnvVar{}
			} else {
				yyv3686 := &yyv3685[yyj3685]
				yyv3686.CodecDecodeSelf(d)
			}

		}
		if yyrt3685 {
			for ; yyj3685 < yyl3685; yyj3685++ {
				yyv3685 = append(yyv3685, EnvVar{})
				yyh3685.ElemContainerState(yyj3685)
				if r.TryDecodeAsNil() {
					yyv3685[yyj3685] = EnvVar{}
				} else {
					yyv3687 := &yyv3685[yyj3685]
					yyv3687.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3685 := 0
		for ; !r.CheckBreak(); yyj3685++ {

			if yyj3685 >= len(yyv3685) {
				yyv3685 = append(yyv3685, EnvVar{}) // var yyz3685 EnvVar
				yyc3685 = true
			}
			yyh3685.ElemContainerState(yyj3685)
			if yyj3685 < len(yyv3685) {
				if r.TryDecodeAsNil() {
					yyv3685[yyj3685] = EnvVar{}
				} else {
					yyv3688 := &yyv3685[yyj3685]
					yyv3688.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3685 < len(yyv3685) {
			yyv3685 = yyv3685[:yyj3685]
			yyc3685 = true
		} else if yyj3685 == 0 && yyv3685 == nil {
			yyv3685 = []EnvVar{}
			yyc3685 = true
		}
	}
	yyh3685.End()
	if yyc3685 {
		*v = yyv3685
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3689 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3690 := &yyv3689
		yy3690.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3691 := *v
	yyh3691, yyl3691 := z.DecSliceHelperStart()
	var yyc3691 bool
	if yyl3691 == 0 {
		if yyv3691 == nil {
			yyv3691 = []VolumeMount{}
			yyc3691 = true
		} else if len(yyv3691) != 0 {
			yyv3691 = yyv3691[:0]
			yyc3691 = true
		}
	} else if yyl3691 > 0 {
		var yyrr3691, yyrl3691 int
		var yyrt3691 bool
		if yyl3691 > cap(yyv3691) {

			yyrg3691 := len(yyv3691) > 0
			yyv23691 := yyv3691
			yyrl3691, yyrt3691 = z.DecInferLen(yyl3691, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3691 {
				if yyrl3691 <= cap(yyv3691) {
					yyv3691 = yyv3691[:yyrl3691]
				} else {
					yyv3691 = make([]VolumeMount, yyrl3691)
				}
			} else {
				yyv3691 = make([]VolumeMount, yyrl3691)
			}
			yyc3691 = true
			yyrr3691 = len(yyv3691)
			if yyrg3691 {
				copy(yyv3691, yyv23691)
			}
		} else if yyl3691 != len(yyv3691) {
			yyv3691 = yyv3691[:yyl3691]
			yyc3691 = true
		}
		yyj3691 := 0
		for ; yyj3691 < yyrr3691; yyj3691++ {
			yyh3691.ElemContainerState(yyj3691)
			if r.TryDecodeAsNil() {
				yyv3691[yyj3691] = VolumeMount{}
			} else {
				yyv3692 := &yyv3691[yyj3691]
				yyv3692.CodecDecodeSelf(d)
			}

		}
		if yyrt3691 {
			for ; yyj3691 < yyl3691; yyj3691++ {
				yyv3691 = append(yyv3691, VolumeMount{})
				yyh3691.ElemContainerState(yyj3691)
				if r.TryDecodeAsNil() {
					yyv3691[yyj3691] = VolumeMount{}
				} else {
					yyv3693 := &yyv3691[yyj3691]
					yyv3693.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3691 := 0
		for ; !r.CheckBreak(); yyj3691++ {

			if yyj3691 >= len(yyv3691) {
				yyv3691 = append(yyv3691, VolumeMount{}) // var yyz3691 VolumeMount
				yyc3691 = true
			}
			yyh3691.ElemContainerState(yyj3691)
			if yyj3691 < len(yyv3691) {
				if r.TryDecodeAsNil() {
					yyv3691[yyj3691] = VolumeMount{}
				} else {
					yyv3694 := &yyv3691[yyj3691]
					yyv3694.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3691 < len(yyv3691) {
			yyv3691 = yyv3691[:yyj3691]
			yyc3691 = true
		} else if yyj3691 == 0 && yyv3691 == nil {
			yyv3691 = []VolumeMount{}
			yyc3691 = true
		}
	}
	yyh3691.End()
	if yyc3691 {
		*v = yyv3691
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3695 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3696 := &yyv3695
		yy3696.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3697 := *v
	yyh3697, yyl3697 := z.DecSliceHelperStart()
	var yyc3697 bool
	if yyl3697 == 0 {
		if yyv3697 == nil {
			yyv3697 = []NodeSelectorTerm{}
			yyc3697 = true
		} else if len(yyv3697) != 0 {
			yyv3697 = yyv3697[:0]
			yyc3697 = true
		}
	} else if yyl3697 > 0 {
		var yyrr3697, yyrl3697 int
		var yyrt3697 bool
		if yyl3697 > cap(yyv3697) {

			yyrg3697 := len(yyv3697) > 0
			yyv23697 := yyv3697
			yyrl3697, yyrt3697 = z.DecInferLen(yyl3697, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3697 {
				if yyrl3697 <= cap(yyv3697) {
					yyv3697 = yyv3697[:yyrl3697]
				} else {
					yyv3697 = make([]NodeSelectorTerm, yyrl3697)
				}
			} else {
				yyv3697 = make([]NodeSelectorTerm, yyrl3697)
			}
			yyc3697 = true
			yyrr3697 = len(yyv3697)
			if yyrg3697 {
				copy(yyv3697, yyv23697)
			}
		} else if yyl3697 != len(yyv3697) {
			yyv3697 = yyv3697[:yyl3697]
			yyc3697 = true
		}
		yyj3697 := 0
		for ; yyj3697 < yyrr3697; yyj3697++ {
			yyh3697.ElemContainerState(yyj3697)
			if r.TryDecodeAsNil() {
				yyv3697[yyj3697] = NodeSelectorTerm{}
			} else {
				yyv3698 := &yyv3697[yyj3697]
				yyv3698.CodecDecodeSelf(d)
			}

		}
		if yyrt3697 {
			for ; yyj3697 < yyl3697; yyj3697++ {
				yyv3697 = append(yyv3697, NodeSelectorTerm{})
				yyh3697.ElemContainerState(yyj3697)
				if r.TryDecodeAsNil() {
					yyv3697[yyj3697] = NodeSelectorTerm{}
				} else {
					yyv3699 := &yyv3697[yyj3697]
					yyv3699.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3697 := 0
		for ; !r.CheckBreak(); yyj3697++ {

			if yyj3697 >= len(yyv3697) {
				yyv3697 = append(yyv3697, NodeSelectorTerm{}) // var yyz3697 NodeSelectorTerm
				yyc3697 = true
			}
			yyh3697.ElemContainerState(yyj3697)
			if yyj3697 < len(yyv3697) {
				if r.TryDecodeAsNil() {
					yyv3697[yyj3697] = NodeSelectorTerm{}
				} else {
					yyv3700 := &yyv3697[yyj3697]
					yyv3700.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3697 < len(yyv3697) {
			yyv3697 = yyv3697[:yyj3697]
			yyc3697 = true
		} else if yyj3697 == 0 && yyv3697 == nil {
			yyv3697 = []NodeSelectorTerm{}
			yyc3697 = true
		}
	}
	yyh3697.End()
	if yyc3697 {
		*v = yyv3697
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3701 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3702 := &yyv3701
		yy3702.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3703 := *v
	yyh3703, yyl3703 := z.DecSliceHelperStart()
	var yyc3703 bool
	if yyl3703 == 0 {
		if yyv3703 == nil {
			yyv3703 = []NodeSelectorRequirement{}
			yyc3703 = true
		} else if len(yyv3703) != 0 {
			yyv3703 = yyv3703[:0]
			yyc3703 = true
		}
	} else if yyl3703 > 0 {
		var yyrr3703, yyrl3703 int
		var yyrt3703 bool
		if yyl3703 > cap(yyv3703) {

			yyrg3703 := len(yyv3703) > 0
			yyv23703 := yyv3703
			yyrl3703, yyrt3703 = z.DecInferLen(yyl3703, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3703 {
				if yyrl3703 <= cap(yyv3703) {
					yyv3703 = yyv3703[:yyrl3703]
				} else {
					yyv3703 = make([]NodeSelectorRequirement, yyrl3703)
				}
			} else {
				yyv3703 = make([]NodeSelectorRequirement, yyrl3703)
			}
			yyc3703 = true
			yyrr3703 = len(yyv3703)
			if yyrg3703 {
				copy(yyv3703, yyv23703)
			}
		} else if yyl3703 != len(yyv3703) {
			yyv3703 = yyv3703[:yyl3703]
			yyc3703 = true
		}
		yyj3703 := 0
		for ; yyj3703 < yyrr3703; yyj3703++ {
			yyh3703.ElemContainerState(yyj3703)
			if r.TryDecodeAsNil() {
				yyv3703[yyj3703] = NodeSelectorRequirement{}
			} else {
				yyv3704 := &yyv3703[yyj3703]
				yyv3704.CodecDecodeSelf(d)
			}

		}
		if yyrt3703 {
			for ; yyj3703 < yyl3703; yyj3703++ {
				yyv3703 = append(yyv3703, NodeSelectorRequirement{})
				yyh3703.ElemContainerState(yyj3703)
				if r.TryDecodeAsNil() {
					yyv3703[yyj3703] = NodeSelectorRequirement{}
				} else {
					yyv3705 := &yyv3703[yyj3703]
					yyv3705.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3703 := 0
		for ; !r.CheckBreak(); yyj3703++ {

			if yyj3703 >= len(yyv3703) {
				yyv3703 = append(yyv3703, NodeSelectorRequirement{}) // var yyz3703 NodeSelectorRequirement
				yyc3703 = true
			}
			yyh3703.ElemContainerState(yyj3703)
			if yyj3703 < len(yyv3703) {
				if r.TryDecodeAsNil() {
					yyv3703[yyj3703] = NodeSelectorRequirement{}
				} else {
					yyv3706 := &yyv3703[yyj3703]
					yyv3706.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3703 < len(yyv3703) {
			yyv3703 = yyv3703[:yyj3703]
			yyc3703 = true
		} else if yyj3703 == 0 && yyv3703 == nil {
			yyv3703 = []NodeSelectorRequirement{}
			yyc3703 = true
		}
	}
	yyh3703.End()
	if yyc3703 {
		*v = yyv3703
	}
}

func (x codecSelfer1234) encSliceSoftNodeAffinityTerm(v []SoftNodeAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3707 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3708 := &yyv3707
		yy3708.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSoftNodeAffinityTerm(v *[]SoftNodeAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3709 := *v
	yyh3709, yyl3709 := z.DecSliceHelperStart()
	var yyc3709 bool
	if yyl3709 == 0 {
		if yyv3709 == nil {
			yyv3709 = []SoftNodeAffinityTerm{}
			yyc3709 = true
		} else if len(yyv3709) != 0 {
			yyv3709 = yyv3709[:0]
			yyc3709 = true
		}
	} else if yyl3709 > 0 {
		var yyrr3709, yyrl3709 int
		var yyrt3709 bool
		if yyl3709 > cap(yyv3709) {

			yyrg3709 := len(yyv3709) > 0
			yyv23709 := yyv3709
			yyrl3709, yyrt3709 = z.DecInferLen(yyl3709, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3709 {
				if yyrl3709 <= cap(yyv3709) {
					yyv3709 = yyv3709[:yyrl3709]
				} else {
					yyv3709 = make([]SoftNodeAffinityTerm, yyrl3709)
				}
			} else {
				yyv3709 = make([]SoftNodeAffinityTerm, yyrl3709)
			}
			yyc3709 = true
			yyrr3709 = len(yyv3709)
			if yyrg3709 {
				copy(yyv3709, yyv23709)
			}
		} else if yyl3709 != len(yyv3709) {
			yyv3709 = yyv3709[:yyl3709]
			yyc3709 = true
		}
		yyj3709 := 0
		for ; yyj3709 < yyrr3709; yyj3709++ {
			yyh3709.ElemContainerState(yyj3709)
			if r.TryDecodeAsNil() {
				yyv3709[yyj3709] = SoftNodeAffinityTerm{}
			} else {
				yyv3710 := &yyv3709[yyj3709]
				yyv3710.CodecDecodeSelf(d)
			}

		}
		if yyrt3709 {
			for ; yyj3709 < yyl3709; yyj3709++ {
				yyv3709 = append(yyv3709, SoftNodeAffinityTerm{})
				yyh3709.ElemContainerState(yyj3709)
				if r.TryDecodeAsNil() {
					yyv3709[yyj3709] = SoftNodeAffinityTerm{}
				} else {
					yyv3711 := &yyv3709[yyj3709]
					yyv3711.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3709 := 0
		for ; !r.CheckBreak(); yyj3709++ {

			if yyj3709 >= len(yyv3709) {
				yyv3709 = append(yyv3709, SoftNodeAffinityTerm{}) // var yyz3709 SoftNodeAffinityTerm
				yyc3709 = true
			}
			yyh3709.ElemContainerState(yyj3709)
			if yyj3709 < len(yyv3709) {
				if r.TryDecodeAsNil() {
					yyv3709[yyj3709] = SoftNodeAffinityTerm{}
				} else {
					yyv3712 := &yyv3709[yyj3709]
					yyv3712.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3709 < len(yyv3709) {
			yyv3709 = yyv3709[:yyj3709]
			yyc3709 = true
		} else if yyj3709 == 0 && yyv3709 == nil {
			yyv3709 = []SoftNodeAffinityTerm{}
			yyc3709 = true
		}
	}
	yyh3709.End()
	if yyc3709 {
		*v = yyv3709
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3713 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3714 := &yyv3713
		yy3714.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3715 := *v
	yyh3715, yyl3715 := z.DecSliceHelperStart()
	var yyc3715 bool
	if yyl3715 == 0 {
		if yyv3715 == nil {
			yyv3715 = []Volume{}
			yyc3715 = true
		} else if len(yyv3715) != 0 {
			yyv3715 = yyv3715[:0]
			yyc3715 = true
		}
	} else if yyl3715 > 0 {
		var yyrr3715, yyrl3715 int
		var yyrt3715 bool
		if yyl3715 > cap(yyv3715) {

			yyrg3715 := len(yyv3715) > 0
			yyv23715 := yyv3715
			yyrl3715, yyrt3715 = z.DecInferLen(yyl3715, z.DecBasicHandle().MaxInitLen, 152)
			if yyrt3715 {
				if yyrl3715 <= cap(yyv3715) {
					yyv3715 = yyv3715[:yyrl3715]
				} else {
					yyv3715 = make([]Volume, yyrl3715)
				}
			} else {
				yyv3715 = make([]Volume, yyrl3715)
			}
			yyc3715 = true
			yyrr3715 = len(yyv3715)
			if yyrg3715 {
				copy(yyv3715, yyv23715)
			}
		} else if yyl3715 != len(yyv3715) {
			yyv3715 = yyv3715[:yyl3715]
			yyc3715 = true
		}
		yyj3715 := 0
		for ; yyj3715 < yyrr3715; yyj3715++ {
			yyh3715.ElemContainerState(yyj3715)
			if r.TryDecodeAsNil() {
				yyv3715[yyj3715] = Volume{}
			} else {
				yyv3716 := &yyv3715[yyj3715]
				yyv3716.CodecDecodeSelf(d)
			}

		}
		if yyrt3715 {
			for ; yyj3715 < yyl3715; yyj3715++ {
				yyv3715 = append(yyv3715, Volume{})
				yyh3715.ElemContainerState(yyj3715)
				if r.TryDecodeAsNil() {
					yyv3715[yyj3715] = Volume{}
				} else {
					yyv3717 := &yyv3715[yyj3715]
					yyv3717.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3715 := 0
		for ; !r.CheckBreak(); yyj3715++ {

			if yyj3715 >= len(yyv3715) {
				yyv3715 = append(yyv3715, Volume{}) // var yyz3715 Volume
				yyc3715 = true
			}
			yyh3715.ElemContainerState(yyj3715)
			if yyj3715 < len(yyv3715) {
				if r.TryDecodeAsNil() {
					yyv3715[yyj3715] = Volume{}
				} else {
					yyv3718 := &yyv3715[yyj3715]
					yyv3718.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3715 < len(yyv3715) {
			yyv3715 = yyv3715[:yyj3715]
			yyc3715 = true
		} else if yyj3715 == 0 && yyv3715 == nil {
			yyv3715 = []Volume{}
			yyc3715 = true
		}
	}
	yyh3715.End()
	if yyc3715 {
		*v = yyv3715
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3719 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3720 := &yyv3719
		yy3720.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3721 := *v
	yyh3721, yyl3721 := z.DecSliceHelperStart()
	var yyc3721 bool
	if yyl3721 == 0 {
		if yyv3721 == nil {
			yyv3721 = []Container{}
			yyc3721 = true
		} else if len(yyv3721) != 0 {
			yyv3721 = yyv3721[:0]
			yyc3721 = true
		}
	} else if yyl3721 > 0 {
		var yyrr3721, yyrl3721 int
		var yyrt3721 bool
		if yyl3721 > cap(yyv3721) {

			yyrg3721 := len(yyv3721) > 0
			yyv23721 := yyv3721
			yyrl3721, yyrt3721 = z.DecInferLen(yyl3721, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt3721 {
				if yyrl3721 <= cap(yyv3721) {
					yyv3721 = yyv3721[:yyrl3721]
				} else {
					yyv3721 = make([]Container, yyrl3721)
				}
			} else {
				yyv3721 = make([]Container, yyrl3721)
			}
			yyc3721 = true
			yyrr3721 = len(yyv3721)
			if yyrg3721 {
				copy(yyv3721, yyv23721)
			}
		} else if yyl3721 != len(yyv3721) {
			yyv3721 = yyv3721[:yyl3721]
			yyc3721 = true
		}
		yyj3721 := 0
		for ; yyj3721 < yyrr3721; yyj3721++ {
			yyh3721.ElemContainerState(yyj3721)
			if r.TryDecodeAsNil() {
				yyv3721[yyj3721] = Container{}
			} else {
				yyv3722 := &yyv3721[yyj3721]
				yyv3722.CodecDecodeSelf(d)
			}

		}
		if yyrt3721 {
			for ; yyj3721 < yyl3721; yyj3721++ {
				yyv3721 = append(yyv3721, Container{})
				yyh3721.ElemContainerState(yyj3721)
				if r.TryDecodeAsNil() {
					yyv3721[yyj3721] = Container{}
				} else {
					yyv3723 := &yyv3721[yyj3721]
					yyv3723.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3721 := 0
		for ; !r.CheckBreak(); yyj3721++ {

			if yyj3721 >= len(yyv3721) {
				yyv3721 = append(yyv3721, Container{}) // var yyz3721 Container
				yyc3721 = true
			}
			yyh3721.ElemContainerState(yyj3721)
			if yyj3721 < len(yyv3721) {
				if r.TryDecodeAsNil() {
					yyv3721[yyj3721] = Container{}
				} else {
					yyv3724 := &yyv3721[yyj3721]
					yyv3724.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3721 < len(yyv3721) {
			yyv3721 = yyv3721[:yyj3721]
			yyc3721 = true
		} else if yyj3721 == 0 && yyv3721 == nil {
			yyv3721 = []Container{}
			yyc3721 = true
		}
	}
	yyh3721.End()
	if yyc3721 {
		*v = yyv3721
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3725 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3726 := &yyv3725
		yy3726.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3727 := *v
	yyh3727, yyl3727 := z.DecSliceHelperStart()
	var yyc3727 bool
	if yyl3727 == 0 {
		if yyv3727 == nil {
			yyv3727 = []LocalObjectReference{}
			yyc3727 = true
		} else if len(yyv3727) != 0 {
			yyv3727 = yyv3727[:0]
			yyc3727 = true
		}
	} else if yyl3727 > 0 {
		var yyrr3727, yyrl3727 int
		var yyrt3727 bool
		if yyl3727 > cap(yyv3727) {

			yyrg3727 := len(yyv3727) > 0
			yyv23727 := yyv3727
			yyrl3727, yyrt3727 = z.DecInferLen(yyl3727, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3727 {
				if yyrl3727 <= cap(yyv3727) {
					yyv3727 = yyv3727[:yyrl3727]
				} else {
					yyv3727 = make([]LocalObjectReference, yyrl3727)
				}
			} else {
				yyv3727 = make([]LocalObjectReference, yyrl3727)
			}
			yyc3727 = true
			yyrr3727 = len(yyv3727)
			if yyrg3727 {
				copy(yyv3727, yyv23727)
			}
		} else if yyl3727 != len(yyv3727) {
			yyv3727 = yyv3727[:yyl3727]
			yyc3727 = true
		}
		yyj3727 := 0
		for ; yyj3727 < yyrr3727; yyj3727++ {
			yyh3727.ElemContainerState(yyj3727)
			if r.TryDecodeAsNil() {
				yyv3727[yyj3727] = LocalObjectReference{}
			} else {
				yyv3728 := &yyv3727[yyj3727]
				yyv3728.CodecDecodeSelf(d)
			}

		}
		if yyrt3727 {
			for ; yyj3727 < yyl3727; yyj3727++ {
				yyv3727 = append(yyv3727, LocalObjectReference{})
				yyh3727.ElemContainerState(yyj3727)
				if r.TryDecodeAsNil() {
					yyv3727[yyj3727] = LocalObjectReference{}
				} else {
					yyv3729 := &yyv3727[yyj3727]
					yyv3729.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3727 := 0
		for ; !r.CheckBreak(); yyj3727++ {

			if yyj3727 >= len(yyv3727) {
				yyv3727 = append(yyv3727, LocalObjectReference{}) // var yyz3727 LocalObjectReference
				yyc3727 = true
			}
			yyh3727.ElemContainerState(yyj3727)
			if yyj3727 < len(yyv3727) {
				if r.TryDecodeAsNil() {
					yyv3727[yyj3727] = LocalObjectReference{}
				} else {
					yyv3730 := &yyv3727[yyj3727]
					yyv3730.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3727 < len(yyv3727) {
			yyv3727 = yyv3727[:yyj3727]
			yyc3727 = true
		} else if yyj3727 == 0 && yyv3727 == nil {
			yyv3727 = []LocalObjectReference{}
			yyc3727 = true
		}
	}
	yyh3727.End()
	if yyc3727 {
		*v = yyv3727
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3731 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3732 := &yyv3731
		yy3732.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3733 := *v
	yyh3733, yyl3733 := z.DecSliceHelperStart()
	var yyc3733 bool
	if yyl3733 == 0 {
		if yyv3733 == nil {
			yyv3733 = []PodCondition{}
			yyc3733 = true
		} else if len(yyv3733) != 0 {
			yyv3733 = yyv3733[:0]
			yyc3733 = true
		}
	} else if yyl3733 > 0 {
		var yyrr3733, yyrl3733 int
		var yyrt3733 bool
		if yyl3733 > cap(yyv3733) {

			yyrg3733 := len(yyv3733) > 0
			yyv23733 := yyv3733
			yyrl3733, yyrt3733 = z.DecInferLen(yyl3733, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3733 {
				if yyrl3733 <= cap(yyv3733) {
					yyv3733 = yyv3733[:yyrl3733]
				} else {
					yyv3733 = make([]PodCondition, yyrl3733)
				}
			} else {
				yyv3733 = make([]PodCondition, yyrl3733)
			}
			yyc3733 = true
			yyrr3733 = len(yyv3733)
			if yyrg3733 {
				copy(yyv3733, yyv23733)
			}
		} else if yyl3733 != len(yyv3733) {
			yyv3733 = yyv3733[:yyl3733]
			yyc3733 = true
		}
		yyj3733 := 0
		for ; yyj3733 < yyrr3733; yyj3733++ {
			yyh3733.ElemContainerState(yyj3733)
			if r.TryDecodeAsNil() {
				yyv3733[yyj3733] = PodCondition{}
			} else {
				yyv3734 := &yyv3733[yyj3733]
				yyv3734.CodecDecodeSelf(d)
			}

		}
		if yyrt3733 {
			for ; yyj3733 < yyl3733; yyj3733++ {
				yyv3733 = append(yyv3733, PodCondition{})
				yyh3733.ElemContainerState(yyj3733)
				if r.TryDecodeAsNil() {
					yyv3733[yyj3733] = PodCondition{}
				} else {
					yyv3735 := &yyv3733[yyj3733]
					yyv3735.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3733 := 0
		for ; !r.CheckBreak(); yyj3733++ {

			if yyj3733 >= len(yyv3733) {
				yyv3733 = append(yyv3733, PodCondition{}) // var yyz3733 PodCondition
				yyc3733 = true
			}
			yyh3733.ElemContainerState(yyj3733)
			if yyj3733 < len(yyv3733) {
				if r.TryDecodeAsNil() {
					yyv3733[yyj3733] = PodCondition{}
				} else {
					yyv3736 := &yyv3733[yyj3733]
					yyv3736.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3733 < len(yyv3733) {
			yyv3733 = yyv3733[:yyj3733]
			yyc3733 = true
		} else if yyj3733 == 0 && yyv3733 == nil {
			yyv3733 = []PodCondition{}
			yyc3733 = true
		}
	}
	yyh3733.End()
	if yyc3733 {
		*v = yyv3733
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3737 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3738 := &yyv3737
		yy3738.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3739 := *v
	yyh3739, yyl3739 := z.DecSliceHelperStart()
	var yyc3739 bool
	if yyl3739 == 0 {
		if yyv3739 == nil {
			yyv3739 = []ContainerStatus{}
			yyc3739 = true
		} else if len(yyv3739) != 0 {
			yyv3739 = yyv3739[:0]
			yyc3739 = true
		}
	} else if yyl3739 > 0 {
		var yyrr3739, yyrl3739 int
		var yyrt3739 bool
		if yyl3739 > cap(yyv3739) {

			yyrg3739 := len(yyv3739) > 0
			yyv23739 := yyv3739
			yyrl3739, yyrt3739 = z.DecInferLen(yyl3739, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt3739 {
				if yyrl3739 <= cap(yyv3739) {
					yyv3739 = yyv3739[:yyrl3739]
				} else {
					yyv3739 = make([]ContainerStatus, yyrl3739)
				}
			} else {
				yyv3739 = make([]ContainerStatus, yyrl3739)
			}
			yyc3739 = true
			yyrr3739 = len(yyv3739)
			if yyrg3739 {
				copy(yyv3739, yyv23739)
			}
		} else if yyl3739 != len(yyv3739) {
			yyv3739 = yyv3739[:yyl3739]
			yyc3739 = true
		}
		yyj3739 := 0
		for ; yyj3739 < yyrr3739; yyj3739++ {
			yyh3739.ElemContainerState(yyj3739)
			if r.TryDecodeAsNil() {
				yyv3739[yyj3739] = ContainerStatus{}
			} else {
				yyv3740 := &yyv3739[yyj3739]
				yyv3740.CodecDecodeSelf(d)
			}

		}
		if yyrt3739 {
			for ; yyj3739 < yyl3739; yyj3739++ {
				yyv3739 = append(yyv3739, ContainerStatus{})
				yyh3739.ElemContainerState(yyj3739)
				if r.TryDecodeAsNil() {
					yyv3739[yyj3739] = ContainerStatus{}
				} else {
					yyv3741 := &yyv3739[yyj3739]
					yyv3741.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3739 := 0
		for ; !r.CheckBreak(); yyj3739++ {

			if yyj3739 >= len(yyv3739) {
				yyv3739 = append(yyv3739, ContainerStatus{}) // var yyz3739 ContainerStatus
				yyc3739 = true
			}
			yyh3739.ElemContainerState(yyj3739)
			if yyj3739 < len(yyv3739) {
				if r.TryDecodeAsNil() {
					yyv3739[yyj3739] = ContainerStatus{}
				} else {
					yyv3742 := &yyv3739[yyj3739]
					yyv3742.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3739 < len(yyv3739) {
			yyv3739 = yyv3739[:yyj3739]
			yyc3739 = true
		} else if yyj3739 == 0 && yyv3739 == nil {
			yyv3739 = []ContainerStatus{}
			yyc3739 = true
		}
	}
	yyh3739.End()
	if yyc3739 {
		*v = yyv3739
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3743 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3744 := &yyv3743
		yy3744.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3745 := *v
	yyh3745, yyl3745 := z.DecSliceHelperStart()
	var yyc3745 bool
	if yyl3745 == 0 {
		if yyv3745 == nil {
			yyv3745 = []Pod{}
			yyc3745 = true
		} else if len(yyv3745) != 0 {
			yyv3745 = yyv3745[:0]
			yyc3745 = true
		}
	} else if yyl3745 > 0 {
		var yyrr3745, yyrl3745 int
		var yyrt3745 bool
		if yyl3745 > cap(yyv3745) {

			yyrg3745 := len(yyv3745) > 0
			yyv23745 := yyv3745
			yyrl3745, yyrt3745 = z.DecInferLen(yyl3745, z.DecBasicHandle().MaxInitLen, 528)
			if yyrt3745 {
				if yyrl3745 <= cap(yyv3745) {
					yyv3745 = yyv3745[:yyrl3745]
				} else {
					yyv3745 = make([]Pod, yyrl3745)
				}
			} else {
				yyv3745 = make([]Pod, yyrl3745)
			}
			yyc3745 = true
			yyrr3745 = len(yyv3745)
			if yyrg3745 {
				copy(yyv3745, yyv23745)
			}
		} else if yyl3745 != len(yyv3745) {
			yyv3745 = yyv3745[:yyl3745]
			yyc3745 = true
		}
		yyj3745 := 0
		for ; yyj3745 < yyrr3745; yyj3745++ {
			yyh3745.ElemContainerState(yyj3745)
			if r.TryDecodeAsNil() {
				yyv3745[yyj3745] = Pod{}
			} else {
				yyv3746 := &yyv3745[yyj3745]
				yyv3746.CodecDecodeSelf(d)
			}

		}
		if yyrt3745 {
			for ; yyj3745 < yyl3745; yyj3745++ {
				yyv3745 = append(yyv3745, Pod{})
				yyh3745.ElemContainerState(yyj3745)
				if r.TryDecodeAsNil() {
					yyv3745[yyj3745] = Pod{}
				} else {
					yyv3747 := &yyv3745[yyj3745]
					yyv3747.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3745 := 0
		for ; !r.CheckBreak(); yyj3745++ {

			if yyj3745 >= len(yyv3745) {
				yyv3745 = append(yyv3745, Pod{}) // var yyz3745 Pod
				yyc3745 = true
			}
			yyh3745.ElemContainerState(yyj3745)
			if yyj3745 < len(yyv3745) {
				if r.TryDecodeAsNil() {
					yyv3745[yyj3745] = Pod{}
				} else {
					yyv3748 := &yyv3745[yyj3745]
					yyv3748.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3745 < len(yyv3745) {
			yyv3745 = yyv3745[:yyj3745]
			yyc3745 = true
		} else if yyj3745 == 0 && yyv3745 == nil {
			yyv3745 = []Pod{}
			yyc3745 = true
		}
	}
	yyh3745.End()
	if yyc3745 {
		*v = yyv3745
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3749 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3750 := &yyv3749
		yy3750.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3751 := *v
	yyh3751, yyl3751 := z.DecSliceHelperStart()
	var yyc3751 bool
	if yyl3751 == 0 {
		if yyv3751 == nil {
			yyv3751 = []PodTemplate{}
			yyc3751 = true
		} else if len(yyv3751) != 0 {
			yyv3751 = yyv3751[:0]
			yyc3751 = true
		}
	} else if yyl3751 > 0 {
		var yyrr3751, yyrl3751 int
		var yyrt3751 bool
		if yyl3751 > cap(yyv3751) {

			yyrg3751 := len(yyv3751) > 0
			yyv23751 := yyv3751
			yyrl3751, yyrt3751 = z.DecInferLen(yyl3751, z.DecBasicHandle().MaxInitLen, 552)
			if yyrt3751 {
				if yyrl3751 <= cap(yyv3751) {
					yyv3751 = yyv3751[:yyrl3751]
				} else {
					yyv3751 = make([]PodTemplate, yyrl3751)
				}
			} else {
				yyv3751 = make([]PodTemplate, yyrl3751)
			}
			yyc3751 = true
			yyrr3751 = len(yyv3751)
			if yyrg3751 {
				copy(yyv3751, yyv23751)
			}
		} else if yyl3751 != len(yyv3751) {
			yyv3751 = yyv3751[:yyl3751]
			yyc3751 = true
		}
		yyj3751 := 0
		for ; yyj3751 < yyrr3751; yyj3751++ {
			yyh3751.ElemContainerState(yyj3751)
			if r.TryDecodeAsNil() {
				yyv3751[yyj3751] = PodTemplate{}
			} else {
				yyv3752 := &yyv3751[yyj3751]
				yyv3752.CodecDecodeSelf(d)
			}

		}
		if yyrt3751 {
			for ; yyj3751 < yyl3751; yyj3751++ {
				yyv3751 = append(yyv3751, PodTemplate{})
				yyh3751.ElemContainerState(yyj3751)
				if r.TryDecodeAsNil() {
					yyv3751[yyj3751] = PodTemplate{}
				} else {
					yyv3753 := &yyv3751[yyj3751]
					yyv3753.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3751 := 0
		for ; !r.CheckBreak(); yyj3751++ {

			if yyj3751 >= len(yyv3751) {
				yyv3751 = append(yyv3751, PodTemplate{}) // var yyz3751 PodTemplate
				yyc3751 = true
			}
			yyh3751.ElemContainerState(yyj3751)
			if yyj3751 < len(yyv3751) {
				if r.TryDecodeAsNil() {
					yyv3751[yyj3751] = PodTemplate{}
				} else {
					yyv3754 := &yyv3751[yyj3751]
					yyv3754.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3751 < len(yyv3751) {
			yyv3751 = yyv3751[:yyj3751]
			yyc3751 = true
		} else if yyj3751 == 0 && yyv3751 == nil {
			yyv3751 = []PodTemplate{}
			yyc3751 = true
		}
	}
	yyh3751.End()
	if yyc3751 {
		*v = yyv3751
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3755 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3756 := &yyv3755
		yy3756.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3757 := *v
	yyh3757, yyl3757 := z.DecSliceHelperStart()
	var yyc3757 bool
	if yyl3757 == 0 {
		if yyv3757 == nil {
			yyv3757 = []ReplicationController{}
			yyc3757 = true
		} else if len(yyv3757) != 0 {
			yyv3757 = yyv3757[:0]
			yyc3757 = true
		}
	} else if yyl3757 > 0 {
		var yyrr3757, yyrl3757 int
		var yyrt3757 bool
		if yyl3757 > cap(yyv3757) {

			yyrg3757 := len(yyv3757) > 0
			yyv23757 := yyv3757
			yyrl3757, yyrt3757 = z.DecInferLen(yyl3757, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3757 {
				if yyrl3757 <= cap(yyv3757) {
					yyv3757 = yyv3757[:yyrl3757]
				} else {
					yyv3757 = make([]ReplicationController, yyrl3757)
				}
			} else {
				yyv3757 = make([]ReplicationController, yyrl3757)
			}
			yyc3757 = true
			yyrr3757 = len(yyv3757)
			if yyrg3757 {
				copy(yyv3757, yyv23757)
			}
		} else if yyl3757 != len(yyv3757) {
			yyv3757 = yyv3757[:yyl3757]
			yyc3757 = true
		}
		yyj3757 := 0
		for ; yyj3757 < yyrr3757; yyj3757++ {
			yyh3757.ElemContainerState(yyj3757)
			if r.TryDecodeAsNil() {
				yyv3757[yyj3757] = ReplicationController{}
			} else {
				yyv3758 := &yyv3757[yyj3757]
				yyv3758.CodecDecodeSelf(d)
			}

		}
		if yyrt3757 {
			for ; yyj3757 < yyl3757; yyj3757++ {
				yyv3757 = append(yyv3757, ReplicationController{})
				yyh3757.ElemContainerState(yyj3757)
				if r.TryDecodeAsNil() {
					yyv3757[yyj3757] = ReplicationController{}
				} else {
					yyv3759 := &yyv3757[yyj3757]
					yyv3759.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3757 := 0
		for ; !r.CheckBreak(); yyj3757++ {

			if yyj3757 >= len(yyv3757) {
				yyv3757 = append(yyv3757, ReplicationController{}) // var yyz3757 ReplicationController
				yyc3757 = true
			}
			yyh3757.ElemContainerState(yyj3757)
			if yyj3757 < len(yyv3757) {
				if r.TryDecodeAsNil() {
					yyv3757[yyj3757] = ReplicationController{}
				} else {
					yyv3760 := &yyv3757[yyj3757]
					yyv3760.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3757 < len(yyv3757) {
			yyv3757 = yyv3757[:yyj3757]
			yyc3757 = true
		} else if yyj3757 == 0 && yyv3757 == nil {
			yyv3757 = []ReplicationController{}
			yyc3757 = true
		}
	}
	yyh3757.End()
	if yyc3757 {
		*v = yyv3757
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3761 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3762 := &yyv3761
		yy3762.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3763 := *v
	yyh3763, yyl3763 := z.DecSliceHelperStart()
	var yyc3763 bool
	if yyl3763 == 0 {
		if yyv3763 == nil {
			yyv3763 = []LoadBalancerIngress{}
			yyc3763 = true
		} else if len(yyv3763) != 0 {
			yyv3763 = yyv3763[:0]
			yyc3763 = true
		}
	} else if yyl3763 > 0 {
		var yyrr3763, yyrl3763 int
		var yyrt3763 bool
		if yyl3763 > cap(yyv3763) {

			yyrg3763 := len(yyv3763) > 0
			yyv23763 := yyv3763
			yyrl3763, yyrt3763 = z.DecInferLen(yyl3763, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3763 {
				if yyrl3763 <= cap(yyv3763) {
					yyv3763 = yyv3763[:yyrl3763]
				} else {
					yyv3763 = make([]LoadBalancerIngress, yyrl3763)
				}
			} else {
				yyv3763 = make([]LoadBalancerIngress, yyrl3763)
			}
			yyc3763 = true
			yyrr3763 = len(yyv3763)
			if yyrg3763 {
				copy(yyv3763, yyv23763)
			}
		} else if yyl3763 != len(yyv3763) {
			yyv3763 = yyv3763[:yyl3763]
			yyc3763 = true
		}
		yyj3763 := 0
		for ; yyj3763 < yyrr3763; yyj3763++ {
			yyh3763.ElemContainerState(yyj3763)
			if r.TryDecodeAsNil() {
				yyv3763[yyj3763] = LoadBalancerIngress{}
			} else {
				yyv3764 := &yyv3763[yyj3763]
				yyv3764.CodecDecodeSelf(d)
			}

		}
		if yyrt3763 {
			for ; yyj3763 < yyl3763; yyj3763++ {
				yyv3763 = append(yyv3763, LoadBalancerIngress{})
				yyh3763.ElemContainerState(yyj3763)
				if r.TryDecodeAsNil() {
					yyv3763[yyj3763] = LoadBalancerIngress{}
				} else {
					yyv3765 := &yyv3763[yyj3763]
					yyv3765.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3763 := 0
		for ; !r.CheckBreak(); yyj3763++ {

			if yyj3763 >= len(yyv3763) {
				yyv3763 = append(yyv3763, LoadBalancerIngress{}) // var yyz3763 LoadBalancerIngress
				yyc3763 = true
			}
			yyh3763.ElemContainerState(yyj3763)
			if yyj3763 < len(yyv3763) {
				if r.TryDecodeAsNil() {
					yyv3763[yyj3763] = LoadBalancerIngress{}
				} else {
					yyv3766 := &yyv3763[yyj3763]
					yyv3766.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3763 < len(yyv3763) {
			yyv3763 = yyv3763[:yyj3763]
			yyc3763 = true
		} else if yyj3763 == 0 && yyv3763 == nil {
			yyv3763 = []LoadBalancerIngress{}
			yyc3763 = true
		}
	}
	yyh3763.End()
	if yyc3763 {
		*v = yyv3763
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3767 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3768 := &yyv3767
		yy3768.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3769 := *v
	yyh3769, yyl3769 := z.DecSliceHelperStart()
	var yyc3769 bool
	if yyl3769 == 0 {
		if yyv3769 == nil {
			yyv3769 = []ServicePort{}
			yyc3769 = true
		} else if len(yyv3769) != 0 {
			yyv3769 = yyv3769[:0]
			yyc3769 = true
		}
	} else if yyl3769 > 0 {
		var yyrr3769, yyrl3769 int
		var yyrt3769 bool
		if yyl3769 > cap(yyv3769) {

			yyrg3769 := len(yyv3769) > 0
			yyv23769 := yyv3769
			yyrl3769, yyrt3769 = z.DecInferLen(yyl3769, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt3769 {
				if yyrl3769 <= cap(yyv3769) {
					yyv3769 = yyv3769[:yyrl3769]
				} else {
					yyv3769 = make([]ServicePort, yyrl3769)
				}
			} else {
				yyv3769 = make([]ServicePort, yyrl3769)
			}
			yyc3769 = true
			yyrr3769 = len(yyv3769)
			if yyrg3769 {
				copy(yyv3769, yyv23769)
			}
		} else if yyl3769 != len(yyv3769) {
			yyv3769 = yyv3769[:yyl3769]
			yyc3769 = true
		}
		yyj3769 := 0
		for ; yyj3769 < yyrr3769; yyj3769++ {
			yyh3769.ElemContainerState(yyj3769)
			if r.TryDecodeAsNil() {
				yyv3769[yyj3769] = ServicePort{}
			} else {
				yyv3770 := &yyv3769[yyj3769]
				yyv3770.CodecDecodeSelf(d)
			}

		}
		if yyrt3769 {
			for ; yyj3769 < yyl3769; yyj3769++ {
				yyv3769 = append(yyv3769, ServicePort{})
				yyh3769.ElemContainerState(yyj3769)
				if r.TryDecodeAsNil() {
					yyv3769[yyj3769] = ServicePort{}
				} else {
					yyv3771 := &yyv3769[yyj3769]
					yyv3771.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3769 := 0
		for ; !r.CheckBreak(); yyj3769++ {

			if yyj3769 >= len(yyv3769) {
				yyv3769 = append(yyv3769, ServicePort{}) // var yyz3769 ServicePort
				yyc3769 = true
			}
			yyh3769.ElemContainerState(yyj3769)
			if yyj3769 < len(yyv3769) {
				if r.TryDecodeAsNil() {
					yyv3769[yyj3769] = ServicePort{}
				} else {
					yyv3772 := &yyv3769[yyj3769]
					yyv3772.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3769 < len(yyv3769) {
			yyv3769 = yyv3769[:yyj3769]
			yyc3769 = true
		} else if yyj3769 == 0 && yyv3769 == nil {
			yyv3769 = []ServicePort{}
			yyc3769 = true
		}
	}
	yyh3769.End()
	if yyc3769 {
		*v = yyv3769
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3773 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3774 := &yyv3773
		yy3774.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3775 := *v
	yyh3775, yyl3775 := z.DecSliceHelperStart()
	var yyc3775 bool
	if yyl3775 == 0 {
		if yyv3775 == nil {
			yyv3775 = []Service{}
			yyc3775 = true
		} else if len(yyv3775) != 0 {
			yyv3775 = yyv3775[:0]
			yyc3775 = true
		}
	} else if yyl3775 > 0 {
		var yyrr3775, yyrl3775 int
		var yyrt3775 bool
		if yyl3775 > cap(yyv3775) {

			yyrg3775 := len(yyv3775) > 0
			yyv23775 := yyv3775
			yyrl3775, yyrt3775 = z.DecInferLen(yyl3775, z.DecBasicHandle().MaxInitLen, 360)
			if yyrt3775 {
				if yyrl3775 <= cap(yyv3775) {
					yyv3775 = yyv3775[:yyrl3775]
				} else {
					yyv3775 = make([]Service, yyrl3775)
				}
			} else {
				yyv3775 = make([]Service, yyrl3775)
			}
			yyc3775 = true
			yyrr3775 = len(yyv3775)
			if yyrg3775 {
				copy(yyv3775, yyv23775)
			}
		} else if yyl3775 != len(yyv3775) {
			yyv3775 = yyv3775[:yyl3775]
			yyc3775 = true
		}
		yyj3775 := 0
		for ; yyj3775 < yyrr3775; yyj3775++ {
			yyh3775.ElemContainerState(yyj3775)
			if r.TryDecodeAsNil() {
				yyv3775[yyj3775] = Service{}
			} else {
				yyv3776 := &yyv3775[yyj3775]
				yyv3776.CodecDecodeSelf(d)
			}

		}
		if yyrt3775 {
			for ; yyj3775 < yyl3775; yyj3775++ {
				yyv3775 = append(yyv3775, Service{})
				yyh3775.ElemContainerState(yyj3775)
				if r.TryDecodeAsNil() {
					yyv3775[yyj3775] = Service{}
				} else {
					yyv3777 := &yyv3775[yyj3775]
					yyv3777.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3775 := 0
		for ; !r.CheckBreak(); yyj3775++ {

			if yyj3775 >= len(yyv3775) {
				yyv3775 = append(yyv3775, Service{}) // var yyz3775 Service
				yyc3775 = true
			}
			yyh3775.ElemContainerState(yyj3775)
			if yyj3775 < len(yyv3775) {
				if r.TryDecodeAsNil() {
					yyv3775[yyj3775] = Service{}
				} else {
					yyv3778 := &yyv3775[yyj3775]
					yyv3778.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3775 < len(yyv3775) {
			yyv3775 = yyv3775[:yyj3775]
			yyc3775 = true
		} else if yyj3775 == 0 && yyv3775 == nil {
			yyv3775 = []Service{}
			yyc3775 = true
		}
	}
	yyh3775.End()
	if yyc3775 {
		*v = yyv3775
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3779 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3780 := &yyv3779
		yy3780.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3781 := *v
	yyh3781, yyl3781 := z.DecSliceHelperStart()
	var yyc3781 bool
	if yyl3781 == 0 {
		if yyv3781 == nil {
			yyv3781 = []ObjectReference{}
			yyc3781 = true
		} else if len(yyv3781) != 0 {
			yyv3781 = yyv3781[:0]
			yyc3781 = true
		}
	} else if yyl3781 > 0 {
		var yyrr3781, yyrl3781 int
		var yyrt3781 bool
		if yyl3781 > cap(yyv3781) {

			yyrg3781 := len(yyv3781) > 0
			yyv23781 := yyv3781
			yyrl3781, yyrt3781 = z.DecInferLen(yyl3781, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3781 {
				if yyrl3781 <= cap(yyv3781) {
					yyv3781 = yyv3781[:yyrl3781]
				} else {
					yyv3781 = make([]ObjectReference, yyrl3781)
				}
			} else {
				yyv3781 = make([]ObjectReference, yyrl3781)
			}
			yyc3781 = true
			yyrr3781 = len(yyv3781)
			if yyrg3781 {
				copy(yyv3781, yyv23781)
			}
		} else if yyl3781 != len(yyv3781) {
			yyv3781 = yyv3781[:yyl3781]
			yyc3781 = true
		}
		yyj3781 := 0
		for ; yyj3781 < yyrr3781; yyj3781++ {
			yyh3781.ElemContainerState(yyj3781)
			if r.TryDecodeAsNil() {
				yyv3781[yyj3781] = ObjectReference{}
			} else {
				yyv3782 := &yyv3781[yyj3781]
				yyv3782.CodecDecodeSelf(d)
			}

		}
		if yyrt3781 {
			for ; yyj3781 < yyl3781; yyj3781++ {
				yyv3781 = append(yyv3781, ObjectReference{})
				yyh3781.ElemContainerState(yyj3781)
				if r.TryDecodeAsNil() {
					yyv3781[yyj3781] = ObjectReference{}
				} else {
					yyv3783 := &yyv3781[yyj3781]
					yyv3783.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3781 := 0
		for ; !r.CheckBreak(); yyj3781++ {

			if yyj3781 >= len(yyv3781) {
				yyv3781 = append(yyv3781, ObjectReference{}) // var yyz3781 ObjectReference
				yyc3781 = true
			}
			yyh3781.ElemContainerState(yyj3781)
			if yyj3781 < len(yyv3781) {
				if r.TryDecodeAsNil() {
					yyv3781[yyj3781] = ObjectReference{}
				} else {
					yyv3784 := &yyv3781[yyj3781]
					yyv3784.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3781 < len(yyv3781) {
			yyv3781 = yyv3781[:yyj3781]
			yyc3781 = true
		} else if yyj3781 == 0 && yyv3781 == nil {
			yyv3781 = []ObjectReference{}
			yyc3781 = true
		}
	}
	yyh3781.End()
	if yyc3781 {
		*v = yyv3781
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3785 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3786 := &yyv3785
		yy3786.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3787 := *v
	yyh3787, yyl3787 := z.DecSliceHelperStart()
	var yyc3787 bool
	if yyl3787 == 0 {
		if yyv3787 == nil {
			yyv3787 = []ServiceAccount{}
			yyc3787 = true
		} else if len(yyv3787) != 0 {
			yyv3787 = yyv3787[:0]
			yyc3787 = true
		}
	} else if yyl3787 > 0 {
		var yyrr3787, yyrl3787 int
		var yyrt3787 bool
		if yyl3787 > cap(yyv3787) {

			yyrg3787 := len(yyv3787) > 0
			yyv23787 := yyv3787
			yyrl3787, yyrt3787 = z.DecInferLen(yyl3787, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt3787 {
				if yyrl3787 <= cap(yyv3787) {
					yyv3787 = yyv3787[:yyrl3787]
				} else {
					yyv3787 = make([]ServiceAccount, yyrl3787)
				}
			} else {
				yyv3787 = make([]ServiceAccount, yyrl3787)
			}
			yyc3787 = true
			yyrr3787 = len(yyv3787)
			if yyrg3787 {
				copy(yyv3787, yyv23787)
			}
		} else if yyl3787 != len(yyv3787) {
			yyv3787 = yyv3787[:yyl3787]
			yyc3787 = true
		}
		yyj3787 := 0
		for ; yyj3787 < yyrr3787; yyj3787++ {
			yyh3787.ElemContainerState(yyj3787)
			if r.TryDecodeAsNil() {
				yyv3787[yyj3787] = ServiceAccount{}
			} else {
				yyv3788 := &yyv3787[yyj3787]
				yyv3788.CodecDecodeSelf(d)
			}

		}
		if yyrt3787 {
			for ; yyj3787 < yyl3787; yyj3787++ {
				yyv3787 = append(yyv3787, ServiceAccount{})
				yyh3787.ElemContainerState(yyj3787)
				if r.TryDecodeAsNil() {
					yyv3787[yyj3787] = ServiceAccount{}
				} else {
					yyv3789 := &yyv3787[yyj3787]
					yyv3789.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3787 := 0
		for ; !r.CheckBreak(); yyj3787++ {

			if yyj3787 >= len(yyv3787) {
				yyv3787 = append(yyv3787, ServiceAccount{}) // var yyz3787 ServiceAccount
				yyc3787 = true
			}
			yyh3787.ElemContainerState(yyj3787)
			if yyj3787 < len(yyv3787) {
				if r.TryDecodeAsNil() {
					yyv3787[yyj3787] = ServiceAccount{}
				} else {
					yyv3790 := &yyv3787[yyj3787]
					yyv3790.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3787 < len(yyv3787) {
			yyv3787 = yyv3787[:yyj3787]
			yyc3787 = true
		} else if yyj3787 == 0 && yyv3787 == nil {
			yyv3787 = []ServiceAccount{}
			yyc3787 = true
		}
	}
	yyh3787.End()
	if yyc3787 {
		*v = yyv3787
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3791 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3792 := &yyv3791
		yy3792.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3793 := *v
	yyh3793, yyl3793 := z.DecSliceHelperStart()
	var yyc3793 bool
	if yyl3793 == 0 {
		if yyv3793 == nil {
			yyv3793 = []EndpointSubset{}
			yyc3793 = true
		} else if len(yyv3793) != 0 {
			yyv3793 = yyv3793[:0]
			yyc3793 = true
		}
	} else if yyl3793 > 0 {
		var yyrr3793, yyrl3793 int
		var yyrt3793 bool
		if yyl3793 > cap(yyv3793) {

			yyrg3793 := len(yyv3793) > 0
			yyv23793 := yyv3793
			yyrl3793, yyrt3793 = z.DecInferLen(yyl3793, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt3793 {
				if yyrl3793 <= cap(yyv3793) {
					yyv3793 = yyv3793[:yyrl3793]
				} else {
					yyv3793 = make([]EndpointSubset, yyrl3793)
				}
			} else {
				yyv3793 = make([]EndpointSubset, yyrl3793)
			}
			yyc3793 = true
			yyrr3793 = len(yyv3793)
			if yyrg3793 {
				copy(yyv3793, yyv23793)
			}
		} else if yyl3793 != len(yyv3793) {
			yyv3793 = yyv3793[:yyl3793]
			yyc3793 = true
		}
		yyj3793 := 0
		for ; yyj3793 < yyrr3793; yyj3793++ {
			yyh3793.ElemContainerState(yyj3793)
			if r.TryDecodeAsNil() {
				yyv3793[yyj3793] = EndpointSubset{}
			} else {
				yyv3794 := &yyv3793[yyj3793]
				yyv3794.CodecDecodeSelf(d)
			}

		}
		if yyrt3793 {
			for ; yyj3793 < yyl3793; yyj3793++ {
				yyv3793 = append(yyv3793, EndpointSubset{})
				yyh3793.ElemContainerState(yyj3793)
				if r.TryDecodeAsNil() {
					yyv3793[yyj3793] = EndpointSubset{}
				} else {
					yyv3795 := &yyv3793[yyj3793]
					yyv3795.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3793 := 0
		for ; !r.CheckBreak(); yyj3793++ {

			if yyj3793 >= len(yyv3793) {
				yyv3793 = append(yyv3793, EndpointSubset{}) // var yyz3793 EndpointSubset
				yyc3793 = true
			}
			yyh3793.ElemContainerState(yyj3793)
			if yyj3793 < len(yyv3793) {
				if r.TryDecodeAsNil() {
					yyv3793[yyj3793] = EndpointSubset{}
				} else {
					yyv3796 := &yyv3793[yyj3793]
					yyv3796.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3793 < len(yyv3793) {
			yyv3793 = yyv3793[:yyj3793]
			yyc3793 = true
		} else if yyj3793 == 0 && yyv3793 == nil {
			yyv3793 = []EndpointSubset{}
			yyc3793 = true
		}
	}
	yyh3793.End()
	if yyc3793 {
		*v = yyv3793
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3797 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3798 := &yyv3797
		yy3798.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3799 := *v
	yyh3799, yyl3799 := z.DecSliceHelperStart()
	var yyc3799 bool
	if yyl3799 == 0 {
		if yyv3799 == nil {
			yyv3799 = []EndpointAddress{}
			yyc3799 = true
		} else if len(yyv3799) != 0 {
			yyv3799 = yyv3799[:0]
			yyc3799 = true
		}
	} else if yyl3799 > 0 {
		var yyrr3799, yyrl3799 int
		var yyrt3799 bool
		if yyl3799 > cap(yyv3799) {

			yyrg3799 := len(yyv3799) > 0
			yyv23799 := yyv3799
			yyrl3799, yyrt3799 = z.DecInferLen(yyl3799, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3799 {
				if yyrl3799 <= cap(yyv3799) {
					yyv3799 = yyv3799[:yyrl3799]
				} else {
					yyv3799 = make([]EndpointAddress, yyrl3799)
				}
			} else {
				yyv3799 = make([]EndpointAddress, yyrl3799)
			}
			yyc3799 = true
			yyrr3799 = len(yyv3799)
			if yyrg3799 {
				copy(yyv3799, yyv23799)
			}
		} else if yyl3799 != len(yyv3799) {
			yyv3799 = yyv3799[:yyl3799]
			yyc3799 = true
		}
		yyj3799 := 0
		for ; yyj3799 < yyrr3799; yyj3799++ {
			yyh3799.ElemContainerState(yyj3799)
			if r.TryDecodeAsNil() {
				yyv3799[yyj3799] = EndpointAddress{}
			} else {
				yyv3800 := &yyv3799[yyj3799]
				yyv3800.CodecDecodeSelf(d)
			}

		}
		if yyrt3799 {
			for ; yyj3799 < yyl3799; yyj3799++ {
				yyv3799 = append(yyv3799, EndpointAddress{})
				yyh3799.ElemContainerState(yyj3799)
				if r.TryDecodeAsNil() {
					yyv3799[yyj3799] = EndpointAddress{}
				} else {
					yyv3801 := &yyv3799[yyj3799]
					yyv3801.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3799 := 0
		for ; !r.CheckBreak(); yyj3799++ {

			if yyj3799 >= len(yyv3799) {
				yyv3799 = append(yyv3799, EndpointAddress{}) // var yyz3799 EndpointAddress
				yyc3799 = true
			}
			yyh3799.ElemContainerState(yyj3799)
			if yyj3799 < len(yyv3799) {
				if r.TryDecodeAsNil() {
					yyv3799[yyj3799] = EndpointAddress{}
				} else {
					yyv3802 := &yyv3799[yyj3799]
					yyv3802.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3799 < len(yyv3799) {
			yyv3799 = yyv3799[:yyj3799]
			yyc3799 = true
		} else if yyj3799 == 0 && yyv3799 == nil {
			yyv3799 = []EndpointAddress{}
			yyc3799 = true
		}
	}
	yyh3799.End()
	if yyc3799 {
		*v = yyv3799
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3803 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3804 := &yyv3803
		yy3804.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3805 := *v
	yyh3805, yyl3805 := z.DecSliceHelperStart()
	var yyc3805 bool
	if yyl3805 == 0 {
		if yyv3805 == nil {
			yyv3805 = []EndpointPort{}
			yyc3805 = true
		} else if len(yyv3805) != 0 {
			yyv3805 = yyv3805[:0]
			yyc3805 = true
		}
	} else if yyl3805 > 0 {
		var yyrr3805, yyrl3805 int
		var yyrt3805 bool
		if yyl3805 > cap(yyv3805) {

			yyrg3805 := len(yyv3805) > 0
			yyv23805 := yyv3805
			yyrl3805, yyrt3805 = z.DecInferLen(yyl3805, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3805 {
				if yyrl3805 <= cap(yyv3805) {
					yyv3805 = yyv3805[:yyrl3805]
				} else {
					yyv3805 = make([]EndpointPort, yyrl3805)
				}
			} else {
				yyv3805 = make([]EndpointPort, yyrl3805)
			}
			yyc3805 = true
			yyrr3805 = len(yyv3805)
			if yyrg3805 {
				copy(yyv3805, yyv23805)
			}
		} else if yyl3805 != len(yyv3805) {
			yyv3805 = yyv3805[:yyl3805]
			yyc3805 = true
		}
		yyj3805 := 0
		for ; yyj3805 < yyrr3805; yyj3805++ {
			yyh3805.ElemContainerState(yyj3805)
			if r.TryDecodeAsNil() {
				yyv3805[yyj3805] = EndpointPort{}
			} else {
				yyv3806 := &yyv3805[yyj3805]
				yyv3806.CodecDecodeSelf(d)
			}

		}
		if yyrt3805 {
			for ; yyj3805 < yyl3805; yyj3805++ {
				yyv3805 = append(yyv3805, EndpointPort{})
				yyh3805.ElemContainerState(yyj3805)
				if r.TryDecodeAsNil() {
					yyv3805[yyj3805] = EndpointPort{}
				} else {
					yyv3807 := &yyv3805[yyj3805]
					yyv3807.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3805 := 0
		for ; !r.CheckBreak(); yyj3805++ {

			if yyj3805 >= len(yyv3805) {
				yyv3805 = append(yyv3805, EndpointPort{}) // var yyz3805 EndpointPort
				yyc3805 = true
			}
			yyh3805.ElemContainerState(yyj3805)
			if yyj3805 < len(yyv3805) {
				if r.TryDecodeAsNil() {
					yyv3805[yyj3805] = EndpointPort{}
				} else {
					yyv3808 := &yyv3805[yyj3805]
					yyv3808.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3805 < len(yyv3805) {
			yyv3805 = yyv3805[:yyj3805]
			yyc3805 = true
		} else if yyj3805 == 0 && yyv3805 == nil {
			yyv3805 = []EndpointPort{}
			yyc3805 = true
		}
	}
	yyh3805.End()
	if yyc3805 {
		*v = yyv3805
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3809 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3810 := &yyv3809
		yy3810.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3811 := *v
	yyh3811, yyl3811 := z.DecSliceHelperStart()
	var yyc3811 bool
	if yyl3811 == 0 {
		if yyv3811 == nil {
			yyv3811 = []Endpoints{}
			yyc3811 = true
		} else if len(yyv3811) != 0 {
			yyv3811 = yyv3811[:0]
			yyc3811 = true
		}
	} else if yyl3811 > 0 {
		var yyrr3811, yyrl3811 int
		var yyrt3811 bool
		if yyl3811 > cap(yyv3811) {

			yyrg3811 := len(yyv3811) > 0
			yyv23811 := yyv3811
			yyrl3811, yyrt3811 = z.DecInferLen(yyl3811, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3811 {
				if yyrl3811 <= cap(yyv3811) {
					yyv3811 = yyv3811[:yyrl3811]
				} else {
					yyv3811 = make([]Endpoints, yyrl3811)
				}
			} else {
				yyv3811 = make([]Endpoints, yyrl3811)
			}
			yyc3811 = true
			yyrr3811 = len(yyv3811)
			if yyrg3811 {
				copy(yyv3811, yyv23811)
			}
		} else if yyl3811 != len(yyv3811) {
			yyv3811 = yyv3811[:yyl3811]
			yyc3811 = true
		}
		yyj3811 := 0
		for ; yyj3811 < yyrr3811; yyj3811++ {
			yyh3811.ElemContainerState(yyj3811)
			if r.TryDecodeAsNil() {
				yyv3811[yyj3811] = Endpoints{}
			} else {
				yyv3812 := &yyv3811[yyj3811]
				yyv3812.CodecDecodeSelf(d)
			}

		}
		if yyrt3811 {
			for ; yyj3811 < yyl3811; yyj3811++ {
				yyv3811 = append(yyv3811, Endpoints{})
				yyh3811.ElemContainerState(yyj3811)
				if r.TryDecodeAsNil() {
					yyv3811[yyj3811] = Endpoints{}
				} else {
					yyv3813 := &yyv3811[yyj3811]
					yyv3813.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3811 := 0
		for ; !r.CheckBreak(); yyj3811++ {

			if yyj3811 >= len(yyv3811) {
				yyv3811 = append(yyv3811, Endpoints{}) // var yyz3811 Endpoints
				yyc3811 = true
			}
			yyh3811.ElemContainerState(yyj3811)
			if yyj3811 < len(yyv3811) {
				if r.TryDecodeAsNil() {
					yyv3811[yyj3811] = Endpoints{}
				} else {
					yyv3814 := &yyv3811[yyj3811]
					yyv3814.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3811 < len(yyv3811) {
			yyv3811 = yyv3811[:yyj3811]
			yyc3811 = true
		} else if yyj3811 == 0 && yyv3811 == nil {
			yyv3811 = []Endpoints{}
			yyc3811 = true
		}
	}
	yyh3811.End()
	if yyc3811 {
		*v = yyv3811
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3815 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3816 := &yyv3815
		yy3816.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3817 := *v
	yyh3817, yyl3817 := z.DecSliceHelperStart()
	var yyc3817 bool
	if yyl3817 == 0 {
		if yyv3817 == nil {
			yyv3817 = []NodeCondition{}
			yyc3817 = true
		} else if len(yyv3817) != 0 {
			yyv3817 = yyv3817[:0]
			yyc3817 = true
		}
	} else if yyl3817 > 0 {
		var yyrr3817, yyrl3817 int
		var yyrt3817 bool
		if yyl3817 > cap(yyv3817) {

			yyrg3817 := len(yyv3817) > 0
			yyv23817 := yyv3817
			yyrl3817, yyrt3817 = z.DecInferLen(yyl3817, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3817 {
				if yyrl3817 <= cap(yyv3817) {
					yyv3817 = yyv3817[:yyrl3817]
				} else {
					yyv3817 = make([]NodeCondition, yyrl3817)
				}
			} else {
				yyv3817 = make([]NodeCondition, yyrl3817)
			}
			yyc3817 = true
			yyrr3817 = len(yyv3817)
			if yyrg3817 {
				copy(yyv3817, yyv23817)
			}
		} else if yyl3817 != len(yyv3817) {
			yyv3817 = yyv3817[:yyl3817]
			yyc3817 = true
		}
		yyj3817 := 0
		for ; yyj3817 < yyrr3817; yyj3817++ {
			yyh3817.ElemContainerState(yyj3817)
			if r.TryDecodeAsNil() {
				yyv3817[yyj3817] = NodeCondition{}
			} else {
				yyv3818 := &yyv3817[yyj3817]
				yyv3818.CodecDecodeSelf(d)
			}

		}
		if yyrt3817 {
			for ; yyj3817 < yyl3817; yyj3817++ {
				yyv3817 = append(yyv3817, NodeCondition{})
				yyh3817.ElemContainerState(yyj3817)
				if r.TryDecodeAsNil() {
					yyv3817[yyj3817] = NodeCondition{}
				} else {
					yyv3819 := &yyv3817[yyj3817]
					yyv3819.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3817 := 0
		for ; !r.CheckBreak(); yyj3817++ {

			if yyj3817 >= len(yyv3817) {
				yyv3817 = append(yyv3817, NodeCondition{}) // var yyz3817 NodeCondition
				yyc3817 = true
			}
			yyh3817.ElemContainerState(yyj3817)
			if yyj3817 < len(yyv3817) {
				if r.TryDecodeAsNil() {
					yyv3817[yyj3817] = NodeCondition{}
				} else {
					yyv3820 := &yyv3817[yyj3817]
					yyv3820.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3817 < len(yyv3817) {
			yyv3817 = yyv3817[:yyj3817]
			yyc3817 = true
		} else if yyj3817 == 0 && yyv3817 == nil {
			yyv3817 = []NodeCondition{}
			yyc3817 = true
		}
	}
	yyh3817.End()
	if yyc3817 {
		*v = yyv3817
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3821 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3822 := &yyv3821
		yy3822.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3823 := *v
	yyh3823, yyl3823 := z.DecSliceHelperStart()
	var yyc3823 bool
	if yyl3823 == 0 {
		if yyv3823 == nil {
			yyv3823 = []NodeAddress{}
			yyc3823 = true
		} else if len(yyv3823) != 0 {
			yyv3823 = yyv3823[:0]
			yyc3823 = true
		}
	} else if yyl3823 > 0 {
		var yyrr3823, yyrl3823 int
		var yyrt3823 bool
		if yyl3823 > cap(yyv3823) {

			yyrg3823 := len(yyv3823) > 0
			yyv23823 := yyv3823
			yyrl3823, yyrt3823 = z.DecInferLen(yyl3823, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3823 {
				if yyrl3823 <= cap(yyv3823) {
					yyv3823 = yyv3823[:yyrl3823]
				} else {
					yyv3823 = make([]NodeAddress, yyrl3823)
				}
			} else {
				yyv3823 = make([]NodeAddress, yyrl3823)
			}
			yyc3823 = true
			yyrr3823 = len(yyv3823)
			if yyrg3823 {
				copy(yyv3823, yyv23823)
			}
		} else if yyl3823 != len(yyv3823) {
			yyv3823 = yyv3823[:yyl3823]
			yyc3823 = true
		}
		yyj3823 := 0
		for ; yyj3823 < yyrr3823; yyj3823++ {
			yyh3823.ElemContainerState(yyj3823)
			if r.TryDecodeAsNil() {
				yyv3823[yyj3823] = NodeAddress{}
			} else {
				yyv3824 := &yyv3823[yyj3823]
				yyv3824.CodecDecodeSelf(d)
			}

		}
		if yyrt3823 {
			for ; yyj3823 < yyl3823; yyj3823++ {
				yyv3823 = append(yyv3823, NodeAddress{})
				yyh3823.ElemContainerState(yyj3823)
				if r.TryDecodeAsNil() {
					yyv3823[yyj3823] = NodeAddress{}
				} else {
					yyv3825 := &yyv3823[yyj3823]
					yyv3825.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3823 := 0
		for ; !r.CheckBreak(); yyj3823++ {

			if yyj3823 >= len(yyv3823) {
				yyv3823 = append(yyv3823, NodeAddress{}) // var yyz3823 NodeAddress
				yyc3823 = true
			}
			yyh3823.ElemContainerState(yyj3823)
			if yyj3823 < len(yyv3823) {
				if r.TryDecodeAsNil() {
					yyv3823[yyj3823] = NodeAddress{}
				} else {
					yyv3826 := &yyv3823[yyj3823]
					yyv3826.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3823 < len(yyv3823) {
			yyv3823 = yyv3823[:yyj3823]
			yyc3823 = true
		} else if yyj3823 == 0 && yyv3823 == nil {
			yyv3823 = []NodeAddress{}
			yyc3823 = true
		}
	}
	yyh3823.End()
	if yyc3823 {
		*v = yyv3823
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3827, yyv3827 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk3827.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy3828 := &yyv3827
		yym3829 := z.EncBinary()
		_ = yym3829
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3828) {
		} else if !yym3829 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3828)
		} else {
			z.EncFallback(yy3828)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3830 := *v
	yyl3830 := r.ReadMapStart()
	yybh3830 := z.DecBasicHandle()
	if yyv3830 == nil {
		yyrl3830, _ := z.DecInferLen(yyl3830, yybh3830.MaxInitLen, 40)
		yyv3830 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3830)
		*v = yyv3830
	}
	var yymk3830 ResourceName
	var yymv3830 pkg3_resource.Quantity
	var yymg3830 bool
	if yybh3830.MapValueReset {
		yymg3830 = true
	}
	if yyl3830 > 0 {
		for yyj3830 := 0; yyj3830 < yyl3830; yyj3830++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3830 = ""
			} else {
				yymk3830 = ResourceName(r.DecodeString())
			}

			if yymg3830 {
				yymv3830 = yyv3830[yymk3830]
			} else {
				yymv3830 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3830 = pkg3_resource.Quantity{}
			} else {
				yyv3832 := &yymv3830
				yym3833 := z.DecBinary()
				_ = yym3833
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3832) {
				} else if !yym3833 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3832)
				} else {
					z.DecFallback(yyv3832, false)
				}
			}

			if yyv3830 != nil {
				yyv3830[yymk3830] = yymv3830
			}
		}
	} else if yyl3830 < 0 {
		for yyj3830 := 0; !r.CheckBreak(); yyj3830++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3830 = ""
			} else {
				yymk3830 = ResourceName(r.DecodeString())
			}

			if yymg3830 {
				yymv3830 = yyv3830[yymk3830]
			} else {
				yymv3830 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3830 = pkg3_resource.Quantity{}
			} else {
				yyv3835 := &yymv3830
				yym3836 := z.DecBinary()
				_ = yym3836
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3835) {
				} else if !yym3836 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3835)
				} else {
					z.DecFallback(yyv3835, false)
				}
			}

			if yyv3830 != nil {
				yyv3830[yymk3830] = yymv3830
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3837 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3838 := &yyv3837
		yy3838.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3839 := *v
	yyh3839, yyl3839 := z.DecSliceHelperStart()
	var yyc3839 bool
	if yyl3839 == 0 {
		if yyv3839 == nil {
			yyv3839 = []Node{}
			yyc3839 = true
		} else if len(yyv3839) != 0 {
			yyv3839 = yyv3839[:0]
			yyc3839 = true
		}
	} else if yyl3839 > 0 {
		var yyrr3839, yyrl3839 int
		var yyrt3839 bool
		if yyl3839 > cap(yyv3839) {

			yyrg3839 := len(yyv3839) > 0
			yyv23839 := yyv3839
			yyrl3839, yyrt3839 = z.DecInferLen(yyl3839, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt3839 {
				if yyrl3839 <= cap(yyv3839) {
					yyv3839 = yyv3839[:yyrl3839]
				} else {
					yyv3839 = make([]Node, yyrl3839)
				}
			} else {
				yyv3839 = make([]Node, yyrl3839)
			}
			yyc3839 = true
			yyrr3839 = len(yyv3839)
			if yyrg3839 {
				copy(yyv3839, yyv23839)
			}
		} else if yyl3839 != len(yyv3839) {
			yyv3839 = yyv3839[:yyl3839]
			yyc3839 = true
		}
		yyj3839 := 0
		for ; yyj3839 < yyrr3839; yyj3839++ {
			yyh3839.ElemContainerState(yyj3839)
			if r.TryDecodeAsNil() {
				yyv3839[yyj3839] = Node{}
			} else {
				yyv3840 := &yyv3839[yyj3839]
				yyv3840.CodecDecodeSelf(d)
			}

		}
		if yyrt3839 {
			for ; yyj3839 < yyl3839; yyj3839++ {
				yyv3839 = append(yyv3839, Node{})
				yyh3839.ElemContainerState(yyj3839)
				if r.TryDecodeAsNil() {
					yyv3839[yyj3839] = Node{}
				} else {
					yyv3841 := &yyv3839[yyj3839]
					yyv3841.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3839 := 0
		for ; !r.CheckBreak(); yyj3839++ {

			if yyj3839 >= len(yyv3839) {
				yyv3839 = append(yyv3839, Node{}) // var yyz3839 Node
				yyc3839 = true
			}
			yyh3839.ElemContainerState(yyj3839)
			if yyj3839 < len(yyv3839) {
				if r.TryDecodeAsNil() {
					yyv3839[yyj3839] = Node{}
				} else {
					yyv3842 := &yyv3839[yyj3839]
					yyv3842.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3839 < len(yyv3839) {
			yyv3839 = yyv3839[:yyj3839]
			yyc3839 = true
		} else if yyj3839 == 0 && yyv3839 == nil {
			yyv3839 = []Node{}
			yyc3839 = true
		}
	}
	yyh3839.End()
	if yyc3839 {
		*v = yyv3839
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3843 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3843.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3844 := *v
	yyh3844, yyl3844 := z.DecSliceHelperStart()
	var yyc3844 bool
	if yyl3844 == 0 {
		if yyv3844 == nil {
			yyv3844 = []FinalizerName{}
			yyc3844 = true
		} else if len(yyv3844) != 0 {
			yyv3844 = yyv3844[:0]
			yyc3844 = true
		}
	} else if yyl3844 > 0 {
		var yyrr3844, yyrl3844 int
		var yyrt3844 bool
		if yyl3844 > cap(yyv3844) {

			yyrl3844, yyrt3844 = z.DecInferLen(yyl3844, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3844 {
				if yyrl3844 <= cap(yyv3844) {
					yyv3844 = yyv3844[:yyrl3844]
				} else {
					yyv3844 = make([]FinalizerName, yyrl3844)
				}
			} else {
				yyv3844 = make([]FinalizerName, yyrl3844)
			}
			yyc3844 = true
			yyrr3844 = len(yyv3844)
		} else if yyl3844 != len(yyv3844) {
			yyv3844 = yyv3844[:yyl3844]
			yyc3844 = true
		}
		yyj3844 := 0
		for ; yyj3844 < yyrr3844; yyj3844++ {
			yyh3844.ElemContainerState(yyj3844)
			if r.TryDecodeAsNil() {
				yyv3844[yyj3844] = ""
			} else {
				yyv3844[yyj3844] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3844 {
			for ; yyj3844 < yyl3844; yyj3844++ {
				yyv3844 = append(yyv3844, "")
				yyh3844.ElemContainerState(yyj3844)
				if r.TryDecodeAsNil() {
					yyv3844[yyj3844] = ""
				} else {
					yyv3844[yyj3844] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj3844 := 0
		for ; !r.CheckBreak(); yyj3844++ {

			if yyj3844 >= len(yyv3844) {
				yyv3844 = append(yyv3844, "") // var yyz3844 FinalizerName
				yyc3844 = true
			}
			yyh3844.ElemContainerState(yyj3844)
			if yyj3844 < len(yyv3844) {
				if r.TryDecodeAsNil() {
					yyv3844[yyj3844] = ""
				} else {
					yyv3844[yyj3844] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3844 < len(yyv3844) {
			yyv3844 = yyv3844[:yyj3844]
			yyc3844 = true
		} else if yyj3844 == 0 && yyv3844 == nil {
			yyv3844 = []FinalizerName{}
			yyc3844 = true
		}
	}
	yyh3844.End()
	if yyc3844 {
		*v = yyv3844
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3848 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3849 := &yyv3848
		yy3849.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3850 := *v
	yyh3850, yyl3850 := z.DecSliceHelperStart()
	var yyc3850 bool
	if yyl3850 == 0 {
		if yyv3850 == nil {
			yyv3850 = []Namespace{}
			yyc3850 = true
		} else if len(yyv3850) != 0 {
			yyv3850 = yyv3850[:0]
			yyc3850 = true
		}
	} else if yyl3850 > 0 {
		var yyrr3850, yyrl3850 int
		var yyrt3850 bool
		if yyl3850 > cap(yyv3850) {

			yyrg3850 := len(yyv3850) > 0
			yyv23850 := yyv3850
			yyrl3850, yyrt3850 = z.DecInferLen(yyl3850, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3850 {
				if yyrl3850 <= cap(yyv3850) {
					yyv3850 = yyv3850[:yyrl3850]
				} else {
					yyv3850 = make([]Namespace, yyrl3850)
				}
			} else {
				yyv3850 = make([]Namespace, yyrl3850)
			}
			yyc3850 = true
			yyrr3850 = len(yyv3850)
			if yyrg3850 {
				copy(yyv3850, yyv23850)
			}
		} else if yyl3850 != len(yyv3850) {
			yyv3850 = yyv3850[:yyl3850]
			yyc3850 = true
		}
		yyj3850 := 0
		for ; yyj3850 < yyrr3850; yyj3850++ {
			yyh3850.ElemContainerState(yyj3850)
			if r.TryDecodeAsNil() {
				yyv3850[yyj3850] = Namespace{}
			} else {
				yyv3851 := &yyv3850[yyj3850]
				yyv3851.CodecDecodeSelf(d)
			}

		}
		if yyrt3850 {
			for ; yyj3850 < yyl3850; yyj3850++ {
				yyv3850 = append(yyv3850, Namespace{})
				yyh3850.ElemContainerState(yyj3850)
				if r.TryDecodeAsNil() {
					yyv3850[yyj3850] = Namespace{}
				} else {
					yyv3852 := &yyv3850[yyj3850]
					yyv3852.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3850 := 0
		for ; !r.CheckBreak(); yyj3850++ {

			if yyj3850 >= len(yyv3850) {
				yyv3850 = append(yyv3850, Namespace{}) // var yyz3850 Namespace
				yyc3850 = true
			}
			yyh3850.ElemContainerState(yyj3850)
			if yyj3850 < len(yyv3850) {
				if r.TryDecodeAsNil() {
					yyv3850[yyj3850] = Namespace{}
				} else {
					yyv3853 := &yyv3850[yyj3850]
					yyv3853.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3850 < len(yyv3850) {
			yyv3850 = yyv3850[:yyj3850]
			yyc3850 = true
		} else if yyj3850 == 0 && yyv3850 == nil {
			yyv3850 = []Namespace{}
			yyc3850 = true
		}
	}
	yyh3850.End()
	if yyc3850 {
		*v = yyv3850
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3854 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3855 := &yyv3854
		yy3855.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3856 := *v
	yyh3856, yyl3856 := z.DecSliceHelperStart()
	var yyc3856 bool
	if yyl3856 == 0 {
		if yyv3856 == nil {
			yyv3856 = []Event{}
			yyc3856 = true
		} else if len(yyv3856) != 0 {
			yyv3856 = yyv3856[:0]
			yyc3856 = true
		}
	} else if yyl3856 > 0 {
		var yyrr3856, yyrl3856 int
		var yyrt3856 bool
		if yyl3856 > cap(yyv3856) {

			yyrg3856 := len(yyv3856) > 0
			yyv23856 := yyv3856
			yyrl3856, yyrt3856 = z.DecInferLen(yyl3856, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt3856 {
				if yyrl3856 <= cap(yyv3856) {
					yyv3856 = yyv3856[:yyrl3856]
				} else {
					yyv3856 = make([]Event, yyrl3856)
				}
			} else {
				yyv3856 = make([]Event, yyrl3856)
			}
			yyc3856 = true
			yyrr3856 = len(yyv3856)
			if yyrg3856 {
				copy(yyv3856, yyv23856)
			}
		} else if yyl3856 != len(yyv3856) {
			yyv3856 = yyv3856[:yyl3856]
			yyc3856 = true
		}
		yyj3856 := 0
		for ; yyj3856 < yyrr3856; yyj3856++ {
			yyh3856.ElemContainerState(yyj3856)
			if r.TryDecodeAsNil() {
				yyv3856[yyj3856] = Event{}
			} else {
				yyv3857 := &yyv3856[yyj3856]
				yyv3857.CodecDecodeSelf(d)
			}

		}
		if yyrt3856 {
			for ; yyj3856 < yyl3856; yyj3856++ {
				yyv3856 = append(yyv3856, Event{})
				yyh3856.ElemContainerState(yyj3856)
				if r.TryDecodeAsNil() {
					yyv3856[yyj3856] = Event{}
				} else {
					yyv3858 := &yyv3856[yyj3856]
					yyv3858.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3856 := 0
		for ; !r.CheckBreak(); yyj3856++ {

			if yyj3856 >= len(yyv3856) {
				yyv3856 = append(yyv3856, Event{}) // var yyz3856 Event
				yyc3856 = true
			}
			yyh3856.ElemContainerState(yyj3856)
			if yyj3856 < len(yyv3856) {
				if r.TryDecodeAsNil() {
					yyv3856[yyj3856] = Event{}
				} else {
					yyv3859 := &yyv3856[yyj3856]
					yyv3859.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3856 < len(yyv3856) {
			yyv3856 = yyv3856[:yyj3856]
			yyc3856 = true
		} else if yyj3856 == 0 && yyv3856 == nil {
			yyv3856 = []Event{}
			yyc3856 = true
		}
	}
	yyh3856.End()
	if yyc3856 {
		*v = yyv3856
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3860 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3861 := &yyv3860
		yym3862 := z.EncBinary()
		_ = yym3862
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3861) {
		} else if !yym3862 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3861)
		} else {
			z.EncFallback(yy3861)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3863 := *v
	yyh3863, yyl3863 := z.DecSliceHelperStart()
	var yyc3863 bool
	if yyl3863 == 0 {
		if yyv3863 == nil {
			yyv3863 = []pkg6_runtime.RawExtension{}
			yyc3863 = true
		} else if len(yyv3863) != 0 {
			yyv3863 = yyv3863[:0]
			yyc3863 = true
		}
	} else if yyl3863 > 0 {
		var yyrr3863, yyrl3863 int
		var yyrt3863 bool
		if yyl3863 > cap(yyv3863) {

			yyrg3863 := len(yyv3863) > 0
			yyv23863 := yyv3863
			yyrl3863, yyrt3863 = z.DecInferLen(yyl3863, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3863 {
				if yyrl3863 <= cap(yyv3863) {
					yyv3863 = yyv3863[:yyrl3863]
				} else {
					yyv3863 = make([]pkg6_runtime.RawExtension, yyrl3863)
				}
			} else {
				yyv3863 = make([]pkg6_runtime.RawExtension, yyrl3863)
			}
			yyc3863 = true
			yyrr3863 = len(yyv3863)
			if yyrg3863 {
				copy(yyv3863, yyv23863)
			}
		} else if yyl3863 != len(yyv3863) {
			yyv3863 = yyv3863[:yyl3863]
			yyc3863 = true
		}
		yyj3863 := 0
		for ; yyj3863 < yyrr3863; yyj3863++ {
			yyh3863.ElemContainerState(yyj3863)
			if r.TryDecodeAsNil() {
				yyv3863[yyj3863] = pkg6_runtime.RawExtension{}
			} else {
				yyv3864 := &yyv3863[yyj3863]
				yym3865 := z.DecBinary()
				_ = yym3865
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3864) {
				} else if !yym3865 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3864)
				} else {
					z.DecFallback(yyv3864, false)
				}
			}

		}
		if yyrt3863 {
			for ; yyj3863 < yyl3863; yyj3863++ {
				yyv3863 = append(yyv3863, pkg6_runtime.RawExtension{})
				yyh3863.ElemContainerState(yyj3863)
				if r.TryDecodeAsNil() {
					yyv3863[yyj3863] = pkg6_runtime.RawExtension{}
				} else {
					yyv3866 := &yyv3863[yyj3863]
					yym3867 := z.DecBinary()
					_ = yym3867
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3866) {
					} else if !yym3867 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3866)
					} else {
						z.DecFallback(yyv3866, false)
					}
				}

			}
		}

	} else {
		yyj3863 := 0
		for ; !r.CheckBreak(); yyj3863++ {

			if yyj3863 >= len(yyv3863) {
				yyv3863 = append(yyv3863, pkg6_runtime.RawExtension{}) // var yyz3863 pkg6_runtime.RawExtension
				yyc3863 = true
			}
			yyh3863.ElemContainerState(yyj3863)
			if yyj3863 < len(yyv3863) {
				if r.TryDecodeAsNil() {
					yyv3863[yyj3863] = pkg6_runtime.RawExtension{}
				} else {
					yyv3868 := &yyv3863[yyj3863]
					yym3869 := z.DecBinary()
					_ = yym3869
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3868) {
					} else if !yym3869 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3868)
					} else {
						z.DecFallback(yyv3868, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3863 < len(yyv3863) {
			yyv3863 = yyv3863[:yyj3863]
			yyc3863 = true
		} else if yyj3863 == 0 && yyv3863 == nil {
			yyv3863 = []pkg6_runtime.RawExtension{}
			yyc3863 = true
		}
	}
	yyh3863.End()
	if yyc3863 {
		*v = yyv3863
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3870 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3871 := &yyv3870
		yy3871.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3872 := *v
	yyh3872, yyl3872 := z.DecSliceHelperStart()
	var yyc3872 bool
	if yyl3872 == 0 {
		if yyv3872 == nil {
			yyv3872 = []LimitRangeItem{}
			yyc3872 = true
		} else if len(yyv3872) != 0 {
			yyv3872 = yyv3872[:0]
			yyc3872 = true
		}
	} else if yyl3872 > 0 {
		var yyrr3872, yyrl3872 int
		var yyrt3872 bool
		if yyl3872 > cap(yyv3872) {

			yyrg3872 := len(yyv3872) > 0
			yyv23872 := yyv3872
			yyrl3872, yyrt3872 = z.DecInferLen(yyl3872, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3872 {
				if yyrl3872 <= cap(yyv3872) {
					yyv3872 = yyv3872[:yyrl3872]
				} else {
					yyv3872 = make([]LimitRangeItem, yyrl3872)
				}
			} else {
				yyv3872 = make([]LimitRangeItem, yyrl3872)
			}
			yyc3872 = true
			yyrr3872 = len(yyv3872)
			if yyrg3872 {
				copy(yyv3872, yyv23872)
			}
		} else if yyl3872 != len(yyv3872) {
			yyv3872 = yyv3872[:yyl3872]
			yyc3872 = true
		}
		yyj3872 := 0
		for ; yyj3872 < yyrr3872; yyj3872++ {
			yyh3872.ElemContainerState(yyj3872)
			if r.TryDecodeAsNil() {
				yyv3872[yyj3872] = LimitRangeItem{}
			} else {
				yyv3873 := &yyv3872[yyj3872]
				yyv3873.CodecDecodeSelf(d)
			}

		}
		if yyrt3872 {
			for ; yyj3872 < yyl3872; yyj3872++ {
				yyv3872 = append(yyv3872, LimitRangeItem{})
				yyh3872.ElemContainerState(yyj3872)
				if r.TryDecodeAsNil() {
					yyv3872[yyj3872] = LimitRangeItem{}
				} else {
					yyv3874 := &yyv3872[yyj3872]
					yyv3874.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3872 := 0
		for ; !r.CheckBreak(); yyj3872++ {

			if yyj3872 >= len(yyv3872) {
				yyv3872 = append(yyv3872, LimitRangeItem{}) // var yyz3872 LimitRangeItem
				yyc3872 = true
			}
			yyh3872.ElemContainerState(yyj3872)
			if yyj3872 < len(yyv3872) {
				if r.TryDecodeAsNil() {
					yyv3872[yyj3872] = LimitRangeItem{}
				} else {
					yyv3875 := &yyv3872[yyj3872]
					yyv3875.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3872 < len(yyv3872) {
			yyv3872 = yyv3872[:yyj3872]
			yyc3872 = true
		} else if yyj3872 == 0 && yyv3872 == nil {
			yyv3872 = []LimitRangeItem{}
			yyc3872 = true
		}
	}
	yyh3872.End()
	if yyc3872 {
		*v = yyv3872
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3876 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3877 := &yyv3876
		yy3877.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3878 := *v
	yyh3878, yyl3878 := z.DecSliceHelperStart()
	var yyc3878 bool
	if yyl3878 == 0 {
		if yyv3878 == nil {
			yyv3878 = []LimitRange{}
			yyc3878 = true
		} else if len(yyv3878) != 0 {
			yyv3878 = yyv3878[:0]
			yyc3878 = true
		}
	} else if yyl3878 > 0 {
		var yyrr3878, yyrl3878 int
		var yyrt3878 bool
		if yyl3878 > cap(yyv3878) {

			yyrg3878 := len(yyv3878) > 0
			yyv23878 := yyv3878
			yyrl3878, yyrt3878 = z.DecInferLen(yyl3878, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3878 {
				if yyrl3878 <= cap(yyv3878) {
					yyv3878 = yyv3878[:yyrl3878]
				} else {
					yyv3878 = make([]LimitRange, yyrl3878)
				}
			} else {
				yyv3878 = make([]LimitRange, yyrl3878)
			}
			yyc3878 = true
			yyrr3878 = len(yyv3878)
			if yyrg3878 {
				copy(yyv3878, yyv23878)
			}
		} else if yyl3878 != len(yyv3878) {
			yyv3878 = yyv3878[:yyl3878]
			yyc3878 = true
		}
		yyj3878 := 0
		for ; yyj3878 < yyrr3878; yyj3878++ {
			yyh3878.ElemContainerState(yyj3878)
			if r.TryDecodeAsNil() {
				yyv3878[yyj3878] = LimitRange{}
			} else {
				yyv3879 := &yyv3878[yyj3878]
				yyv3879.CodecDecodeSelf(d)
			}

		}
		if yyrt3878 {
			for ; yyj3878 < yyl3878; yyj3878++ {
				yyv3878 = append(yyv3878, LimitRange{})
				yyh3878.ElemContainerState(yyj3878)
				if r.TryDecodeAsNil() {
					yyv3878[yyj3878] = LimitRange{}
				} else {
					yyv3880 := &yyv3878[yyj3878]
					yyv3880.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3878 := 0
		for ; !r.CheckBreak(); yyj3878++ {

			if yyj3878 >= len(yyv3878) {
				yyv3878 = append(yyv3878, LimitRange{}) // var yyz3878 LimitRange
				yyc3878 = true
			}
			yyh3878.ElemContainerState(yyj3878)
			if yyj3878 < len(yyv3878) {
				if r.TryDecodeAsNil() {
					yyv3878[yyj3878] = LimitRange{}
				} else {
					yyv3881 := &yyv3878[yyj3878]
					yyv3881.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3878 < len(yyv3878) {
			yyv3878 = yyv3878[:yyj3878]
			yyc3878 = true
		} else if yyj3878 == 0 && yyv3878 == nil {
			yyv3878 = []LimitRange{}
			yyc3878 = true
		}
	}
	yyh3878.End()
	if yyc3878 {
		*v = yyv3878
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3882 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3883 := &yyv3882
		yy3883.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3884 := *v
	yyh3884, yyl3884 := z.DecSliceHelperStart()
	var yyc3884 bool
	if yyl3884 == 0 {
		if yyv3884 == nil {
			yyv3884 = []ResourceQuota{}
			yyc3884 = true
		} else if len(yyv3884) != 0 {
			yyv3884 = yyv3884[:0]
			yyc3884 = true
		}
	} else if yyl3884 > 0 {
		var yyrr3884, yyrl3884 int
		var yyrt3884 bool
		if yyl3884 > cap(yyv3884) {

			yyrg3884 := len(yyv3884) > 0
			yyv23884 := yyv3884
			yyrl3884, yyrt3884 = z.DecInferLen(yyl3884, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3884 {
				if yyrl3884 <= cap(yyv3884) {
					yyv3884 = yyv3884[:yyrl3884]
				} else {
					yyv3884 = make([]ResourceQuota, yyrl3884)
				}
			} else {
				yyv3884 = make([]ResourceQuota, yyrl3884)
			}
			yyc3884 = true
			yyrr3884 = len(yyv3884)
			if yyrg3884 {
				copy(yyv3884, yyv23884)
			}
		} else if yyl3884 != len(yyv3884) {
			yyv3884 = yyv3884[:yyl3884]
			yyc3884 = true
		}
		yyj3884 := 0
		for ; yyj3884 < yyrr3884; yyj3884++ {
			yyh3884.ElemContainerState(yyj3884)
			if r.TryDecodeAsNil() {
				yyv3884[yyj3884] = ResourceQuota{}
			} else {
				yyv3885 := &yyv3884[yyj3884]
				yyv3885.CodecDecodeSelf(d)
			}

		}
		if yyrt3884 {
			for ; yyj3884 < yyl3884; yyj3884++ {
				yyv3884 = append(yyv3884, ResourceQuota{})
				yyh3884.ElemContainerState(yyj3884)
				if r.TryDecodeAsNil() {
					yyv3884[yyj3884] = ResourceQuota{}
				} else {
					yyv3886 := &yyv3884[yyj3884]
					yyv3886.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3884 := 0
		for ; !r.CheckBreak(); yyj3884++ {

			if yyj3884 >= len(yyv3884) {
				yyv3884 = append(yyv3884, ResourceQuota{}) // var yyz3884 ResourceQuota
				yyc3884 = true
			}
			yyh3884.ElemContainerState(yyj3884)
			if yyj3884 < len(yyv3884) {
				if r.TryDecodeAsNil() {
					yyv3884[yyj3884] = ResourceQuota{}
				} else {
					yyv3887 := &yyv3884[yyj3884]
					yyv3887.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3884 < len(yyv3884) {
			yyv3884 = yyv3884[:yyj3884]
			yyc3884 = true
		} else if yyj3884 == 0 && yyv3884 == nil {
			yyv3884 = []ResourceQuota{}
			yyc3884 = true
		}
	}
	yyh3884.End()
	if yyc3884 {
		*v = yyv3884
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3888, yyv3888 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym3889 := z.EncBinary()
		_ = yym3889
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3888))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv3888 == nil {
			r.EncodeNil()
		} else {
			yym3890 := z.EncBinary()
			_ = yym3890
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3888))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3891 := *v
	yyl3891 := r.ReadMapStart()
	yybh3891 := z.DecBasicHandle()
	if yyv3891 == nil {
		yyrl3891, _ := z.DecInferLen(yyl3891, yybh3891.MaxInitLen, 40)
		yyv3891 = make(map[string][]uint8, yyrl3891)
		*v = yyv3891
	}
	var yymk3891 string
	var yymv3891 []uint8
	var yymg3891 bool
	if yybh3891.MapValueReset {
		yymg3891 = true
	}
	if yyl3891 > 0 {
		for yyj3891 := 0; yyj3891 < yyl3891; yyj3891++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3891 = ""
			} else {
				yymk3891 = string(r.DecodeString())
			}

			if yymg3891 {
				yymv3891 = yyv3891[yymk3891]
			} else {
				yymv3891 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3891 = nil
			} else {
				yyv3893 := &yymv3891
				yym3894 := z.DecBinary()
				_ = yym3894
				if false {
				} else {
					*yyv3893 = r.DecodeBytes(*(*[]byte)(yyv3893), false, false)
				}
			}

			if yyv3891 != nil {
				yyv3891[yymk3891] = yymv3891
			}
		}
	} else if yyl3891 < 0 {
		for yyj3891 := 0; !r.CheckBreak(); yyj3891++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3891 = ""
			} else {
				yymk3891 = string(r.DecodeString())
			}

			if yymg3891 {
				yymv3891 = yyv3891[yymk3891]
			} else {
				yymv3891 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3891 = nil
			} else {
				yyv3896 := &yymv3891
				yym3897 := z.DecBinary()
				_ = yym3897
				if false {
				} else {
					*yyv3896 = r.DecodeBytes(*(*[]byte)(yyv3896), false, false)
				}
			}

			if yyv3891 != nil {
				yyv3891[yymk3891] = yymv3891
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3898 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3899 := &yyv3898
		yy3899.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3900 := *v
	yyh3900, yyl3900 := z.DecSliceHelperStart()
	var yyc3900 bool
	if yyl3900 == 0 {
		if yyv3900 == nil {
			yyv3900 = []Secret{}
			yyc3900 = true
		} else if len(yyv3900) != 0 {
			yyv3900 = yyv3900[:0]
			yyc3900 = true
		}
	} else if yyl3900 > 0 {
		var yyrr3900, yyrl3900 int
		var yyrt3900 bool
		if yyl3900 > cap(yyv3900) {

			yyrg3900 := len(yyv3900) > 0
			yyv23900 := yyv3900
			yyrl3900, yyrt3900 = z.DecInferLen(yyl3900, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3900 {
				if yyrl3900 <= cap(yyv3900) {
					yyv3900 = yyv3900[:yyrl3900]
				} else {
					yyv3900 = make([]Secret, yyrl3900)
				}
			} else {
				yyv3900 = make([]Secret, yyrl3900)
			}
			yyc3900 = true
			yyrr3900 = len(yyv3900)
			if yyrg3900 {
				copy(yyv3900, yyv23900)
			}
		} else if yyl3900 != len(yyv3900) {
			yyv3900 = yyv3900[:yyl3900]
			yyc3900 = true
		}
		yyj3900 := 0
		for ; yyj3900 < yyrr3900; yyj3900++ {
			yyh3900.ElemContainerState(yyj3900)
			if r.TryDecodeAsNil() {
				yyv3900[yyj3900] = Secret{}
			} else {
				yyv3901 := &yyv3900[yyj3900]
				yyv3901.CodecDecodeSelf(d)
			}

		}
		if yyrt3900 {
			for ; yyj3900 < yyl3900; yyj3900++ {
				yyv3900 = append(yyv3900, Secret{})
				yyh3900.ElemContainerState(yyj3900)
				if r.TryDecodeAsNil() {
					yyv3900[yyj3900] = Secret{}
				} else {
					yyv3902 := &yyv3900[yyj3900]
					yyv3902.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3900 := 0
		for ; !r.CheckBreak(); yyj3900++ {

			if yyj3900 >= len(yyv3900) {
				yyv3900 = append(yyv3900, Secret{}) // var yyz3900 Secret
				yyc3900 = true
			}
			yyh3900.ElemContainerState(yyj3900)
			if yyj3900 < len(yyv3900) {
				if r.TryDecodeAsNil() {
					yyv3900[yyj3900] = Secret{}
				} else {
					yyv3903 := &yyv3900[yyj3900]
					yyv3903.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3900 < len(yyv3900) {
			yyv3900 = yyv3900[:yyj3900]
			yyc3900 = true
		} else if yyj3900 == 0 && yyv3900 == nil {
			yyv3900 = []Secret{}
			yyc3900 = true
		}
	}
	yyh3900.End()
	if yyc3900 {
		*v = yyv3900
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3904 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3905 := &yyv3904
		yy3905.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3906 := *v
	yyh3906, yyl3906 := z.DecSliceHelperStart()
	var yyc3906 bool
	if yyl3906 == 0 {
		if yyv3906 == nil {
			yyv3906 = []ComponentCondition{}
			yyc3906 = true
		} else if len(yyv3906) != 0 {
			yyv3906 = yyv3906[:0]
			yyc3906 = true
		}
	} else if yyl3906 > 0 {
		var yyrr3906, yyrl3906 int
		var yyrt3906 bool
		if yyl3906 > cap(yyv3906) {

			yyrg3906 := len(yyv3906) > 0
			yyv23906 := yyv3906
			yyrl3906, yyrt3906 = z.DecInferLen(yyl3906, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3906 {
				if yyrl3906 <= cap(yyv3906) {
					yyv3906 = yyv3906[:yyrl3906]
				} else {
					yyv3906 = make([]ComponentCondition, yyrl3906)
				}
			} else {
				yyv3906 = make([]ComponentCondition, yyrl3906)
			}
			yyc3906 = true
			yyrr3906 = len(yyv3906)
			if yyrg3906 {
				copy(yyv3906, yyv23906)
			}
		} else if yyl3906 != len(yyv3906) {
			yyv3906 = yyv3906[:yyl3906]
			yyc3906 = true
		}
		yyj3906 := 0
		for ; yyj3906 < yyrr3906; yyj3906++ {
			yyh3906.ElemContainerState(yyj3906)
			if r.TryDecodeAsNil() {
				yyv3906[yyj3906] = ComponentCondition{}
			} else {
				yyv3907 := &yyv3906[yyj3906]
				yyv3907.CodecDecodeSelf(d)
			}

		}
		if yyrt3906 {
			for ; yyj3906 < yyl3906; yyj3906++ {
				yyv3906 = append(yyv3906, ComponentCondition{})
				yyh3906.ElemContainerState(yyj3906)
				if r.TryDecodeAsNil() {
					yyv3906[yyj3906] = ComponentCondition{}
				} else {
					yyv3908 := &yyv3906[yyj3906]
					yyv3908.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3906 := 0
		for ; !r.CheckBreak(); yyj3906++ {

			if yyj3906 >= len(yyv3906) {
				yyv3906 = append(yyv3906, ComponentCondition{}) // var yyz3906 ComponentCondition
				yyc3906 = true
			}
			yyh3906.ElemContainerState(yyj3906)
			if yyj3906 < len(yyv3906) {
				if r.TryDecodeAsNil() {
					yyv3906[yyj3906] = ComponentCondition{}
				} else {
					yyv3909 := &yyv3906[yyj3906]
					yyv3909.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3906 < len(yyv3906) {
			yyv3906 = yyv3906[:yyj3906]
			yyc3906 = true
		} else if yyj3906 == 0 && yyv3906 == nil {
			yyv3906 = []ComponentCondition{}
			yyc3906 = true
		}
	}
	yyh3906.End()
	if yyc3906 {
		*v = yyv3906
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3910 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3911 := &yyv3910
		yy3911.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3912 := *v
	yyh3912, yyl3912 := z.DecSliceHelperStart()
	var yyc3912 bool
	if yyl3912 == 0 {
		if yyv3912 == nil {
			yyv3912 = []ComponentStatus{}
			yyc3912 = true
		} else if len(yyv3912) != 0 {
			yyv3912 = yyv3912[:0]
			yyc3912 = true
		}
	} else if yyl3912 > 0 {
		var yyrr3912, yyrl3912 int
		var yyrt3912 bool
		if yyl3912 > cap(yyv3912) {

			yyrg3912 := len(yyv3912) > 0
			yyv23912 := yyv3912
			yyrl3912, yyrt3912 = z.DecInferLen(yyl3912, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3912 {
				if yyrl3912 <= cap(yyv3912) {
					yyv3912 = yyv3912[:yyrl3912]
				} else {
					yyv3912 = make([]ComponentStatus, yyrl3912)
				}
			} else {
				yyv3912 = make([]ComponentStatus, yyrl3912)
			}
			yyc3912 = true
			yyrr3912 = len(yyv3912)
			if yyrg3912 {
				copy(yyv3912, yyv23912)
			}
		} else if yyl3912 != len(yyv3912) {
			yyv3912 = yyv3912[:yyl3912]
			yyc3912 = true
		}
		yyj3912 := 0
		for ; yyj3912 < yyrr3912; yyj3912++ {
			yyh3912.ElemContainerState(yyj3912)
			if r.TryDecodeAsNil() {
				yyv3912[yyj3912] = ComponentStatus{}
			} else {
				yyv3913 := &yyv3912[yyj3912]
				yyv3913.CodecDecodeSelf(d)
			}

		}
		if yyrt3912 {
			for ; yyj3912 < yyl3912; yyj3912++ {
				yyv3912 = append(yyv3912, ComponentStatus{})
				yyh3912.ElemContainerState(yyj3912)
				if r.TryDecodeAsNil() {
					yyv3912[yyj3912] = ComponentStatus{}
				} else {
					yyv3914 := &yyv3912[yyj3912]
					yyv3914.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3912 := 0
		for ; !r.CheckBreak(); yyj3912++ {

			if yyj3912 >= len(yyv3912) {
				yyv3912 = append(yyv3912, ComponentStatus{}) // var yyz3912 ComponentStatus
				yyc3912 = true
			}
			yyh3912.ElemContainerState(yyj3912)
			if yyj3912 < len(yyv3912) {
				if r.TryDecodeAsNil() {
					yyv3912[yyj3912] = ComponentStatus{}
				} else {
					yyv3915 := &yyv3912[yyj3912]
					yyv3915.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3912 < len(yyv3912) {
			yyv3912 = yyv3912[:yyj3912]
			yyc3912 = true
		} else if yyj3912 == 0 && yyv3912 == nil {
			yyv3912 = []ComponentStatus{}
			yyc3912 = true
		}
	}
	yyh3912.End()
	if yyc3912 {
		*v = yyv3912
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3916 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3917 := &yyv3916
		yy3917.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3918 := *v
	yyh3918, yyl3918 := z.DecSliceHelperStart()
	var yyc3918 bool
	if yyl3918 == 0 {
		if yyv3918 == nil {
			yyv3918 = []DownwardAPIVolumeFile{}
			yyc3918 = true
		} else if len(yyv3918) != 0 {
			yyv3918 = yyv3918[:0]
			yyc3918 = true
		}
	} else if yyl3918 > 0 {
		var yyrr3918, yyrl3918 int
		var yyrt3918 bool
		if yyl3918 > cap(yyv3918) {

			yyrg3918 := len(yyv3918) > 0
			yyv23918 := yyv3918
			yyrl3918, yyrt3918 = z.DecInferLen(yyl3918, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt3918 {
				if yyrl3918 <= cap(yyv3918) {
					yyv3918 = yyv3918[:yyrl3918]
				} else {
					yyv3918 = make([]DownwardAPIVolumeFile, yyrl3918)
				}
			} else {
				yyv3918 = make([]DownwardAPIVolumeFile, yyrl3918)
			}
			yyc3918 = true
			yyrr3918 = len(yyv3918)
			if yyrg3918 {
				copy(yyv3918, yyv23918)
			}
		} else if yyl3918 != len(yyv3918) {
			yyv3918 = yyv3918[:yyl3918]
			yyc3918 = true
		}
		yyj3918 := 0
		for ; yyj3918 < yyrr3918; yyj3918++ {
			yyh3918.ElemContainerState(yyj3918)
			if r.TryDecodeAsNil() {
				yyv3918[yyj3918] = DownwardAPIVolumeFile{}
			} else {
				yyv3919 := &yyv3918[yyj3918]
				yyv3919.CodecDecodeSelf(d)
			}

		}
		if yyrt3918 {
			for ; yyj3918 < yyl3918; yyj3918++ {
				yyv3918 = append(yyv3918, DownwardAPIVolumeFile{})
				yyh3918.ElemContainerState(yyj3918)
				if r.TryDecodeAsNil() {
					yyv3918[yyj3918] = DownwardAPIVolumeFile{}
				} else {
					yyv3920 := &yyv3918[yyj3918]
					yyv3920.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3918 := 0
		for ; !r.CheckBreak(); yyj3918++ {

			if yyj3918 >= len(yyv3918) {
				yyv3918 = append(yyv3918, DownwardAPIVolumeFile{}) // var yyz3918 DownwardAPIVolumeFile
				yyc3918 = true
			}
			yyh3918.ElemContainerState(yyj3918)
			if yyj3918 < len(yyv3918) {
				if r.TryDecodeAsNil() {
					yyv3918[yyj3918] = DownwardAPIVolumeFile{}
				} else {
					yyv3921 := &yyv3918[yyj3918]
					yyv3921.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3918 < len(yyv3918) {
			yyv3918 = yyv3918[:yyj3918]
			yyc3918 = true
		} else if yyj3918 == 0 && yyv3918 == nil {
			yyv3918 = []DownwardAPIVolumeFile{}
			yyc3918 = true
		}
	}
	yyh3918.End()
	if yyc3918 {
		*v = yyv3918
	}
}
