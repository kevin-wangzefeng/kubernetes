/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [23]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[21] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(23)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.Cinder == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.CephFS == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.Flocker == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.FC == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.AzureFile == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.Quobyte == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym127 := z.DecBinary()
	_ = yym127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct128 := r.ContainerType()
		if yyct128 == codecSelferValueTypeMap1234 {
			yyl128 := r.ReadMapStart()
			if yyl128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl128, d)
			}
		} else if yyct128 == codecSelferValueTypeArray1234 {
			yyl128 := r.ReadArrayStart()
			if yyl128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys129Slc
	var yyhl129 bool = l >= 0
	for yyj129 := 0; ; yyj129++ {
		if yyhl129 {
			if yyj129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys129Slc = r.DecodeBytes(yys129Slc, true, true)
		yys129 := string(yys129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys129 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys129)
		} // end switch yys129
	} // end for yyj129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj153 int
	var yyb153 bool
	var yyhl153 bool = l >= 0
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj153++
		if yyhl153 {
			yyb153 = yyj153 > l
		} else {
			yyb153 = r.CheckBreak()
		}
		if yyb153 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj153-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym177 := z.EncBinary()
		_ = yym177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep178 := !z.EncBinary()
			yy2arr178 := z.EncBasicHandle().StructToArray
			var yyq178 [22]bool
			_, _, _ = yysep178, yyq178, yy2arr178
			const yyr178 bool = false
			yyq178[0] = x.HostPath != nil
			yyq178[1] = x.EmptyDir != nil
			yyq178[2] = x.GCEPersistentDisk != nil
			yyq178[3] = x.AWSElasticBlockStore != nil
			yyq178[4] = x.GitRepo != nil
			yyq178[5] = x.Secret != nil
			yyq178[6] = x.NFS != nil
			yyq178[7] = x.ISCSI != nil
			yyq178[8] = x.Glusterfs != nil
			yyq178[9] = x.PersistentVolumeClaim != nil
			yyq178[10] = x.RBD != nil
			yyq178[11] = x.FlexVolume != nil
			yyq178[12] = x.Cinder != nil
			yyq178[13] = x.CephFS != nil
			yyq178[14] = x.Flocker != nil
			yyq178[15] = x.DownwardAPI != nil
			yyq178[16] = x.FC != nil
			yyq178[17] = x.AzureFile != nil
			yyq178[18] = x.ConfigMap != nil
			yyq178[19] = x.VsphereVolume != nil
			yyq178[20] = x.Quobyte != nil
			yyq178[21] = x.AzureDisk != nil
			var yynn178 int
			if yyr178 || yy2arr178 {
				r.EncodeArrayStart(22)
			} else {
				yynn178 = 0
				for _, b := range yyq178 {
					if b {
						yynn178++
					}
				}
				r.EncodeMapStart(yynn178)
				yynn178 = 0
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[20] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym201 := z.DecBinary()
	_ = yym201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct202 := r.ContainerType()
		if yyct202 == codecSelferValueTypeMap1234 {
			yyl202 := r.ReadMapStart()
			if yyl202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl202, d)
			}
		} else if yyct202 == codecSelferValueTypeArray1234 {
			yyl202 := r.ReadArrayStart()
			if yyl202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys203Slc
	var yyhl203 bool = l >= 0
	for yyj203 := 0; ; yyj203++ {
		if yyhl203 {
			if yyj203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys203Slc = r.DecodeBytes(yys203Slc, true, true)
		yys203 := string(yys203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys203 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys203)
		} // end switch yys203
	} // end for yyj203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj226 int
	var yyb226 bool
	var yyhl226 bool = l >= 0
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj226++
		if yyhl226 {
			yyb226 = yyj226 > l
		} else {
			yyb226 = r.CheckBreak()
		}
		if yyb226 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj226-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [2]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[1] = x.ReadOnly != false
			var yynn250 int
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(2)
			} else {
				yynn250 = 1
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
				yynn250 = 0
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym252 := z.EncBinary()
				_ = yym252
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym253 := z.EncBinary()
				_ = yym253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym257 := z.DecBinary()
	_ = yym257
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct258 := r.ContainerType()
		if yyct258 == codecSelferValueTypeMap1234 {
			yyl258 := r.ReadMapStart()
			if yyl258 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl258, d)
			}
		} else if yyct258 == codecSelferValueTypeArray1234 {
			yyl258 := r.ReadArrayStart()
			if yyl258 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl258, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys259Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys259Slc
	var yyhl259 bool = l >= 0
	for yyj259 := 0; ; yyj259++ {
		if yyhl259 {
			if yyj259 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys259Slc = r.DecodeBytes(yys259Slc, true, true)
		yys259 := string(yys259Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys259 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys259)
		} // end switch yys259
	} // end for yyj259
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj262 int
	var yyb262 bool
	var yyhl262 bool = l >= 0
	yyj262++
	if yyhl262 {
		yyb262 = yyj262 > l
	} else {
		yyb262 = r.CheckBreak()
	}
	if yyb262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj262++
	if yyhl262 {
		yyb262 = yyj262 > l
	} else {
		yyb262 = r.CheckBreak()
	}
	if yyb262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj262++
		if yyhl262 {
			yyb262 = yyj262 > l
		} else {
			yyb262 = r.CheckBreak()
		}
		if yyb262 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj262-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym265 := z.EncBinary()
		_ = yym265
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep266 := !z.EncBinary()
			yy2arr266 := z.EncBasicHandle().StructToArray
			var yyq266 [16]bool
			_, _, _ = yysep266, yyq266, yy2arr266
			const yyr266 bool = false
			yyq266[0] = x.GCEPersistentDisk != nil
			yyq266[1] = x.AWSElasticBlockStore != nil
			yyq266[2] = x.HostPath != nil
			yyq266[3] = x.Glusterfs != nil
			yyq266[4] = x.NFS != nil
			yyq266[5] = x.RBD != nil
			yyq266[6] = x.ISCSI != nil
			yyq266[7] = x.Cinder != nil
			yyq266[8] = x.CephFS != nil
			yyq266[9] = x.FC != nil
			yyq266[10] = x.Flocker != nil
			yyq266[11] = x.FlexVolume != nil
			yyq266[12] = x.AzureFile != nil
			yyq266[13] = x.VsphereVolume != nil
			yyq266[14] = x.Quobyte != nil
			yyq266[15] = x.AzureDisk != nil
			var yynn266 int
			if yyr266 || yy2arr266 {
				r.EncodeArrayStart(16)
			} else {
				yynn266 = 0
				for _, b := range yyq266 {
					if b {
						yynn266++
					}
				}
				r.EncodeMapStart(yynn266)
				yynn266 = 0
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[14] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym283 := z.DecBinary()
	_ = yym283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct284 := r.ContainerType()
		if yyct284 == codecSelferValueTypeMap1234 {
			yyl284 := r.ReadMapStart()
			if yyl284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl284, d)
			}
		} else if yyct284 == codecSelferValueTypeArray1234 {
			yyl284 := r.ReadArrayStart()
			if yyl284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys285Slc
	var yyhl285 bool = l >= 0
	for yyj285 := 0; ; yyj285++ {
		if yyhl285 {
			if yyj285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys285Slc = r.DecodeBytes(yys285Slc, true, true)
		yys285 := string(yys285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys285 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys285)
		} // end switch yys285
	} // end for yyj285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj302 int
	var yyb302 bool
	var yyhl302 bool = l >= 0
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj302++
		if yyhl302 {
			yyb302 = yyj302 > l
		} else {
			yyb302 = r.CheckBreak()
		}
		if yyb302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym319 := z.EncBinary()
		_ = yym319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep320 := !z.EncBinary()
			yy2arr320 := z.EncBasicHandle().StructToArray
			var yyq320 [5]bool
			_, _, _ = yysep320, yyq320, yy2arr320
			const yyr320 bool = false
			yyq320[0] = x.Kind != ""
			yyq320[1] = x.APIVersion != ""
			yyq320[2] = true
			yyq320[3] = true
			yyq320[4] = true
			var yynn320 int
			if yyr320 || yy2arr320 {
				r.EncodeArrayStart(5)
			} else {
				yynn320 = 0
				for _, b := range yyq320 {
					if b {
						yynn320++
					}
				}
				r.EncodeMapStart(yynn320)
				yynn320 = 0
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[0] {
					yym322 := z.EncBinary()
					_ = yym322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq320[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym323 := z.EncBinary()
					_ = yym323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[1] {
					yym325 := z.EncBinary()
					_ = yym325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq320[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym326 := z.EncBinary()
					_ = yym326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[2] {
					yy328 := &x.ObjectMeta
					yy328.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq320[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy329 := &x.ObjectMeta
					yy329.CodecEncodeSelf(e)
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[3] {
					yy331 := &x.Spec
					yy331.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq320[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy332 := &x.Spec
					yy332.CodecEncodeSelf(e)
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[4] {
					yy334 := &x.Status
					yy334.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq320[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy335 := &x.Status
					yy335.CodecEncodeSelf(e)
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct337 := r.ContainerType()
		if yyct337 == codecSelferValueTypeMap1234 {
			yyl337 := r.ReadMapStart()
			if yyl337 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl337, d)
			}
		} else if yyct337 == codecSelferValueTypeArray1234 {
			yyl337 := r.ReadArrayStart()
			if yyl337 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys338Slc
	var yyhl338 bool = l >= 0
	for yyj338 := 0; ; yyj338++ {
		if yyhl338 {
			if yyj338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys338Slc = r.DecodeBytes(yys338Slc, true, true)
		yys338 := string(yys338Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys338 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv341 := &x.ObjectMeta
				yyv341.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv342 := &x.Spec
				yyv342.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv343 := &x.Status
				yyv343.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys338)
		} // end switch yys338
	} // end for yyj338
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj344 int
	var yyb344 bool
	var yyhl344 bool = l >= 0
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv347 := &x.ObjectMeta
		yyv347.CodecDecodeSelf(d)
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv348 := &x.Spec
		yyv348.CodecDecodeSelf(d)
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv349 := &x.Status
		yyv349.CodecDecodeSelf(d)
	}
	for {
		yyj344++
		if yyhl344 {
			yyb344 = yyj344 > l
		} else {
			yyb344 = r.CheckBreak()
		}
		if yyb344 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj344-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym350 := z.EncBinary()
		_ = yym350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep351 := !z.EncBinary()
			yy2arr351 := z.EncBasicHandle().StructToArray
			var yyq351 [20]bool
			_, _, _ = yysep351, yyq351, yy2arr351
			const yyr351 bool = false
			yyq351[0] = len(x.Capacity) != 0
			yyq351[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq351[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq351[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq351[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq351[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq351[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq351[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq351[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq351[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq351[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq351[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq351[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq351[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq351[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq351[15] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq351[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq351[17] = len(x.AccessModes) != 0
			yyq351[18] = x.ClaimRef != nil
			yyq351[19] = x.PersistentVolumeReclaimPolicy != ""
			var yynn351 int
			if yyr351 || yy2arr351 {
				r.EncodeArrayStart(20)
			} else {
				yynn351 = 0
				for _, b := range yyq351 {
					if b {
						yynn351++
					}
				}
				r.EncodeMapStart(yynn351)
				yynn351 = 0
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn353 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn353 = true
				goto LABEL353
			}
		LABEL353:
			if yyr351 || yy2arr351 {
				if yyn353 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn353 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn354 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn354 = true
				goto LABEL354
			}
		LABEL354:
			if yyr351 || yy2arr351 {
				if yyn354 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn354 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn355 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn355 = true
				goto LABEL355
			}
		LABEL355:
			if yyr351 || yy2arr351 {
				if yyn355 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn355 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn356 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn356 = true
				goto LABEL356
			}
		LABEL356:
			if yyr351 || yy2arr351 {
				if yyn356 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn356 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn357 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn357 = true
				goto LABEL357
			}
		LABEL357:
			if yyr351 || yy2arr351 {
				if yyn357 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn357 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn358 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn358 = true
				goto LABEL358
			}
		LABEL358:
			if yyr351 || yy2arr351 {
				if yyn358 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn358 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn359 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn359 = true
				goto LABEL359
			}
		LABEL359:
			if yyr351 || yy2arr351 {
				if yyn359 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn359 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn360 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn360 = true
				goto LABEL360
			}
		LABEL360:
			if yyr351 || yy2arr351 {
				if yyn360 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn360 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn361 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn361 = true
				goto LABEL361
			}
		LABEL361:
			if yyr351 || yy2arr351 {
				if yyn361 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn361 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn362 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn362 = true
				goto LABEL362
			}
		LABEL362:
			if yyr351 || yy2arr351 {
				if yyn362 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn362 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn363 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn363 = true
				goto LABEL363
			}
		LABEL363:
			if yyr351 || yy2arr351 {
				if yyn363 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn363 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn364 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn364 = true
				goto LABEL364
			}
		LABEL364:
			if yyr351 || yy2arr351 {
				if yyn364 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn364 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn365 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn365 = true
				goto LABEL365
			}
		LABEL365:
			if yyr351 || yy2arr351 {
				if yyn365 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn365 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn366 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn366 = true
				goto LABEL366
			}
		LABEL366:
			if yyr351 || yy2arr351 {
				if yyn366 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn366 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn367 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn367 = true
				goto LABEL367
			}
		LABEL367:
			if yyr351 || yy2arr351 {
				if yyn367 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[15] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn367 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn368 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn368 = true
				goto LABEL368
			}
		LABEL368:
			if yyr351 || yy2arr351 {
				if yyn368 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn368 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[17] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym370 := z.EncBinary()
						_ = yym370
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym371 := z.EncBinary()
						_ = yym371
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[18] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[19] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq351[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym374 := z.DecBinary()
	_ = yym374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct375 := r.ContainerType()
		if yyct375 == codecSelferValueTypeMap1234 {
			yyl375 := r.ReadMapStart()
			if yyl375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl375, d)
			}
		} else if yyct375 == codecSelferValueTypeArray1234 {
			yyl375 := r.ReadArrayStart()
			if yyl375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys376Slc
	var yyhl376 bool = l >= 0
	for yyj376 := 0; ; yyj376++ {
		if yyhl376 {
			if yyj376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys376Slc = r.DecodeBytes(yys376Slc, true, true)
		yys376 := string(yys376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys376 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv377 := &x.Capacity
				yyv377.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv394 := &x.AccessModes
				yym395 := z.DecBinary()
				_ = yym395
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv394), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys376)
		} // end switch yys376
	} // end for yyj376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj398 int
	var yyb398 bool
	var yyhl398 bool = l >= 0
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv399 := &x.Capacity
		yyv399.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv416 := &x.AccessModes
		yym417 := z.DecBinary()
		_ = yym417
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv416), d)
		}
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj398++
		if yyhl398 {
			yyb398 = yyj398 > l
		} else {
			yyb398 = r.CheckBreak()
		}
		if yyb398 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj398-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym420 := z.EncBinary()
	_ = yym420
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym421 := z.DecBinary()
	_ = yym421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym422 := z.EncBinary()
		_ = yym422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep423 := !z.EncBinary()
			yy2arr423 := z.EncBasicHandle().StructToArray
			var yyq423 [3]bool
			_, _, _ = yysep423, yyq423, yy2arr423
			const yyr423 bool = false
			yyq423[0] = x.Phase != ""
			yyq423[1] = x.Message != ""
			yyq423[2] = x.Reason != ""
			var yynn423 int
			if yyr423 || yy2arr423 {
				r.EncodeArrayStart(3)
			} else {
				yynn423 = 0
				for _, b := range yyq423 {
					if b {
						yynn423++
					}
				}
				r.EncodeMapStart(yynn423)
				yynn423 = 0
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[1] {
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[2] {
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym431 := z.DecBinary()
	_ = yym431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct432 := r.ContainerType()
		if yyct432 == codecSelferValueTypeMap1234 {
			yyl432 := r.ReadMapStart()
			if yyl432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl432, d)
			}
		} else if yyct432 == codecSelferValueTypeArray1234 {
			yyl432 := r.ReadArrayStart()
			if yyl432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys433Slc
	var yyhl433 bool = l >= 0
	for yyj433 := 0; ; yyj433++ {
		if yyhl433 {
			if yyj433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys433Slc = r.DecodeBytes(yys433Slc, true, true)
		yys433 := string(yys433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys433 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys433)
		} // end switch yys433
	} // end for yyj433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj437 int
	var yyb437 bool
	var yyhl437 bool = l >= 0
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj437++
		if yyhl437 {
			yyb437 = yyj437 > l
		} else {
			yyb437 = r.CheckBreak()
		}
		if yyb437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym441 := z.EncBinary()
		_ = yym441
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep442 := !z.EncBinary()
			yy2arr442 := z.EncBasicHandle().StructToArray
			var yyq442 [4]bool
			_, _, _ = yysep442, yyq442, yy2arr442
			const yyr442 bool = false
			yyq442[0] = x.Kind != ""
			yyq442[1] = x.APIVersion != ""
			yyq442[2] = true
			var yynn442 int
			if yyr442 || yy2arr442 {
				r.EncodeArrayStart(4)
			} else {
				yynn442 = 1
				for _, b := range yyq442 {
					if b {
						yynn442++
					}
				}
				r.EncodeMapStart(yynn442)
				yynn442 = 0
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[0] {
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq442[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[1] {
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq442[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[2] {
					yy450 := &x.ListMeta
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else if z.HasExtensions() && z.EncExt(yy450) {
					} else {
						z.EncFallback(yy450)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq442[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy452 := &x.ListMeta
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else if z.HasExtensions() && z.EncExt(yy452) {
					} else {
						z.EncFallback(yy452)
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym455 := z.EncBinary()
					_ = yym455
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym457 := z.DecBinary()
	_ = yym457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct458 := r.ContainerType()
		if yyct458 == codecSelferValueTypeMap1234 {
			yyl458 := r.ReadMapStart()
			if yyl458 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl458, d)
			}
		} else if yyct458 == codecSelferValueTypeArray1234 {
			yyl458 := r.ReadArrayStart()
			if yyl458 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl458, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys459Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys459Slc
	var yyhl459 bool = l >= 0
	for yyj459 := 0; ; yyj459++ {
		if yyhl459 {
			if yyj459 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys459Slc = r.DecodeBytes(yys459Slc, true, true)
		yys459 := string(yys459Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys459 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv462 := &x.ListMeta
				yym463 := z.DecBinary()
				_ = yym463
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv462) {
				} else {
					z.DecFallback(yyv462, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv464 := &x.Items
				yym465 := z.DecBinary()
				_ = yym465
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv464), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys459)
		} // end switch yys459
	} // end for yyj459
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj466 int
	var yyb466 bool
	var yyhl466 bool = l >= 0
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv469 := &x.ListMeta
		yym470 := z.DecBinary()
		_ = yym470
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv469) {
		} else {
			z.DecFallback(yyv469, false)
		}
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv471 := &x.Items
		yym472 := z.DecBinary()
		_ = yym472
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv471), d)
		}
	}
	for {
		yyj466++
		if yyhl466 {
			yyb466 = yyj466 > l
		} else {
			yyb466 = r.CheckBreak()
		}
		if yyb466 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj466-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym473 := z.EncBinary()
		_ = yym473
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep474 := !z.EncBinary()
			yy2arr474 := z.EncBasicHandle().StructToArray
			var yyq474 [5]bool
			_, _, _ = yysep474, yyq474, yy2arr474
			const yyr474 bool = false
			yyq474[0] = x.Kind != ""
			yyq474[1] = x.APIVersion != ""
			yyq474[2] = true
			yyq474[3] = true
			yyq474[4] = true
			var yynn474 int
			if yyr474 || yy2arr474 {
				r.EncodeArrayStart(5)
			} else {
				yynn474 = 0
				for _, b := range yyq474 {
					if b {
						yynn474++
					}
				}
				r.EncodeMapStart(yynn474)
				yynn474 = 0
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[0] {
					yym476 := z.EncBinary()
					_ = yym476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq474[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym477 := z.EncBinary()
					_ = yym477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[1] {
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq474[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[2] {
					yy482 := &x.ObjectMeta
					yy482.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy483 := &x.ObjectMeta
					yy483.CodecEncodeSelf(e)
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[3] {
					yy485 := &x.Spec
					yy485.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy486 := &x.Spec
					yy486.CodecEncodeSelf(e)
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[4] {
					yy488 := &x.Status
					yy488.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy489 := &x.Status
					yy489.CodecEncodeSelf(e)
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym490 := z.DecBinary()
	_ = yym490
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct491 := r.ContainerType()
		if yyct491 == codecSelferValueTypeMap1234 {
			yyl491 := r.ReadMapStart()
			if yyl491 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl491, d)
			}
		} else if yyct491 == codecSelferValueTypeArray1234 {
			yyl491 := r.ReadArrayStart()
			if yyl491 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl491, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys492Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys492Slc
	var yyhl492 bool = l >= 0
	for yyj492 := 0; ; yyj492++ {
		if yyhl492 {
			if yyj492 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys492Slc = r.DecodeBytes(yys492Slc, true, true)
		yys492 := string(yys492Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys492 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv495 := &x.ObjectMeta
				yyv495.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv496 := &x.Spec
				yyv496.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv497 := &x.Status
				yyv497.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys492)
		} // end switch yys492
	} // end for yyj492
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj498 int
	var yyb498 bool
	var yyhl498 bool = l >= 0
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv501 := &x.ObjectMeta
		yyv501.CodecDecodeSelf(d)
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv502 := &x.Spec
		yyv502.CodecDecodeSelf(d)
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv503 := &x.Status
		yyv503.CodecDecodeSelf(d)
	}
	for {
		yyj498++
		if yyhl498 {
			yyb498 = yyj498 > l
		} else {
			yyb498 = r.CheckBreak()
		}
		if yyb498 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj498-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym504 := z.EncBinary()
		_ = yym504
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep505 := !z.EncBinary()
			yy2arr505 := z.EncBasicHandle().StructToArray
			var yyq505 [4]bool
			_, _, _ = yysep505, yyq505, yy2arr505
			const yyr505 bool = false
			yyq505[0] = x.Kind != ""
			yyq505[1] = x.APIVersion != ""
			yyq505[2] = true
			var yynn505 int
			if yyr505 || yy2arr505 {
				r.EncodeArrayStart(4)
			} else {
				yynn505 = 1
				for _, b := range yyq505 {
					if b {
						yynn505++
					}
				}
				r.EncodeMapStart(yynn505)
				yynn505 = 0
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq505[0] {
					yym507 := z.EncBinary()
					_ = yym507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq505[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym508 := z.EncBinary()
					_ = yym508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq505[1] {
					yym510 := z.EncBinary()
					_ = yym510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq505[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym511 := z.EncBinary()
					_ = yym511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq505[2] {
					yy513 := &x.ListMeta
					yym514 := z.EncBinary()
					_ = yym514
					if false {
					} else if z.HasExtensions() && z.EncExt(yy513) {
					} else {
						z.EncFallback(yy513)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq505[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy515 := &x.ListMeta
					yym516 := z.EncBinary()
					_ = yym516
					if false {
					} else if z.HasExtensions() && z.EncExt(yy515) {
					} else {
						z.EncFallback(yy515)
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym518 := z.EncBinary()
					_ = yym518
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct521 := r.ContainerType()
		if yyct521 == codecSelferValueTypeMap1234 {
			yyl521 := r.ReadMapStart()
			if yyl521 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl521, d)
			}
		} else if yyct521 == codecSelferValueTypeArray1234 {
			yyl521 := r.ReadArrayStart()
			if yyl521 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl521, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys522Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys522Slc
	var yyhl522 bool = l >= 0
	for yyj522 := 0; ; yyj522++ {
		if yyhl522 {
			if yyj522 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys522Slc = r.DecodeBytes(yys522Slc, true, true)
		yys522 := string(yys522Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys522 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv525 := &x.ListMeta
				yym526 := z.DecBinary()
				_ = yym526
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv525) {
				} else {
					z.DecFallback(yyv525, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv527 := &x.Items
				yym528 := z.DecBinary()
				_ = yym528
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv527), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys522)
		} // end switch yys522
	} // end for yyj522
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj529 int
	var yyb529 bool
	var yyhl529 bool = l >= 0
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv532 := &x.ListMeta
		yym533 := z.DecBinary()
		_ = yym533
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv532) {
		} else {
			z.DecFallback(yyv532, false)
		}
	}
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv534 := &x.Items
		yym535 := z.DecBinary()
		_ = yym535
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv534), d)
		}
	}
	for {
		yyj529++
		if yyhl529 {
			yyb529 = yyj529 > l
		} else {
			yyb529 = r.CheckBreak()
		}
		if yyb529 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj529-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym536 := z.EncBinary()
		_ = yym536
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep537 := !z.EncBinary()
			yy2arr537 := z.EncBasicHandle().StructToArray
			var yyq537 [4]bool
			_, _, _ = yysep537, yyq537, yy2arr537
			const yyr537 bool = false
			yyq537[0] = len(x.AccessModes) != 0
			yyq537[1] = x.Selector != nil
			yyq537[2] = true
			yyq537[3] = x.VolumeName != ""
			var yynn537 int
			if yyr537 || yy2arr537 {
				r.EncodeArrayStart(4)
			} else {
				yynn537 = 0
				for _, b := range yyq537 {
					if b {
						yynn537++
					}
				}
				r.EncodeMapStart(yynn537)
				yynn537 = 0
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym539 := z.EncBinary()
						_ = yym539
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq537[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym540 := z.EncBinary()
						_ = yym540
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym542 := z.EncBinary()
						_ = yym542
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq537[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym543 := z.EncBinary()
						_ = yym543
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[2] {
					yy545 := &x.Resources
					yy545.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq537[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy546 := &x.Resources
					yy546.CodecEncodeSelf(e)
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[3] {
					yym548 := z.EncBinary()
					_ = yym548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq537[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym549 := z.EncBinary()
					_ = yym549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym550 := z.DecBinary()
	_ = yym550
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct551 := r.ContainerType()
		if yyct551 == codecSelferValueTypeMap1234 {
			yyl551 := r.ReadMapStart()
			if yyl551 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl551, d)
			}
		} else if yyct551 == codecSelferValueTypeArray1234 {
			yyl551 := r.ReadArrayStart()
			if yyl551 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl551, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys552Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys552Slc
	var yyhl552 bool = l >= 0
	for yyj552 := 0; ; yyj552++ {
		if yyhl552 {
			if yyj552 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys552Slc = r.DecodeBytes(yys552Slc, true, true)
		yys552 := string(yys552Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys552 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv553 := &x.AccessModes
				yym554 := z.DecBinary()
				_ = yym554
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv553), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym556 := z.DecBinary()
				_ = yym556
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv557 := &x.Resources
				yyv557.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys552)
		} // end switch yys552
	} // end for yyj552
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj559 int
	var yyb559 bool
	var yyhl559 bool = l >= 0
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv560 := &x.AccessModes
		yym561 := z.DecBinary()
		_ = yym561
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv560), d)
		}
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym563 := z.DecBinary()
		_ = yym563
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv564 := &x.Resources
		yyv564.CodecDecodeSelf(d)
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj559++
		if yyhl559 {
			yyb559 = yyj559 > l
		} else {
			yyb559 = r.CheckBreak()
		}
		if yyb559 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj559-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym566 := z.EncBinary()
		_ = yym566
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep567 := !z.EncBinary()
			yy2arr567 := z.EncBasicHandle().StructToArray
			var yyq567 [3]bool
			_, _, _ = yysep567, yyq567, yy2arr567
			const yyr567 bool = false
			yyq567[0] = x.Phase != ""
			yyq567[1] = len(x.AccessModes) != 0
			yyq567[2] = len(x.Capacity) != 0
			var yynn567 int
			if yyr567 || yy2arr567 {
				r.EncodeArrayStart(3)
			} else {
				yynn567 = 0
				for _, b := range yyq567 {
					if b {
						yynn567++
					}
				}
				r.EncodeMapStart(yynn567)
				yynn567 = 0
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq567[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq567[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq567[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym570 := z.EncBinary()
						_ = yym570
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq567[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym571 := z.EncBinary()
						_ = yym571
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq567[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq567[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym573 := z.DecBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct574 := r.ContainerType()
		if yyct574 == codecSelferValueTypeMap1234 {
			yyl574 := r.ReadMapStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl574, d)
			}
		} else if yyct574 == codecSelferValueTypeArray1234 {
			yyl574 := r.ReadArrayStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys575Slc
	var yyhl575 bool = l >= 0
	for yyj575 := 0; ; yyj575++ {
		if yyhl575 {
			if yyj575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys575Slc = r.DecodeBytes(yys575Slc, true, true)
		yys575 := string(yys575Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys575 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv577 := &x.AccessModes
				yym578 := z.DecBinary()
				_ = yym578
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv577), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv579 := &x.Capacity
				yyv579.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys575)
		} // end switch yys575
	} // end for yyj575
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj580 int
	var yyb580 bool
	var yyhl580 bool = l >= 0
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv582 := &x.AccessModes
		yym583 := z.DecBinary()
		_ = yym583
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv582), d)
		}
	}
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv584 := &x.Capacity
		yyv584.CodecDecodeSelf(d)
	}
	for {
		yyj580++
		if yyhl580 {
			yyb580 = yyj580 > l
		} else {
			yyb580 = r.CheckBreak()
		}
		if yyb580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym585 := z.EncBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym586 := z.DecBinary()
	_ = yym586
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym587 := z.EncBinary()
	_ = yym587
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym588 := z.DecBinary()
	_ = yym588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym589 := z.EncBinary()
	_ = yym589
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym590 := z.DecBinary()
	_ = yym590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym591 := z.EncBinary()
		_ = yym591
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep592 := !z.EncBinary()
			yy2arr592 := z.EncBasicHandle().StructToArray
			var yyq592 [1]bool
			_, _, _ = yysep592, yyq592, yy2arr592
			const yyr592 bool = false
			var yynn592 int
			if yyr592 || yy2arr592 {
				r.EncodeArrayStart(1)
			} else {
				yynn592 = 1
				for _, b := range yyq592 {
					if b {
						yynn592++
					}
				}
				r.EncodeMapStart(yynn592)
				yynn592 = 0
			}
			if yyr592 || yy2arr592 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym594 := z.EncBinary()
				_ = yym594
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym595 := z.EncBinary()
				_ = yym595
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr592 || yy2arr592 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct597 := r.ContainerType()
		if yyct597 == codecSelferValueTypeMap1234 {
			yyl597 := r.ReadMapStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl597, d)
			}
		} else if yyct597 == codecSelferValueTypeArray1234 {
			yyl597 := r.ReadArrayStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys598Slc
	var yyhl598 bool = l >= 0
	for yyj598 := 0; ; yyj598++ {
		if yyhl598 {
			if yyj598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys598Slc = r.DecodeBytes(yys598Slc, true, true)
		yys598 := string(yys598Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys598 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys598)
		} // end switch yys598
	} // end for yyj598
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj600 int
	var yyb600 bool
	var yyhl600 bool = l >= 0
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj600++
		if yyhl600 {
			yyb600 = yyj600 > l
		} else {
			yyb600 = r.CheckBreak()
		}
		if yyb600 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj600-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym602 := z.EncBinary()
		_ = yym602
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep603 := !z.EncBinary()
			yy2arr603 := z.EncBasicHandle().StructToArray
			var yyq603 [1]bool
			_, _, _ = yysep603, yyq603, yy2arr603
			const yyr603 bool = false
			yyq603[0] = x.Medium != ""
			var yynn603 int
			if yyr603 || yy2arr603 {
				r.EncodeArrayStart(1)
			} else {
				yynn603 = 0
				for _, b := range yyq603 {
					if b {
						yynn603++
					}
				}
				r.EncodeMapStart(yynn603)
				yynn603 = 0
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq603[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq603[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym605 := z.DecBinary()
	_ = yym605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct606 := r.ContainerType()
		if yyct606 == codecSelferValueTypeMap1234 {
			yyl606 := r.ReadMapStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl606, d)
			}
		} else if yyct606 == codecSelferValueTypeArray1234 {
			yyl606 := r.ReadArrayStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys607Slc
	var yyhl607 bool = l >= 0
	for yyj607 := 0; ; yyj607++ {
		if yyhl607 {
			if yyj607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys607Slc = r.DecodeBytes(yys607Slc, true, true)
		yys607 := string(yys607Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys607 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys607)
		} // end switch yys607
	} // end for yyj607
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj609 int
	var yyb609 bool
	var yyhl609 bool = l >= 0
	yyj609++
	if yyhl609 {
		yyb609 = yyj609 > l
	} else {
		yyb609 = r.CheckBreak()
	}
	if yyb609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj609++
		if yyhl609 {
			yyb609 = yyj609 > l
		} else {
			yyb609 = r.CheckBreak()
		}
		if yyb609 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj609-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym611 := z.EncBinary()
		_ = yym611
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep612 := !z.EncBinary()
			yy2arr612 := z.EncBasicHandle().StructToArray
			var yyq612 [3]bool
			_, _, _ = yysep612, yyq612, yy2arr612
			const yyr612 bool = false
			yyq612[2] = x.ReadOnly != false
			var yynn612 int
			if yyr612 || yy2arr612 {
				r.EncodeArrayStart(3)
			} else {
				yynn612 = 2
				for _, b := range yyq612 {
					if b {
						yynn612++
					}
				}
				r.EncodeMapStart(yynn612)
				yynn612 = 0
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym614 := z.EncBinary()
				_ = yym614
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym615 := z.EncBinary()
				_ = yym615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym617 := z.EncBinary()
				_ = yym617
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym618 := z.EncBinary()
				_ = yym618
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq612[2] {
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq612[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym622 := z.DecBinary()
	_ = yym622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct623 := r.ContainerType()
		if yyct623 == codecSelferValueTypeMap1234 {
			yyl623 := r.ReadMapStart()
			if yyl623 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl623, d)
			}
		} else if yyct623 == codecSelferValueTypeArray1234 {
			yyl623 := r.ReadArrayStart()
			if yyl623 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl623, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys624Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys624Slc
	var yyhl624 bool = l >= 0
	for yyj624 := 0; ; yyj624++ {
		if yyhl624 {
			if yyj624 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys624Slc = r.DecodeBytes(yys624Slc, true, true)
		yys624 := string(yys624Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys624 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys624)
		} // end switch yys624
	} // end for yyj624
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj628 int
	var yyb628 bool
	var yyhl628 bool = l >= 0
	yyj628++
	if yyhl628 {
		yyb628 = yyj628 > l
	} else {
		yyb628 = r.CheckBreak()
	}
	if yyb628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj628++
	if yyhl628 {
		yyb628 = yyj628 > l
	} else {
		yyb628 = r.CheckBreak()
	}
	if yyb628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj628++
	if yyhl628 {
		yyb628 = yyj628 > l
	} else {
		yyb628 = r.CheckBreak()
	}
	if yyb628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj628++
		if yyhl628 {
			yyb628 = yyj628 > l
		} else {
			yyb628 = r.CheckBreak()
		}
		if yyb628 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj628-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym632 := z.EncBinary()
		_ = yym632
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep633 := !z.EncBinary()
			yy2arr633 := z.EncBasicHandle().StructToArray
			var yyq633 [8]bool
			_, _, _ = yysep633, yyq633, yy2arr633
			const yyr633 bool = false
			yyq633[2] = x.FSType != ""
			yyq633[3] = x.RBDPool != ""
			yyq633[4] = x.RadosUser != ""
			yyq633[5] = x.Keyring != ""
			yyq633[6] = x.SecretRef != nil
			yyq633[7] = x.ReadOnly != false
			var yynn633 int
			if yyr633 || yy2arr633 {
				r.EncodeArrayStart(8)
			} else {
				yynn633 = 2
				for _, b := range yyq633 {
					if b {
						yynn633++
					}
				}
				r.EncodeMapStart(yynn633)
				yynn633 = 0
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym638 := z.EncBinary()
				_ = yym638
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym639 := z.EncBinary()
				_ = yym639
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq633[2] {
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq633[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq633[3] {
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq633[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq633[4] {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq633[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq633[5] {
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq633[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq633[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq633[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq633[7] {
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq633[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym656 := z.DecBinary()
	_ = yym656
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct657 := r.ContainerType()
		if yyct657 == codecSelferValueTypeMap1234 {
			yyl657 := r.ReadMapStart()
			if yyl657 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl657, d)
			}
		} else if yyct657 == codecSelferValueTypeArray1234 {
			yyl657 := r.ReadArrayStart()
			if yyl657 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl657, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys658Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys658Slc
	var yyhl658 bool = l >= 0
	for yyj658 := 0; ; yyj658++ {
		if yyhl658 {
			if yyj658 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys658Slc = r.DecodeBytes(yys658Slc, true, true)
		yys658 := string(yys658Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys658 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv659 := &x.CephMonitors
				yym660 := z.DecBinary()
				_ = yym660
				if false {
				} else {
					z.F.DecSliceStringX(yyv659, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys658)
		} // end switch yys658
	} // end for yyj658
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj668 int
	var yyb668 bool
	var yyhl668 bool = l >= 0
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv669 := &x.CephMonitors
		yym670 := z.DecBinary()
		_ = yym670
		if false {
		} else {
			z.F.DecSliceStringX(yyv669, false, d)
		}
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj668++
		if yyhl668 {
			yyb668 = yyj668 > l
		} else {
			yyb668 = r.CheckBreak()
		}
		if yyb668 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj668-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym678 := z.EncBinary()
		_ = yym678
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep679 := !z.EncBinary()
			yy2arr679 := z.EncBasicHandle().StructToArray
			var yyq679 [3]bool
			_, _, _ = yysep679, yyq679, yy2arr679
			const yyr679 bool = false
			yyq679[1] = x.FSType != ""
			yyq679[2] = x.ReadOnly != false
			var yynn679 int
			if yyr679 || yy2arr679 {
				r.EncodeArrayStart(3)
			} else {
				yynn679 = 1
				for _, b := range yyq679 {
					if b {
						yynn679++
					}
				}
				r.EncodeMapStart(yynn679)
				yynn679 = 0
			}
			if yyr679 || yy2arr679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym681 := z.EncBinary()
				_ = yym681
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym682 := z.EncBinary()
				_ = yym682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr679 || yy2arr679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq679[1] {
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq679[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym685 := z.EncBinary()
					_ = yym685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr679 || yy2arr679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq679[2] {
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq679[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr679 || yy2arr679 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym689 := z.DecBinary()
	_ = yym689
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct690 := r.ContainerType()
		if yyct690 == codecSelferValueTypeMap1234 {
			yyl690 := r.ReadMapStart()
			if yyl690 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl690, d)
			}
		} else if yyct690 == codecSelferValueTypeArray1234 {
			yyl690 := r.ReadArrayStart()
			if yyl690 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl690, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys691Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys691Slc
	var yyhl691 bool = l >= 0
	for yyj691 := 0; ; yyj691++ {
		if yyhl691 {
			if yyj691 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys691Slc = r.DecodeBytes(yys691Slc, true, true)
		yys691 := string(yys691Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys691 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys691)
		} // end switch yys691
	} // end for yyj691
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj695 int
	var yyb695 bool
	var yyhl695 bool = l >= 0
	yyj695++
	if yyhl695 {
		yyb695 = yyj695 > l
	} else {
		yyb695 = r.CheckBreak()
	}
	if yyb695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj695++
	if yyhl695 {
		yyb695 = yyj695 > l
	} else {
		yyb695 = r.CheckBreak()
	}
	if yyb695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj695++
	if yyhl695 {
		yyb695 = yyj695 > l
	} else {
		yyb695 = r.CheckBreak()
	}
	if yyb695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj695++
		if yyhl695 {
			yyb695 = yyj695 > l
		} else {
			yyb695 = r.CheckBreak()
		}
		if yyb695 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj695-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym699 := z.EncBinary()
		_ = yym699
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep700 := !z.EncBinary()
			yy2arr700 := z.EncBasicHandle().StructToArray
			var yyq700 [6]bool
			_, _, _ = yysep700, yyq700, yy2arr700
			const yyr700 bool = false
			yyq700[1] = x.Path != ""
			yyq700[2] = x.User != ""
			yyq700[3] = x.SecretFile != ""
			yyq700[4] = x.SecretRef != nil
			yyq700[5] = x.ReadOnly != false
			var yynn700 int
			if yyr700 || yy2arr700 {
				r.EncodeArrayStart(6)
			} else {
				yynn700 = 1
				for _, b := range yyq700 {
					if b {
						yynn700++
					}
				}
				r.EncodeMapStart(yynn700)
				yynn700 = 0
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym702 := z.EncBinary()
					_ = yym702
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq700[1] {
					yym705 := z.EncBinary()
					_ = yym705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq700[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym706 := z.EncBinary()
					_ = yym706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq700[2] {
					yym708 := z.EncBinary()
					_ = yym708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq700[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym709 := z.EncBinary()
					_ = yym709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq700[3] {
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq700[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym712 := z.EncBinary()
					_ = yym712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq700[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq700[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq700[5] {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq700[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym717 := z.DecBinary()
	_ = yym717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct718 := r.ContainerType()
		if yyct718 == codecSelferValueTypeMap1234 {
			yyl718 := r.ReadMapStart()
			if yyl718 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl718, d)
			}
		} else if yyct718 == codecSelferValueTypeArray1234 {
			yyl718 := r.ReadArrayStart()
			if yyl718 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl718, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys719Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys719Slc
	var yyhl719 bool = l >= 0
	for yyj719 := 0; ; yyj719++ {
		if yyhl719 {
			if yyj719 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys719Slc = r.DecodeBytes(yys719Slc, true, true)
		yys719 := string(yys719Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys719 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv720 := &x.Monitors
				yym721 := z.DecBinary()
				_ = yym721
				if false {
				} else {
					z.F.DecSliceStringX(yyv720, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys719)
		} // end switch yys719
	} // end for yyj719
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj727 int
	var yyb727 bool
	var yyhl727 bool = l >= 0
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv728 := &x.Monitors
		yym729 := z.DecBinary()
		_ = yym729
		if false {
		} else {
			z.F.DecSliceStringX(yyv728, false, d)
		}
	}
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj727++
		if yyhl727 {
			yyb727 = yyj727 > l
		} else {
			yyb727 = r.CheckBreak()
		}
		if yyb727 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj727-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym735 := z.EncBinary()
		_ = yym735
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep736 := !z.EncBinary()
			yy2arr736 := z.EncBasicHandle().StructToArray
			var yyq736 [2]bool
			_, _, _ = yysep736, yyq736, yy2arr736
			const yyr736 bool = false
			yyq736[0] = x.DatasetName != ""
			yyq736[1] = x.DatasetUUID != ""
			var yynn736 int
			if yyr736 || yy2arr736 {
				r.EncodeArrayStart(2)
			} else {
				yynn736 = 0
				for _, b := range yyq736 {
					if b {
						yynn736++
					}
				}
				r.EncodeMapStart(yynn736)
				yynn736 = 0
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[0] {
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq736[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[1] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq736[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetUUID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym743 := z.DecBinary()
	_ = yym743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct744 := r.ContainerType()
		if yyct744 == codecSelferValueTypeMap1234 {
			yyl744 := r.ReadMapStart()
			if yyl744 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl744, d)
			}
		} else if yyct744 == codecSelferValueTypeArray1234 {
			yyl744 := r.ReadArrayStart()
			if yyl744 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys745Slc
	var yyhl745 bool = l >= 0
	for yyj745 := 0; ; yyj745++ {
		if yyhl745 {
			if yyj745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys745Slc = r.DecodeBytes(yys745Slc, true, true)
		yys745 := string(yys745Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys745 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		case "datasetUUID":
			if r.TryDecodeAsNil() {
				x.DatasetUUID = ""
			} else {
				x.DatasetUUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys745)
		} // end switch yys745
	} // end for yyj745
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj748 int
	var yyb748 bool
	var yyhl748 bool = l >= 0
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetUUID = ""
	} else {
		x.DatasetUUID = string(r.DecodeString())
	}
	for {
		yyj748++
		if yyhl748 {
			yyb748 = yyj748 > l
		} else {
			yyb748 = r.CheckBreak()
		}
		if yyb748 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj748-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym751 := z.EncBinary()
	_ = yym751
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym752 := z.DecBinary()
	_ = yym752
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym753 := z.EncBinary()
	_ = yym753
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym754 := z.DecBinary()
	_ = yym754
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym755 := z.EncBinary()
		_ = yym755
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep756 := !z.EncBinary()
			yy2arr756 := z.EncBasicHandle().StructToArray
			var yyq756 [4]bool
			_, _, _ = yysep756, yyq756, yy2arr756
			const yyr756 bool = false
			yyq756[1] = x.FSType != ""
			yyq756[2] = x.Partition != 0
			yyq756[3] = x.ReadOnly != false
			var yynn756 int
			if yyr756 || yy2arr756 {
				r.EncodeArrayStart(4)
			} else {
				yynn756 = 1
				for _, b := range yyq756 {
					if b {
						yynn756++
					}
				}
				r.EncodeMapStart(yynn756)
				yynn756 = 0
			}
			if yyr756 || yy2arr756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym758 := z.EncBinary()
				_ = yym758
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr756 || yy2arr756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq756[1] {
					yym761 := z.EncBinary()
					_ = yym761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq756[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym762 := z.EncBinary()
					_ = yym762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr756 || yy2arr756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq756[2] {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq756[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr756 || yy2arr756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq756[3] {
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq756[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr756 || yy2arr756 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym769 := z.DecBinary()
	_ = yym769
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct770 := r.ContainerType()
		if yyct770 == codecSelferValueTypeMap1234 {
			yyl770 := r.ReadMapStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl770, d)
			}
		} else if yyct770 == codecSelferValueTypeArray1234 {
			yyl770 := r.ReadArrayStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl770, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys771Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys771Slc
	var yyhl771 bool = l >= 0
	for yyj771 := 0; ; yyj771++ {
		if yyhl771 {
			if yyj771 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys771Slc = r.DecodeBytes(yys771Slc, true, true)
		yys771 := string(yys771Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys771 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys771)
		} // end switch yys771
	} // end for yyj771
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj776 int
	var yyb776 bool
	var yyhl776 bool = l >= 0
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj776++
		if yyhl776 {
			yyb776 = yyj776 > l
		} else {
			yyb776 = r.CheckBreak()
		}
		if yyb776 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj776-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym781 := z.EncBinary()
		_ = yym781
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep782 := !z.EncBinary()
			yy2arr782 := z.EncBasicHandle().StructToArray
			var yyq782 [5]bool
			_, _, _ = yysep782, yyq782, yy2arr782
			const yyr782 bool = false
			yyq782[2] = x.ReadOnly != false
			yyq782[3] = x.User != ""
			yyq782[4] = x.Group != ""
			var yynn782 int
			if yyr782 || yy2arr782 {
				r.EncodeArrayStart(5)
			} else {
				yynn782 = 2
				for _, b := range yyq782 {
					if b {
						yynn782++
					}
				}
				r.EncodeMapStart(yynn782)
				yynn782 = 0
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym784 := z.EncBinary()
				_ = yym784
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym785 := z.EncBinary()
				_ = yym785
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym787 := z.EncBinary()
				_ = yym787
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym788 := z.EncBinary()
				_ = yym788
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq782[2] {
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq782[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq782[3] {
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq782[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym794 := z.EncBinary()
					_ = yym794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq782[4] {
					yym796 := z.EncBinary()
					_ = yym796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq782[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym798 := z.DecBinary()
	_ = yym798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct799 := r.ContainerType()
		if yyct799 == codecSelferValueTypeMap1234 {
			yyl799 := r.ReadMapStart()
			if yyl799 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl799, d)
			}
		} else if yyct799 == codecSelferValueTypeArray1234 {
			yyl799 := r.ReadArrayStart()
			if yyl799 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys800Slc
	var yyhl800 bool = l >= 0
	for yyj800 := 0; ; yyj800++ {
		if yyhl800 {
			if yyj800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys800Slc = r.DecodeBytes(yys800Slc, true, true)
		yys800 := string(yys800Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys800 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys800)
		} // end switch yys800
	} // end for yyj800
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj806 int
	var yyb806 bool
	var yyhl806 bool = l >= 0
	yyj806++
	if yyhl806 {
		yyb806 = yyj806 > l
	} else {
		yyb806 = r.CheckBreak()
	}
	if yyb806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj806++
	if yyhl806 {
		yyb806 = yyj806 > l
	} else {
		yyb806 = r.CheckBreak()
	}
	if yyb806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj806++
	if yyhl806 {
		yyb806 = yyj806 > l
	} else {
		yyb806 = r.CheckBreak()
	}
	if yyb806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj806++
	if yyhl806 {
		yyb806 = yyj806 > l
	} else {
		yyb806 = r.CheckBreak()
	}
	if yyb806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj806++
	if yyhl806 {
		yyb806 = yyj806 > l
	} else {
		yyb806 = r.CheckBreak()
	}
	if yyb806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj806++
		if yyhl806 {
			yyb806 = yyj806 > l
		} else {
			yyb806 = r.CheckBreak()
		}
		if yyb806 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj806-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym812 := z.EncBinary()
		_ = yym812
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep813 := !z.EncBinary()
			yy2arr813 := z.EncBasicHandle().StructToArray
			var yyq813 [5]bool
			_, _, _ = yysep813, yyq813, yy2arr813
			const yyr813 bool = false
			yyq813[1] = x.FSType != ""
			yyq813[2] = x.SecretRef != nil
			yyq813[3] = x.ReadOnly != false
			yyq813[4] = len(x.Options) != 0
			var yynn813 int
			if yyr813 || yy2arr813 {
				r.EncodeArrayStart(5)
			} else {
				yynn813 = 1
				for _, b := range yyq813 {
					if b {
						yynn813++
					}
				}
				r.EncodeMapStart(yynn813)
				yynn813 = 0
			}
			if yyr813 || yy2arr813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym815 := z.EncBinary()
				_ = yym815
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym816 := z.EncBinary()
				_ = yym816
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr813 || yy2arr813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq813[1] {
					yym818 := z.EncBinary()
					_ = yym818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq813[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr813 || yy2arr813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq813[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq813[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr813 || yy2arr813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq813[3] {
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq813[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr813 || yy2arr813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq813[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym825 := z.EncBinary()
						_ = yym825
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq813[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym826 := z.EncBinary()
						_ = yym826
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr813 || yy2arr813 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym827 := z.DecBinary()
	_ = yym827
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct828 := r.ContainerType()
		if yyct828 == codecSelferValueTypeMap1234 {
			yyl828 := r.ReadMapStart()
			if yyl828 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl828, d)
			}
		} else if yyct828 == codecSelferValueTypeArray1234 {
			yyl828 := r.ReadArrayStart()
			if yyl828 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl828, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys829Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys829Slc
	var yyhl829 bool = l >= 0
	for yyj829 := 0; ; yyj829++ {
		if yyhl829 {
			if yyj829 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys829Slc = r.DecodeBytes(yys829Slc, true, true)
		yys829 := string(yys829Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys829 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv834 := &x.Options
				yym835 := z.DecBinary()
				_ = yym835
				if false {
				} else {
					z.F.DecMapStringStringX(yyv834, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys829)
		} // end switch yys829
	} // end for yyj829
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj836 int
	var yyb836 bool
	var yyhl836 bool = l >= 0
	yyj836++
	if yyhl836 {
		yyb836 = yyj836 > l
	} else {
		yyb836 = r.CheckBreak()
	}
	if yyb836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj836++
	if yyhl836 {
		yyb836 = yyj836 > l
	} else {
		yyb836 = r.CheckBreak()
	}
	if yyb836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj836++
	if yyhl836 {
		yyb836 = yyj836 > l
	} else {
		yyb836 = r.CheckBreak()
	}
	if yyb836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj836++
	if yyhl836 {
		yyb836 = yyj836 > l
	} else {
		yyb836 = r.CheckBreak()
	}
	if yyb836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj836++
	if yyhl836 {
		yyb836 = yyj836 > l
	} else {
		yyb836 = r.CheckBreak()
	}
	if yyb836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv841 := &x.Options
		yym842 := z.DecBinary()
		_ = yym842
		if false {
		} else {
			z.F.DecMapStringStringX(yyv841, false, d)
		}
	}
	for {
		yyj836++
		if yyhl836 {
			yyb836 = yyj836 > l
		} else {
			yyb836 = r.CheckBreak()
		}
		if yyb836 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj836-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym843 := z.EncBinary()
		_ = yym843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep844 := !z.EncBinary()
			yy2arr844 := z.EncBasicHandle().StructToArray
			var yyq844 [4]bool
			_, _, _ = yysep844, yyq844, yy2arr844
			const yyr844 bool = false
			yyq844[1] = x.FSType != ""
			yyq844[2] = x.Partition != 0
			yyq844[3] = x.ReadOnly != false
			var yynn844 int
			if yyr844 || yy2arr844 {
				r.EncodeArrayStart(4)
			} else {
				yynn844 = 1
				for _, b := range yyq844 {
					if b {
						yynn844++
					}
				}
				r.EncodeMapStart(yynn844)
				yynn844 = 0
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym846 := z.EncBinary()
				_ = yym846
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym847 := z.EncBinary()
				_ = yym847
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq844[1] {
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq844[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym850 := z.EncBinary()
					_ = yym850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq844[2] {
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq844[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym853 := z.EncBinary()
					_ = yym853
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq844[3] {
					yym855 := z.EncBinary()
					_ = yym855
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq844[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym857 := z.DecBinary()
	_ = yym857
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct858 := r.ContainerType()
		if yyct858 == codecSelferValueTypeMap1234 {
			yyl858 := r.ReadMapStart()
			if yyl858 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl858, d)
			}
		} else if yyct858 == codecSelferValueTypeArray1234 {
			yyl858 := r.ReadArrayStart()
			if yyl858 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl858, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys859Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys859Slc
	var yyhl859 bool = l >= 0
	for yyj859 := 0; ; yyj859++ {
		if yyhl859 {
			if yyj859 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys859Slc = r.DecodeBytes(yys859Slc, true, true)
		yys859 := string(yys859Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys859 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys859)
		} // end switch yys859
	} // end for yyj859
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj864 int
	var yyb864 bool
	var yyhl864 bool = l >= 0
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj864++
		if yyhl864 {
			yyb864 = yyj864 > l
		} else {
			yyb864 = r.CheckBreak()
		}
		if yyb864 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj864-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym869 := z.EncBinary()
		_ = yym869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep870 := !z.EncBinary()
			yy2arr870 := z.EncBasicHandle().StructToArray
			var yyq870 [3]bool
			_, _, _ = yysep870, yyq870, yy2arr870
			const yyr870 bool = false
			yyq870[1] = x.Revision != ""
			yyq870[2] = x.Directory != ""
			var yynn870 int
			if yyr870 || yy2arr870 {
				r.EncodeArrayStart(3)
			} else {
				yynn870 = 1
				for _, b := range yyq870 {
					if b {
						yynn870++
					}
				}
				r.EncodeMapStart(yynn870)
				yynn870 = 0
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym872 := z.EncBinary()
				_ = yym872
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym873 := z.EncBinary()
				_ = yym873
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[1] {
					yym875 := z.EncBinary()
					_ = yym875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq870[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym876 := z.EncBinary()
					_ = yym876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[2] {
					yym878 := z.EncBinary()
					_ = yym878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq870[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym879 := z.EncBinary()
					_ = yym879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym880 := z.DecBinary()
	_ = yym880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct881 := r.ContainerType()
		if yyct881 == codecSelferValueTypeMap1234 {
			yyl881 := r.ReadMapStart()
			if yyl881 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl881, d)
			}
		} else if yyct881 == codecSelferValueTypeArray1234 {
			yyl881 := r.ReadArrayStart()
			if yyl881 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl881, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys882Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys882Slc
	var yyhl882 bool = l >= 0
	for yyj882 := 0; ; yyj882++ {
		if yyhl882 {
			if yyj882 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys882Slc = r.DecodeBytes(yys882Slc, true, true)
		yys882 := string(yys882Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys882 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys882)
		} // end switch yys882
	} // end for yyj882
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj886 int
	var yyb886 bool
	var yyhl886 bool = l >= 0
	yyj886++
	if yyhl886 {
		yyb886 = yyj886 > l
	} else {
		yyb886 = r.CheckBreak()
	}
	if yyb886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj886++
	if yyhl886 {
		yyb886 = yyj886 > l
	} else {
		yyb886 = r.CheckBreak()
	}
	if yyb886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj886++
	if yyhl886 {
		yyb886 = yyj886 > l
	} else {
		yyb886 = r.CheckBreak()
	}
	if yyb886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj886++
		if yyhl886 {
			yyb886 = yyj886 > l
		} else {
			yyb886 = r.CheckBreak()
		}
		if yyb886 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj886-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym890 := z.EncBinary()
		_ = yym890
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep891 := !z.EncBinary()
			yy2arr891 := z.EncBasicHandle().StructToArray
			var yyq891 [3]bool
			_, _, _ = yysep891, yyq891, yy2arr891
			const yyr891 bool = false
			yyq891[0] = x.SecretName != ""
			yyq891[1] = len(x.Items) != 0
			yyq891[2] = x.DefaultMode != nil
			var yynn891 int
			if yyr891 || yy2arr891 {
				r.EncodeArrayStart(3)
			} else {
				yynn891 = 0
				for _, b := range yyq891 {
					if b {
						yynn891++
					}
				}
				r.EncodeMapStart(yynn891)
				yynn891 = 0
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq891[0] {
					yym893 := z.EncBinary()
					_ = yym893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq891[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq891[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym896 := z.EncBinary()
						_ = yym896
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq891[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym897 := z.EncBinary()
						_ = yym897
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq891[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy899 := *x.DefaultMode
						yym900 := z.EncBinary()
						_ = yym900
						if false {
						} else {
							r.EncodeInt(int64(yy899))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq891[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy901 := *x.DefaultMode
						yym902 := z.EncBinary()
						_ = yym902
						if false {
						} else {
							r.EncodeInt(int64(yy901))
						}
					}
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym903 := z.DecBinary()
	_ = yym903
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct904 := r.ContainerType()
		if yyct904 == codecSelferValueTypeMap1234 {
			yyl904 := r.ReadMapStart()
			if yyl904 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl904, d)
			}
		} else if yyct904 == codecSelferValueTypeArray1234 {
			yyl904 := r.ReadArrayStart()
			if yyl904 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl904, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys905Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys905Slc
	var yyhl905 bool = l >= 0
	for yyj905 := 0; ; yyj905++ {
		if yyhl905 {
			if yyj905 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys905Slc = r.DecodeBytes(yys905Slc, true, true)
		yys905 := string(yys905Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys905 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv907 := &x.Items
				yym908 := z.DecBinary()
				_ = yym908
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv907), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym910 := z.DecBinary()
				_ = yym910
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys905)
		} // end switch yys905
	} // end for yyj905
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj911 int
	var yyb911 bool
	var yyhl911 bool = l >= 0
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv913 := &x.Items
		yym914 := z.DecBinary()
		_ = yym914
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv913), d)
		}
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym916 := z.DecBinary()
		_ = yym916
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj911++
		if yyhl911 {
			yyb911 = yyj911 > l
		} else {
			yyb911 = r.CheckBreak()
		}
		if yyb911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym917 := z.EncBinary()
		_ = yym917
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep918 := !z.EncBinary()
			yy2arr918 := z.EncBasicHandle().StructToArray
			var yyq918 [3]bool
			_, _, _ = yysep918, yyq918, yy2arr918
			const yyr918 bool = false
			yyq918[2] = x.ReadOnly != false
			var yynn918 int
			if yyr918 || yy2arr918 {
				r.EncodeArrayStart(3)
			} else {
				yynn918 = 2
				for _, b := range yyq918 {
					if b {
						yynn918++
					}
				}
				r.EncodeMapStart(yynn918)
				yynn918 = 0
			}
			if yyr918 || yy2arr918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym920 := z.EncBinary()
				_ = yym920
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym921 := z.EncBinary()
				_ = yym921
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr918 || yy2arr918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym923 := z.EncBinary()
				_ = yym923
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym924 := z.EncBinary()
				_ = yym924
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr918 || yy2arr918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq918[2] {
					yym926 := z.EncBinary()
					_ = yym926
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq918[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym927 := z.EncBinary()
					_ = yym927
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr918 || yy2arr918 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym928 := z.DecBinary()
	_ = yym928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct929 := r.ContainerType()
		if yyct929 == codecSelferValueTypeMap1234 {
			yyl929 := r.ReadMapStart()
			if yyl929 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl929, d)
			}
		} else if yyct929 == codecSelferValueTypeArray1234 {
			yyl929 := r.ReadArrayStart()
			if yyl929 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl929, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys930Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys930Slc
	var yyhl930 bool = l >= 0
	for yyj930 := 0; ; yyj930++ {
		if yyhl930 {
			if yyj930 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys930Slc = r.DecodeBytes(yys930Slc, true, true)
		yys930 := string(yys930Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys930 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys930)
		} // end switch yys930
	} // end for yyj930
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj934 int
	var yyb934 bool
	var yyhl934 bool = l >= 0
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj934++
		if yyhl934 {
			yyb934 = yyj934 > l
		} else {
			yyb934 = r.CheckBreak()
		}
		if yyb934 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj934-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym938 := z.EncBinary()
		_ = yym938
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep939 := !z.EncBinary()
			yy2arr939 := z.EncBasicHandle().StructToArray
			var yyq939 [6]bool
			_, _, _ = yysep939, yyq939, yy2arr939
			const yyr939 bool = false
			yyq939[3] = x.ISCSIInterface != ""
			yyq939[4] = x.FSType != ""
			yyq939[5] = x.ReadOnly != false
			var yynn939 int
			if yyr939 || yy2arr939 {
				r.EncodeArrayStart(6)
			} else {
				yynn939 = 3
				for _, b := range yyq939 {
					if b {
						yynn939++
					}
				}
				r.EncodeMapStart(yynn939)
				yynn939 = 0
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym941 := z.EncBinary()
				_ = yym941
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym942 := z.EncBinary()
				_ = yym942
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym945 := z.EncBinary()
				_ = yym945
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym947 := z.EncBinary()
				_ = yym947
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym948 := z.EncBinary()
				_ = yym948
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq939[3] {
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq939[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq939[4] {
					yym953 := z.EncBinary()
					_ = yym953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq939[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym954 := z.EncBinary()
					_ = yym954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq939[5] {
					yym956 := z.EncBinary()
					_ = yym956
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq939[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym957 := z.EncBinary()
					_ = yym957
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym958 := z.DecBinary()
	_ = yym958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct959 := r.ContainerType()
		if yyct959 == codecSelferValueTypeMap1234 {
			yyl959 := r.ReadMapStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl959, d)
			}
		} else if yyct959 == codecSelferValueTypeArray1234 {
			yyl959 := r.ReadArrayStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys960Slc
	var yyhl960 bool = l >= 0
	for yyj960 := 0; ; yyj960++ {
		if yyhl960 {
			if yyj960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys960Slc = r.DecodeBytes(yys960Slc, true, true)
		yys960 := string(yys960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys960 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys960)
		} // end switch yys960
	} // end for yyj960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj967 int
	var yyb967 bool
	var yyhl967 bool = l >= 0
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj967++
		if yyhl967 {
			yyb967 = yyj967 > l
		} else {
			yyb967 = r.CheckBreak()
		}
		if yyb967 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj967-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym974 := z.EncBinary()
		_ = yym974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep975 := !z.EncBinary()
			yy2arr975 := z.EncBasicHandle().StructToArray
			var yyq975 [4]bool
			_, _, _ = yysep975, yyq975, yy2arr975
			const yyr975 bool = false
			yyq975[2] = x.FSType != ""
			yyq975[3] = x.ReadOnly != false
			var yynn975 int
			if yyr975 || yy2arr975 {
				r.EncodeArrayStart(4)
			} else {
				yynn975 = 2
				for _, b := range yyq975 {
					if b {
						yynn975++
					}
				}
				r.EncodeMapStart(yynn975)
				yynn975 = 0
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym977 := z.EncBinary()
					_ = yym977
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy980 := *x.Lun
					yym981 := z.EncBinary()
					_ = yym981
					if false {
					} else {
						r.EncodeInt(int64(yy980))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy982 := *x.Lun
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else {
						r.EncodeInt(int64(yy982))
					}
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq975[2] {
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq975[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym986 := z.EncBinary()
					_ = yym986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq975[3] {
					yym988 := z.EncBinary()
					_ = yym988
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq975[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym989 := z.EncBinary()
					_ = yym989
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym990 := z.DecBinary()
	_ = yym990
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct991 := r.ContainerType()
		if yyct991 == codecSelferValueTypeMap1234 {
			yyl991 := r.ReadMapStart()
			if yyl991 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl991, d)
			}
		} else if yyct991 == codecSelferValueTypeArray1234 {
			yyl991 := r.ReadArrayStart()
			if yyl991 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl991, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys992Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys992Slc
	var yyhl992 bool = l >= 0
	for yyj992 := 0; ; yyj992++ {
		if yyhl992 {
			if yyj992 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys992Slc = r.DecodeBytes(yys992Slc, true, true)
		yys992 := string(yys992Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys992 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv993 := &x.TargetWWNs
				yym994 := z.DecBinary()
				_ = yym994
				if false {
				} else {
					z.F.DecSliceStringX(yyv993, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym996 := z.DecBinary()
				_ = yym996
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys992)
		} // end switch yys992
	} // end for yyj992
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj999 int
	var yyb999 bool
	var yyhl999 bool = l >= 0
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv1000 := &x.TargetWWNs
		yym1001 := z.DecBinary()
		_ = yym1001
		if false {
		} else {
			z.F.DecSliceStringX(yyv1000, false, d)
		}
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym1003 := z.DecBinary()
		_ = yym1003
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj999++
		if yyhl999 {
			yyb999 = yyj999 > l
		} else {
			yyb999 = r.CheckBreak()
		}
		if yyb999 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj999-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1006 := z.EncBinary()
		_ = yym1006
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1007 := !z.EncBinary()
			yy2arr1007 := z.EncBasicHandle().StructToArray
			var yyq1007 [3]bool
			_, _, _ = yysep1007, yyq1007, yy2arr1007
			const yyr1007 bool = false
			yyq1007[2] = x.ReadOnly != false
			var yynn1007 int
			if yyr1007 || yy2arr1007 {
				r.EncodeArrayStart(3)
			} else {
				yynn1007 = 2
				for _, b := range yyq1007 {
					if b {
						yynn1007++
					}
				}
				r.EncodeMapStart(yynn1007)
				yynn1007 = 0
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1009 := z.EncBinary()
				_ = yym1009
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1010 := z.EncBinary()
				_ = yym1010
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1012 := z.EncBinary()
				_ = yym1012
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1013 := z.EncBinary()
				_ = yym1013
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1007[2] {
					yym1015 := z.EncBinary()
					_ = yym1015
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1007[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1016 := z.EncBinary()
					_ = yym1016
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1017 := z.DecBinary()
	_ = yym1017
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1018 := r.ContainerType()
		if yyct1018 == codecSelferValueTypeMap1234 {
			yyl1018 := r.ReadMapStart()
			if yyl1018 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1018, d)
			}
		} else if yyct1018 == codecSelferValueTypeArray1234 {
			yyl1018 := r.ReadArrayStart()
			if yyl1018 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1018, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1019Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1019Slc
	var yyhl1019 bool = l >= 0
	for yyj1019 := 0; ; yyj1019++ {
		if yyhl1019 {
			if yyj1019 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1019Slc = r.DecodeBytes(yys1019Slc, true, true)
		yys1019 := string(yys1019Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1019 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1019)
		} // end switch yys1019
	} // end for yyj1019
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1023 int
	var yyb1023 bool
	var yyhl1023 bool = l >= 0
	yyj1023++
	if yyhl1023 {
		yyb1023 = yyj1023 > l
	} else {
		yyb1023 = r.CheckBreak()
	}
	if yyb1023 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1023++
	if yyhl1023 {
		yyb1023 = yyj1023 > l
	} else {
		yyb1023 = r.CheckBreak()
	}
	if yyb1023 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1023++
	if yyhl1023 {
		yyb1023 = yyj1023 > l
	} else {
		yyb1023 = r.CheckBreak()
	}
	if yyb1023 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1023++
		if yyhl1023 {
			yyb1023 = yyj1023 > l
		} else {
			yyb1023 = r.CheckBreak()
		}
		if yyb1023 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1023-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1027 := z.EncBinary()
		_ = yym1027
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1028 := !z.EncBinary()
			yy2arr1028 := z.EncBasicHandle().StructToArray
			var yyq1028 [2]bool
			_, _, _ = yysep1028, yyq1028, yy2arr1028
			const yyr1028 bool = false
			yyq1028[1] = x.FSType != ""
			var yynn1028 int
			if yyr1028 || yy2arr1028 {
				r.EncodeArrayStart(2)
			} else {
				yynn1028 = 1
				for _, b := range yyq1028 {
					if b {
						yynn1028++
					}
				}
				r.EncodeMapStart(yynn1028)
				yynn1028 = 0
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1030 := z.EncBinary()
				_ = yym1030
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1031 := z.EncBinary()
				_ = yym1031
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1028[1] {
					yym1033 := z.EncBinary()
					_ = yym1033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1028[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1034 := z.EncBinary()
					_ = yym1034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1035 := z.DecBinary()
	_ = yym1035
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1036 := r.ContainerType()
		if yyct1036 == codecSelferValueTypeMap1234 {
			yyl1036 := r.ReadMapStart()
			if yyl1036 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1036, d)
			}
		} else if yyct1036 == codecSelferValueTypeArray1234 {
			yyl1036 := r.ReadArrayStart()
			if yyl1036 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1036, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1037Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1037Slc
	var yyhl1037 bool = l >= 0
	for yyj1037 := 0; ; yyj1037++ {
		if yyhl1037 {
			if yyj1037 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1037Slc = r.DecodeBytes(yys1037Slc, true, true)
		yys1037 := string(yys1037Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1037 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1037)
		} // end switch yys1037
	} // end for yyj1037
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1040 int
	var yyb1040 bool
	var yyhl1040 bool = l >= 0
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1040++
		if yyhl1040 {
			yyb1040 = yyj1040 > l
		} else {
			yyb1040 = r.CheckBreak()
		}
		if yyb1040 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1040-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1043 := z.EncBinary()
	_ = yym1043
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1044 := z.DecBinary()
	_ = yym1044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1045 := z.EncBinary()
		_ = yym1045
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1046 := !z.EncBinary()
			yy2arr1046 := z.EncBasicHandle().StructToArray
			var yyq1046 [5]bool
			_, _, _ = yysep1046, yyq1046, yy2arr1046
			const yyr1046 bool = false
			yyq1046[2] = x.CachingMode != nil
			yyq1046[3] = x.FSType != nil
			yyq1046[4] = x.ReadOnly != nil
			var yynn1046 int
			if yyr1046 || yy2arr1046 {
				r.EncodeArrayStart(5)
			} else {
				yynn1046 = 2
				for _, b := range yyq1046 {
					if b {
						yynn1046++
					}
				}
				r.EncodeMapStart(yynn1046)
				yynn1046 = 0
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1048 := z.EncBinary()
				_ = yym1048
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1049 := z.EncBinary()
				_ = yym1049
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1051 := z.EncBinary()
				_ = yym1051
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1052 := z.EncBinary()
				_ = yym1052
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1046[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1054 := *x.CachingMode
						yy1054.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1046[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1055 := *x.CachingMode
						yy1055.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1046[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1057 := *x.FSType
						yym1058 := z.EncBinary()
						_ = yym1058
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1057))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1046[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1059 := *x.FSType
						yym1060 := z.EncBinary()
						_ = yym1060
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1059))
						}
					}
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1046[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1062 := *x.ReadOnly
						yym1063 := z.EncBinary()
						_ = yym1063
						if false {
						} else {
							r.EncodeBool(bool(yy1062))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1046[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1064 := *x.ReadOnly
						yym1065 := z.EncBinary()
						_ = yym1065
						if false {
						} else {
							r.EncodeBool(bool(yy1064))
						}
					}
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1066 := z.DecBinary()
	_ = yym1066
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1067 := r.ContainerType()
		if yyct1067 == codecSelferValueTypeMap1234 {
			yyl1067 := r.ReadMapStart()
			if yyl1067 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1067, d)
			}
		} else if yyct1067 == codecSelferValueTypeArray1234 {
			yyl1067 := r.ReadArrayStart()
			if yyl1067 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1067, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1068Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1068Slc
	var yyhl1068 bool = l >= 0
	for yyj1068 := 0; ; yyj1068++ {
		if yyhl1068 {
			if yyj1068 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1068Slc = r.DecodeBytes(yys1068Slc, true, true)
		yys1068 := string(yys1068Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1068 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1073 := z.DecBinary()
				_ = yym1073
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1075 := z.DecBinary()
				_ = yym1075
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1068)
		} // end switch yys1068
	} // end for yyj1068
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1076 int
	var yyb1076 bool
	var yyhl1076 bool = l >= 0
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1081 := z.DecBinary()
		_ = yym1081
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1083 := z.DecBinary()
		_ = yym1083
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1076++
		if yyhl1076 {
			yyb1076 = yyj1076 > l
		} else {
			yyb1076 = r.CheckBreak()
		}
		if yyb1076 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1076-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1084 := z.EncBinary()
		_ = yym1084
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1085 := !z.EncBinary()
			yy2arr1085 := z.EncBasicHandle().StructToArray
			var yyq1085 [3]bool
			_, _, _ = yysep1085, yyq1085, yy2arr1085
			const yyr1085 bool = false
			yyq1085[0] = x.Name != ""
			yyq1085[1] = len(x.Items) != 0
			yyq1085[2] = x.DefaultMode != nil
			var yynn1085 int
			if yyr1085 || yy2arr1085 {
				r.EncodeArrayStart(3)
			} else {
				yynn1085 = 0
				for _, b := range yyq1085 {
					if b {
						yynn1085++
					}
				}
				r.EncodeMapStart(yynn1085)
				yynn1085 = 0
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[0] {
					yym1087 := z.EncBinary()
					_ = yym1087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1085[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1090 := z.EncBinary()
						_ = yym1090
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1085[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1091 := z.EncBinary()
						_ = yym1091
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1093 := *x.DefaultMode
						yym1094 := z.EncBinary()
						_ = yym1094
						if false {
						} else {
							r.EncodeInt(int64(yy1093))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1085[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1095 := *x.DefaultMode
						yym1096 := z.EncBinary()
						_ = yym1096
						if false {
						} else {
							r.EncodeInt(int64(yy1095))
						}
					}
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1097 := z.DecBinary()
	_ = yym1097
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1098 := r.ContainerType()
		if yyct1098 == codecSelferValueTypeMap1234 {
			yyl1098 := r.ReadMapStart()
			if yyl1098 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1098, d)
			}
		} else if yyct1098 == codecSelferValueTypeArray1234 {
			yyl1098 := r.ReadArrayStart()
			if yyl1098 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1098, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1099Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1099Slc
	var yyhl1099 bool = l >= 0
	for yyj1099 := 0; ; yyj1099++ {
		if yyhl1099 {
			if yyj1099 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1099Slc = r.DecodeBytes(yys1099Slc, true, true)
		yys1099 := string(yys1099Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1099 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1101 := &x.Items
				yym1102 := z.DecBinary()
				_ = yym1102
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1101), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1104 := z.DecBinary()
				_ = yym1104
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1099)
		} // end switch yys1099
	} // end for yyj1099
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1105 int
	var yyb1105 bool
	var yyhl1105 bool = l >= 0
	yyj1105++
	if yyhl1105 {
		yyb1105 = yyj1105 > l
	} else {
		yyb1105 = r.CheckBreak()
	}
	if yyb1105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1105++
	if yyhl1105 {
		yyb1105 = yyj1105 > l
	} else {
		yyb1105 = r.CheckBreak()
	}
	if yyb1105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1107 := &x.Items
		yym1108 := z.DecBinary()
		_ = yym1108
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1107), d)
		}
	}
	yyj1105++
	if yyhl1105 {
		yyb1105 = yyj1105 > l
	} else {
		yyb1105 = r.CheckBreak()
	}
	if yyb1105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1110 := z.DecBinary()
		_ = yym1110
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1105++
		if yyhl1105 {
			yyb1105 = yyj1105 > l
		} else {
			yyb1105 = r.CheckBreak()
		}
		if yyb1105 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1105-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1111 := z.EncBinary()
		_ = yym1111
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1112 := !z.EncBinary()
			yy2arr1112 := z.EncBasicHandle().StructToArray
			var yyq1112 [3]bool
			_, _, _ = yysep1112, yyq1112, yy2arr1112
			const yyr1112 bool = false
			yyq1112[2] = x.Mode != nil
			var yynn1112 int
			if yyr1112 || yy2arr1112 {
				r.EncodeArrayStart(3)
			} else {
				yynn1112 = 2
				for _, b := range yyq1112 {
					if b {
						yynn1112++
					}
				}
				r.EncodeMapStart(yynn1112)
				yynn1112 = 0
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1114 := z.EncBinary()
				_ = yym1114
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1115 := z.EncBinary()
				_ = yym1115
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1117 := z.EncBinary()
				_ = yym1117
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1118 := z.EncBinary()
				_ = yym1118
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1112[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1120 := *x.Mode
						yym1121 := z.EncBinary()
						_ = yym1121
						if false {
						} else {
							r.EncodeInt(int64(yy1120))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1112[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1122 := *x.Mode
						yym1123 := z.EncBinary()
						_ = yym1123
						if false {
						} else {
							r.EncodeInt(int64(yy1122))
						}
					}
				}
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1124 := z.DecBinary()
	_ = yym1124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1125 := r.ContainerType()
		if yyct1125 == codecSelferValueTypeMap1234 {
			yyl1125 := r.ReadMapStart()
			if yyl1125 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1125, d)
			}
		} else if yyct1125 == codecSelferValueTypeArray1234 {
			yyl1125 := r.ReadArrayStart()
			if yyl1125 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1126Slc
	var yyhl1126 bool = l >= 0
	for yyj1126 := 0; ; yyj1126++ {
		if yyhl1126 {
			if yyj1126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1126Slc = r.DecodeBytes(yys1126Slc, true, true)
		yys1126 := string(yys1126Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1126 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1130 := z.DecBinary()
				_ = yym1130
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1126)
		} // end switch yys1126
	} // end for yyj1126
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1131 int
	var yyb1131 bool
	var yyhl1131 bool = l >= 0
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1135 := z.DecBinary()
		_ = yym1135
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1131++
		if yyhl1131 {
			yyb1131 = yyj1131 > l
		} else {
			yyb1131 = r.CheckBreak()
		}
		if yyb1131 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1131-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1136 := z.EncBinary()
		_ = yym1136
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1137 := !z.EncBinary()
			yy2arr1137 := z.EncBasicHandle().StructToArray
			var yyq1137 [5]bool
			_, _, _ = yysep1137, yyq1137, yy2arr1137
			const yyr1137 bool = false
			yyq1137[0] = x.Name != ""
			yyq1137[1] = x.HostPort != 0
			yyq1137[3] = x.Protocol != ""
			yyq1137[4] = x.HostIP != ""
			var yynn1137 int
			if yyr1137 || yy2arr1137 {
				r.EncodeArrayStart(5)
			} else {
				yynn1137 = 1
				for _, b := range yyq1137 {
					if b {
						yynn1137++
					}
				}
				r.EncodeMapStart(yynn1137)
				yynn1137 = 0
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1137[0] {
					yym1139 := z.EncBinary()
					_ = yym1139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1137[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1140 := z.EncBinary()
					_ = yym1140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1137[1] {
					yym1142 := z.EncBinary()
					_ = yym1142
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1137[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1143 := z.EncBinary()
					_ = yym1143
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1145 := z.EncBinary()
				_ = yym1145
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1146 := z.EncBinary()
				_ = yym1146
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1137[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1137[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1137[4] {
					yym1149 := z.EncBinary()
					_ = yym1149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1137[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1150 := z.EncBinary()
					_ = yym1150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1151 := z.DecBinary()
	_ = yym1151
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1152 := r.ContainerType()
		if yyct1152 == codecSelferValueTypeMap1234 {
			yyl1152 := r.ReadMapStart()
			if yyl1152 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1152, d)
			}
		} else if yyct1152 == codecSelferValueTypeArray1234 {
			yyl1152 := r.ReadArrayStart()
			if yyl1152 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1152, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1153Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1153Slc
	var yyhl1153 bool = l >= 0
	for yyj1153 := 0; ; yyj1153++ {
		if yyhl1153 {
			if yyj1153 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1153Slc = r.DecodeBytes(yys1153Slc, true, true)
		yys1153 := string(yys1153Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1153 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1153)
		} // end switch yys1153
	} // end for yyj1153
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1159 int
	var yyb1159 bool
	var yyhl1159 bool = l >= 0
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1159++
		if yyhl1159 {
			yyb1159 = yyj1159 > l
		} else {
			yyb1159 = r.CheckBreak()
		}
		if yyb1159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1165 := z.EncBinary()
		_ = yym1165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1166 := !z.EncBinary()
			yy2arr1166 := z.EncBasicHandle().StructToArray
			var yyq1166 [4]bool
			_, _, _ = yysep1166, yyq1166, yy2arr1166
			const yyr1166 bool = false
			yyq1166[1] = x.ReadOnly != false
			yyq1166[3] = x.SubPath != ""
			var yynn1166 int
			if yyr1166 || yy2arr1166 {
				r.EncodeArrayStart(4)
			} else {
				yynn1166 = 2
				for _, b := range yyq1166 {
					if b {
						yynn1166++
					}
				}
				r.EncodeMapStart(yynn1166)
				yynn1166 = 0
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1168 := z.EncBinary()
				_ = yym1168
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1169 := z.EncBinary()
				_ = yym1169
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1166[1] {
					yym1171 := z.EncBinary()
					_ = yym1171
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1166[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1172 := z.EncBinary()
					_ = yym1172
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1174 := z.EncBinary()
				_ = yym1174
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1175 := z.EncBinary()
				_ = yym1175
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1166[3] {
					yym1177 := z.EncBinary()
					_ = yym1177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1166[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1178 := z.EncBinary()
					_ = yym1178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1179 := z.DecBinary()
	_ = yym1179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1180 := r.ContainerType()
		if yyct1180 == codecSelferValueTypeMap1234 {
			yyl1180 := r.ReadMapStart()
			if yyl1180 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1180, d)
			}
		} else if yyct1180 == codecSelferValueTypeArray1234 {
			yyl1180 := r.ReadArrayStart()
			if yyl1180 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1180, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1181Slc
	var yyhl1181 bool = l >= 0
	for yyj1181 := 0; ; yyj1181++ {
		if yyhl1181 {
			if yyj1181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1181Slc = r.DecodeBytes(yys1181Slc, true, true)
		yys1181 := string(yys1181Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1181 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1181)
		} // end switch yys1181
	} // end for yyj1181
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1186 int
	var yyb1186 bool
	var yyhl1186 bool = l >= 0
	yyj1186++
	if yyhl1186 {
		yyb1186 = yyj1186 > l
	} else {
		yyb1186 = r.CheckBreak()
	}
	if yyb1186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1186++
	if yyhl1186 {
		yyb1186 = yyj1186 > l
	} else {
		yyb1186 = r.CheckBreak()
	}
	if yyb1186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1186++
	if yyhl1186 {
		yyb1186 = yyj1186 > l
	} else {
		yyb1186 = r.CheckBreak()
	}
	if yyb1186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1186++
	if yyhl1186 {
		yyb1186 = yyj1186 > l
	} else {
		yyb1186 = r.CheckBreak()
	}
	if yyb1186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1186++
		if yyhl1186 {
			yyb1186 = yyj1186 > l
		} else {
			yyb1186 = r.CheckBreak()
		}
		if yyb1186 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1186-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1191 := z.EncBinary()
		_ = yym1191
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1192 := !z.EncBinary()
			yy2arr1192 := z.EncBasicHandle().StructToArray
			var yyq1192 [3]bool
			_, _, _ = yysep1192, yyq1192, yy2arr1192
			const yyr1192 bool = false
			yyq1192[1] = x.Value != ""
			yyq1192[2] = x.ValueFrom != nil
			var yynn1192 int
			if yyr1192 || yy2arr1192 {
				r.EncodeArrayStart(3)
			} else {
				yynn1192 = 1
				for _, b := range yyq1192 {
					if b {
						yynn1192++
					}
				}
				r.EncodeMapStart(yynn1192)
				yynn1192 = 0
			}
			if yyr1192 || yy2arr1192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1194 := z.EncBinary()
				_ = yym1194
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1195 := z.EncBinary()
				_ = yym1195
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1192 || yy2arr1192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1192[1] {
					yym1197 := z.EncBinary()
					_ = yym1197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1192[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1198 := z.EncBinary()
					_ = yym1198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1192 || yy2arr1192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1192[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1192[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1192 || yy2arr1192 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1200 := z.DecBinary()
	_ = yym1200
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1201 := r.ContainerType()
		if yyct1201 == codecSelferValueTypeMap1234 {
			yyl1201 := r.ReadMapStart()
			if yyl1201 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1201, d)
			}
		} else if yyct1201 == codecSelferValueTypeArray1234 {
			yyl1201 := r.ReadArrayStart()
			if yyl1201 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1201, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1202Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1202Slc
	var yyhl1202 bool = l >= 0
	for yyj1202 := 0; ; yyj1202++ {
		if yyhl1202 {
			if yyj1202 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1202Slc = r.DecodeBytes(yys1202Slc, true, true)
		yys1202 := string(yys1202Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1202 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1202)
		} // end switch yys1202
	} // end for yyj1202
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1206 int
	var yyb1206 bool
	var yyhl1206 bool = l >= 0
	yyj1206++
	if yyhl1206 {
		yyb1206 = yyj1206 > l
	} else {
		yyb1206 = r.CheckBreak()
	}
	if yyb1206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1206++
	if yyhl1206 {
		yyb1206 = yyj1206 > l
	} else {
		yyb1206 = r.CheckBreak()
	}
	if yyb1206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1206++
	if yyhl1206 {
		yyb1206 = yyj1206 > l
	} else {
		yyb1206 = r.CheckBreak()
	}
	if yyb1206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1206++
		if yyhl1206 {
			yyb1206 = yyj1206 > l
		} else {
			yyb1206 = r.CheckBreak()
		}
		if yyb1206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1210 := z.EncBinary()
		_ = yym1210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1211 := !z.EncBinary()
			yy2arr1211 := z.EncBasicHandle().StructToArray
			var yyq1211 [4]bool
			_, _, _ = yysep1211, yyq1211, yy2arr1211
			const yyr1211 bool = false
			yyq1211[0] = x.FieldRef != nil
			yyq1211[1] = x.ResourceFieldRef != nil
			yyq1211[2] = x.ConfigMapKeyRef != nil
			yyq1211[3] = x.SecretKeyRef != nil
			var yynn1211 int
			if yyr1211 || yy2arr1211 {
				r.EncodeArrayStart(4)
			} else {
				yynn1211 = 0
				for _, b := range yyq1211 {
					if b {
						yynn1211++
					}
				}
				r.EncodeMapStart(yynn1211)
				yynn1211 = 0
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1216 := z.DecBinary()
	_ = yym1216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1217 := r.ContainerType()
		if yyct1217 == codecSelferValueTypeMap1234 {
			yyl1217 := r.ReadMapStart()
			if yyl1217 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1217, d)
			}
		} else if yyct1217 == codecSelferValueTypeArray1234 {
			yyl1217 := r.ReadArrayStart()
			if yyl1217 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1217, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1218Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1218Slc
	var yyhl1218 bool = l >= 0
	for yyj1218 := 0; ; yyj1218++ {
		if yyhl1218 {
			if yyj1218 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1218Slc = r.DecodeBytes(yys1218Slc, true, true)
		yys1218 := string(yys1218Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1218 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1218)
		} // end switch yys1218
	} // end for yyj1218
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1223 int
	var yyb1223 bool
	var yyhl1223 bool = l >= 0
	yyj1223++
	if yyhl1223 {
		yyb1223 = yyj1223 > l
	} else {
		yyb1223 = r.CheckBreak()
	}
	if yyb1223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1223++
	if yyhl1223 {
		yyb1223 = yyj1223 > l
	} else {
		yyb1223 = r.CheckBreak()
	}
	if yyb1223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1223++
	if yyhl1223 {
		yyb1223 = yyj1223 > l
	} else {
		yyb1223 = r.CheckBreak()
	}
	if yyb1223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1223++
	if yyhl1223 {
		yyb1223 = yyj1223 > l
	} else {
		yyb1223 = r.CheckBreak()
	}
	if yyb1223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1223++
		if yyhl1223 {
			yyb1223 = yyj1223 > l
		} else {
			yyb1223 = r.CheckBreak()
		}
		if yyb1223 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1223-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1228 := z.EncBinary()
		_ = yym1228
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1229 := !z.EncBinary()
			yy2arr1229 := z.EncBasicHandle().StructToArray
			var yyq1229 [2]bool
			_, _, _ = yysep1229, yyq1229, yy2arr1229
			const yyr1229 bool = false
			yyq1229[0] = x.APIVersion != ""
			var yynn1229 int
			if yyr1229 || yy2arr1229 {
				r.EncodeArrayStart(2)
			} else {
				yynn1229 = 1
				for _, b := range yyq1229 {
					if b {
						yynn1229++
					}
				}
				r.EncodeMapStart(yynn1229)
				yynn1229 = 0
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1229[0] {
					yym1231 := z.EncBinary()
					_ = yym1231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1229[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1232 := z.EncBinary()
					_ = yym1232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1234 := z.EncBinary()
				_ = yym1234
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1235 := z.EncBinary()
				_ = yym1235
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1236 := z.DecBinary()
	_ = yym1236
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1237 := r.ContainerType()
		if yyct1237 == codecSelferValueTypeMap1234 {
			yyl1237 := r.ReadMapStart()
			if yyl1237 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1237, d)
			}
		} else if yyct1237 == codecSelferValueTypeArray1234 {
			yyl1237 := r.ReadArrayStart()
			if yyl1237 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1237, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1238Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1238Slc
	var yyhl1238 bool = l >= 0
	for yyj1238 := 0; ; yyj1238++ {
		if yyhl1238 {
			if yyj1238 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1238Slc = r.DecodeBytes(yys1238Slc, true, true)
		yys1238 := string(yys1238Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1238 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1238)
		} // end switch yys1238
	} // end for yyj1238
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1241 int
	var yyb1241 bool
	var yyhl1241 bool = l >= 0
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1241++
		if yyhl1241 {
			yyb1241 = yyj1241 > l
		} else {
			yyb1241 = r.CheckBreak()
		}
		if yyb1241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1244 := z.EncBinary()
		_ = yym1244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1245 := !z.EncBinary()
			yy2arr1245 := z.EncBasicHandle().StructToArray
			var yyq1245 [3]bool
			_, _, _ = yysep1245, yyq1245, yy2arr1245
			const yyr1245 bool = false
			yyq1245[0] = x.ContainerName != ""
			yyq1245[2] = true
			var yynn1245 int
			if yyr1245 || yy2arr1245 {
				r.EncodeArrayStart(3)
			} else {
				yynn1245 = 1
				for _, b := range yyq1245 {
					if b {
						yynn1245++
					}
				}
				r.EncodeMapStart(yynn1245)
				yynn1245 = 0
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1245[0] {
					yym1247 := z.EncBinary()
					_ = yym1247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1245[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1248 := z.EncBinary()
					_ = yym1248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1250 := z.EncBinary()
				_ = yym1250
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1251 := z.EncBinary()
				_ = yym1251
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1245[2] {
					yy1253 := &x.Divisor
					yym1254 := z.EncBinary()
					_ = yym1254
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1253) {
					} else if !yym1254 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1253)
					} else {
						z.EncFallback(yy1253)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1245[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1255 := &x.Divisor
					yym1256 := z.EncBinary()
					_ = yym1256
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1255) {
					} else if !yym1256 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1255)
					} else {
						z.EncFallback(yy1255)
					}
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1257 := z.DecBinary()
	_ = yym1257
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1258 := r.ContainerType()
		if yyct1258 == codecSelferValueTypeMap1234 {
			yyl1258 := r.ReadMapStart()
			if yyl1258 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1258, d)
			}
		} else if yyct1258 == codecSelferValueTypeArray1234 {
			yyl1258 := r.ReadArrayStart()
			if yyl1258 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1258, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1259Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1259Slc
	var yyhl1259 bool = l >= 0
	for yyj1259 := 0; ; yyj1259++ {
		if yyhl1259 {
			if yyj1259 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1259Slc = r.DecodeBytes(yys1259Slc, true, true)
		yys1259 := string(yys1259Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1259 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1262 := &x.Divisor
				yym1263 := z.DecBinary()
				_ = yym1263
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1262) {
				} else if !yym1263 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1262)
				} else {
					z.DecFallback(yyv1262, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1259)
		} // end switch yys1259
	} // end for yyj1259
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1264 int
	var yyb1264 bool
	var yyhl1264 bool = l >= 0
	yyj1264++
	if yyhl1264 {
		yyb1264 = yyj1264 > l
	} else {
		yyb1264 = r.CheckBreak()
	}
	if yyb1264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1264++
	if yyhl1264 {
		yyb1264 = yyj1264 > l
	} else {
		yyb1264 = r.CheckBreak()
	}
	if yyb1264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1264++
	if yyhl1264 {
		yyb1264 = yyj1264 > l
	} else {
		yyb1264 = r.CheckBreak()
	}
	if yyb1264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1267 := &x.Divisor
		yym1268 := z.DecBinary()
		_ = yym1268
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1267) {
		} else if !yym1268 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1267)
		} else {
			z.DecFallback(yyv1267, false)
		}
	}
	for {
		yyj1264++
		if yyhl1264 {
			yyb1264 = yyj1264 > l
		} else {
			yyb1264 = r.CheckBreak()
		}
		if yyb1264 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1264-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1269 := z.EncBinary()
		_ = yym1269
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1270 := !z.EncBinary()
			yy2arr1270 := z.EncBasicHandle().StructToArray
			var yyq1270 [2]bool
			_, _, _ = yysep1270, yyq1270, yy2arr1270
			const yyr1270 bool = false
			yyq1270[0] = x.Name != ""
			var yynn1270 int
			if yyr1270 || yy2arr1270 {
				r.EncodeArrayStart(2)
			} else {
				yynn1270 = 1
				for _, b := range yyq1270 {
					if b {
						yynn1270++
					}
				}
				r.EncodeMapStart(yynn1270)
				yynn1270 = 0
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1270[0] {
					yym1272 := z.EncBinary()
					_ = yym1272
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1270[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1273 := z.EncBinary()
					_ = yym1273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1275 := z.EncBinary()
				_ = yym1275
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1276 := z.EncBinary()
				_ = yym1276
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1277 := z.DecBinary()
	_ = yym1277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1278 := r.ContainerType()
		if yyct1278 == codecSelferValueTypeMap1234 {
			yyl1278 := r.ReadMapStart()
			if yyl1278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1278, d)
			}
		} else if yyct1278 == codecSelferValueTypeArray1234 {
			yyl1278 := r.ReadArrayStart()
			if yyl1278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1279Slc
	var yyhl1279 bool = l >= 0
	for yyj1279 := 0; ; yyj1279++ {
		if yyhl1279 {
			if yyj1279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1279Slc = r.DecodeBytes(yys1279Slc, true, true)
		yys1279 := string(yys1279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1279 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1279)
		} // end switch yys1279
	} // end for yyj1279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1282 int
	var yyb1282 bool
	var yyhl1282 bool = l >= 0
	yyj1282++
	if yyhl1282 {
		yyb1282 = yyj1282 > l
	} else {
		yyb1282 = r.CheckBreak()
	}
	if yyb1282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1282++
	if yyhl1282 {
		yyb1282 = yyj1282 > l
	} else {
		yyb1282 = r.CheckBreak()
	}
	if yyb1282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1282++
		if yyhl1282 {
			yyb1282 = yyj1282 > l
		} else {
			yyb1282 = r.CheckBreak()
		}
		if yyb1282 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1282-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1285 := z.EncBinary()
		_ = yym1285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1286 := !z.EncBinary()
			yy2arr1286 := z.EncBasicHandle().StructToArray
			var yyq1286 [2]bool
			_, _, _ = yysep1286, yyq1286, yy2arr1286
			const yyr1286 bool = false
			yyq1286[0] = x.Name != ""
			var yynn1286 int
			if yyr1286 || yy2arr1286 {
				r.EncodeArrayStart(2)
			} else {
				yynn1286 = 1
				for _, b := range yyq1286 {
					if b {
						yynn1286++
					}
				}
				r.EncodeMapStart(yynn1286)
				yynn1286 = 0
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1286[0] {
					yym1288 := z.EncBinary()
					_ = yym1288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1286[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1289 := z.EncBinary()
					_ = yym1289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1291 := z.EncBinary()
				_ = yym1291
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1292 := z.EncBinary()
				_ = yym1292
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1293 := z.DecBinary()
	_ = yym1293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1294 := r.ContainerType()
		if yyct1294 == codecSelferValueTypeMap1234 {
			yyl1294 := r.ReadMapStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1294, d)
			}
		} else if yyct1294 == codecSelferValueTypeArray1234 {
			yyl1294 := r.ReadArrayStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1295Slc
	var yyhl1295 bool = l >= 0
	for yyj1295 := 0; ; yyj1295++ {
		if yyhl1295 {
			if yyj1295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1295Slc = r.DecodeBytes(yys1295Slc, true, true)
		yys1295 := string(yys1295Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1295 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1295)
		} // end switch yys1295
	} // end for yyj1295
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1298 int
	var yyb1298 bool
	var yyhl1298 bool = l >= 0
	yyj1298++
	if yyhl1298 {
		yyb1298 = yyj1298 > l
	} else {
		yyb1298 = r.CheckBreak()
	}
	if yyb1298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1298++
	if yyhl1298 {
		yyb1298 = yyj1298 > l
	} else {
		yyb1298 = r.CheckBreak()
	}
	if yyb1298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1298++
		if yyhl1298 {
			yyb1298 = yyj1298 > l
		} else {
			yyb1298 = r.CheckBreak()
		}
		if yyb1298 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1298-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1301 := z.EncBinary()
		_ = yym1301
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1302 := !z.EncBinary()
			yy2arr1302 := z.EncBasicHandle().StructToArray
			var yyq1302 [2]bool
			_, _, _ = yysep1302, yyq1302, yy2arr1302
			const yyr1302 bool = false
			var yynn1302 int
			if yyr1302 || yy2arr1302 {
				r.EncodeArrayStart(2)
			} else {
				yynn1302 = 2
				for _, b := range yyq1302 {
					if b {
						yynn1302++
					}
				}
				r.EncodeMapStart(yynn1302)
				yynn1302 = 0
			}
			if yyr1302 || yy2arr1302 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1304 := z.EncBinary()
				_ = yym1304
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1305 := z.EncBinary()
				_ = yym1305
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1302 || yy2arr1302 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1307 := z.EncBinary()
				_ = yym1307
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1308 := z.EncBinary()
				_ = yym1308
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1302 || yy2arr1302 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1309 := z.DecBinary()
	_ = yym1309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1310 := r.ContainerType()
		if yyct1310 == codecSelferValueTypeMap1234 {
			yyl1310 := r.ReadMapStart()
			if yyl1310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1310, d)
			}
		} else if yyct1310 == codecSelferValueTypeArray1234 {
			yyl1310 := r.ReadArrayStart()
			if yyl1310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1311Slc
	var yyhl1311 bool = l >= 0
	for yyj1311 := 0; ; yyj1311++ {
		if yyhl1311 {
			if yyj1311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1311Slc = r.DecodeBytes(yys1311Slc, true, true)
		yys1311 := string(yys1311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1311 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1311)
		} // end switch yys1311
	} // end for yyj1311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1314 int
	var yyb1314 bool
	var yyhl1314 bool = l >= 0
	yyj1314++
	if yyhl1314 {
		yyb1314 = yyj1314 > l
	} else {
		yyb1314 = r.CheckBreak()
	}
	if yyb1314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1314++
	if yyhl1314 {
		yyb1314 = yyj1314 > l
	} else {
		yyb1314 = r.CheckBreak()
	}
	if yyb1314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1314++
		if yyhl1314 {
			yyb1314 = yyj1314 > l
		} else {
			yyb1314 = r.CheckBreak()
		}
		if yyb1314 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1314-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1317 := z.EncBinary()
		_ = yym1317
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1318 := !z.EncBinary()
			yy2arr1318 := z.EncBasicHandle().StructToArray
			var yyq1318 [5]bool
			_, _, _ = yysep1318, yyq1318, yy2arr1318
			const yyr1318 bool = false
			yyq1318[0] = x.Path != ""
			yyq1318[2] = x.Host != ""
			yyq1318[3] = x.Scheme != ""
			yyq1318[4] = len(x.HTTPHeaders) != 0
			var yynn1318 int
			if yyr1318 || yy2arr1318 {
				r.EncodeArrayStart(5)
			} else {
				yynn1318 = 1
				for _, b := range yyq1318 {
					if b {
						yynn1318++
					}
				}
				r.EncodeMapStart(yynn1318)
				yynn1318 = 0
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[0] {
					yym1320 := z.EncBinary()
					_ = yym1320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1318[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1321 := z.EncBinary()
					_ = yym1321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1323 := &x.Port
				yym1324 := z.EncBinary()
				_ = yym1324
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1323) {
				} else if !yym1324 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1323)
				} else {
					z.EncFallback(yy1323)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1325 := &x.Port
				yym1326 := z.EncBinary()
				_ = yym1326
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1325) {
				} else if !yym1326 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1325)
				} else {
					z.EncFallback(yy1325)
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[2] {
					yym1328 := z.EncBinary()
					_ = yym1328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1318[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1329 := z.EncBinary()
					_ = yym1329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1318[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1332 := z.EncBinary()
						_ = yym1332
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1318[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1333 := z.EncBinary()
						_ = yym1333
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1334 := z.DecBinary()
	_ = yym1334
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1335 := r.ContainerType()
		if yyct1335 == codecSelferValueTypeMap1234 {
			yyl1335 := r.ReadMapStart()
			if yyl1335 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1335, d)
			}
		} else if yyct1335 == codecSelferValueTypeArray1234 {
			yyl1335 := r.ReadArrayStart()
			if yyl1335 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1335, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1336Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1336Slc
	var yyhl1336 bool = l >= 0
	for yyj1336 := 0; ; yyj1336++ {
		if yyhl1336 {
			if yyj1336 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1336Slc = r.DecodeBytes(yys1336Slc, true, true)
		yys1336 := string(yys1336Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1336 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1338 := &x.Port
				yym1339 := z.DecBinary()
				_ = yym1339
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1338) {
				} else if !yym1339 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1338)
				} else {
					z.DecFallback(yyv1338, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1342 := &x.HTTPHeaders
				yym1343 := z.DecBinary()
				_ = yym1343
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1342), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1336)
		} // end switch yys1336
	} // end for yyj1336
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1344 int
	var yyb1344 bool
	var yyhl1344 bool = l >= 0
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1346 := &x.Port
		yym1347 := z.DecBinary()
		_ = yym1347
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1346) {
		} else if !yym1347 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1346)
		} else {
			z.DecFallback(yyv1346, false)
		}
	}
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1350 := &x.HTTPHeaders
		yym1351 := z.DecBinary()
		_ = yym1351
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1350), d)
		}
	}
	for {
		yyj1344++
		if yyhl1344 {
			yyb1344 = yyj1344 > l
		} else {
			yyb1344 = r.CheckBreak()
		}
		if yyb1344 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1344-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1352 := z.EncBinary()
	_ = yym1352
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1353 := z.DecBinary()
	_ = yym1353
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1354 := z.EncBinary()
		_ = yym1354
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1355 := !z.EncBinary()
			yy2arr1355 := z.EncBasicHandle().StructToArray
			var yyq1355 [1]bool
			_, _, _ = yysep1355, yyq1355, yy2arr1355
			const yyr1355 bool = false
			var yynn1355 int
			if yyr1355 || yy2arr1355 {
				r.EncodeArrayStart(1)
			} else {
				yynn1355 = 1
				for _, b := range yyq1355 {
					if b {
						yynn1355++
					}
				}
				r.EncodeMapStart(yynn1355)
				yynn1355 = 0
			}
			if yyr1355 || yy2arr1355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1357 := &x.Port
				yym1358 := z.EncBinary()
				_ = yym1358
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1357) {
				} else if !yym1358 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1357)
				} else {
					z.EncFallback(yy1357)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1359 := &x.Port
				yym1360 := z.EncBinary()
				_ = yym1360
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1359) {
				} else if !yym1360 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1359)
				} else {
					z.EncFallback(yy1359)
				}
			}
			if yyr1355 || yy2arr1355 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1361 := z.DecBinary()
	_ = yym1361
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1362 := r.ContainerType()
		if yyct1362 == codecSelferValueTypeMap1234 {
			yyl1362 := r.ReadMapStart()
			if yyl1362 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1362, d)
			}
		} else if yyct1362 == codecSelferValueTypeArray1234 {
			yyl1362 := r.ReadArrayStart()
			if yyl1362 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1362, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1363Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1363Slc
	var yyhl1363 bool = l >= 0
	for yyj1363 := 0; ; yyj1363++ {
		if yyhl1363 {
			if yyj1363 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1363Slc = r.DecodeBytes(yys1363Slc, true, true)
		yys1363 := string(yys1363Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1363 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1364 := &x.Port
				yym1365 := z.DecBinary()
				_ = yym1365
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1364) {
				} else if !yym1365 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1364)
				} else {
					z.DecFallback(yyv1364, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1363)
		} // end switch yys1363
	} // end for yyj1363
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1366 int
	var yyb1366 bool
	var yyhl1366 bool = l >= 0
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1367 := &x.Port
		yym1368 := z.DecBinary()
		_ = yym1368
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1367) {
		} else if !yym1368 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1367)
		} else {
			z.DecFallback(yyv1367, false)
		}
	}
	for {
		yyj1366++
		if yyhl1366 {
			yyb1366 = yyj1366 > l
		} else {
			yyb1366 = r.CheckBreak()
		}
		if yyb1366 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1366-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1369 := z.EncBinary()
		_ = yym1369
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1370 := !z.EncBinary()
			yy2arr1370 := z.EncBasicHandle().StructToArray
			var yyq1370 [1]bool
			_, _, _ = yysep1370, yyq1370, yy2arr1370
			const yyr1370 bool = false
			yyq1370[0] = len(x.Command) != 0
			var yynn1370 int
			if yyr1370 || yy2arr1370 {
				r.EncodeArrayStart(1)
			} else {
				yynn1370 = 0
				for _, b := range yyq1370 {
					if b {
						yynn1370++
					}
				}
				r.EncodeMapStart(yynn1370)
				yynn1370 = 0
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1372 := z.EncBinary()
						_ = yym1372
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1373 := z.EncBinary()
						_ = yym1373
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1374 := z.DecBinary()
	_ = yym1374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1375 := r.ContainerType()
		if yyct1375 == codecSelferValueTypeMap1234 {
			yyl1375 := r.ReadMapStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1375, d)
			}
		} else if yyct1375 == codecSelferValueTypeArray1234 {
			yyl1375 := r.ReadArrayStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1376Slc
	var yyhl1376 bool = l >= 0
	for yyj1376 := 0; ; yyj1376++ {
		if yyhl1376 {
			if yyj1376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1376Slc = r.DecodeBytes(yys1376Slc, true, true)
		yys1376 := string(yys1376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1376 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1377 := &x.Command
				yym1378 := z.DecBinary()
				_ = yym1378
				if false {
				} else {
					z.F.DecSliceStringX(yyv1377, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1376)
		} // end switch yys1376
	} // end for yyj1376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1379 int
	var yyb1379 bool
	var yyhl1379 bool = l >= 0
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1380 := &x.Command
		yym1381 := z.DecBinary()
		_ = yym1381
		if false {
		} else {
			z.F.DecSliceStringX(yyv1380, false, d)
		}
	}
	for {
		yyj1379++
		if yyhl1379 {
			yyb1379 = yyj1379 > l
		} else {
			yyb1379 = r.CheckBreak()
		}
		if yyb1379 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1379-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1382 := z.EncBinary()
		_ = yym1382
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1383 := !z.EncBinary()
			yy2arr1383 := z.EncBasicHandle().StructToArray
			var yyq1383 [8]bool
			_, _, _ = yysep1383, yyq1383, yy2arr1383
			const yyr1383 bool = false
			yyq1383[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1383[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1383[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1383[3] = x.InitialDelaySeconds != 0
			yyq1383[4] = x.TimeoutSeconds != 0
			yyq1383[5] = x.PeriodSeconds != 0
			yyq1383[6] = x.SuccessThreshold != 0
			yyq1383[7] = x.FailureThreshold != 0
			var yynn1383 int
			if yyr1383 || yy2arr1383 {
				r.EncodeArrayStart(8)
			} else {
				yynn1383 = 0
				for _, b := range yyq1383 {
					if b {
						yynn1383++
					}
				}
				r.EncodeMapStart(yynn1383)
				yynn1383 = 0
			}
			var yyn1384 bool
			if x.Handler.Exec == nil {
				yyn1384 = true
				goto LABEL1384
			}
		LABEL1384:
			if yyr1383 || yy2arr1383 {
				if yyn1384 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1383[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1383[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1384 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1385 bool
			if x.Handler.HTTPGet == nil {
				yyn1385 = true
				goto LABEL1385
			}
		LABEL1385:
			if yyr1383 || yy2arr1383 {
				if yyn1385 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1383[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1383[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1385 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1386 bool
			if x.Handler.TCPSocket == nil {
				yyn1386 = true
				goto LABEL1386
			}
		LABEL1386:
			if yyr1383 || yy2arr1383 {
				if yyn1386 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1383[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1383[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1386 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[3] {
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1383[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1389 := z.EncBinary()
					_ = yym1389
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[4] {
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1383[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[5] {
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1383[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1395 := z.EncBinary()
					_ = yym1395
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[6] {
					yym1397 := z.EncBinary()
					_ = yym1397
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1383[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[7] {
					yym1400 := z.EncBinary()
					_ = yym1400
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1383[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1401 := z.EncBinary()
					_ = yym1401
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1402 := z.DecBinary()
	_ = yym1402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1403 := r.ContainerType()
		if yyct1403 == codecSelferValueTypeMap1234 {
			yyl1403 := r.ReadMapStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1403, d)
			}
		} else if yyct1403 == codecSelferValueTypeArray1234 {
			yyl1403 := r.ReadArrayStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1404Slc
	var yyhl1404 bool = l >= 0
	for yyj1404 := 0; ; yyj1404++ {
		if yyhl1404 {
			if yyj1404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1404Slc = r.DecodeBytes(yys1404Slc, true, true)
		yys1404 := string(yys1404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1404 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1404)
		} // end switch yys1404
	} // end for yyj1404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1413 int
	var yyb1413 bool
	var yyhl1413 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1413++
		if yyhl1413 {
			yyb1413 = yyj1413 > l
		} else {
			yyb1413 = r.CheckBreak()
		}
		if yyb1413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1422 := z.EncBinary()
	_ = yym1422
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1423 := z.DecBinary()
	_ = yym1423
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1424 := z.EncBinary()
	_ = yym1424
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1425 := z.DecBinary()
	_ = yym1425
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1426 := z.EncBinary()
		_ = yym1426
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1427 := !z.EncBinary()
			yy2arr1427 := z.EncBasicHandle().StructToArray
			var yyq1427 [2]bool
			_, _, _ = yysep1427, yyq1427, yy2arr1427
			const yyr1427 bool = false
			yyq1427[0] = len(x.Add) != 0
			yyq1427[1] = len(x.Drop) != 0
			var yynn1427 int
			if yyr1427 || yy2arr1427 {
				r.EncodeArrayStart(2)
			} else {
				yynn1427 = 0
				for _, b := range yyq1427 {
					if b {
						yynn1427++
					}
				}
				r.EncodeMapStart(yynn1427)
				yynn1427 = 0
			}
			if yyr1427 || yy2arr1427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1427[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1429 := z.EncBinary()
						_ = yym1429
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1427[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1430 := z.EncBinary()
						_ = yym1430
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1427 || yy2arr1427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1427[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1432 := z.EncBinary()
						_ = yym1432
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1427[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1433 := z.EncBinary()
						_ = yym1433
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1427 || yy2arr1427 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1434 := z.DecBinary()
	_ = yym1434
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1435 := r.ContainerType()
		if yyct1435 == codecSelferValueTypeMap1234 {
			yyl1435 := r.ReadMapStart()
			if yyl1435 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1435, d)
			}
		} else if yyct1435 == codecSelferValueTypeArray1234 {
			yyl1435 := r.ReadArrayStart()
			if yyl1435 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1435, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1436Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1436Slc
	var yyhl1436 bool = l >= 0
	for yyj1436 := 0; ; yyj1436++ {
		if yyhl1436 {
			if yyj1436 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1436Slc = r.DecodeBytes(yys1436Slc, true, true)
		yys1436 := string(yys1436Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1436 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1437 := &x.Add
				yym1438 := z.DecBinary()
				_ = yym1438
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1437), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1439 := &x.Drop
				yym1440 := z.DecBinary()
				_ = yym1440
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1439), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1436)
		} // end switch yys1436
	} // end for yyj1436
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1441 int
	var yyb1441 bool
	var yyhl1441 bool = l >= 0
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1442 := &x.Add
		yym1443 := z.DecBinary()
		_ = yym1443
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1442), d)
		}
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1444 := &x.Drop
		yym1445 := z.DecBinary()
		_ = yym1445
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1444), d)
		}
	}
	for {
		yyj1441++
		if yyhl1441 {
			yyb1441 = yyj1441 > l
		} else {
			yyb1441 = r.CheckBreak()
		}
		if yyb1441 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1441-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1446 := z.EncBinary()
		_ = yym1446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1447 := !z.EncBinary()
			yy2arr1447 := z.EncBasicHandle().StructToArray
			var yyq1447 [2]bool
			_, _, _ = yysep1447, yyq1447, yy2arr1447
			const yyr1447 bool = false
			yyq1447[0] = len(x.Limits) != 0
			yyq1447[1] = len(x.Requests) != 0
			var yynn1447 int
			if yyr1447 || yy2arr1447 {
				r.EncodeArrayStart(2)
			} else {
				yynn1447 = 0
				for _, b := range yyq1447 {
					if b {
						yynn1447++
					}
				}
				r.EncodeMapStart(yynn1447)
				yynn1447 = 0
			}
			if yyr1447 || yy2arr1447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1447[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1447[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1447 || yy2arr1447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1447[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1447[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1447 || yy2arr1447 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1450 := z.DecBinary()
	_ = yym1450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1451 := r.ContainerType()
		if yyct1451 == codecSelferValueTypeMap1234 {
			yyl1451 := r.ReadMapStart()
			if yyl1451 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1451, d)
			}
		} else if yyct1451 == codecSelferValueTypeArray1234 {
			yyl1451 := r.ReadArrayStart()
			if yyl1451 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1452Slc
	var yyhl1452 bool = l >= 0
	for yyj1452 := 0; ; yyj1452++ {
		if yyhl1452 {
			if yyj1452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1452Slc = r.DecodeBytes(yys1452Slc, true, true)
		yys1452 := string(yys1452Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1452 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1453 := &x.Limits
				yyv1453.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1454 := &x.Requests
				yyv1454.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1452)
		} // end switch yys1452
	} // end for yyj1452
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1455 int
	var yyb1455 bool
	var yyhl1455 bool = l >= 0
	yyj1455++
	if yyhl1455 {
		yyb1455 = yyj1455 > l
	} else {
		yyb1455 = r.CheckBreak()
	}
	if yyb1455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1456 := &x.Limits
		yyv1456.CodecDecodeSelf(d)
	}
	yyj1455++
	if yyhl1455 {
		yyb1455 = yyj1455 > l
	} else {
		yyb1455 = r.CheckBreak()
	}
	if yyb1455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1457 := &x.Requests
		yyv1457.CodecDecodeSelf(d)
	}
	for {
		yyj1455++
		if yyhl1455 {
			yyb1455 = yyj1455 > l
		} else {
			yyb1455 = r.CheckBreak()
		}
		if yyb1455 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1455-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1458 := z.EncBinary()
		_ = yym1458
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1459 := !z.EncBinary()
			yy2arr1459 := z.EncBasicHandle().StructToArray
			var yyq1459 [18]bool
			_, _, _ = yysep1459, yyq1459, yy2arr1459
			const yyr1459 bool = false
			yyq1459[1] = x.Image != ""
			yyq1459[2] = len(x.Command) != 0
			yyq1459[3] = len(x.Args) != 0
			yyq1459[4] = x.WorkingDir != ""
			yyq1459[5] = len(x.Ports) != 0
			yyq1459[6] = len(x.Env) != 0
			yyq1459[7] = true
			yyq1459[8] = len(x.VolumeMounts) != 0
			yyq1459[9] = x.LivenessProbe != nil
			yyq1459[10] = x.ReadinessProbe != nil
			yyq1459[11] = x.Lifecycle != nil
			yyq1459[12] = x.TerminationMessagePath != ""
			yyq1459[13] = x.ImagePullPolicy != ""
			yyq1459[14] = x.SecurityContext != nil
			yyq1459[15] = x.Stdin != false
			yyq1459[16] = x.StdinOnce != false
			yyq1459[17] = x.TTY != false
			var yynn1459 int
			if yyr1459 || yy2arr1459 {
				r.EncodeArrayStart(18)
			} else {
				yynn1459 = 1
				for _, b := range yyq1459 {
					if b {
						yynn1459++
					}
				}
				r.EncodeMapStart(yynn1459)
				yynn1459 = 0
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1461 := z.EncBinary()
				_ = yym1461
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1462 := z.EncBinary()
				_ = yym1462
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[1] {
					yym1464 := z.EncBinary()
					_ = yym1464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1459[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1465 := z.EncBinary()
					_ = yym1465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1467 := z.EncBinary()
						_ = yym1467
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1468 := z.EncBinary()
						_ = yym1468
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1470 := z.EncBinary()
						_ = yym1470
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1471 := z.EncBinary()
						_ = yym1471
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[4] {
					yym1473 := z.EncBinary()
					_ = yym1473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1459[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1474 := z.EncBinary()
					_ = yym1474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1476 := z.EncBinary()
						_ = yym1476
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1477 := z.EncBinary()
						_ = yym1477
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1479 := z.EncBinary()
						_ = yym1479
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1480 := z.EncBinary()
						_ = yym1480
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[7] {
					yy1482 := &x.Resources
					yy1482.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1483 := &x.Resources
					yy1483.CodecEncodeSelf(e)
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1485 := z.EncBinary()
						_ = yym1485
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1486 := z.EncBinary()
						_ = yym1486
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[12] {
					yym1491 := z.EncBinary()
					_ = yym1491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1459[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1492 := z.EncBinary()
					_ = yym1492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1459[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[15] {
					yym1496 := z.EncBinary()
					_ = yym1496
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1459[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1497 := z.EncBinary()
					_ = yym1497
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[16] {
					yym1499 := z.EncBinary()
					_ = yym1499
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1459[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1500 := z.EncBinary()
					_ = yym1500
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[17] {
					yym1502 := z.EncBinary()
					_ = yym1502
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1459[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1503 := z.EncBinary()
					_ = yym1503
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1504 := z.DecBinary()
	_ = yym1504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1505 := r.ContainerType()
		if yyct1505 == codecSelferValueTypeMap1234 {
			yyl1505 := r.ReadMapStart()
			if yyl1505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1505, d)
			}
		} else if yyct1505 == codecSelferValueTypeArray1234 {
			yyl1505 := r.ReadArrayStart()
			if yyl1505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1506Slc
	var yyhl1506 bool = l >= 0
	for yyj1506 := 0; ; yyj1506++ {
		if yyhl1506 {
			if yyj1506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1506Slc = r.DecodeBytes(yys1506Slc, true, true)
		yys1506 := string(yys1506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1506 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1509 := &x.Command
				yym1510 := z.DecBinary()
				_ = yym1510
				if false {
				} else {
					z.F.DecSliceStringX(yyv1509, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1511 := &x.Args
				yym1512 := z.DecBinary()
				_ = yym1512
				if false {
				} else {
					z.F.DecSliceStringX(yyv1511, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1514 := &x.Ports
				yym1515 := z.DecBinary()
				_ = yym1515
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1514), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1516 := &x.Env
				yym1517 := z.DecBinary()
				_ = yym1517
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1516), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1518 := &x.Resources
				yyv1518.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1519 := &x.VolumeMounts
				yym1520 := z.DecBinary()
				_ = yym1520
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1519), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1506)
		} // end switch yys1506
	} // end for yyj1506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1530 int
	var yyb1530 bool
	var yyhl1530 bool = l >= 0
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1533 := &x.Command
		yym1534 := z.DecBinary()
		_ = yym1534
		if false {
		} else {
			z.F.DecSliceStringX(yyv1533, false, d)
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1535 := &x.Args
		yym1536 := z.DecBinary()
		_ = yym1536
		if false {
		} else {
			z.F.DecSliceStringX(yyv1535, false, d)
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1538 := &x.Ports
		yym1539 := z.DecBinary()
		_ = yym1539
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1538), d)
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1540 := &x.Env
		yym1541 := z.DecBinary()
		_ = yym1541
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1540), d)
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1542 := &x.Resources
		yyv1542.CodecDecodeSelf(d)
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1543 := &x.VolumeMounts
		yym1544 := z.DecBinary()
		_ = yym1544
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1543), d)
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1530++
		if yyhl1530 {
			yyb1530 = yyj1530 > l
		} else {
			yyb1530 = r.CheckBreak()
		}
		if yyb1530 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1530-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1554 := z.EncBinary()
		_ = yym1554
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1555 := !z.EncBinary()
			yy2arr1555 := z.EncBasicHandle().StructToArray
			var yyq1555 [3]bool
			_, _, _ = yysep1555, yyq1555, yy2arr1555
			const yyr1555 bool = false
			yyq1555[0] = x.Exec != nil
			yyq1555[1] = x.HTTPGet != nil
			yyq1555[2] = x.TCPSocket != nil
			var yynn1555 int
			if yyr1555 || yy2arr1555 {
				r.EncodeArrayStart(3)
			} else {
				yynn1555 = 0
				for _, b := range yyq1555 {
					if b {
						yynn1555++
					}
				}
				r.EncodeMapStart(yynn1555)
				yynn1555 = 0
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1555[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1555[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1555[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1555[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1555[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1555[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1559 := z.DecBinary()
	_ = yym1559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1560 := r.ContainerType()
		if yyct1560 == codecSelferValueTypeMap1234 {
			yyl1560 := r.ReadMapStart()
			if yyl1560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1560, d)
			}
		} else if yyct1560 == codecSelferValueTypeArray1234 {
			yyl1560 := r.ReadArrayStart()
			if yyl1560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1561Slc
	var yyhl1561 bool = l >= 0
	for yyj1561 := 0; ; yyj1561++ {
		if yyhl1561 {
			if yyj1561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1561Slc = r.DecodeBytes(yys1561Slc, true, true)
		yys1561 := string(yys1561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1561 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1561)
		} // end switch yys1561
	} // end for yyj1561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1565 int
	var yyb1565 bool
	var yyhl1565 bool = l >= 0
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1565++
		if yyhl1565 {
			yyb1565 = yyj1565 > l
		} else {
			yyb1565 = r.CheckBreak()
		}
		if yyb1565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1569 := z.EncBinary()
		_ = yym1569
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1570 := !z.EncBinary()
			yy2arr1570 := z.EncBasicHandle().StructToArray
			var yyq1570 [2]bool
			_, _, _ = yysep1570, yyq1570, yy2arr1570
			const yyr1570 bool = false
			yyq1570[0] = x.PostStart != nil
			yyq1570[1] = x.PreStop != nil
			var yynn1570 int
			if yyr1570 || yy2arr1570 {
				r.EncodeArrayStart(2)
			} else {
				yynn1570 = 0
				for _, b := range yyq1570 {
					if b {
						yynn1570++
					}
				}
				r.EncodeMapStart(yynn1570)
				yynn1570 = 0
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1570[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1570[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1570[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1570[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1573 := z.DecBinary()
	_ = yym1573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1574 := r.ContainerType()
		if yyct1574 == codecSelferValueTypeMap1234 {
			yyl1574 := r.ReadMapStart()
			if yyl1574 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1574, d)
			}
		} else if yyct1574 == codecSelferValueTypeArray1234 {
			yyl1574 := r.ReadArrayStart()
			if yyl1574 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1575Slc
	var yyhl1575 bool = l >= 0
	for yyj1575 := 0; ; yyj1575++ {
		if yyhl1575 {
			if yyj1575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1575Slc = r.DecodeBytes(yys1575Slc, true, true)
		yys1575 := string(yys1575Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1575 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1575)
		} // end switch yys1575
	} // end for yyj1575
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1578 int
	var yyb1578 bool
	var yyhl1578 bool = l >= 0
	yyj1578++
	if yyhl1578 {
		yyb1578 = yyj1578 > l
	} else {
		yyb1578 = r.CheckBreak()
	}
	if yyb1578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1578++
	if yyhl1578 {
		yyb1578 = yyj1578 > l
	} else {
		yyb1578 = r.CheckBreak()
	}
	if yyb1578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1578++
		if yyhl1578 {
			yyb1578 = yyj1578 > l
		} else {
			yyb1578 = r.CheckBreak()
		}
		if yyb1578 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1578-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1581 := z.EncBinary()
	_ = yym1581
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1582 := z.DecBinary()
	_ = yym1582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1583 := z.EncBinary()
		_ = yym1583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1584 := !z.EncBinary()
			yy2arr1584 := z.EncBasicHandle().StructToArray
			var yyq1584 [2]bool
			_, _, _ = yysep1584, yyq1584, yy2arr1584
			const yyr1584 bool = false
			yyq1584[0] = x.Reason != ""
			yyq1584[1] = x.Message != ""
			var yynn1584 int
			if yyr1584 || yy2arr1584 {
				r.EncodeArrayStart(2)
			} else {
				yynn1584 = 0
				for _, b := range yyq1584 {
					if b {
						yynn1584++
					}
				}
				r.EncodeMapStart(yynn1584)
				yynn1584 = 0
			}
			if yyr1584 || yy2arr1584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1584[0] {
					yym1586 := z.EncBinary()
					_ = yym1586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1584[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1587 := z.EncBinary()
					_ = yym1587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1584 || yy2arr1584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1584[1] {
					yym1589 := z.EncBinary()
					_ = yym1589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1584[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1590 := z.EncBinary()
					_ = yym1590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1584 || yy2arr1584 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1591 := z.DecBinary()
	_ = yym1591
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1592 := r.ContainerType()
		if yyct1592 == codecSelferValueTypeMap1234 {
			yyl1592 := r.ReadMapStart()
			if yyl1592 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1592, d)
			}
		} else if yyct1592 == codecSelferValueTypeArray1234 {
			yyl1592 := r.ReadArrayStart()
			if yyl1592 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1592, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1593Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1593Slc
	var yyhl1593 bool = l >= 0
	for yyj1593 := 0; ; yyj1593++ {
		if yyhl1593 {
			if yyj1593 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1593Slc = r.DecodeBytes(yys1593Slc, true, true)
		yys1593 := string(yys1593Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1593 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1593)
		} // end switch yys1593
	} // end for yyj1593
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1596 int
	var yyb1596 bool
	var yyhl1596 bool = l >= 0
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1596++
		if yyhl1596 {
			yyb1596 = yyj1596 > l
		} else {
			yyb1596 = r.CheckBreak()
		}
		if yyb1596 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1596-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1599 := z.EncBinary()
		_ = yym1599
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1600 := !z.EncBinary()
			yy2arr1600 := z.EncBasicHandle().StructToArray
			var yyq1600 [1]bool
			_, _, _ = yysep1600, yyq1600, yy2arr1600
			const yyr1600 bool = false
			yyq1600[0] = true
			var yynn1600 int
			if yyr1600 || yy2arr1600 {
				r.EncodeArrayStart(1)
			} else {
				yynn1600 = 0
				for _, b := range yyq1600 {
					if b {
						yynn1600++
					}
				}
				r.EncodeMapStart(yynn1600)
				yynn1600 = 0
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1600[0] {
					yy1602 := &x.StartedAt
					yym1603 := z.EncBinary()
					_ = yym1603
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1602) {
					} else if yym1603 {
						z.EncBinaryMarshal(yy1602)
					} else if !yym1603 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1602)
					} else {
						z.EncFallback(yy1602)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1600[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1604 := &x.StartedAt
					yym1605 := z.EncBinary()
					_ = yym1605
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1604) {
					} else if yym1605 {
						z.EncBinaryMarshal(yy1604)
					} else if !yym1605 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1604)
					} else {
						z.EncFallback(yy1604)
					}
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1606 := z.DecBinary()
	_ = yym1606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1607 := r.ContainerType()
		if yyct1607 == codecSelferValueTypeMap1234 {
			yyl1607 := r.ReadMapStart()
			if yyl1607 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1607, d)
			}
		} else if yyct1607 == codecSelferValueTypeArray1234 {
			yyl1607 := r.ReadArrayStart()
			if yyl1607 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1607, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1608Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1608Slc
	var yyhl1608 bool = l >= 0
	for yyj1608 := 0; ; yyj1608++ {
		if yyhl1608 {
			if yyj1608 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1608Slc = r.DecodeBytes(yys1608Slc, true, true)
		yys1608 := string(yys1608Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1608 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1609 := &x.StartedAt
				yym1610 := z.DecBinary()
				_ = yym1610
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1609) {
				} else if yym1610 {
					z.DecBinaryUnmarshal(yyv1609)
				} else if !yym1610 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1609)
				} else {
					z.DecFallback(yyv1609, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1608)
		} // end switch yys1608
	} // end for yyj1608
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1611 int
	var yyb1611 bool
	var yyhl1611 bool = l >= 0
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1612 := &x.StartedAt
		yym1613 := z.DecBinary()
		_ = yym1613
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1612) {
		} else if yym1613 {
			z.DecBinaryUnmarshal(yyv1612)
		} else if !yym1613 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1612)
		} else {
			z.DecFallback(yyv1612, false)
		}
	}
	for {
		yyj1611++
		if yyhl1611 {
			yyb1611 = yyj1611 > l
		} else {
			yyb1611 = r.CheckBreak()
		}
		if yyb1611 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1611-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1614 := z.EncBinary()
		_ = yym1614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1615 := !z.EncBinary()
			yy2arr1615 := z.EncBasicHandle().StructToArray
			var yyq1615 [7]bool
			_, _, _ = yysep1615, yyq1615, yy2arr1615
			const yyr1615 bool = false
			yyq1615[1] = x.Signal != 0
			yyq1615[2] = x.Reason != ""
			yyq1615[3] = x.Message != ""
			yyq1615[4] = true
			yyq1615[5] = true
			yyq1615[6] = x.ContainerID != ""
			var yynn1615 int
			if yyr1615 || yy2arr1615 {
				r.EncodeArrayStart(7)
			} else {
				yynn1615 = 1
				for _, b := range yyq1615 {
					if b {
						yynn1615++
					}
				}
				r.EncodeMapStart(yynn1615)
				yynn1615 = 0
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1617 := z.EncBinary()
				_ = yym1617
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1618 := z.EncBinary()
				_ = yym1618
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[1] {
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1615[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1621 := z.EncBinary()
					_ = yym1621
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[2] {
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1615[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1624 := z.EncBinary()
					_ = yym1624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[3] {
					yym1626 := z.EncBinary()
					_ = yym1626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1615[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[4] {
					yy1629 := &x.StartedAt
					yym1630 := z.EncBinary()
					_ = yym1630
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1629) {
					} else if yym1630 {
						z.EncBinaryMarshal(yy1629)
					} else if !yym1630 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1629)
					} else {
						z.EncFallback(yy1629)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1615[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1631 := &x.StartedAt
					yym1632 := z.EncBinary()
					_ = yym1632
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1631) {
					} else if yym1632 {
						z.EncBinaryMarshal(yy1631)
					} else if !yym1632 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1631)
					} else {
						z.EncFallback(yy1631)
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[5] {
					yy1634 := &x.FinishedAt
					yym1635 := z.EncBinary()
					_ = yym1635
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1634) {
					} else if yym1635 {
						z.EncBinaryMarshal(yy1634)
					} else if !yym1635 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1634)
					} else {
						z.EncFallback(yy1634)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1615[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1636 := &x.FinishedAt
					yym1637 := z.EncBinary()
					_ = yym1637
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1636) {
					} else if yym1637 {
						z.EncBinaryMarshal(yy1636)
					} else if !yym1637 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1636)
					} else {
						z.EncFallback(yy1636)
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[6] {
					yym1639 := z.EncBinary()
					_ = yym1639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1615[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1640 := z.EncBinary()
					_ = yym1640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1641 := z.DecBinary()
	_ = yym1641
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1642 := r.ContainerType()
		if yyct1642 == codecSelferValueTypeMap1234 {
			yyl1642 := r.ReadMapStart()
			if yyl1642 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1642, d)
			}
		} else if yyct1642 == codecSelferValueTypeArray1234 {
			yyl1642 := r.ReadArrayStart()
			if yyl1642 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1642, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1643Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1643Slc
	var yyhl1643 bool = l >= 0
	for yyj1643 := 0; ; yyj1643++ {
		if yyhl1643 {
			if yyj1643 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1643Slc = r.DecodeBytes(yys1643Slc, true, true)
		yys1643 := string(yys1643Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1643 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1648 := &x.StartedAt
				yym1649 := z.DecBinary()
				_ = yym1649
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1648) {
				} else if yym1649 {
					z.DecBinaryUnmarshal(yyv1648)
				} else if !yym1649 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1648)
				} else {
					z.DecFallback(yyv1648, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1650 := &x.FinishedAt
				yym1651 := z.DecBinary()
				_ = yym1651
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1650) {
				} else if yym1651 {
					z.DecBinaryUnmarshal(yyv1650)
				} else if !yym1651 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1650)
				} else {
					z.DecFallback(yyv1650, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1643)
		} // end switch yys1643
	} // end for yyj1643
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1653 int
	var yyb1653 bool
	var yyhl1653 bool = l >= 0
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1658 := &x.StartedAt
		yym1659 := z.DecBinary()
		_ = yym1659
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1658) {
		} else if yym1659 {
			z.DecBinaryUnmarshal(yyv1658)
		} else if !yym1659 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1658)
		} else {
			z.DecFallback(yyv1658, false)
		}
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1660 := &x.FinishedAt
		yym1661 := z.DecBinary()
		_ = yym1661
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1660) {
		} else if yym1661 {
			z.DecBinaryUnmarshal(yyv1660)
		} else if !yym1661 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1660)
		} else {
			z.DecFallback(yyv1660, false)
		}
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1653++
		if yyhl1653 {
			yyb1653 = yyj1653 > l
		} else {
			yyb1653 = r.CheckBreak()
		}
		if yyb1653 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1653-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1663 := z.EncBinary()
		_ = yym1663
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1664 := !z.EncBinary()
			yy2arr1664 := z.EncBasicHandle().StructToArray
			var yyq1664 [3]bool
			_, _, _ = yysep1664, yyq1664, yy2arr1664
			const yyr1664 bool = false
			yyq1664[0] = x.Waiting != nil
			yyq1664[1] = x.Running != nil
			yyq1664[2] = x.Terminated != nil
			var yynn1664 int
			if yyr1664 || yy2arr1664 {
				r.EncodeArrayStart(3)
			} else {
				yynn1664 = 0
				for _, b := range yyq1664 {
					if b {
						yynn1664++
					}
				}
				r.EncodeMapStart(yynn1664)
				yynn1664 = 0
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1664[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1664[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1664[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1664[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1664[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1664[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1668 := z.DecBinary()
	_ = yym1668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1669 := r.ContainerType()
		if yyct1669 == codecSelferValueTypeMap1234 {
			yyl1669 := r.ReadMapStart()
			if yyl1669 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1669, d)
			}
		} else if yyct1669 == codecSelferValueTypeArray1234 {
			yyl1669 := r.ReadArrayStart()
			if yyl1669 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1670Slc
	var yyhl1670 bool = l >= 0
	for yyj1670 := 0; ; yyj1670++ {
		if yyhl1670 {
			if yyj1670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1670Slc = r.DecodeBytes(yys1670Slc, true, true)
		yys1670 := string(yys1670Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1670 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1670)
		} // end switch yys1670
	} // end for yyj1670
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1674 int
	var yyb1674 bool
	var yyhl1674 bool = l >= 0
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1674++
		if yyhl1674 {
			yyb1674 = yyj1674 > l
		} else {
			yyb1674 = r.CheckBreak()
		}
		if yyb1674 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1674-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1678 := z.EncBinary()
		_ = yym1678
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1679 := !z.EncBinary()
			yy2arr1679 := z.EncBasicHandle().StructToArray
			var yyq1679 [8]bool
			_, _, _ = yysep1679, yyq1679, yy2arr1679
			const yyr1679 bool = false
			yyq1679[1] = true
			yyq1679[2] = true
			yyq1679[7] = x.ContainerID != ""
			var yynn1679 int
			if yyr1679 || yy2arr1679 {
				r.EncodeArrayStart(8)
			} else {
				yynn1679 = 5
				for _, b := range yyq1679 {
					if b {
						yynn1679++
					}
				}
				r.EncodeMapStart(yynn1679)
				yynn1679 = 0
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1681 := z.EncBinary()
				_ = yym1681
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1682 := z.EncBinary()
				_ = yym1682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1679[1] {
					yy1684 := &x.State
					yy1684.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1679[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1685 := &x.State
					yy1685.CodecEncodeSelf(e)
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1679[2] {
					yy1687 := &x.LastTerminationState
					yy1687.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1679[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1688 := &x.LastTerminationState
					yy1688.CodecEncodeSelf(e)
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1690 := z.EncBinary()
				_ = yym1690
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1691 := z.EncBinary()
				_ = yym1691
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1693 := z.EncBinary()
				_ = yym1693
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1694 := z.EncBinary()
				_ = yym1694
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1696 := z.EncBinary()
				_ = yym1696
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1697 := z.EncBinary()
				_ = yym1697
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1699 := z.EncBinary()
				_ = yym1699
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1700 := z.EncBinary()
				_ = yym1700
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1679[7] {
					yym1702 := z.EncBinary()
					_ = yym1702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1679[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1703 := z.EncBinary()
					_ = yym1703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1704 := z.DecBinary()
	_ = yym1704
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1705 := r.ContainerType()
		if yyct1705 == codecSelferValueTypeMap1234 {
			yyl1705 := r.ReadMapStart()
			if yyl1705 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1705, d)
			}
		} else if yyct1705 == codecSelferValueTypeArray1234 {
			yyl1705 := r.ReadArrayStart()
			if yyl1705 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1705, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1706Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1706Slc
	var yyhl1706 bool = l >= 0
	for yyj1706 := 0; ; yyj1706++ {
		if yyhl1706 {
			if yyj1706 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1706Slc = r.DecodeBytes(yys1706Slc, true, true)
		yys1706 := string(yys1706Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1706 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1708 := &x.State
				yyv1708.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1709 := &x.LastTerminationState
				yyv1709.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1706)
		} // end switch yys1706
	} // end for yyj1706
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1715 int
	var yyb1715 bool
	var yyhl1715 bool = l >= 0
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1717 := &x.State
		yyv1717.CodecDecodeSelf(d)
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1718 := &x.LastTerminationState
		yyv1718.CodecDecodeSelf(d)
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1715++
		if yyhl1715 {
			yyb1715 = yyj1715 > l
		} else {
			yyb1715 = r.CheckBreak()
		}
		if yyb1715 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1715-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1724 := z.EncBinary()
	_ = yym1724
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1725 := z.DecBinary()
	_ = yym1725
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1726 := z.EncBinary()
	_ = yym1726
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1727 := z.DecBinary()
	_ = yym1727
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1728 := z.EncBinary()
		_ = yym1728
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1729 := !z.EncBinary()
			yy2arr1729 := z.EncBasicHandle().StructToArray
			var yyq1729 [6]bool
			_, _, _ = yysep1729, yyq1729, yy2arr1729
			const yyr1729 bool = false
			yyq1729[2] = true
			yyq1729[3] = true
			yyq1729[4] = x.Reason != ""
			yyq1729[5] = x.Message != ""
			var yynn1729 int
			if yyr1729 || yy2arr1729 {
				r.EncodeArrayStart(6)
			} else {
				yynn1729 = 2
				for _, b := range yyq1729 {
					if b {
						yynn1729++
					}
				}
				r.EncodeMapStart(yynn1729)
				yynn1729 = 0
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1729[2] {
					yy1733 := &x.LastProbeTime
					yym1734 := z.EncBinary()
					_ = yym1734
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1733) {
					} else if yym1734 {
						z.EncBinaryMarshal(yy1733)
					} else if !yym1734 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1733)
					} else {
						z.EncFallback(yy1733)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1729[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1735 := &x.LastProbeTime
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1735) {
					} else if yym1736 {
						z.EncBinaryMarshal(yy1735)
					} else if !yym1736 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1735)
					} else {
						z.EncFallback(yy1735)
					}
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1729[3] {
					yy1738 := &x.LastTransitionTime
					yym1739 := z.EncBinary()
					_ = yym1739
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1738) {
					} else if yym1739 {
						z.EncBinaryMarshal(yy1738)
					} else if !yym1739 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1738)
					} else {
						z.EncFallback(yy1738)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1729[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1740 := &x.LastTransitionTime
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1740) {
					} else if yym1741 {
						z.EncBinaryMarshal(yy1740)
					} else if !yym1741 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1740)
					} else {
						z.EncFallback(yy1740)
					}
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1729[4] {
					yym1743 := z.EncBinary()
					_ = yym1743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1729[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1744 := z.EncBinary()
					_ = yym1744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1729[5] {
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1729[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1747 := z.EncBinary()
					_ = yym1747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1748 := z.DecBinary()
	_ = yym1748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1749 := r.ContainerType()
		if yyct1749 == codecSelferValueTypeMap1234 {
			yyl1749 := r.ReadMapStart()
			if yyl1749 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1749, d)
			}
		} else if yyct1749 == codecSelferValueTypeArray1234 {
			yyl1749 := r.ReadArrayStart()
			if yyl1749 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1750Slc
	var yyhl1750 bool = l >= 0
	for yyj1750 := 0; ; yyj1750++ {
		if yyhl1750 {
			if yyj1750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1750Slc = r.DecodeBytes(yys1750Slc, true, true)
		yys1750 := string(yys1750Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1750 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1753 := &x.LastProbeTime
				yym1754 := z.DecBinary()
				_ = yym1754
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1753) {
				} else if yym1754 {
					z.DecBinaryUnmarshal(yyv1753)
				} else if !yym1754 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1753)
				} else {
					z.DecFallback(yyv1753, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1755 := &x.LastTransitionTime
				yym1756 := z.DecBinary()
				_ = yym1756
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1755) {
				} else if yym1756 {
					z.DecBinaryUnmarshal(yyv1755)
				} else if !yym1756 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1755)
				} else {
					z.DecFallback(yyv1755, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1750)
		} // end switch yys1750
	} // end for yyj1750
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1759 int
	var yyb1759 bool
	var yyhl1759 bool = l >= 0
	yyj1759++
	if yyhl1759 {
		yyb1759 = yyj1759 > l
	} else {
		yyb1759 = r.CheckBreak()
	}
	if yyb1759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1759++
	if yyhl1759 {
		yyb1759 = yyj1759 > l
	} else {
		yyb1759 = r.CheckBreak()
	}
	if yyb1759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1759++
	if yyhl1759 {
		yyb1759 = yyj1759 > l
	} else {
		yyb1759 = r.CheckBreak()
	}
	if yyb1759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1762 := &x.LastProbeTime
		yym1763 := z.DecBinary()
		_ = yym1763
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1762) {
		} else if yym1763 {
			z.DecBinaryUnmarshal(yyv1762)
		} else if !yym1763 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1762)
		} else {
			z.DecFallback(yyv1762, false)
		}
	}
	yyj1759++
	if yyhl1759 {
		yyb1759 = yyj1759 > l
	} else {
		yyb1759 = r.CheckBreak()
	}
	if yyb1759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1764 := &x.LastTransitionTime
		yym1765 := z.DecBinary()
		_ = yym1765
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1764) {
		} else if yym1765 {
			z.DecBinaryUnmarshal(yyv1764)
		} else if !yym1765 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1764)
		} else {
			z.DecFallback(yyv1764, false)
		}
	}
	yyj1759++
	if yyhl1759 {
		yyb1759 = yyj1759 > l
	} else {
		yyb1759 = r.CheckBreak()
	}
	if yyb1759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1759++
	if yyhl1759 {
		yyb1759 = yyj1759 > l
	} else {
		yyb1759 = r.CheckBreak()
	}
	if yyb1759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1759++
		if yyhl1759 {
			yyb1759 = yyj1759 > l
		} else {
			yyb1759 = r.CheckBreak()
		}
		if yyb1759 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1759-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1768 := z.EncBinary()
	_ = yym1768
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1769 := z.DecBinary()
	_ = yym1769
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1770 := z.EncBinary()
	_ = yym1770
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1771 := z.DecBinary()
	_ = yym1771
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1772 := z.EncBinary()
		_ = yym1772
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1773 := !z.EncBinary()
			yy2arr1773 := z.EncBasicHandle().StructToArray
			var yyq1773 [1]bool
			_, _, _ = yysep1773, yyq1773, yy2arr1773
			const yyr1773 bool = false
			var yynn1773 int
			if yyr1773 || yy2arr1773 {
				r.EncodeArrayStart(1)
			} else {
				yynn1773 = 1
				for _, b := range yyq1773 {
					if b {
						yynn1773++
					}
				}
				r.EncodeMapStart(yynn1773)
				yynn1773 = 0
			}
			if yyr1773 || yy2arr1773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1775 := z.EncBinary()
					_ = yym1775
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1776 := z.EncBinary()
					_ = yym1776
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1773 || yy2arr1773 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1777 := z.DecBinary()
	_ = yym1777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1778 := r.ContainerType()
		if yyct1778 == codecSelferValueTypeMap1234 {
			yyl1778 := r.ReadMapStart()
			if yyl1778 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1778, d)
			}
		} else if yyct1778 == codecSelferValueTypeArray1234 {
			yyl1778 := r.ReadArrayStart()
			if yyl1778 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1778, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1779Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1779Slc
	var yyhl1779 bool = l >= 0
	for yyj1779 := 0; ; yyj1779++ {
		if yyhl1779 {
			if yyj1779 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1779Slc = r.DecodeBytes(yys1779Slc, true, true)
		yys1779 := string(yys1779Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1779 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1780 := &x.NodeSelectorTerms
				yym1781 := z.DecBinary()
				_ = yym1781
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1780), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1779)
		} // end switch yys1779
	} // end for yyj1779
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1782 int
	var yyb1782 bool
	var yyhl1782 bool = l >= 0
	yyj1782++
	if yyhl1782 {
		yyb1782 = yyj1782 > l
	} else {
		yyb1782 = r.CheckBreak()
	}
	if yyb1782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1783 := &x.NodeSelectorTerms
		yym1784 := z.DecBinary()
		_ = yym1784
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1783), d)
		}
	}
	for {
		yyj1782++
		if yyhl1782 {
			yyb1782 = yyj1782 > l
		} else {
			yyb1782 = r.CheckBreak()
		}
		if yyb1782 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1782-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1785 := z.EncBinary()
		_ = yym1785
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1786 := !z.EncBinary()
			yy2arr1786 := z.EncBasicHandle().StructToArray
			var yyq1786 [1]bool
			_, _, _ = yysep1786, yyq1786, yy2arr1786
			const yyr1786 bool = false
			var yynn1786 int
			if yyr1786 || yy2arr1786 {
				r.EncodeArrayStart(1)
			} else {
				yynn1786 = 1
				for _, b := range yyq1786 {
					if b {
						yynn1786++
					}
				}
				r.EncodeMapStart(yynn1786)
				yynn1786 = 0
			}
			if yyr1786 || yy2arr1786 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1788 := z.EncBinary()
					_ = yym1788
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1789 := z.EncBinary()
					_ = yym1789
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1786 || yy2arr1786 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1790 := z.DecBinary()
	_ = yym1790
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1791 := r.ContainerType()
		if yyct1791 == codecSelferValueTypeMap1234 {
			yyl1791 := r.ReadMapStart()
			if yyl1791 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1791, d)
			}
		} else if yyct1791 == codecSelferValueTypeArray1234 {
			yyl1791 := r.ReadArrayStart()
			if yyl1791 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1791, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1792Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1792Slc
	var yyhl1792 bool = l >= 0
	for yyj1792 := 0; ; yyj1792++ {
		if yyhl1792 {
			if yyj1792 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1792Slc = r.DecodeBytes(yys1792Slc, true, true)
		yys1792 := string(yys1792Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1792 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1793 := &x.MatchExpressions
				yym1794 := z.DecBinary()
				_ = yym1794
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1793), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1792)
		} // end switch yys1792
	} // end for yyj1792
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1795 int
	var yyb1795 bool
	var yyhl1795 bool = l >= 0
	yyj1795++
	if yyhl1795 {
		yyb1795 = yyj1795 > l
	} else {
		yyb1795 = r.CheckBreak()
	}
	if yyb1795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1796 := &x.MatchExpressions
		yym1797 := z.DecBinary()
		_ = yym1797
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1796), d)
		}
	}
	for {
		yyj1795++
		if yyhl1795 {
			yyb1795 = yyj1795 > l
		} else {
			yyb1795 = r.CheckBreak()
		}
		if yyb1795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1798 := z.EncBinary()
		_ = yym1798
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1799 := !z.EncBinary()
			yy2arr1799 := z.EncBasicHandle().StructToArray
			var yyq1799 [3]bool
			_, _, _ = yysep1799, yyq1799, yy2arr1799
			const yyr1799 bool = false
			yyq1799[2] = len(x.Values) != 0
			var yynn1799 int
			if yyr1799 || yy2arr1799 {
				r.EncodeArrayStart(3)
			} else {
				yynn1799 = 2
				for _, b := range yyq1799 {
					if b {
						yynn1799++
					}
				}
				r.EncodeMapStart(yynn1799)
				yynn1799 = 0
			}
			if yyr1799 || yy2arr1799 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1801 := z.EncBinary()
				_ = yym1801
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1802 := z.EncBinary()
				_ = yym1802
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1799 || yy2arr1799 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1799 || yy2arr1799 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1799[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1805 := z.EncBinary()
						_ = yym1805
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1799[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1806 := z.EncBinary()
						_ = yym1806
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1799 || yy2arr1799 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1807 := z.DecBinary()
	_ = yym1807
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1808 := r.ContainerType()
		if yyct1808 == codecSelferValueTypeMap1234 {
			yyl1808 := r.ReadMapStart()
			if yyl1808 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1808, d)
			}
		} else if yyct1808 == codecSelferValueTypeArray1234 {
			yyl1808 := r.ReadArrayStart()
			if yyl1808 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1808, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1809Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1809Slc
	var yyhl1809 bool = l >= 0
	for yyj1809 := 0; ; yyj1809++ {
		if yyhl1809 {
			if yyj1809 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1809Slc = r.DecodeBytes(yys1809Slc, true, true)
		yys1809 := string(yys1809Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1809 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1812 := &x.Values
				yym1813 := z.DecBinary()
				_ = yym1813
				if false {
				} else {
					z.F.DecSliceStringX(yyv1812, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1809)
		} // end switch yys1809
	} // end for yyj1809
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1814 int
	var yyb1814 bool
	var yyhl1814 bool = l >= 0
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1817 := &x.Values
		yym1818 := z.DecBinary()
		_ = yym1818
		if false {
		} else {
			z.F.DecSliceStringX(yyv1817, false, d)
		}
	}
	for {
		yyj1814++
		if yyhl1814 {
			yyb1814 = yyj1814 > l
		} else {
			yyb1814 = r.CheckBreak()
		}
		if yyb1814 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1814-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1819 := z.EncBinary()
	_ = yym1819
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1820 := z.DecBinary()
	_ = yym1820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1821 := z.EncBinary()
		_ = yym1821
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1822 := !z.EncBinary()
			yy2arr1822 := z.EncBasicHandle().StructToArray
			var yyq1822 [3]bool
			_, _, _ = yysep1822, yyq1822, yy2arr1822
			const yyr1822 bool = false
			yyq1822[0] = x.NodeAffinity != nil
			yyq1822[1] = x.PodAffinity != nil
			yyq1822[2] = x.PodAntiAffinity != nil
			var yynn1822 int
			if yyr1822 || yy2arr1822 {
				r.EncodeArrayStart(3)
			} else {
				yynn1822 = 0
				for _, b := range yyq1822 {
					if b {
						yynn1822++
					}
				}
				r.EncodeMapStart(yynn1822)
				yynn1822 = 0
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1822[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1822[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1822[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1822[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1822[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1822[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1826 := z.DecBinary()
	_ = yym1826
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1827 := r.ContainerType()
		if yyct1827 == codecSelferValueTypeMap1234 {
			yyl1827 := r.ReadMapStart()
			if yyl1827 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1827, d)
			}
		} else if yyct1827 == codecSelferValueTypeArray1234 {
			yyl1827 := r.ReadArrayStart()
			if yyl1827 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1827, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1828Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1828Slc
	var yyhl1828 bool = l >= 0
	for yyj1828 := 0; ; yyj1828++ {
		if yyhl1828 {
			if yyj1828 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1828Slc = r.DecodeBytes(yys1828Slc, true, true)
		yys1828 := string(yys1828Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1828 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1828)
		} // end switch yys1828
	} // end for yyj1828
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1832 int
	var yyb1832 bool
	var yyhl1832 bool = l >= 0
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1832++
		if yyhl1832 {
			yyb1832 = yyj1832 > l
		} else {
			yyb1832 = r.CheckBreak()
		}
		if yyb1832 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1832-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1836 := z.EncBinary()
		_ = yym1836
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1837 := !z.EncBinary()
			yy2arr1837 := z.EncBasicHandle().StructToArray
			var yyq1837 [2]bool
			_, _, _ = yysep1837, yyq1837, yy2arr1837
			const yyr1837 bool = false
			yyq1837[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1837[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1837 int
			if yyr1837 || yy2arr1837 {
				r.EncodeArrayStart(2)
			} else {
				yynn1837 = 0
				for _, b := range yyq1837 {
					if b {
						yynn1837++
					}
				}
				r.EncodeMapStart(yynn1837)
				yynn1837 = 0
			}
			if yyr1837 || yy2arr1837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1837[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1839 := z.EncBinary()
						_ = yym1839
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1837[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1840 := z.EncBinary()
						_ = yym1840
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1837 || yy2arr1837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1837[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1842 := z.EncBinary()
						_ = yym1842
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1837[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1843 := z.EncBinary()
						_ = yym1843
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1837 || yy2arr1837 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1844 := z.DecBinary()
	_ = yym1844
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1845 := r.ContainerType()
		if yyct1845 == codecSelferValueTypeMap1234 {
			yyl1845 := r.ReadMapStart()
			if yyl1845 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1845, d)
			}
		} else if yyct1845 == codecSelferValueTypeArray1234 {
			yyl1845 := r.ReadArrayStart()
			if yyl1845 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1845, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1846Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1846Slc
	var yyhl1846 bool = l >= 0
	for yyj1846 := 0; ; yyj1846++ {
		if yyhl1846 {
			if yyj1846 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1846Slc = r.DecodeBytes(yys1846Slc, true, true)
		yys1846 := string(yys1846Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1846 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1847 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1848 := z.DecBinary()
				_ = yym1848
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1847), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1849 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1850 := z.DecBinary()
				_ = yym1850
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1849), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1846)
		} // end switch yys1846
	} // end for yyj1846
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1851 int
	var yyb1851 bool
	var yyhl1851 bool = l >= 0
	yyj1851++
	if yyhl1851 {
		yyb1851 = yyj1851 > l
	} else {
		yyb1851 = r.CheckBreak()
	}
	if yyb1851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1852 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1853 := z.DecBinary()
		_ = yym1853
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1852), d)
		}
	}
	yyj1851++
	if yyhl1851 {
		yyb1851 = yyj1851 > l
	} else {
		yyb1851 = r.CheckBreak()
	}
	if yyb1851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1854 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1855 := z.DecBinary()
		_ = yym1855
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1854), d)
		}
	}
	for {
		yyj1851++
		if yyhl1851 {
			yyb1851 = yyj1851 > l
		} else {
			yyb1851 = r.CheckBreak()
		}
		if yyb1851 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1851-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1856 := z.EncBinary()
		_ = yym1856
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1857 := !z.EncBinary()
			yy2arr1857 := z.EncBasicHandle().StructToArray
			var yyq1857 [2]bool
			_, _, _ = yysep1857, yyq1857, yy2arr1857
			const yyr1857 bool = false
			yyq1857[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1857[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1857 int
			if yyr1857 || yy2arr1857 {
				r.EncodeArrayStart(2)
			} else {
				yynn1857 = 0
				for _, b := range yyq1857 {
					if b {
						yynn1857++
					}
				}
				r.EncodeMapStart(yynn1857)
				yynn1857 = 0
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1857[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1859 := z.EncBinary()
						_ = yym1859
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1857[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1860 := z.EncBinary()
						_ = yym1860
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1857[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1862 := z.EncBinary()
						_ = yym1862
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1857[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1863 := z.EncBinary()
						_ = yym1863
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1864 := z.DecBinary()
	_ = yym1864
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1865 := r.ContainerType()
		if yyct1865 == codecSelferValueTypeMap1234 {
			yyl1865 := r.ReadMapStart()
			if yyl1865 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1865, d)
			}
		} else if yyct1865 == codecSelferValueTypeArray1234 {
			yyl1865 := r.ReadArrayStart()
			if yyl1865 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1865, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1866Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1866Slc
	var yyhl1866 bool = l >= 0
	for yyj1866 := 0; ; yyj1866++ {
		if yyhl1866 {
			if yyj1866 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1866Slc = r.DecodeBytes(yys1866Slc, true, true)
		yys1866 := string(yys1866Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1866 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1867 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1868 := z.DecBinary()
				_ = yym1868
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1867), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1869 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1870 := z.DecBinary()
				_ = yym1870
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1869), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1866)
		} // end switch yys1866
	} // end for yyj1866
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1871 int
	var yyb1871 bool
	var yyhl1871 bool = l >= 0
	yyj1871++
	if yyhl1871 {
		yyb1871 = yyj1871 > l
	} else {
		yyb1871 = r.CheckBreak()
	}
	if yyb1871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1872 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1873 := z.DecBinary()
		_ = yym1873
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1872), d)
		}
	}
	yyj1871++
	if yyhl1871 {
		yyb1871 = yyj1871 > l
	} else {
		yyb1871 = r.CheckBreak()
	}
	if yyb1871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1874 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1875 := z.DecBinary()
		_ = yym1875
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1874), d)
		}
	}
	for {
		yyj1871++
		if yyhl1871 {
			yyb1871 = yyj1871 > l
		} else {
			yyb1871 = r.CheckBreak()
		}
		if yyb1871 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1871-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1876 := z.EncBinary()
		_ = yym1876
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1877 := !z.EncBinary()
			yy2arr1877 := z.EncBasicHandle().StructToArray
			var yyq1877 [2]bool
			_, _, _ = yysep1877, yyq1877, yy2arr1877
			const yyr1877 bool = false
			var yynn1877 int
			if yyr1877 || yy2arr1877 {
				r.EncodeArrayStart(2)
			} else {
				yynn1877 = 2
				for _, b := range yyq1877 {
					if b {
						yynn1877++
					}
				}
				r.EncodeMapStart(yynn1877)
				yynn1877 = 0
			}
			if yyr1877 || yy2arr1877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1879 := z.EncBinary()
				_ = yym1879
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1880 := z.EncBinary()
				_ = yym1880
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1877 || yy2arr1877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1882 := &x.PodAffinityTerm
				yy1882.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1883 := &x.PodAffinityTerm
				yy1883.CodecEncodeSelf(e)
			}
			if yyr1877 || yy2arr1877 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1884 := z.DecBinary()
	_ = yym1884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1885 := r.ContainerType()
		if yyct1885 == codecSelferValueTypeMap1234 {
			yyl1885 := r.ReadMapStart()
			if yyl1885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1885, d)
			}
		} else if yyct1885 == codecSelferValueTypeArray1234 {
			yyl1885 := r.ReadArrayStart()
			if yyl1885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1886Slc
	var yyhl1886 bool = l >= 0
	for yyj1886 := 0; ; yyj1886++ {
		if yyhl1886 {
			if yyj1886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1886Slc = r.DecodeBytes(yys1886Slc, true, true)
		yys1886 := string(yys1886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1886 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1888 := &x.PodAffinityTerm
				yyv1888.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1886)
		} // end switch yys1886
	} // end for yyj1886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1889 int
	var yyb1889 bool
	var yyhl1889 bool = l >= 0
	yyj1889++
	if yyhl1889 {
		yyb1889 = yyj1889 > l
	} else {
		yyb1889 = r.CheckBreak()
	}
	if yyb1889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1889++
	if yyhl1889 {
		yyb1889 = yyj1889 > l
	} else {
		yyb1889 = r.CheckBreak()
	}
	if yyb1889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1891 := &x.PodAffinityTerm
		yyv1891.CodecDecodeSelf(d)
	}
	for {
		yyj1889++
		if yyhl1889 {
			yyb1889 = yyj1889 > l
		} else {
			yyb1889 = r.CheckBreak()
		}
		if yyb1889 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1889-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1892 := z.EncBinary()
		_ = yym1892
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1893 := !z.EncBinary()
			yy2arr1893 := z.EncBasicHandle().StructToArray
			var yyq1893 [3]bool
			_, _, _ = yysep1893, yyq1893, yy2arr1893
			const yyr1893 bool = false
			yyq1893[0] = x.LabelSelector != nil
			yyq1893[2] = x.TopologyKey != ""
			var yynn1893 int
			if yyr1893 || yy2arr1893 {
				r.EncodeArrayStart(3)
			} else {
				yynn1893 = 1
				for _, b := range yyq1893 {
					if b {
						yynn1893++
					}
				}
				r.EncodeMapStart(yynn1893)
				yynn1893 = 0
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1893[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1895 := z.EncBinary()
						_ = yym1895
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1893[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1896 := z.EncBinary()
						_ = yym1896
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1898 := z.EncBinary()
					_ = yym1898
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1899 := z.EncBinary()
					_ = yym1899
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1893[2] {
					yym1901 := z.EncBinary()
					_ = yym1901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1893[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1902 := z.EncBinary()
					_ = yym1902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1903 := z.DecBinary()
	_ = yym1903
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1904 := r.ContainerType()
		if yyct1904 == codecSelferValueTypeMap1234 {
			yyl1904 := r.ReadMapStart()
			if yyl1904 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1904, d)
			}
		} else if yyct1904 == codecSelferValueTypeArray1234 {
			yyl1904 := r.ReadArrayStart()
			if yyl1904 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1904, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1905Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1905Slc
	var yyhl1905 bool = l >= 0
	for yyj1905 := 0; ; yyj1905++ {
		if yyhl1905 {
			if yyj1905 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1905Slc = r.DecodeBytes(yys1905Slc, true, true)
		yys1905 := string(yys1905Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1905 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1907 := z.DecBinary()
				_ = yym1907
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1908 := &x.Namespaces
				yym1909 := z.DecBinary()
				_ = yym1909
				if false {
				} else {
					z.F.DecSliceStringX(yyv1908, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1905)
		} // end switch yys1905
	} // end for yyj1905
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1911 int
	var yyb1911 bool
	var yyhl1911 bool = l >= 0
	yyj1911++
	if yyhl1911 {
		yyb1911 = yyj1911 > l
	} else {
		yyb1911 = r.CheckBreak()
	}
	if yyb1911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1913 := z.DecBinary()
		_ = yym1913
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1911++
	if yyhl1911 {
		yyb1911 = yyj1911 > l
	} else {
		yyb1911 = r.CheckBreak()
	}
	if yyb1911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1914 := &x.Namespaces
		yym1915 := z.DecBinary()
		_ = yym1915
		if false {
		} else {
			z.F.DecSliceStringX(yyv1914, false, d)
		}
	}
	yyj1911++
	if yyhl1911 {
		yyb1911 = yyj1911 > l
	} else {
		yyb1911 = r.CheckBreak()
	}
	if yyb1911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1911++
		if yyhl1911 {
			yyb1911 = yyj1911 > l
		} else {
			yyb1911 = r.CheckBreak()
		}
		if yyb1911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1917 := z.EncBinary()
		_ = yym1917
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1918 := !z.EncBinary()
			yy2arr1918 := z.EncBasicHandle().StructToArray
			var yyq1918 [2]bool
			_, _, _ = yysep1918, yyq1918, yy2arr1918
			const yyr1918 bool = false
			yyq1918[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1918[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1918 int
			if yyr1918 || yy2arr1918 {
				r.EncodeArrayStart(2)
			} else {
				yynn1918 = 0
				for _, b := range yyq1918 {
					if b {
						yynn1918++
					}
				}
				r.EncodeMapStart(yynn1918)
				yynn1918 = 0
			}
			if yyr1918 || yy2arr1918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1918[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1918[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1918 || yy2arr1918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1918[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1921 := z.EncBinary()
						_ = yym1921
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1918[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1922 := z.EncBinary()
						_ = yym1922
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1918 || yy2arr1918 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1923 := z.DecBinary()
	_ = yym1923
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1924 := r.ContainerType()
		if yyct1924 == codecSelferValueTypeMap1234 {
			yyl1924 := r.ReadMapStart()
			if yyl1924 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1924, d)
			}
		} else if yyct1924 == codecSelferValueTypeArray1234 {
			yyl1924 := r.ReadArrayStart()
			if yyl1924 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1924, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1925Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1925Slc
	var yyhl1925 bool = l >= 0
	for yyj1925 := 0; ; yyj1925++ {
		if yyhl1925 {
			if yyj1925 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1925Slc = r.DecodeBytes(yys1925Slc, true, true)
		yys1925 := string(yys1925Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1925 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1927 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1928 := z.DecBinary()
				_ = yym1928
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1927), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1925)
		} // end switch yys1925
	} // end for yyj1925
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1929 int
	var yyb1929 bool
	var yyhl1929 bool = l >= 0
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1931 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1932 := z.DecBinary()
		_ = yym1932
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1931), d)
		}
	}
	for {
		yyj1929++
		if yyhl1929 {
			yyb1929 = yyj1929 > l
		} else {
			yyb1929 = r.CheckBreak()
		}
		if yyb1929 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1929-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1933 := z.EncBinary()
		_ = yym1933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1934 := !z.EncBinary()
			yy2arr1934 := z.EncBasicHandle().StructToArray
			var yyq1934 [2]bool
			_, _, _ = yysep1934, yyq1934, yy2arr1934
			const yyr1934 bool = false
			var yynn1934 int
			if yyr1934 || yy2arr1934 {
				r.EncodeArrayStart(2)
			} else {
				yynn1934 = 2
				for _, b := range yyq1934 {
					if b {
						yynn1934++
					}
				}
				r.EncodeMapStart(yynn1934)
				yynn1934 = 0
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1936 := z.EncBinary()
				_ = yym1936
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1937 := z.EncBinary()
				_ = yym1937
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1939 := &x.Preference
				yy1939.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1940 := &x.Preference
				yy1940.CodecEncodeSelf(e)
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1941 := z.DecBinary()
	_ = yym1941
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1942 := r.ContainerType()
		if yyct1942 == codecSelferValueTypeMap1234 {
			yyl1942 := r.ReadMapStart()
			if yyl1942 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1942, d)
			}
		} else if yyct1942 == codecSelferValueTypeArray1234 {
			yyl1942 := r.ReadArrayStart()
			if yyl1942 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1942, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1943Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1943Slc
	var yyhl1943 bool = l >= 0
	for yyj1943 := 0; ; yyj1943++ {
		if yyhl1943 {
			if yyj1943 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1943Slc = r.DecodeBytes(yys1943Slc, true, true)
		yys1943 := string(yys1943Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1943 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1945 := &x.Preference
				yyv1945.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1943)
		} // end switch yys1943
	} // end for yyj1943
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1946 int
	var yyb1946 bool
	var yyhl1946 bool = l >= 0
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1948 := &x.Preference
		yyv1948.CodecDecodeSelf(d)
	}
	for {
		yyj1946++
		if yyhl1946 {
			yyb1946 = yyj1946 > l
		} else {
			yyb1946 = r.CheckBreak()
		}
		if yyb1946 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1946-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1949 := z.EncBinary()
		_ = yym1949
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1950 := !z.EncBinary()
			yy2arr1950 := z.EncBasicHandle().StructToArray
			var yyq1950 [3]bool
			_, _, _ = yysep1950, yyq1950, yy2arr1950
			const yyr1950 bool = false
			yyq1950[1] = x.Value != ""
			var yynn1950 int
			if yyr1950 || yy2arr1950 {
				r.EncodeArrayStart(3)
			} else {
				yynn1950 = 2
				for _, b := range yyq1950 {
					if b {
						yynn1950++
					}
				}
				r.EncodeMapStart(yynn1950)
				yynn1950 = 0
			}
			if yyr1950 || yy2arr1950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1952 := z.EncBinary()
				_ = yym1952
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1953 := z.EncBinary()
				_ = yym1953
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1950 || yy2arr1950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1950[1] {
					yym1955 := z.EncBinary()
					_ = yym1955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1950[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1956 := z.EncBinary()
					_ = yym1956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1950 || yy2arr1950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1950 || yy2arr1950 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1958 := z.DecBinary()
	_ = yym1958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1959 := r.ContainerType()
		if yyct1959 == codecSelferValueTypeMap1234 {
			yyl1959 := r.ReadMapStart()
			if yyl1959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1959, d)
			}
		} else if yyct1959 == codecSelferValueTypeArray1234 {
			yyl1959 := r.ReadArrayStart()
			if yyl1959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1960Slc
	var yyhl1960 bool = l >= 0
	for yyj1960 := 0; ; yyj1960++ {
		if yyhl1960 {
			if yyj1960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1960Slc = r.DecodeBytes(yys1960Slc, true, true)
		yys1960 := string(yys1960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1960 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1960)
		} // end switch yys1960
	} // end for yyj1960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1964 int
	var yyb1964 bool
	var yyhl1964 bool = l >= 0
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1964++
		if yyhl1964 {
			yyb1964 = yyj1964 > l
		} else {
			yyb1964 = r.CheckBreak()
		}
		if yyb1964 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1964-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1968 := z.EncBinary()
	_ = yym1968
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1969 := z.DecBinary()
	_ = yym1969
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1970 := z.EncBinary()
		_ = yym1970
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1971 := !z.EncBinary()
			yy2arr1971 := z.EncBasicHandle().StructToArray
			var yyq1971 [5]bool
			_, _, _ = yysep1971, yyq1971, yy2arr1971
			const yyr1971 bool = false
			yyq1971[0] = x.Key != ""
			yyq1971[1] = x.Operator != ""
			yyq1971[2] = x.Value != ""
			yyq1971[3] = x.Effect != ""
			yyq1971[4] = x.ForgivenessSeconds != nil
			var yynn1971 int
			if yyr1971 || yy2arr1971 {
				r.EncodeArrayStart(5)
			} else {
				yynn1971 = 0
				for _, b := range yyq1971 {
					if b {
						yynn1971++
					}
				}
				r.EncodeMapStart(yynn1971)
				yynn1971 = 0
			}
			if yyr1971 || yy2arr1971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1971[0] {
					yym1973 := z.EncBinary()
					_ = yym1973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1971[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1974 := z.EncBinary()
					_ = yym1974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1971 || yy2arr1971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1971[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1971[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1971 || yy2arr1971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1971[2] {
					yym1977 := z.EncBinary()
					_ = yym1977
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1971[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1978 := z.EncBinary()
					_ = yym1978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1971 || yy2arr1971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1971[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1971[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1971 || yy2arr1971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1971[4] {
					if x.ForgivenessSeconds == nil {
						r.EncodeNil()
					} else {
						yy1981 := *x.ForgivenessSeconds
						yym1982 := z.EncBinary()
						_ = yym1982
						if false {
						} else {
							r.EncodeInt(int64(yy1981))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1971[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("forgivenessSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ForgivenessSeconds == nil {
						r.EncodeNil()
					} else {
						yy1983 := *x.ForgivenessSeconds
						yym1984 := z.EncBinary()
						_ = yym1984
						if false {
						} else {
							r.EncodeInt(int64(yy1983))
						}
					}
				}
			}
			if yyr1971 || yy2arr1971 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1985 := z.DecBinary()
	_ = yym1985
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1986 := r.ContainerType()
		if yyct1986 == codecSelferValueTypeMap1234 {
			yyl1986 := r.ReadMapStart()
			if yyl1986 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1986, d)
			}
		} else if yyct1986 == codecSelferValueTypeArray1234 {
			yyl1986 := r.ReadArrayStart()
			if yyl1986 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1986, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1987Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1987Slc
	var yyhl1987 bool = l >= 0
	for yyj1987 := 0; ; yyj1987++ {
		if yyhl1987 {
			if yyj1987 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1987Slc = r.DecodeBytes(yys1987Slc, true, true)
		yys1987 := string(yys1987Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1987 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		case "forgivenessSeconds":
			if r.TryDecodeAsNil() {
				if x.ForgivenessSeconds != nil {
					x.ForgivenessSeconds = nil
				}
			} else {
				if x.ForgivenessSeconds == nil {
					x.ForgivenessSeconds = new(int64)
				}
				yym1993 := z.DecBinary()
				_ = yym1993
				if false {
				} else {
					*((*int64)(x.ForgivenessSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1987)
		} // end switch yys1987
	} // end for yyj1987
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1994 int
	var yyb1994 bool
	var yyhl1994 bool = l >= 0
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ForgivenessSeconds != nil {
			x.ForgivenessSeconds = nil
		}
	} else {
		if x.ForgivenessSeconds == nil {
			x.ForgivenessSeconds = new(int64)
		}
		yym2000 := z.DecBinary()
		_ = yym2000
		if false {
		} else {
			*((*int64)(x.ForgivenessSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1994++
		if yyhl1994 {
			yyb1994 = yyj1994 > l
		} else {
			yyb1994 = r.CheckBreak()
		}
		if yyb1994 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1994-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2001 := z.EncBinary()
	_ = yym2001
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2002 := z.DecBinary()
	_ = yym2002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2003 := z.EncBinary()
		_ = yym2003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2004 := !z.EncBinary()
			yy2arr2004 := z.EncBasicHandle().StructToArray
			var yyq2004 [17]bool
			_, _, _ = yysep2004, yyq2004, yy2arr2004
			const yyr2004 bool = false
			yyq2004[0] = len(x.Volumes) != 0
			yyq2004[2] = x.RestartPolicy != ""
			yyq2004[3] = x.TerminationGracePeriodSeconds != nil
			yyq2004[4] = x.ActiveDeadlineSeconds != nil
			yyq2004[5] = x.DNSPolicy != ""
			yyq2004[6] = len(x.NodeSelector) != 0
			yyq2004[7] = x.ServiceAccountName != ""
			yyq2004[8] = x.DeprecatedServiceAccount != ""
			yyq2004[9] = x.NodeName != ""
			yyq2004[10] = x.HostNetwork != false
			yyq2004[11] = x.HostPID != false
			yyq2004[12] = x.HostIPC != false
			yyq2004[13] = x.SecurityContext != nil
			yyq2004[14] = len(x.ImagePullSecrets) != 0
			yyq2004[15] = x.Hostname != ""
			yyq2004[16] = x.Subdomain != ""
			var yynn2004 int
			if yyr2004 || yy2arr2004 {
				r.EncodeArrayStart(17)
			} else {
				yynn2004 = 1
				for _, b := range yyq2004 {
					if b {
						yynn2004++
					}
				}
				r.EncodeMapStart(yynn2004)
				yynn2004 = 0
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2006 := z.EncBinary()
						_ = yym2006
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2004[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2007 := z.EncBinary()
						_ = yym2007
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2009 := z.EncBinary()
					_ = yym2009
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2010 := z.EncBinary()
					_ = yym2010
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2013 := *x.TerminationGracePeriodSeconds
						yym2014 := z.EncBinary()
						_ = yym2014
						if false {
						} else {
							r.EncodeInt(int64(yy2013))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2004[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2015 := *x.TerminationGracePeriodSeconds
						yym2016 := z.EncBinary()
						_ = yym2016
						if false {
						} else {
							r.EncodeInt(int64(yy2015))
						}
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2018 := *x.ActiveDeadlineSeconds
						yym2019 := z.EncBinary()
						_ = yym2019
						if false {
						} else {
							r.EncodeInt(int64(yy2018))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2004[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2020 := *x.ActiveDeadlineSeconds
						yym2021 := z.EncBinary()
						_ = yym2021
						if false {
						} else {
							r.EncodeInt(int64(yy2020))
						}
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2024 := z.EncBinary()
						_ = yym2024
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2004[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2025 := z.EncBinary()
						_ = yym2025
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[7] {
					yym2027 := z.EncBinary()
					_ = yym2027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2028 := z.EncBinary()
					_ = yym2028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[8] {
					yym2030 := z.EncBinary()
					_ = yym2030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2031 := z.EncBinary()
					_ = yym2031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[9] {
					yym2033 := z.EncBinary()
					_ = yym2033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[10] {
					yym2036 := z.EncBinary()
					_ = yym2036
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2004[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2037 := z.EncBinary()
					_ = yym2037
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[11] {
					yym2039 := z.EncBinary()
					_ = yym2039
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2004[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2040 := z.EncBinary()
					_ = yym2040
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[12] {
					yym2042 := z.EncBinary()
					_ = yym2042
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2004[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2043 := z.EncBinary()
					_ = yym2043
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2004[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2046 := z.EncBinary()
						_ = yym2046
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2004[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2047 := z.EncBinary()
						_ = yym2047
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[15] {
					yym2049 := z.EncBinary()
					_ = yym2049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2050 := z.EncBinary()
					_ = yym2050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[16] {
					yym2052 := z.EncBinary()
					_ = yym2052
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2053 := z.EncBinary()
					_ = yym2053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2054 := z.DecBinary()
	_ = yym2054
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2055 := r.ContainerType()
		if yyct2055 == codecSelferValueTypeMap1234 {
			yyl2055 := r.ReadMapStart()
			if yyl2055 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2055, d)
			}
		} else if yyct2055 == codecSelferValueTypeArray1234 {
			yyl2055 := r.ReadArrayStart()
			if yyl2055 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2055, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2056Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2056Slc
	var yyhl2056 bool = l >= 0
	for yyj2056 := 0; ; yyj2056++ {
		if yyhl2056 {
			if yyj2056 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2056Slc = r.DecodeBytes(yys2056Slc, true, true)
		yys2056 := string(yys2056Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2056 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2057 := &x.Volumes
				yym2058 := z.DecBinary()
				_ = yym2058
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2057), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2059 := &x.Containers
				yym2060 := z.DecBinary()
				_ = yym2060
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2059), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2063 := z.DecBinary()
				_ = yym2063
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2065 := z.DecBinary()
				_ = yym2065
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2067 := &x.NodeSelector
				yym2068 := z.DecBinary()
				_ = yym2068
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2067, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2076 := &x.ImagePullSecrets
				yym2077 := z.DecBinary()
				_ = yym2077
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2076), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2056)
		} // end switch yys2056
	} // end for yyj2056
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2080 int
	var yyb2080 bool
	var yyhl2080 bool = l >= 0
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2081 := &x.Volumes
		yym2082 := z.DecBinary()
		_ = yym2082
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2081), d)
		}
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2083 := &x.Containers
		yym2084 := z.DecBinary()
		_ = yym2084
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2083), d)
		}
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2087 := z.DecBinary()
		_ = yym2087
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2089 := z.DecBinary()
		_ = yym2089
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2091 := &x.NodeSelector
		yym2092 := z.DecBinary()
		_ = yym2092
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2091, false, d)
		}
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2100 := &x.ImagePullSecrets
		yym2101 := z.DecBinary()
		_ = yym2101
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2100), d)
		}
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2080++
	if yyhl2080 {
		yyb2080 = yyj2080 > l
	} else {
		yyb2080 = r.CheckBreak()
	}
	if yyb2080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2080++
		if yyhl2080 {
			yyb2080 = yyj2080 > l
		} else {
			yyb2080 = r.CheckBreak()
		}
		if yyb2080 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2080-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2104 := z.EncBinary()
		_ = yym2104
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2105 := !z.EncBinary()
			yy2arr2105 := z.EncBasicHandle().StructToArray
			var yyq2105 [5]bool
			_, _, _ = yysep2105, yyq2105, yy2arr2105
			const yyr2105 bool = false
			yyq2105[0] = x.SELinuxOptions != nil
			yyq2105[1] = x.RunAsUser != nil
			yyq2105[2] = x.RunAsNonRoot != nil
			yyq2105[3] = len(x.SupplementalGroups) != 0
			yyq2105[4] = x.FSGroup != nil
			var yynn2105 int
			if yyr2105 || yy2arr2105 {
				r.EncodeArrayStart(5)
			} else {
				yynn2105 = 0
				for _, b := range yyq2105 {
					if b {
						yynn2105++
					}
				}
				r.EncodeMapStart(yynn2105)
				yynn2105 = 0
			}
			if yyr2105 || yy2arr2105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2105[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2105[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2105 || yy2arr2105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2105[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2108 := *x.RunAsUser
						yym2109 := z.EncBinary()
						_ = yym2109
						if false {
						} else {
							r.EncodeInt(int64(yy2108))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2105[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2110 := *x.RunAsUser
						yym2111 := z.EncBinary()
						_ = yym2111
						if false {
						} else {
							r.EncodeInt(int64(yy2110))
						}
					}
				}
			}
			if yyr2105 || yy2arr2105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2105[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2113 := *x.RunAsNonRoot
						yym2114 := z.EncBinary()
						_ = yym2114
						if false {
						} else {
							r.EncodeBool(bool(yy2113))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2105[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2115 := *x.RunAsNonRoot
						yym2116 := z.EncBinary()
						_ = yym2116
						if false {
						} else {
							r.EncodeBool(bool(yy2115))
						}
					}
				}
			}
			if yyr2105 || yy2arr2105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2105[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2118 := z.EncBinary()
						_ = yym2118
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2105[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2119 := z.EncBinary()
						_ = yym2119
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2105 || yy2arr2105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2105[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2121 := *x.FSGroup
						yym2122 := z.EncBinary()
						_ = yym2122
						if false {
						} else {
							r.EncodeInt(int64(yy2121))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2105[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2123 := *x.FSGroup
						yym2124 := z.EncBinary()
						_ = yym2124
						if false {
						} else {
							r.EncodeInt(int64(yy2123))
						}
					}
				}
			}
			if yyr2105 || yy2arr2105 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2125 := z.DecBinary()
	_ = yym2125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2126 := r.ContainerType()
		if yyct2126 == codecSelferValueTypeMap1234 {
			yyl2126 := r.ReadMapStart()
			if yyl2126 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2126, d)
			}
		} else if yyct2126 == codecSelferValueTypeArray1234 {
			yyl2126 := r.ReadArrayStart()
			if yyl2126 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2127Slc
	var yyhl2127 bool = l >= 0
	for yyj2127 := 0; ; yyj2127++ {
		if yyhl2127 {
			if yyj2127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2127Slc = r.DecodeBytes(yys2127Slc, true, true)
		yys2127 := string(yys2127Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2127 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2130 := z.DecBinary()
				_ = yym2130
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2132 := z.DecBinary()
				_ = yym2132
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2133 := &x.SupplementalGroups
				yym2134 := z.DecBinary()
				_ = yym2134
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2133, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2136 := z.DecBinary()
				_ = yym2136
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2127)
		} // end switch yys2127
	} // end for yyj2127
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2137 int
	var yyb2137 bool
	var yyhl2137 bool = l >= 0
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2140 := z.DecBinary()
		_ = yym2140
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2142 := z.DecBinary()
		_ = yym2142
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2143 := &x.SupplementalGroups
		yym2144 := z.DecBinary()
		_ = yym2144
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2143, false, d)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2146 := z.DecBinary()
		_ = yym2146
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2137++
		if yyhl2137 {
			yyb2137 = yyj2137 > l
		} else {
			yyb2137 = r.CheckBreak()
		}
		if yyb2137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2147 := z.EncBinary()
		_ = yym2147
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2148 := !z.EncBinary()
			yy2arr2148 := z.EncBasicHandle().StructToArray
			var yyq2148 [8]bool
			_, _, _ = yysep2148, yyq2148, yy2arr2148
			const yyr2148 bool = false
			yyq2148[0] = x.Phase != ""
			yyq2148[1] = len(x.Conditions) != 0
			yyq2148[2] = x.Message != ""
			yyq2148[3] = x.Reason != ""
			yyq2148[4] = x.HostIP != ""
			yyq2148[5] = x.PodIP != ""
			yyq2148[6] = x.StartTime != nil
			yyq2148[7] = len(x.ContainerStatuses) != 0
			var yynn2148 int
			if yyr2148 || yy2arr2148 {
				r.EncodeArrayStart(8)
			} else {
				yynn2148 = 0
				for _, b := range yyq2148 {
					if b {
						yynn2148++
					}
				}
				r.EncodeMapStart(yynn2148)
				yynn2148 = 0
			}
			if yyr2148 || yy2arr2148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2148[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2148[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2148 || yy2arr2148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2148[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2151 := z.EncBinary()
						_ = yym2151
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2148[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2152 := z.EncBinary()
						_ = yym2152
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2148 || yy2arr2148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2148[2] {
					yym2154 := z.EncBinary()
					_ = yym2154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2148[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2155 := z.EncBinary()
					_ = yym2155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2148 || yy2arr2148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2148[3] {
					yym2157 := z.EncBinary()
					_ = yym2157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2148[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2158 := z.EncBinary()
					_ = yym2158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2148 || yy2arr2148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2148[4] {
					yym2160 := z.EncBinary()
					_ = yym2160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2148[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2161 := z.EncBinary()
					_ = yym2161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2148 || yy2arr2148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2148[5] {
					yym2163 := z.EncBinary()
					_ = yym2163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2148[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2164 := z.EncBinary()
					_ = yym2164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2148 || yy2arr2148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2148[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2166 := z.EncBinary()
						_ = yym2166
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2166 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2166 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2148[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2167 := z.EncBinary()
						_ = yym2167
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2167 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2167 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2148 || yy2arr2148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2148[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2169 := z.EncBinary()
						_ = yym2169
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2148[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2170 := z.EncBinary()
						_ = yym2170
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2148 || yy2arr2148 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2171 := z.DecBinary()
	_ = yym2171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2172 := r.ContainerType()
		if yyct2172 == codecSelferValueTypeMap1234 {
			yyl2172 := r.ReadMapStart()
			if yyl2172 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2172, d)
			}
		} else if yyct2172 == codecSelferValueTypeArray1234 {
			yyl2172 := r.ReadArrayStart()
			if yyl2172 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2172, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2173Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2173Slc
	var yyhl2173 bool = l >= 0
	for yyj2173 := 0; ; yyj2173++ {
		if yyhl2173 {
			if yyj2173 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2173Slc = r.DecodeBytes(yys2173Slc, true, true)
		yys2173 := string(yys2173Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2173 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2175 := &x.Conditions
				yym2176 := z.DecBinary()
				_ = yym2176
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2175), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2182 := z.DecBinary()
				_ = yym2182
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2182 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2182 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2183 := &x.ContainerStatuses
				yym2184 := z.DecBinary()
				_ = yym2184
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2183), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2173)
		} // end switch yys2173
	} // end for yyj2173
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2185 int
	var yyb2185 bool
	var yyhl2185 bool = l >= 0
	yyj2185++
	if yyhl2185 {
		yyb2185 = yyj2185 > l
	} else {
		yyb2185 = r.CheckBreak()
	}
	if yyb2185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2185++
	if yyhl2185 {
		yyb2185 = yyj2185 > l
	} else {
		yyb2185 = r.CheckBreak()
	}
	if yyb2185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2187 := &x.Conditions
		yym2188 := z.DecBinary()
		_ = yym2188
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2187), d)
		}
	}
	yyj2185++
	if yyhl2185 {
		yyb2185 = yyj2185 > l
	} else {
		yyb2185 = r.CheckBreak()
	}
	if yyb2185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2185++
	if yyhl2185 {
		yyb2185 = yyj2185 > l
	} else {
		yyb2185 = r.CheckBreak()
	}
	if yyb2185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2185++
	if yyhl2185 {
		yyb2185 = yyj2185 > l
	} else {
		yyb2185 = r.CheckBreak()
	}
	if yyb2185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2185++
	if yyhl2185 {
		yyb2185 = yyj2185 > l
	} else {
		yyb2185 = r.CheckBreak()
	}
	if yyb2185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2185++
	if yyhl2185 {
		yyb2185 = yyj2185 > l
	} else {
		yyb2185 = r.CheckBreak()
	}
	if yyb2185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2194 := z.DecBinary()
		_ = yym2194
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2194 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2194 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2185++
	if yyhl2185 {
		yyb2185 = yyj2185 > l
	} else {
		yyb2185 = r.CheckBreak()
	}
	if yyb2185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2195 := &x.ContainerStatuses
		yym2196 := z.DecBinary()
		_ = yym2196
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2195), d)
		}
	}
	for {
		yyj2185++
		if yyhl2185 {
			yyb2185 = yyj2185 > l
		} else {
			yyb2185 = r.CheckBreak()
		}
		if yyb2185 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2185-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2197 := z.EncBinary()
		_ = yym2197
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2198 := !z.EncBinary()
			yy2arr2198 := z.EncBasicHandle().StructToArray
			var yyq2198 [4]bool
			_, _, _ = yysep2198, yyq2198, yy2arr2198
			const yyr2198 bool = false
			yyq2198[0] = x.Kind != ""
			yyq2198[1] = x.APIVersion != ""
			yyq2198[2] = true
			yyq2198[3] = true
			var yynn2198 int
			if yyr2198 || yy2arr2198 {
				r.EncodeArrayStart(4)
			} else {
				yynn2198 = 0
				for _, b := range yyq2198 {
					if b {
						yynn2198++
					}
				}
				r.EncodeMapStart(yynn2198)
				yynn2198 = 0
			}
			if yyr2198 || yy2arr2198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2198[0] {
					yym2200 := z.EncBinary()
					_ = yym2200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2198[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2201 := z.EncBinary()
					_ = yym2201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2198 || yy2arr2198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2198[1] {
					yym2203 := z.EncBinary()
					_ = yym2203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2198[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2204 := z.EncBinary()
					_ = yym2204
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2198 || yy2arr2198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2198[2] {
					yy2206 := &x.ObjectMeta
					yy2206.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2198[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2207 := &x.ObjectMeta
					yy2207.CodecEncodeSelf(e)
				}
			}
			if yyr2198 || yy2arr2198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2198[3] {
					yy2209 := &x.Status
					yy2209.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2198[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2210 := &x.Status
					yy2210.CodecEncodeSelf(e)
				}
			}
			if yyr2198 || yy2arr2198 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2211 := z.DecBinary()
	_ = yym2211
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2212 := r.ContainerType()
		if yyct2212 == codecSelferValueTypeMap1234 {
			yyl2212 := r.ReadMapStart()
			if yyl2212 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2212, d)
			}
		} else if yyct2212 == codecSelferValueTypeArray1234 {
			yyl2212 := r.ReadArrayStart()
			if yyl2212 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2212, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2213Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2213Slc
	var yyhl2213 bool = l >= 0
	for yyj2213 := 0; ; yyj2213++ {
		if yyhl2213 {
			if yyj2213 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2213Slc = r.DecodeBytes(yys2213Slc, true, true)
		yys2213 := string(yys2213Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2213 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2216 := &x.ObjectMeta
				yyv2216.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2217 := &x.Status
				yyv2217.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2213)
		} // end switch yys2213
	} // end for yyj2213
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2218 int
	var yyb2218 bool
	var yyhl2218 bool = l >= 0
	yyj2218++
	if yyhl2218 {
		yyb2218 = yyj2218 > l
	} else {
		yyb2218 = r.CheckBreak()
	}
	if yyb2218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2218++
	if yyhl2218 {
		yyb2218 = yyj2218 > l
	} else {
		yyb2218 = r.CheckBreak()
	}
	if yyb2218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2218++
	if yyhl2218 {
		yyb2218 = yyj2218 > l
	} else {
		yyb2218 = r.CheckBreak()
	}
	if yyb2218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2221 := &x.ObjectMeta
		yyv2221.CodecDecodeSelf(d)
	}
	yyj2218++
	if yyhl2218 {
		yyb2218 = yyj2218 > l
	} else {
		yyb2218 = r.CheckBreak()
	}
	if yyb2218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2222 := &x.Status
		yyv2222.CodecDecodeSelf(d)
	}
	for {
		yyj2218++
		if yyhl2218 {
			yyb2218 = yyj2218 > l
		} else {
			yyb2218 = r.CheckBreak()
		}
		if yyb2218 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2218-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2223 := z.EncBinary()
		_ = yym2223
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2224 := !z.EncBinary()
			yy2arr2224 := z.EncBasicHandle().StructToArray
			var yyq2224 [5]bool
			_, _, _ = yysep2224, yyq2224, yy2arr2224
			const yyr2224 bool = false
			yyq2224[0] = x.Kind != ""
			yyq2224[1] = x.APIVersion != ""
			yyq2224[2] = true
			yyq2224[3] = true
			yyq2224[4] = true
			var yynn2224 int
			if yyr2224 || yy2arr2224 {
				r.EncodeArrayStart(5)
			} else {
				yynn2224 = 0
				for _, b := range yyq2224 {
					if b {
						yynn2224++
					}
				}
				r.EncodeMapStart(yynn2224)
				yynn2224 = 0
			}
			if yyr2224 || yy2arr2224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2224[0] {
					yym2226 := z.EncBinary()
					_ = yym2226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2224[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2227 := z.EncBinary()
					_ = yym2227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2224 || yy2arr2224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2224[1] {
					yym2229 := z.EncBinary()
					_ = yym2229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2224[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2230 := z.EncBinary()
					_ = yym2230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2224 || yy2arr2224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2224[2] {
					yy2232 := &x.ObjectMeta
					yy2232.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2224[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2233 := &x.ObjectMeta
					yy2233.CodecEncodeSelf(e)
				}
			}
			if yyr2224 || yy2arr2224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2224[3] {
					yy2235 := &x.Spec
					yy2235.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2224[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2236 := &x.Spec
					yy2236.CodecEncodeSelf(e)
				}
			}
			if yyr2224 || yy2arr2224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2224[4] {
					yy2238 := &x.Status
					yy2238.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2224[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2239 := &x.Status
					yy2239.CodecEncodeSelf(e)
				}
			}
			if yyr2224 || yy2arr2224 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2240 := z.DecBinary()
	_ = yym2240
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2241 := r.ContainerType()
		if yyct2241 == codecSelferValueTypeMap1234 {
			yyl2241 := r.ReadMapStart()
			if yyl2241 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2241, d)
			}
		} else if yyct2241 == codecSelferValueTypeArray1234 {
			yyl2241 := r.ReadArrayStart()
			if yyl2241 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2241, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2242Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2242Slc
	var yyhl2242 bool = l >= 0
	for yyj2242 := 0; ; yyj2242++ {
		if yyhl2242 {
			if yyj2242 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2242Slc = r.DecodeBytes(yys2242Slc, true, true)
		yys2242 := string(yys2242Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2242 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2245 := &x.ObjectMeta
				yyv2245.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2246 := &x.Spec
				yyv2246.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2247 := &x.Status
				yyv2247.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2242)
		} // end switch yys2242
	} // end for yyj2242
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2248 int
	var yyb2248 bool
	var yyhl2248 bool = l >= 0
	yyj2248++
	if yyhl2248 {
		yyb2248 = yyj2248 > l
	} else {
		yyb2248 = r.CheckBreak()
	}
	if yyb2248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2248++
	if yyhl2248 {
		yyb2248 = yyj2248 > l
	} else {
		yyb2248 = r.CheckBreak()
	}
	if yyb2248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2248++
	if yyhl2248 {
		yyb2248 = yyj2248 > l
	} else {
		yyb2248 = r.CheckBreak()
	}
	if yyb2248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2251 := &x.ObjectMeta
		yyv2251.CodecDecodeSelf(d)
	}
	yyj2248++
	if yyhl2248 {
		yyb2248 = yyj2248 > l
	} else {
		yyb2248 = r.CheckBreak()
	}
	if yyb2248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2252 := &x.Spec
		yyv2252.CodecDecodeSelf(d)
	}
	yyj2248++
	if yyhl2248 {
		yyb2248 = yyj2248 > l
	} else {
		yyb2248 = r.CheckBreak()
	}
	if yyb2248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2253 := &x.Status
		yyv2253.CodecDecodeSelf(d)
	}
	for {
		yyj2248++
		if yyhl2248 {
			yyb2248 = yyj2248 > l
		} else {
			yyb2248 = r.CheckBreak()
		}
		if yyb2248 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2248-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2254 := z.EncBinary()
		_ = yym2254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2255 := !z.EncBinary()
			yy2arr2255 := z.EncBasicHandle().StructToArray
			var yyq2255 [4]bool
			_, _, _ = yysep2255, yyq2255, yy2arr2255
			const yyr2255 bool = false
			yyq2255[0] = x.Kind != ""
			yyq2255[1] = x.APIVersion != ""
			yyq2255[2] = true
			var yynn2255 int
			if yyr2255 || yy2arr2255 {
				r.EncodeArrayStart(4)
			} else {
				yynn2255 = 1
				for _, b := range yyq2255 {
					if b {
						yynn2255++
					}
				}
				r.EncodeMapStart(yynn2255)
				yynn2255 = 0
			}
			if yyr2255 || yy2arr2255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2255[0] {
					yym2257 := z.EncBinary()
					_ = yym2257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2255[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2258 := z.EncBinary()
					_ = yym2258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2255 || yy2arr2255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2255[1] {
					yym2260 := z.EncBinary()
					_ = yym2260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2255[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2261 := z.EncBinary()
					_ = yym2261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2255 || yy2arr2255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2255[2] {
					yy2263 := &x.ListMeta
					yym2264 := z.EncBinary()
					_ = yym2264
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2263) {
					} else {
						z.EncFallback(yy2263)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2255[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2265 := &x.ListMeta
					yym2266 := z.EncBinary()
					_ = yym2266
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2265) {
					} else {
						z.EncFallback(yy2265)
					}
				}
			}
			if yyr2255 || yy2arr2255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2268 := z.EncBinary()
					_ = yym2268
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2269 := z.EncBinary()
					_ = yym2269
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2255 || yy2arr2255 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2270 := z.DecBinary()
	_ = yym2270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2271 := r.ContainerType()
		if yyct2271 == codecSelferValueTypeMap1234 {
			yyl2271 := r.ReadMapStart()
			if yyl2271 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2271, d)
			}
		} else if yyct2271 == codecSelferValueTypeArray1234 {
			yyl2271 := r.ReadArrayStart()
			if yyl2271 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2272Slc
	var yyhl2272 bool = l >= 0
	for yyj2272 := 0; ; yyj2272++ {
		if yyhl2272 {
			if yyj2272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2272Slc = r.DecodeBytes(yys2272Slc, true, true)
		yys2272 := string(yys2272Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2272 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2275 := &x.ListMeta
				yym2276 := z.DecBinary()
				_ = yym2276
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2275) {
				} else {
					z.DecFallback(yyv2275, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2277 := &x.Items
				yym2278 := z.DecBinary()
				_ = yym2278
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2277), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2272)
		} // end switch yys2272
	} // end for yyj2272
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2279 int
	var yyb2279 bool
	var yyhl2279 bool = l >= 0
	yyj2279++
	if yyhl2279 {
		yyb2279 = yyj2279 > l
	} else {
		yyb2279 = r.CheckBreak()
	}
	if yyb2279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2279++
	if yyhl2279 {
		yyb2279 = yyj2279 > l
	} else {
		yyb2279 = r.CheckBreak()
	}
	if yyb2279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2279++
	if yyhl2279 {
		yyb2279 = yyj2279 > l
	} else {
		yyb2279 = r.CheckBreak()
	}
	if yyb2279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2282 := &x.ListMeta
		yym2283 := z.DecBinary()
		_ = yym2283
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2282) {
		} else {
			z.DecFallback(yyv2282, false)
		}
	}
	yyj2279++
	if yyhl2279 {
		yyb2279 = yyj2279 > l
	} else {
		yyb2279 = r.CheckBreak()
	}
	if yyb2279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2284 := &x.Items
		yym2285 := z.DecBinary()
		_ = yym2285
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2284), d)
		}
	}
	for {
		yyj2279++
		if yyhl2279 {
			yyb2279 = yyj2279 > l
		} else {
			yyb2279 = r.CheckBreak()
		}
		if yyb2279 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2279-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2286 := z.EncBinary()
		_ = yym2286
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2287 := !z.EncBinary()
			yy2arr2287 := z.EncBasicHandle().StructToArray
			var yyq2287 [2]bool
			_, _, _ = yysep2287, yyq2287, yy2arr2287
			const yyr2287 bool = false
			yyq2287[0] = true
			yyq2287[1] = true
			var yynn2287 int
			if yyr2287 || yy2arr2287 {
				r.EncodeArrayStart(2)
			} else {
				yynn2287 = 0
				for _, b := range yyq2287 {
					if b {
						yynn2287++
					}
				}
				r.EncodeMapStart(yynn2287)
				yynn2287 = 0
			}
			if yyr2287 || yy2arr2287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2287[0] {
					yy2289 := &x.ObjectMeta
					yy2289.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2287[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2290 := &x.ObjectMeta
					yy2290.CodecEncodeSelf(e)
				}
			}
			if yyr2287 || yy2arr2287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2287[1] {
					yy2292 := &x.Spec
					yy2292.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2287[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2293 := &x.Spec
					yy2293.CodecEncodeSelf(e)
				}
			}
			if yyr2287 || yy2arr2287 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2294 := z.DecBinary()
	_ = yym2294
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2295 := r.ContainerType()
		if yyct2295 == codecSelferValueTypeMap1234 {
			yyl2295 := r.ReadMapStart()
			if yyl2295 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2295, d)
			}
		} else if yyct2295 == codecSelferValueTypeArray1234 {
			yyl2295 := r.ReadArrayStart()
			if yyl2295 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2295, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2296Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2296Slc
	var yyhl2296 bool = l >= 0
	for yyj2296 := 0; ; yyj2296++ {
		if yyhl2296 {
			if yyj2296 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2296Slc = r.DecodeBytes(yys2296Slc, true, true)
		yys2296 := string(yys2296Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2296 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2297 := &x.ObjectMeta
				yyv2297.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2298 := &x.Spec
				yyv2298.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2296)
		} // end switch yys2296
	} // end for yyj2296
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2299 int
	var yyb2299 bool
	var yyhl2299 bool = l >= 0
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2300 := &x.ObjectMeta
		yyv2300.CodecDecodeSelf(d)
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2301 := &x.Spec
		yyv2301.CodecDecodeSelf(d)
	}
	for {
		yyj2299++
		if yyhl2299 {
			yyb2299 = yyj2299 > l
		} else {
			yyb2299 = r.CheckBreak()
		}
		if yyb2299 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2299-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2302 := z.EncBinary()
		_ = yym2302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2303 := !z.EncBinary()
			yy2arr2303 := z.EncBasicHandle().StructToArray
			var yyq2303 [4]bool
			_, _, _ = yysep2303, yyq2303, yy2arr2303
			const yyr2303 bool = false
			yyq2303[0] = x.Kind != ""
			yyq2303[1] = x.APIVersion != ""
			yyq2303[2] = true
			yyq2303[3] = true
			var yynn2303 int
			if yyr2303 || yy2arr2303 {
				r.EncodeArrayStart(4)
			} else {
				yynn2303 = 0
				for _, b := range yyq2303 {
					if b {
						yynn2303++
					}
				}
				r.EncodeMapStart(yynn2303)
				yynn2303 = 0
			}
			if yyr2303 || yy2arr2303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2303[0] {
					yym2305 := z.EncBinary()
					_ = yym2305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2303[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2306 := z.EncBinary()
					_ = yym2306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2303 || yy2arr2303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2303[1] {
					yym2308 := z.EncBinary()
					_ = yym2308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2303[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2309 := z.EncBinary()
					_ = yym2309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2303 || yy2arr2303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2303[2] {
					yy2311 := &x.ObjectMeta
					yy2311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2303[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2312 := &x.ObjectMeta
					yy2312.CodecEncodeSelf(e)
				}
			}
			if yyr2303 || yy2arr2303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2303[3] {
					yy2314 := &x.Template
					yy2314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2303[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2315 := &x.Template
					yy2315.CodecEncodeSelf(e)
				}
			}
			if yyr2303 || yy2arr2303 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2316 := z.DecBinary()
	_ = yym2316
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2317 := r.ContainerType()
		if yyct2317 == codecSelferValueTypeMap1234 {
			yyl2317 := r.ReadMapStart()
			if yyl2317 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2317, d)
			}
		} else if yyct2317 == codecSelferValueTypeArray1234 {
			yyl2317 := r.ReadArrayStart()
			if yyl2317 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2317, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2318Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2318Slc
	var yyhl2318 bool = l >= 0
	for yyj2318 := 0; ; yyj2318++ {
		if yyhl2318 {
			if yyj2318 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2318Slc = r.DecodeBytes(yys2318Slc, true, true)
		yys2318 := string(yys2318Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2318 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2321 := &x.ObjectMeta
				yyv2321.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2322 := &x.Template
				yyv2322.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2318)
		} // end switch yys2318
	} // end for yyj2318
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2323 int
	var yyb2323 bool
	var yyhl2323 bool = l >= 0
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2326 := &x.ObjectMeta
		yyv2326.CodecDecodeSelf(d)
	}
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2327 := &x.Template
		yyv2327.CodecDecodeSelf(d)
	}
	for {
		yyj2323++
		if yyhl2323 {
			yyb2323 = yyj2323 > l
		} else {
			yyb2323 = r.CheckBreak()
		}
		if yyb2323 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2323-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2328 := z.EncBinary()
		_ = yym2328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2329 := !z.EncBinary()
			yy2arr2329 := z.EncBasicHandle().StructToArray
			var yyq2329 [4]bool
			_, _, _ = yysep2329, yyq2329, yy2arr2329
			const yyr2329 bool = false
			yyq2329[0] = x.Kind != ""
			yyq2329[1] = x.APIVersion != ""
			yyq2329[2] = true
			var yynn2329 int
			if yyr2329 || yy2arr2329 {
				r.EncodeArrayStart(4)
			} else {
				yynn2329 = 1
				for _, b := range yyq2329 {
					if b {
						yynn2329++
					}
				}
				r.EncodeMapStart(yynn2329)
				yynn2329 = 0
			}
			if yyr2329 || yy2arr2329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2329[0] {
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2329[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2332 := z.EncBinary()
					_ = yym2332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2329 || yy2arr2329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2329[1] {
					yym2334 := z.EncBinary()
					_ = yym2334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2329[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2335 := z.EncBinary()
					_ = yym2335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2329 || yy2arr2329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2329[2] {
					yy2337 := &x.ListMeta
					yym2338 := z.EncBinary()
					_ = yym2338
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2337) {
					} else {
						z.EncFallback(yy2337)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2329[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2339 := &x.ListMeta
					yym2340 := z.EncBinary()
					_ = yym2340
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2339) {
					} else {
						z.EncFallback(yy2339)
					}
				}
			}
			if yyr2329 || yy2arr2329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2342 := z.EncBinary()
					_ = yym2342
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2343 := z.EncBinary()
					_ = yym2343
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2329 || yy2arr2329 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2344 := z.DecBinary()
	_ = yym2344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2345 := r.ContainerType()
		if yyct2345 == codecSelferValueTypeMap1234 {
			yyl2345 := r.ReadMapStart()
			if yyl2345 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2345, d)
			}
		} else if yyct2345 == codecSelferValueTypeArray1234 {
			yyl2345 := r.ReadArrayStart()
			if yyl2345 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2346Slc
	var yyhl2346 bool = l >= 0
	for yyj2346 := 0; ; yyj2346++ {
		if yyhl2346 {
			if yyj2346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2346Slc = r.DecodeBytes(yys2346Slc, true, true)
		yys2346 := string(yys2346Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2346 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2349 := &x.ListMeta
				yym2350 := z.DecBinary()
				_ = yym2350
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2349) {
				} else {
					z.DecFallback(yyv2349, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2351 := &x.Items
				yym2352 := z.DecBinary()
				_ = yym2352
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2351), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2346)
		} // end switch yys2346
	} // end for yyj2346
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2353 int
	var yyb2353 bool
	var yyhl2353 bool = l >= 0
	yyj2353++
	if yyhl2353 {
		yyb2353 = yyj2353 > l
	} else {
		yyb2353 = r.CheckBreak()
	}
	if yyb2353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2353++
	if yyhl2353 {
		yyb2353 = yyj2353 > l
	} else {
		yyb2353 = r.CheckBreak()
	}
	if yyb2353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2353++
	if yyhl2353 {
		yyb2353 = yyj2353 > l
	} else {
		yyb2353 = r.CheckBreak()
	}
	if yyb2353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2356 := &x.ListMeta
		yym2357 := z.DecBinary()
		_ = yym2357
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2356) {
		} else {
			z.DecFallback(yyv2356, false)
		}
	}
	yyj2353++
	if yyhl2353 {
		yyb2353 = yyj2353 > l
	} else {
		yyb2353 = r.CheckBreak()
	}
	if yyb2353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2358 := &x.Items
		yym2359 := z.DecBinary()
		_ = yym2359
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2358), d)
		}
	}
	for {
		yyj2353++
		if yyhl2353 {
			yyb2353 = yyj2353 > l
		} else {
			yyb2353 = r.CheckBreak()
		}
		if yyb2353 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2353-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2360 := z.EncBinary()
		_ = yym2360
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2361 := !z.EncBinary()
			yy2arr2361 := z.EncBasicHandle().StructToArray
			var yyq2361 [4]bool
			_, _, _ = yysep2361, yyq2361, yy2arr2361
			const yyr2361 bool = false
			yyq2361[0] = x.Replicas != nil
			yyq2361[1] = x.MinReadySeconds != 0
			yyq2361[2] = len(x.Selector) != 0
			yyq2361[3] = x.Template != nil
			var yynn2361 int
			if yyr2361 || yy2arr2361 {
				r.EncodeArrayStart(4)
			} else {
				yynn2361 = 0
				for _, b := range yyq2361 {
					if b {
						yynn2361++
					}
				}
				r.EncodeMapStart(yynn2361)
				yynn2361 = 0
			}
			if yyr2361 || yy2arr2361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2361[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2363 := *x.Replicas
						yym2364 := z.EncBinary()
						_ = yym2364
						if false {
						} else {
							r.EncodeInt(int64(yy2363))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2361[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2365 := *x.Replicas
						yym2366 := z.EncBinary()
						_ = yym2366
						if false {
						} else {
							r.EncodeInt(int64(yy2365))
						}
					}
				}
			}
			if yyr2361 || yy2arr2361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2361[1] {
					yym2368 := z.EncBinary()
					_ = yym2368
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2361[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2369 := z.EncBinary()
					_ = yym2369
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr2361 || yy2arr2361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2361[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2371 := z.EncBinary()
						_ = yym2371
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2361[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2372 := z.EncBinary()
						_ = yym2372
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2361 || yy2arr2361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2361[3] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2361[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2361 || yy2arr2361 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2374 := z.DecBinary()
	_ = yym2374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2375 := r.ContainerType()
		if yyct2375 == codecSelferValueTypeMap1234 {
			yyl2375 := r.ReadMapStart()
			if yyl2375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2375, d)
			}
		} else if yyct2375 == codecSelferValueTypeArray1234 {
			yyl2375 := r.ReadArrayStart()
			if yyl2375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2376Slc
	var yyhl2376 bool = l >= 0
	for yyj2376 := 0; ; yyj2376++ {
		if yyhl2376 {
			if yyj2376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2376Slc = r.DecodeBytes(yys2376Slc, true, true)
		yys2376 := string(yys2376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2376 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2378 := z.DecBinary()
				_ = yym2378
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2380 := &x.Selector
				yym2381 := z.DecBinary()
				_ = yym2381
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2380, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2376)
		} // end switch yys2376
	} // end for yyj2376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2383 int
	var yyb2383 bool
	var yyhl2383 bool = l >= 0
	yyj2383++
	if yyhl2383 {
		yyb2383 = yyj2383 > l
	} else {
		yyb2383 = r.CheckBreak()
	}
	if yyb2383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2385 := z.DecBinary()
		_ = yym2385
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2383++
	if yyhl2383 {
		yyb2383 = yyj2383 > l
	} else {
		yyb2383 = r.CheckBreak()
	}
	if yyb2383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj2383++
	if yyhl2383 {
		yyb2383 = yyj2383 > l
	} else {
		yyb2383 = r.CheckBreak()
	}
	if yyb2383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2387 := &x.Selector
		yym2388 := z.DecBinary()
		_ = yym2388
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2387, false, d)
		}
	}
	yyj2383++
	if yyhl2383 {
		yyb2383 = yyj2383 > l
	} else {
		yyb2383 = r.CheckBreak()
	}
	if yyb2383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2383++
		if yyhl2383 {
			yyb2383 = yyj2383 > l
		} else {
			yyb2383 = r.CheckBreak()
		}
		if yyb2383 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2383-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2390 := z.EncBinary()
		_ = yym2390
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2391 := !z.EncBinary()
			yy2arr2391 := z.EncBasicHandle().StructToArray
			var yyq2391 [5]bool
			_, _, _ = yysep2391, yyq2391, yy2arr2391
			const yyr2391 bool = false
			yyq2391[1] = x.FullyLabeledReplicas != 0
			yyq2391[2] = x.ReadyReplicas != 0
			yyq2391[3] = x.AvailableReplicas != 0
			yyq2391[4] = x.ObservedGeneration != 0
			var yynn2391 int
			if yyr2391 || yy2arr2391 {
				r.EncodeArrayStart(5)
			} else {
				yynn2391 = 1
				for _, b := range yyq2391 {
					if b {
						yynn2391++
					}
				}
				r.EncodeMapStart(yynn2391)
				yynn2391 = 0
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2393 := z.EncBinary()
				_ = yym2393
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2394 := z.EncBinary()
				_ = yym2394
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2391[1] {
					yym2396 := z.EncBinary()
					_ = yym2396
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2391[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2397 := z.EncBinary()
					_ = yym2397
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2391[2] {
					yym2399 := z.EncBinary()
					_ = yym2399
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2391[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2400 := z.EncBinary()
					_ = yym2400
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2391[3] {
					yym2402 := z.EncBinary()
					_ = yym2402
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2391[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2403 := z.EncBinary()
					_ = yym2403
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2391[4] {
					yym2405 := z.EncBinary()
					_ = yym2405
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2391[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2406 := z.EncBinary()
					_ = yym2406
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2407 := z.DecBinary()
	_ = yym2407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2408 := r.ContainerType()
		if yyct2408 == codecSelferValueTypeMap1234 {
			yyl2408 := r.ReadMapStart()
			if yyl2408 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2408, d)
			}
		} else if yyct2408 == codecSelferValueTypeArray1234 {
			yyl2408 := r.ReadArrayStart()
			if yyl2408 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2408, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2409Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2409Slc
	var yyhl2409 bool = l >= 0
	for yyj2409 := 0; ; yyj2409++ {
		if yyhl2409 {
			if yyj2409 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2409Slc = r.DecodeBytes(yys2409Slc, true, true)
		yys2409 := string(yys2409Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2409 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2409)
		} // end switch yys2409
	} // end for yyj2409
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2415 int
	var yyb2415 bool
	var yyhl2415 bool = l >= 0
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2415++
		if yyhl2415 {
			yyb2415 = yyj2415 > l
		} else {
			yyb2415 = r.CheckBreak()
		}
		if yyb2415 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2415-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2421 := z.EncBinary()
		_ = yym2421
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2422 := !z.EncBinary()
			yy2arr2422 := z.EncBasicHandle().StructToArray
			var yyq2422 [5]bool
			_, _, _ = yysep2422, yyq2422, yy2arr2422
			const yyr2422 bool = false
			yyq2422[0] = x.Kind != ""
			yyq2422[1] = x.APIVersion != ""
			yyq2422[2] = true
			yyq2422[3] = true
			yyq2422[4] = true
			var yynn2422 int
			if yyr2422 || yy2arr2422 {
				r.EncodeArrayStart(5)
			} else {
				yynn2422 = 0
				for _, b := range yyq2422 {
					if b {
						yynn2422++
					}
				}
				r.EncodeMapStart(yynn2422)
				yynn2422 = 0
			}
			if yyr2422 || yy2arr2422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2422[0] {
					yym2424 := z.EncBinary()
					_ = yym2424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2422[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2425 := z.EncBinary()
					_ = yym2425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2422 || yy2arr2422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2422[1] {
					yym2427 := z.EncBinary()
					_ = yym2427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2422[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2422 || yy2arr2422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2422[2] {
					yy2430 := &x.ObjectMeta
					yy2430.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2422[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2431 := &x.ObjectMeta
					yy2431.CodecEncodeSelf(e)
				}
			}
			if yyr2422 || yy2arr2422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2422[3] {
					yy2433 := &x.Spec
					yy2433.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2422[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2434 := &x.Spec
					yy2434.CodecEncodeSelf(e)
				}
			}
			if yyr2422 || yy2arr2422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2422[4] {
					yy2436 := &x.Status
					yy2436.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2422[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2437 := &x.Status
					yy2437.CodecEncodeSelf(e)
				}
			}
			if yyr2422 || yy2arr2422 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2438 := z.DecBinary()
	_ = yym2438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2439 := r.ContainerType()
		if yyct2439 == codecSelferValueTypeMap1234 {
			yyl2439 := r.ReadMapStart()
			if yyl2439 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2439, d)
			}
		} else if yyct2439 == codecSelferValueTypeArray1234 {
			yyl2439 := r.ReadArrayStart()
			if yyl2439 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2439, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2440Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2440Slc
	var yyhl2440 bool = l >= 0
	for yyj2440 := 0; ; yyj2440++ {
		if yyhl2440 {
			if yyj2440 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2440Slc = r.DecodeBytes(yys2440Slc, true, true)
		yys2440 := string(yys2440Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2440 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2443 := &x.ObjectMeta
				yyv2443.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2444 := &x.Spec
				yyv2444.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2445 := &x.Status
				yyv2445.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2440)
		} // end switch yys2440
	} // end for yyj2440
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2446 int
	var yyb2446 bool
	var yyhl2446 bool = l >= 0
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2449 := &x.ObjectMeta
		yyv2449.CodecDecodeSelf(d)
	}
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2450 := &x.Spec
		yyv2450.CodecDecodeSelf(d)
	}
	yyj2446++
	if yyhl2446 {
		yyb2446 = yyj2446 > l
	} else {
		yyb2446 = r.CheckBreak()
	}
	if yyb2446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2451 := &x.Status
		yyv2451.CodecDecodeSelf(d)
	}
	for {
		yyj2446++
		if yyhl2446 {
			yyb2446 = yyj2446 > l
		} else {
			yyb2446 = r.CheckBreak()
		}
		if yyb2446 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2446-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2452 := z.EncBinary()
		_ = yym2452
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2453 := !z.EncBinary()
			yy2arr2453 := z.EncBasicHandle().StructToArray
			var yyq2453 [4]bool
			_, _, _ = yysep2453, yyq2453, yy2arr2453
			const yyr2453 bool = false
			yyq2453[0] = x.Kind != ""
			yyq2453[1] = x.APIVersion != ""
			yyq2453[2] = true
			var yynn2453 int
			if yyr2453 || yy2arr2453 {
				r.EncodeArrayStart(4)
			} else {
				yynn2453 = 1
				for _, b := range yyq2453 {
					if b {
						yynn2453++
					}
				}
				r.EncodeMapStart(yynn2453)
				yynn2453 = 0
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2453[0] {
					yym2455 := z.EncBinary()
					_ = yym2455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2453[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2456 := z.EncBinary()
					_ = yym2456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2453[1] {
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2453[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2459 := z.EncBinary()
					_ = yym2459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2453[2] {
					yy2461 := &x.ListMeta
					yym2462 := z.EncBinary()
					_ = yym2462
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2461) {
					} else {
						z.EncFallback(yy2461)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2453[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2463 := &x.ListMeta
					yym2464 := z.EncBinary()
					_ = yym2464
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2463) {
					} else {
						z.EncFallback(yy2463)
					}
				}
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2466 := z.EncBinary()
					_ = yym2466
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2467 := z.EncBinary()
					_ = yym2467
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2453 || yy2arr2453 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2468 := z.DecBinary()
	_ = yym2468
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2469 := r.ContainerType()
		if yyct2469 == codecSelferValueTypeMap1234 {
			yyl2469 := r.ReadMapStart()
			if yyl2469 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2469, d)
			}
		} else if yyct2469 == codecSelferValueTypeArray1234 {
			yyl2469 := r.ReadArrayStart()
			if yyl2469 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2469, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2470Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2470Slc
	var yyhl2470 bool = l >= 0
	for yyj2470 := 0; ; yyj2470++ {
		if yyhl2470 {
			if yyj2470 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2470Slc = r.DecodeBytes(yys2470Slc, true, true)
		yys2470 := string(yys2470Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2470 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2473 := &x.ListMeta
				yym2474 := z.DecBinary()
				_ = yym2474
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2473) {
				} else {
					z.DecFallback(yyv2473, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2475 := &x.Items
				yym2476 := z.DecBinary()
				_ = yym2476
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2475), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2470)
		} // end switch yys2470
	} // end for yyj2470
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2477 int
	var yyb2477 bool
	var yyhl2477 bool = l >= 0
	yyj2477++
	if yyhl2477 {
		yyb2477 = yyj2477 > l
	} else {
		yyb2477 = r.CheckBreak()
	}
	if yyb2477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2477++
	if yyhl2477 {
		yyb2477 = yyj2477 > l
	} else {
		yyb2477 = r.CheckBreak()
	}
	if yyb2477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2477++
	if yyhl2477 {
		yyb2477 = yyj2477 > l
	} else {
		yyb2477 = r.CheckBreak()
	}
	if yyb2477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2480 := &x.ListMeta
		yym2481 := z.DecBinary()
		_ = yym2481
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2480) {
		} else {
			z.DecFallback(yyv2480, false)
		}
	}
	yyj2477++
	if yyhl2477 {
		yyb2477 = yyj2477 > l
	} else {
		yyb2477 = r.CheckBreak()
	}
	if yyb2477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2482 := &x.Items
		yym2483 := z.DecBinary()
		_ = yym2483
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2482), d)
		}
	}
	for {
		yyj2477++
		if yyhl2477 {
			yyb2477 = yyj2477 > l
		} else {
			yyb2477 = r.CheckBreak()
		}
		if yyb2477 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2477-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2484 := z.EncBinary()
	_ = yym2484
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2485 := z.DecBinary()
	_ = yym2485
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2486 := z.EncBinary()
	_ = yym2486
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2487 := z.DecBinary()
	_ = yym2487
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2488 := z.EncBinary()
		_ = yym2488
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2489 := !z.EncBinary()
			yy2arr2489 := z.EncBasicHandle().StructToArray
			var yyq2489 [1]bool
			_, _, _ = yysep2489, yyq2489, yy2arr2489
			const yyr2489 bool = false
			yyq2489[0] = true
			var yynn2489 int
			if yyr2489 || yy2arr2489 {
				r.EncodeArrayStart(1)
			} else {
				yynn2489 = 0
				for _, b := range yyq2489 {
					if b {
						yynn2489++
					}
				}
				r.EncodeMapStart(yynn2489)
				yynn2489 = 0
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2489[0] {
					yy2491 := &x.LoadBalancer
					yy2491.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2489[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2492 := &x.LoadBalancer
					yy2492.CodecEncodeSelf(e)
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2493 := z.DecBinary()
	_ = yym2493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2494 := r.ContainerType()
		if yyct2494 == codecSelferValueTypeMap1234 {
			yyl2494 := r.ReadMapStart()
			if yyl2494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2494, d)
			}
		} else if yyct2494 == codecSelferValueTypeArray1234 {
			yyl2494 := r.ReadArrayStart()
			if yyl2494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2495Slc
	var yyhl2495 bool = l >= 0
	for yyj2495 := 0; ; yyj2495++ {
		if yyhl2495 {
			if yyj2495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2495Slc = r.DecodeBytes(yys2495Slc, true, true)
		yys2495 := string(yys2495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2495 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2496 := &x.LoadBalancer
				yyv2496.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2495)
		} // end switch yys2495
	} // end for yyj2495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2497 int
	var yyb2497 bool
	var yyhl2497 bool = l >= 0
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2498 := &x.LoadBalancer
		yyv2498.CodecDecodeSelf(d)
	}
	for {
		yyj2497++
		if yyhl2497 {
			yyb2497 = yyj2497 > l
		} else {
			yyb2497 = r.CheckBreak()
		}
		if yyb2497 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2497-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2499 := z.EncBinary()
		_ = yym2499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2500 := !z.EncBinary()
			yy2arr2500 := z.EncBasicHandle().StructToArray
			var yyq2500 [1]bool
			_, _, _ = yysep2500, yyq2500, yy2arr2500
			const yyr2500 bool = false
			yyq2500[0] = len(x.Ingress) != 0
			var yynn2500 int
			if yyr2500 || yy2arr2500 {
				r.EncodeArrayStart(1)
			} else {
				yynn2500 = 0
				for _, b := range yyq2500 {
					if b {
						yynn2500++
					}
				}
				r.EncodeMapStart(yynn2500)
				yynn2500 = 0
			}
			if yyr2500 || yy2arr2500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2500[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2502 := z.EncBinary()
						_ = yym2502
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2500[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2503 := z.EncBinary()
						_ = yym2503
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2500 || yy2arr2500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2504 := z.DecBinary()
	_ = yym2504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2505 := r.ContainerType()
		if yyct2505 == codecSelferValueTypeMap1234 {
			yyl2505 := r.ReadMapStart()
			if yyl2505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2505, d)
			}
		} else if yyct2505 == codecSelferValueTypeArray1234 {
			yyl2505 := r.ReadArrayStart()
			if yyl2505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2506Slc
	var yyhl2506 bool = l >= 0
	for yyj2506 := 0; ; yyj2506++ {
		if yyhl2506 {
			if yyj2506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2506Slc = r.DecodeBytes(yys2506Slc, true, true)
		yys2506 := string(yys2506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2506 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2507 := &x.Ingress
				yym2508 := z.DecBinary()
				_ = yym2508
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2507), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2506)
		} // end switch yys2506
	} // end for yyj2506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2509 int
	var yyb2509 bool
	var yyhl2509 bool = l >= 0
	yyj2509++
	if yyhl2509 {
		yyb2509 = yyj2509 > l
	} else {
		yyb2509 = r.CheckBreak()
	}
	if yyb2509 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2510 := &x.Ingress
		yym2511 := z.DecBinary()
		_ = yym2511
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2510), d)
		}
	}
	for {
		yyj2509++
		if yyhl2509 {
			yyb2509 = yyj2509 > l
		} else {
			yyb2509 = r.CheckBreak()
		}
		if yyb2509 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2509-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2512 := z.EncBinary()
		_ = yym2512
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2513 := !z.EncBinary()
			yy2arr2513 := z.EncBasicHandle().StructToArray
			var yyq2513 [2]bool
			_, _, _ = yysep2513, yyq2513, yy2arr2513
			const yyr2513 bool = false
			yyq2513[0] = x.IP != ""
			yyq2513[1] = x.Hostname != ""
			var yynn2513 int
			if yyr2513 || yy2arr2513 {
				r.EncodeArrayStart(2)
			} else {
				yynn2513 = 0
				for _, b := range yyq2513 {
					if b {
						yynn2513++
					}
				}
				r.EncodeMapStart(yynn2513)
				yynn2513 = 0
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2513[0] {
					yym2515 := z.EncBinary()
					_ = yym2515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2513[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2516 := z.EncBinary()
					_ = yym2516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2513[1] {
					yym2518 := z.EncBinary()
					_ = yym2518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2513[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2519 := z.EncBinary()
					_ = yym2519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2520 := z.DecBinary()
	_ = yym2520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2521 := r.ContainerType()
		if yyct2521 == codecSelferValueTypeMap1234 {
			yyl2521 := r.ReadMapStart()
			if yyl2521 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2521, d)
			}
		} else if yyct2521 == codecSelferValueTypeArray1234 {
			yyl2521 := r.ReadArrayStart()
			if yyl2521 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2521, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2522Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2522Slc
	var yyhl2522 bool = l >= 0
	for yyj2522 := 0; ; yyj2522++ {
		if yyhl2522 {
			if yyj2522 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2522Slc = r.DecodeBytes(yys2522Slc, true, true)
		yys2522 := string(yys2522Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2522 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2522)
		} // end switch yys2522
	} // end for yyj2522
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2525 int
	var yyb2525 bool
	var yyhl2525 bool = l >= 0
	yyj2525++
	if yyhl2525 {
		yyb2525 = yyj2525 > l
	} else {
		yyb2525 = r.CheckBreak()
	}
	if yyb2525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2525++
	if yyhl2525 {
		yyb2525 = yyj2525 > l
	} else {
		yyb2525 = r.CheckBreak()
	}
	if yyb2525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2525++
		if yyhl2525 {
			yyb2525 = yyj2525 > l
		} else {
			yyb2525 = r.CheckBreak()
		}
		if yyb2525 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2525-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2528 := z.EncBinary()
		_ = yym2528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2529 := !z.EncBinary()
			yy2arr2529 := z.EncBasicHandle().StructToArray
			var yyq2529 [10]bool
			_, _, _ = yysep2529, yyq2529, yy2arr2529
			const yyr2529 bool = false
			yyq2529[1] = len(x.Selector) != 0
			yyq2529[2] = x.ClusterIP != ""
			yyq2529[3] = x.Type != ""
			yyq2529[4] = len(x.ExternalIPs) != 0
			yyq2529[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2529[6] = x.SessionAffinity != ""
			yyq2529[7] = x.LoadBalancerIP != ""
			yyq2529[8] = len(x.LoadBalancerSourceRanges) != 0
			yyq2529[9] = x.ExternalName != ""
			var yynn2529 int
			if yyr2529 || yy2arr2529 {
				r.EncodeArrayStart(10)
			} else {
				yynn2529 = 1
				for _, b := range yyq2529 {
					if b {
						yynn2529++
					}
				}
				r.EncodeMapStart(yynn2529)
				yynn2529 = 0
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2531 := z.EncBinary()
					_ = yym2531
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2532 := z.EncBinary()
					_ = yym2532
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2534 := z.EncBinary()
						_ = yym2534
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2529[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2535 := z.EncBinary()
						_ = yym2535
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[2] {
					yym2537 := z.EncBinary()
					_ = yym2537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2529[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2529[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2541 := z.EncBinary()
						_ = yym2541
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2529[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2542 := z.EncBinary()
						_ = yym2542
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2544 := z.EncBinary()
						_ = yym2544
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2529[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2545 := z.EncBinary()
						_ = yym2545
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2529[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[7] {
					yym2548 := z.EncBinary()
					_ = yym2548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2529[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2549 := z.EncBinary()
					_ = yym2549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2551 := z.EncBinary()
						_ = yym2551
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2529[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2552 := z.EncBinary()
						_ = yym2552
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[9] {
					yym2554 := z.EncBinary()
					_ = yym2554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2529[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2555 := z.EncBinary()
					_ = yym2555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2556 := z.DecBinary()
	_ = yym2556
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2557 := r.ContainerType()
		if yyct2557 == codecSelferValueTypeMap1234 {
			yyl2557 := r.ReadMapStart()
			if yyl2557 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2557, d)
			}
		} else if yyct2557 == codecSelferValueTypeArray1234 {
			yyl2557 := r.ReadArrayStart()
			if yyl2557 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2557, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2558Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2558Slc
	var yyhl2558 bool = l >= 0
	for yyj2558 := 0; ; yyj2558++ {
		if yyhl2558 {
			if yyj2558 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2558Slc = r.DecodeBytes(yys2558Slc, true, true)
		yys2558 := string(yys2558Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2558 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2559 := &x.Ports
				yym2560 := z.DecBinary()
				_ = yym2560
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2559), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2561 := &x.Selector
				yym2562 := z.DecBinary()
				_ = yym2562
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2561, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2565 := &x.ExternalIPs
				yym2566 := z.DecBinary()
				_ = yym2566
				if false {
				} else {
					z.F.DecSliceStringX(yyv2565, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2567 := &x.DeprecatedPublicIPs
				yym2568 := z.DecBinary()
				_ = yym2568
				if false {
				} else {
					z.F.DecSliceStringX(yyv2567, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2571 := &x.LoadBalancerSourceRanges
				yym2572 := z.DecBinary()
				_ = yym2572
				if false {
				} else {
					z.F.DecSliceStringX(yyv2571, false, d)
				}
			}
		case "externalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2558)
		} // end switch yys2558
	} // end for yyj2558
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2574 int
	var yyb2574 bool
	var yyhl2574 bool = l >= 0
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2575 := &x.Ports
		yym2576 := z.DecBinary()
		_ = yym2576
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2575), d)
		}
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2577 := &x.Selector
		yym2578 := z.DecBinary()
		_ = yym2578
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2577, false, d)
		}
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2581 := &x.ExternalIPs
		yym2582 := z.DecBinary()
		_ = yym2582
		if false {
		} else {
			z.F.DecSliceStringX(yyv2581, false, d)
		}
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2583 := &x.DeprecatedPublicIPs
		yym2584 := z.DecBinary()
		_ = yym2584
		if false {
		} else {
			z.F.DecSliceStringX(yyv2583, false, d)
		}
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2587 := &x.LoadBalancerSourceRanges
		yym2588 := z.DecBinary()
		_ = yym2588
		if false {
		} else {
			z.F.DecSliceStringX(yyv2587, false, d)
		}
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	for {
		yyj2574++
		if yyhl2574 {
			yyb2574 = yyj2574 > l
		} else {
			yyb2574 = r.CheckBreak()
		}
		if yyb2574 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2574-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2590 := z.EncBinary()
		_ = yym2590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2591 := !z.EncBinary()
			yy2arr2591 := z.EncBasicHandle().StructToArray
			var yyq2591 [5]bool
			_, _, _ = yysep2591, yyq2591, yy2arr2591
			const yyr2591 bool = false
			yyq2591[0] = x.Name != ""
			yyq2591[1] = x.Protocol != ""
			yyq2591[3] = true
			yyq2591[4] = x.NodePort != 0
			var yynn2591 int
			if yyr2591 || yy2arr2591 {
				r.EncodeArrayStart(5)
			} else {
				yynn2591 = 1
				for _, b := range yyq2591 {
					if b {
						yynn2591++
					}
				}
				r.EncodeMapStart(yynn2591)
				yynn2591 = 0
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[0] {
					yym2593 := z.EncBinary()
					_ = yym2593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2591[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2591[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2597 := z.EncBinary()
				_ = yym2597
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2598 := z.EncBinary()
				_ = yym2598
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[3] {
					yy2600 := &x.TargetPort
					yym2601 := z.EncBinary()
					_ = yym2601
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2600) {
					} else if !yym2601 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2600)
					} else {
						z.EncFallback(yy2600)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2591[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2602 := &x.TargetPort
					yym2603 := z.EncBinary()
					_ = yym2603
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2602) {
					} else if !yym2603 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2602)
					} else {
						z.EncFallback(yy2602)
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[4] {
					yym2605 := z.EncBinary()
					_ = yym2605
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2591[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2606 := z.EncBinary()
					_ = yym2606
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2607 := z.DecBinary()
	_ = yym2607
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2608 := r.ContainerType()
		if yyct2608 == codecSelferValueTypeMap1234 {
			yyl2608 := r.ReadMapStart()
			if yyl2608 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2608, d)
			}
		} else if yyct2608 == codecSelferValueTypeArray1234 {
			yyl2608 := r.ReadArrayStart()
			if yyl2608 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2608, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2609Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2609Slc
	var yyhl2609 bool = l >= 0
	for yyj2609 := 0; ; yyj2609++ {
		if yyhl2609 {
			if yyj2609 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2609Slc = r.DecodeBytes(yys2609Slc, true, true)
		yys2609 := string(yys2609Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2609 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2613 := &x.TargetPort
				yym2614 := z.DecBinary()
				_ = yym2614
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2613) {
				} else if !yym2614 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2613)
				} else {
					z.DecFallback(yyv2613, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2609)
		} // end switch yys2609
	} // end for yyj2609
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2616 int
	var yyb2616 bool
	var yyhl2616 bool = l >= 0
	yyj2616++
	if yyhl2616 {
		yyb2616 = yyj2616 > l
	} else {
		yyb2616 = r.CheckBreak()
	}
	if yyb2616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2616++
	if yyhl2616 {
		yyb2616 = yyj2616 > l
	} else {
		yyb2616 = r.CheckBreak()
	}
	if yyb2616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2616++
	if yyhl2616 {
		yyb2616 = yyj2616 > l
	} else {
		yyb2616 = r.CheckBreak()
	}
	if yyb2616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2616++
	if yyhl2616 {
		yyb2616 = yyj2616 > l
	} else {
		yyb2616 = r.CheckBreak()
	}
	if yyb2616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2620 := &x.TargetPort
		yym2621 := z.DecBinary()
		_ = yym2621
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2620) {
		} else if !yym2621 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2620)
		} else {
			z.DecFallback(yyv2620, false)
		}
	}
	yyj2616++
	if yyhl2616 {
		yyb2616 = yyj2616 > l
	} else {
		yyb2616 = r.CheckBreak()
	}
	if yyb2616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2616++
		if yyhl2616 {
			yyb2616 = yyj2616 > l
		} else {
			yyb2616 = r.CheckBreak()
		}
		if yyb2616 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2616-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2623 := z.EncBinary()
		_ = yym2623
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2624 := !z.EncBinary()
			yy2arr2624 := z.EncBasicHandle().StructToArray
			var yyq2624 [5]bool
			_, _, _ = yysep2624, yyq2624, yy2arr2624
			const yyr2624 bool = false
			yyq2624[0] = x.Kind != ""
			yyq2624[1] = x.APIVersion != ""
			yyq2624[2] = true
			yyq2624[3] = true
			yyq2624[4] = true
			var yynn2624 int
			if yyr2624 || yy2arr2624 {
				r.EncodeArrayStart(5)
			} else {
				yynn2624 = 0
				for _, b := range yyq2624 {
					if b {
						yynn2624++
					}
				}
				r.EncodeMapStart(yynn2624)
				yynn2624 = 0
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[0] {
					yym2626 := z.EncBinary()
					_ = yym2626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2624[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2627 := z.EncBinary()
					_ = yym2627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[1] {
					yym2629 := z.EncBinary()
					_ = yym2629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2624[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2630 := z.EncBinary()
					_ = yym2630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[2] {
					yy2632 := &x.ObjectMeta
					yy2632.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2624[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2633 := &x.ObjectMeta
					yy2633.CodecEncodeSelf(e)
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[3] {
					yy2635 := &x.Spec
					yy2635.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2624[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2636 := &x.Spec
					yy2636.CodecEncodeSelf(e)
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[4] {
					yy2638 := &x.Status
					yy2638.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2624[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2639 := &x.Status
					yy2639.CodecEncodeSelf(e)
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2640 := z.DecBinary()
	_ = yym2640
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2641 := r.ContainerType()
		if yyct2641 == codecSelferValueTypeMap1234 {
			yyl2641 := r.ReadMapStart()
			if yyl2641 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2641, d)
			}
		} else if yyct2641 == codecSelferValueTypeArray1234 {
			yyl2641 := r.ReadArrayStart()
			if yyl2641 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2641, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2642Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2642Slc
	var yyhl2642 bool = l >= 0
	for yyj2642 := 0; ; yyj2642++ {
		if yyhl2642 {
			if yyj2642 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2642Slc = r.DecodeBytes(yys2642Slc, true, true)
		yys2642 := string(yys2642Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2642 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2645 := &x.ObjectMeta
				yyv2645.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2646 := &x.Spec
				yyv2646.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2647 := &x.Status
				yyv2647.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2642)
		} // end switch yys2642
	} // end for yyj2642
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2648 int
	var yyb2648 bool
	var yyhl2648 bool = l >= 0
	yyj2648++
	if yyhl2648 {
		yyb2648 = yyj2648 > l
	} else {
		yyb2648 = r.CheckBreak()
	}
	if yyb2648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2648++
	if yyhl2648 {
		yyb2648 = yyj2648 > l
	} else {
		yyb2648 = r.CheckBreak()
	}
	if yyb2648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2648++
	if yyhl2648 {
		yyb2648 = yyj2648 > l
	} else {
		yyb2648 = r.CheckBreak()
	}
	if yyb2648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2651 := &x.ObjectMeta
		yyv2651.CodecDecodeSelf(d)
	}
	yyj2648++
	if yyhl2648 {
		yyb2648 = yyj2648 > l
	} else {
		yyb2648 = r.CheckBreak()
	}
	if yyb2648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2652 := &x.Spec
		yyv2652.CodecDecodeSelf(d)
	}
	yyj2648++
	if yyhl2648 {
		yyb2648 = yyj2648 > l
	} else {
		yyb2648 = r.CheckBreak()
	}
	if yyb2648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2653 := &x.Status
		yyv2653.CodecDecodeSelf(d)
	}
	for {
		yyj2648++
		if yyhl2648 {
			yyb2648 = yyj2648 > l
		} else {
			yyb2648 = r.CheckBreak()
		}
		if yyb2648 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2648-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2654 := z.EncBinary()
		_ = yym2654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2655 := !z.EncBinary()
			yy2arr2655 := z.EncBasicHandle().StructToArray
			var yyq2655 [4]bool
			_, _, _ = yysep2655, yyq2655, yy2arr2655
			const yyr2655 bool = false
			yyq2655[0] = x.Kind != ""
			yyq2655[1] = x.APIVersion != ""
			yyq2655[2] = true
			var yynn2655 int
			if yyr2655 || yy2arr2655 {
				r.EncodeArrayStart(4)
			} else {
				yynn2655 = 1
				for _, b := range yyq2655 {
					if b {
						yynn2655++
					}
				}
				r.EncodeMapStart(yynn2655)
				yynn2655 = 0
			}
			if yyr2655 || yy2arr2655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2655[0] {
					yym2657 := z.EncBinary()
					_ = yym2657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2655[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2658 := z.EncBinary()
					_ = yym2658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2655 || yy2arr2655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2655[1] {
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2655[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2661 := z.EncBinary()
					_ = yym2661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2655 || yy2arr2655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2655[2] {
					yy2663 := &x.ListMeta
					yym2664 := z.EncBinary()
					_ = yym2664
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2663) {
					} else {
						z.EncFallback(yy2663)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2655[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2665 := &x.ListMeta
					yym2666 := z.EncBinary()
					_ = yym2666
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2665) {
					} else {
						z.EncFallback(yy2665)
					}
				}
			}
			if yyr2655 || yy2arr2655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2668 := z.EncBinary()
					_ = yym2668
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2669 := z.EncBinary()
					_ = yym2669
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2655 || yy2arr2655 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2670 := z.DecBinary()
	_ = yym2670
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2671 := r.ContainerType()
		if yyct2671 == codecSelferValueTypeMap1234 {
			yyl2671 := r.ReadMapStart()
			if yyl2671 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2671, d)
			}
		} else if yyct2671 == codecSelferValueTypeArray1234 {
			yyl2671 := r.ReadArrayStart()
			if yyl2671 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2671, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2672Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2672Slc
	var yyhl2672 bool = l >= 0
	for yyj2672 := 0; ; yyj2672++ {
		if yyhl2672 {
			if yyj2672 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2672Slc = r.DecodeBytes(yys2672Slc, true, true)
		yys2672 := string(yys2672Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2672 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2675 := &x.ListMeta
				yym2676 := z.DecBinary()
				_ = yym2676
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2675) {
				} else {
					z.DecFallback(yyv2675, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2677 := &x.Items
				yym2678 := z.DecBinary()
				_ = yym2678
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2677), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2672)
		} // end switch yys2672
	} // end for yyj2672
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2679 int
	var yyb2679 bool
	var yyhl2679 bool = l >= 0
	yyj2679++
	if yyhl2679 {
		yyb2679 = yyj2679 > l
	} else {
		yyb2679 = r.CheckBreak()
	}
	if yyb2679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2679++
	if yyhl2679 {
		yyb2679 = yyj2679 > l
	} else {
		yyb2679 = r.CheckBreak()
	}
	if yyb2679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2679++
	if yyhl2679 {
		yyb2679 = yyj2679 > l
	} else {
		yyb2679 = r.CheckBreak()
	}
	if yyb2679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2682 := &x.ListMeta
		yym2683 := z.DecBinary()
		_ = yym2683
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2682) {
		} else {
			z.DecFallback(yyv2682, false)
		}
	}
	yyj2679++
	if yyhl2679 {
		yyb2679 = yyj2679 > l
	} else {
		yyb2679 = r.CheckBreak()
	}
	if yyb2679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2684 := &x.Items
		yym2685 := z.DecBinary()
		_ = yym2685
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2684), d)
		}
	}
	for {
		yyj2679++
		if yyhl2679 {
			yyb2679 = yyj2679 > l
		} else {
			yyb2679 = r.CheckBreak()
		}
		if yyb2679 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2679-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2686 := z.EncBinary()
		_ = yym2686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2687 := !z.EncBinary()
			yy2arr2687 := z.EncBasicHandle().StructToArray
			var yyq2687 [5]bool
			_, _, _ = yysep2687, yyq2687, yy2arr2687
			const yyr2687 bool = false
			yyq2687[0] = x.Kind != ""
			yyq2687[1] = x.APIVersion != ""
			yyq2687[2] = true
			yyq2687[3] = len(x.Secrets) != 0
			yyq2687[4] = len(x.ImagePullSecrets) != 0
			var yynn2687 int
			if yyr2687 || yy2arr2687 {
				r.EncodeArrayStart(5)
			} else {
				yynn2687 = 0
				for _, b := range yyq2687 {
					if b {
						yynn2687++
					}
				}
				r.EncodeMapStart(yynn2687)
				yynn2687 = 0
			}
			if yyr2687 || yy2arr2687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2687[0] {
					yym2689 := z.EncBinary()
					_ = yym2689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2687[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2690 := z.EncBinary()
					_ = yym2690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2687 || yy2arr2687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2687[1] {
					yym2692 := z.EncBinary()
					_ = yym2692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2687[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2693 := z.EncBinary()
					_ = yym2693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2687 || yy2arr2687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2687[2] {
					yy2695 := &x.ObjectMeta
					yy2695.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2687[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2696 := &x.ObjectMeta
					yy2696.CodecEncodeSelf(e)
				}
			}
			if yyr2687 || yy2arr2687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2687[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2698 := z.EncBinary()
						_ = yym2698
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2687[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2699 := z.EncBinary()
						_ = yym2699
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2687 || yy2arr2687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2687[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2701 := z.EncBinary()
						_ = yym2701
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2687[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2702 := z.EncBinary()
						_ = yym2702
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2687 || yy2arr2687 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2703 := z.DecBinary()
	_ = yym2703
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2704 := r.ContainerType()
		if yyct2704 == codecSelferValueTypeMap1234 {
			yyl2704 := r.ReadMapStart()
			if yyl2704 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2704, d)
			}
		} else if yyct2704 == codecSelferValueTypeArray1234 {
			yyl2704 := r.ReadArrayStart()
			if yyl2704 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2704, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2705Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2705Slc
	var yyhl2705 bool = l >= 0
	for yyj2705 := 0; ; yyj2705++ {
		if yyhl2705 {
			if yyj2705 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2705Slc = r.DecodeBytes(yys2705Slc, true, true)
		yys2705 := string(yys2705Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2705 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2708 := &x.ObjectMeta
				yyv2708.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2709 := &x.Secrets
				yym2710 := z.DecBinary()
				_ = yym2710
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2709), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2711 := &x.ImagePullSecrets
				yym2712 := z.DecBinary()
				_ = yym2712
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2711), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2705)
		} // end switch yys2705
	} // end for yyj2705
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2713 int
	var yyb2713 bool
	var yyhl2713 bool = l >= 0
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2716 := &x.ObjectMeta
		yyv2716.CodecDecodeSelf(d)
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2717 := &x.Secrets
		yym2718 := z.DecBinary()
		_ = yym2718
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2717), d)
		}
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2719 := &x.ImagePullSecrets
		yym2720 := z.DecBinary()
		_ = yym2720
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2719), d)
		}
	}
	for {
		yyj2713++
		if yyhl2713 {
			yyb2713 = yyj2713 > l
		} else {
			yyb2713 = r.CheckBreak()
		}
		if yyb2713 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2713-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2721 := z.EncBinary()
		_ = yym2721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2722 := !z.EncBinary()
			yy2arr2722 := z.EncBasicHandle().StructToArray
			var yyq2722 [4]bool
			_, _, _ = yysep2722, yyq2722, yy2arr2722
			const yyr2722 bool = false
			yyq2722[0] = x.Kind != ""
			yyq2722[1] = x.APIVersion != ""
			yyq2722[2] = true
			var yynn2722 int
			if yyr2722 || yy2arr2722 {
				r.EncodeArrayStart(4)
			} else {
				yynn2722 = 1
				for _, b := range yyq2722 {
					if b {
						yynn2722++
					}
				}
				r.EncodeMapStart(yynn2722)
				yynn2722 = 0
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2722[0] {
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2722[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2725 := z.EncBinary()
					_ = yym2725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2722[1] {
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2722[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2722[2] {
					yy2730 := &x.ListMeta
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2730) {
					} else {
						z.EncFallback(yy2730)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2722[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2732 := &x.ListMeta
					yym2733 := z.EncBinary()
					_ = yym2733
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2732) {
					} else {
						z.EncFallback(yy2732)
					}
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2737 := z.DecBinary()
	_ = yym2737
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2738 := r.ContainerType()
		if yyct2738 == codecSelferValueTypeMap1234 {
			yyl2738 := r.ReadMapStart()
			if yyl2738 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2738, d)
			}
		} else if yyct2738 == codecSelferValueTypeArray1234 {
			yyl2738 := r.ReadArrayStart()
			if yyl2738 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2738, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2739Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2739Slc
	var yyhl2739 bool = l >= 0
	for yyj2739 := 0; ; yyj2739++ {
		if yyhl2739 {
			if yyj2739 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2739Slc = r.DecodeBytes(yys2739Slc, true, true)
		yys2739 := string(yys2739Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2739 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2742 := &x.ListMeta
				yym2743 := z.DecBinary()
				_ = yym2743
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2742) {
				} else {
					z.DecFallback(yyv2742, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2744 := &x.Items
				yym2745 := z.DecBinary()
				_ = yym2745
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2744), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2739)
		} // end switch yys2739
	} // end for yyj2739
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2746 int
	var yyb2746 bool
	var yyhl2746 bool = l >= 0
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2749 := &x.ListMeta
		yym2750 := z.DecBinary()
		_ = yym2750
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2749) {
		} else {
			z.DecFallback(yyv2749, false)
		}
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2751 := &x.Items
		yym2752 := z.DecBinary()
		_ = yym2752
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2751), d)
		}
	}
	for {
		yyj2746++
		if yyhl2746 {
			yyb2746 = yyj2746 > l
		} else {
			yyb2746 = r.CheckBreak()
		}
		if yyb2746 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2746-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2753 := z.EncBinary()
		_ = yym2753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2754 := !z.EncBinary()
			yy2arr2754 := z.EncBasicHandle().StructToArray
			var yyq2754 [4]bool
			_, _, _ = yysep2754, yyq2754, yy2arr2754
			const yyr2754 bool = false
			yyq2754[0] = x.Kind != ""
			yyq2754[1] = x.APIVersion != ""
			yyq2754[2] = true
			var yynn2754 int
			if yyr2754 || yy2arr2754 {
				r.EncodeArrayStart(4)
			} else {
				yynn2754 = 1
				for _, b := range yyq2754 {
					if b {
						yynn2754++
					}
				}
				r.EncodeMapStart(yynn2754)
				yynn2754 = 0
			}
			if yyr2754 || yy2arr2754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2754[0] {
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2754[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2757 := z.EncBinary()
					_ = yym2757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2754 || yy2arr2754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2754[1] {
					yym2759 := z.EncBinary()
					_ = yym2759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2754[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2760 := z.EncBinary()
					_ = yym2760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2754 || yy2arr2754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2754[2] {
					yy2762 := &x.ObjectMeta
					yy2762.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2754[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2763 := &x.ObjectMeta
					yy2763.CodecEncodeSelf(e)
				}
			}
			if yyr2754 || yy2arr2754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2765 := z.EncBinary()
					_ = yym2765
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2754 || yy2arr2754 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2767 := z.DecBinary()
	_ = yym2767
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2768 := r.ContainerType()
		if yyct2768 == codecSelferValueTypeMap1234 {
			yyl2768 := r.ReadMapStart()
			if yyl2768 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2768, d)
			}
		} else if yyct2768 == codecSelferValueTypeArray1234 {
			yyl2768 := r.ReadArrayStart()
			if yyl2768 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2768, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2769Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2769Slc
	var yyhl2769 bool = l >= 0
	for yyj2769 := 0; ; yyj2769++ {
		if yyhl2769 {
			if yyj2769 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2769Slc = r.DecodeBytes(yys2769Slc, true, true)
		yys2769 := string(yys2769Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2769 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2772 := &x.ObjectMeta
				yyv2772.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2773 := &x.Subsets
				yym2774 := z.DecBinary()
				_ = yym2774
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2773), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2769)
		} // end switch yys2769
	} // end for yyj2769
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2775 int
	var yyb2775 bool
	var yyhl2775 bool = l >= 0
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2778 := &x.ObjectMeta
		yyv2778.CodecDecodeSelf(d)
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2779 := &x.Subsets
		yym2780 := z.DecBinary()
		_ = yym2780
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2779), d)
		}
	}
	for {
		yyj2775++
		if yyhl2775 {
			yyb2775 = yyj2775 > l
		} else {
			yyb2775 = r.CheckBreak()
		}
		if yyb2775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2781 := z.EncBinary()
		_ = yym2781
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2782 := !z.EncBinary()
			yy2arr2782 := z.EncBasicHandle().StructToArray
			var yyq2782 [3]bool
			_, _, _ = yysep2782, yyq2782, yy2arr2782
			const yyr2782 bool = false
			yyq2782[0] = len(x.Addresses) != 0
			yyq2782[1] = len(x.NotReadyAddresses) != 0
			yyq2782[2] = len(x.Ports) != 0
			var yynn2782 int
			if yyr2782 || yy2arr2782 {
				r.EncodeArrayStart(3)
			} else {
				yynn2782 = 0
				for _, b := range yyq2782 {
					if b {
						yynn2782++
					}
				}
				r.EncodeMapStart(yynn2782)
				yynn2782 = 0
			}
			if yyr2782 || yy2arr2782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2782[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2784 := z.EncBinary()
						_ = yym2784
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2782[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2785 := z.EncBinary()
						_ = yym2785
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2782 || yy2arr2782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2782[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2787 := z.EncBinary()
						_ = yym2787
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2782[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2788 := z.EncBinary()
						_ = yym2788
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2782 || yy2arr2782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2782[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2790 := z.EncBinary()
						_ = yym2790
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2782[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2791 := z.EncBinary()
						_ = yym2791
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2782 || yy2arr2782 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2792 := z.DecBinary()
	_ = yym2792
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2793 := r.ContainerType()
		if yyct2793 == codecSelferValueTypeMap1234 {
			yyl2793 := r.ReadMapStart()
			if yyl2793 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2793, d)
			}
		} else if yyct2793 == codecSelferValueTypeArray1234 {
			yyl2793 := r.ReadArrayStart()
			if yyl2793 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2793, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2794Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2794Slc
	var yyhl2794 bool = l >= 0
	for yyj2794 := 0; ; yyj2794++ {
		if yyhl2794 {
			if yyj2794 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2794Slc = r.DecodeBytes(yys2794Slc, true, true)
		yys2794 := string(yys2794Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2794 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2795 := &x.Addresses
				yym2796 := z.DecBinary()
				_ = yym2796
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2795), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2797 := &x.NotReadyAddresses
				yym2798 := z.DecBinary()
				_ = yym2798
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2797), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2799 := &x.Ports
				yym2800 := z.DecBinary()
				_ = yym2800
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2799), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2794)
		} // end switch yys2794
	} // end for yyj2794
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2801 int
	var yyb2801 bool
	var yyhl2801 bool = l >= 0
	yyj2801++
	if yyhl2801 {
		yyb2801 = yyj2801 > l
	} else {
		yyb2801 = r.CheckBreak()
	}
	if yyb2801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2802 := &x.Addresses
		yym2803 := z.DecBinary()
		_ = yym2803
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2802), d)
		}
	}
	yyj2801++
	if yyhl2801 {
		yyb2801 = yyj2801 > l
	} else {
		yyb2801 = r.CheckBreak()
	}
	if yyb2801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2804 := &x.NotReadyAddresses
		yym2805 := z.DecBinary()
		_ = yym2805
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2804), d)
		}
	}
	yyj2801++
	if yyhl2801 {
		yyb2801 = yyj2801 > l
	} else {
		yyb2801 = r.CheckBreak()
	}
	if yyb2801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2806 := &x.Ports
		yym2807 := z.DecBinary()
		_ = yym2807
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2806), d)
		}
	}
	for {
		yyj2801++
		if yyhl2801 {
			yyb2801 = yyj2801 > l
		} else {
			yyb2801 = r.CheckBreak()
		}
		if yyb2801 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2801-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2808 := z.EncBinary()
		_ = yym2808
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2809 := !z.EncBinary()
			yy2arr2809 := z.EncBasicHandle().StructToArray
			var yyq2809 [4]bool
			_, _, _ = yysep2809, yyq2809, yy2arr2809
			const yyr2809 bool = false
			yyq2809[1] = x.Hostname != ""
			yyq2809[2] = x.NodeName != nil
			yyq2809[3] = x.TargetRef != nil
			var yynn2809 int
			if yyr2809 || yy2arr2809 {
				r.EncodeArrayStart(4)
			} else {
				yynn2809 = 1
				for _, b := range yyq2809 {
					if b {
						yynn2809++
					}
				}
				r.EncodeMapStart(yynn2809)
				yynn2809 = 0
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2811 := z.EncBinary()
				_ = yym2811
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2812 := z.EncBinary()
				_ = yym2812
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2809[1] {
					yym2814 := z.EncBinary()
					_ = yym2814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2809[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2815 := z.EncBinary()
					_ = yym2815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2809[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2817 := *x.NodeName
						yym2818 := z.EncBinary()
						_ = yym2818
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2817))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2809[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2819 := *x.NodeName
						yym2820 := z.EncBinary()
						_ = yym2820
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2819))
						}
					}
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2809[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2809[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2822 := z.DecBinary()
	_ = yym2822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2823 := r.ContainerType()
		if yyct2823 == codecSelferValueTypeMap1234 {
			yyl2823 := r.ReadMapStart()
			if yyl2823 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2823, d)
			}
		} else if yyct2823 == codecSelferValueTypeArray1234 {
			yyl2823 := r.ReadArrayStart()
			if yyl2823 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2823, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2824Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2824Slc
	var yyhl2824 bool = l >= 0
	for yyj2824 := 0; ; yyj2824++ {
		if yyhl2824 {
			if yyj2824 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2824Slc = r.DecodeBytes(yys2824Slc, true, true)
		yys2824 := string(yys2824Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2824 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2828 := z.DecBinary()
				_ = yym2828
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2824)
		} // end switch yys2824
	} // end for yyj2824
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2830 int
	var yyb2830 bool
	var yyhl2830 bool = l >= 0
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2834 := z.DecBinary()
		_ = yym2834
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2830++
	if yyhl2830 {
		yyb2830 = yyj2830 > l
	} else {
		yyb2830 = r.CheckBreak()
	}
	if yyb2830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2830++
		if yyhl2830 {
			yyb2830 = yyj2830 > l
		} else {
			yyb2830 = r.CheckBreak()
		}
		if yyb2830 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2830-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2836 := z.EncBinary()
		_ = yym2836
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2837 := !z.EncBinary()
			yy2arr2837 := z.EncBasicHandle().StructToArray
			var yyq2837 [3]bool
			_, _, _ = yysep2837, yyq2837, yy2arr2837
			const yyr2837 bool = false
			yyq2837[0] = x.Name != ""
			yyq2837[2] = x.Protocol != ""
			var yynn2837 int
			if yyr2837 || yy2arr2837 {
				r.EncodeArrayStart(3)
			} else {
				yynn2837 = 1
				for _, b := range yyq2837 {
					if b {
						yynn2837++
					}
				}
				r.EncodeMapStart(yynn2837)
				yynn2837 = 0
			}
			if yyr2837 || yy2arr2837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2837[0] {
					yym2839 := z.EncBinary()
					_ = yym2839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2837[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2840 := z.EncBinary()
					_ = yym2840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2837 || yy2arr2837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2842 := z.EncBinary()
				_ = yym2842
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2843 := z.EncBinary()
				_ = yym2843
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2837 || yy2arr2837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2837[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2837[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2837 || yy2arr2837 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2845 := z.DecBinary()
	_ = yym2845
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2846 := r.ContainerType()
		if yyct2846 == codecSelferValueTypeMap1234 {
			yyl2846 := r.ReadMapStart()
			if yyl2846 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2846, d)
			}
		} else if yyct2846 == codecSelferValueTypeArray1234 {
			yyl2846 := r.ReadArrayStart()
			if yyl2846 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2846, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2847Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2847Slc
	var yyhl2847 bool = l >= 0
	for yyj2847 := 0; ; yyj2847++ {
		if yyhl2847 {
			if yyj2847 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2847Slc = r.DecodeBytes(yys2847Slc, true, true)
		yys2847 := string(yys2847Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2847 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2847)
		} // end switch yys2847
	} // end for yyj2847
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2851 int
	var yyb2851 bool
	var yyhl2851 bool = l >= 0
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2851++
		if yyhl2851 {
			yyb2851 = yyj2851 > l
		} else {
			yyb2851 = r.CheckBreak()
		}
		if yyb2851 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2851-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2855 := z.EncBinary()
		_ = yym2855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2856 := !z.EncBinary()
			yy2arr2856 := z.EncBasicHandle().StructToArray
			var yyq2856 [4]bool
			_, _, _ = yysep2856, yyq2856, yy2arr2856
			const yyr2856 bool = false
			yyq2856[0] = x.Kind != ""
			yyq2856[1] = x.APIVersion != ""
			yyq2856[2] = true
			var yynn2856 int
			if yyr2856 || yy2arr2856 {
				r.EncodeArrayStart(4)
			} else {
				yynn2856 = 1
				for _, b := range yyq2856 {
					if b {
						yynn2856++
					}
				}
				r.EncodeMapStart(yynn2856)
				yynn2856 = 0
			}
			if yyr2856 || yy2arr2856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2856[0] {
					yym2858 := z.EncBinary()
					_ = yym2858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2856[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2859 := z.EncBinary()
					_ = yym2859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2856 || yy2arr2856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2856[1] {
					yym2861 := z.EncBinary()
					_ = yym2861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2856[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2862 := z.EncBinary()
					_ = yym2862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2856 || yy2arr2856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2856[2] {
					yy2864 := &x.ListMeta
					yym2865 := z.EncBinary()
					_ = yym2865
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2864) {
					} else {
						z.EncFallback(yy2864)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2856[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2866 := &x.ListMeta
					yym2867 := z.EncBinary()
					_ = yym2867
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2866) {
					} else {
						z.EncFallback(yy2866)
					}
				}
			}
			if yyr2856 || yy2arr2856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2869 := z.EncBinary()
					_ = yym2869
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2870 := z.EncBinary()
					_ = yym2870
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2856 || yy2arr2856 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2871 := z.DecBinary()
	_ = yym2871
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2872 := r.ContainerType()
		if yyct2872 == codecSelferValueTypeMap1234 {
			yyl2872 := r.ReadMapStart()
			if yyl2872 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2872, d)
			}
		} else if yyct2872 == codecSelferValueTypeArray1234 {
			yyl2872 := r.ReadArrayStart()
			if yyl2872 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2872, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2873Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2873Slc
	var yyhl2873 bool = l >= 0
	for yyj2873 := 0; ; yyj2873++ {
		if yyhl2873 {
			if yyj2873 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2873Slc = r.DecodeBytes(yys2873Slc, true, true)
		yys2873 := string(yys2873Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2873 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2876 := &x.ListMeta
				yym2877 := z.DecBinary()
				_ = yym2877
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2876) {
				} else {
					z.DecFallback(yyv2876, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2878 := &x.Items
				yym2879 := z.DecBinary()
				_ = yym2879
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2878), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2873)
		} // end switch yys2873
	} // end for yyj2873
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2880 int
	var yyb2880 bool
	var yyhl2880 bool = l >= 0
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2883 := &x.ListMeta
		yym2884 := z.DecBinary()
		_ = yym2884
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2883) {
		} else {
			z.DecFallback(yyv2883, false)
		}
	}
	yyj2880++
	if yyhl2880 {
		yyb2880 = yyj2880 > l
	} else {
		yyb2880 = r.CheckBreak()
	}
	if yyb2880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2885 := &x.Items
		yym2886 := z.DecBinary()
		_ = yym2886
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2885), d)
		}
	}
	for {
		yyj2880++
		if yyhl2880 {
			yyb2880 = yyj2880 > l
		} else {
			yyb2880 = r.CheckBreak()
		}
		if yyb2880 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2880-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2887 := z.EncBinary()
		_ = yym2887
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2888 := !z.EncBinary()
			yy2arr2888 := z.EncBasicHandle().StructToArray
			var yyq2888 [4]bool
			_, _, _ = yysep2888, yyq2888, yy2arr2888
			const yyr2888 bool = false
			yyq2888[0] = x.PodCIDR != ""
			yyq2888[1] = x.ExternalID != ""
			yyq2888[2] = x.ProviderID != ""
			yyq2888[3] = x.Unschedulable != false
			var yynn2888 int
			if yyr2888 || yy2arr2888 {
				r.EncodeArrayStart(4)
			} else {
				yynn2888 = 0
				for _, b := range yyq2888 {
					if b {
						yynn2888++
					}
				}
				r.EncodeMapStart(yynn2888)
				yynn2888 = 0
			}
			if yyr2888 || yy2arr2888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2888[0] {
					yym2890 := z.EncBinary()
					_ = yym2890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2888[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2891 := z.EncBinary()
					_ = yym2891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2888 || yy2arr2888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2888[1] {
					yym2893 := z.EncBinary()
					_ = yym2893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2888[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2894 := z.EncBinary()
					_ = yym2894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2888 || yy2arr2888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2888[2] {
					yym2896 := z.EncBinary()
					_ = yym2896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2888[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2897 := z.EncBinary()
					_ = yym2897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2888 || yy2arr2888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2888[3] {
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2888[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2900 := z.EncBinary()
					_ = yym2900
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2888 || yy2arr2888 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2901 := z.DecBinary()
	_ = yym2901
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2902 := r.ContainerType()
		if yyct2902 == codecSelferValueTypeMap1234 {
			yyl2902 := r.ReadMapStart()
			if yyl2902 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2902, d)
			}
		} else if yyct2902 == codecSelferValueTypeArray1234 {
			yyl2902 := r.ReadArrayStart()
			if yyl2902 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2902, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2903Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2903Slc
	var yyhl2903 bool = l >= 0
	for yyj2903 := 0; ; yyj2903++ {
		if yyhl2903 {
			if yyj2903 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2903Slc = r.DecodeBytes(yys2903Slc, true, true)
		yys2903 := string(yys2903Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2903 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2903)
		} // end switch yys2903
	} // end for yyj2903
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2908 int
	var yyb2908 bool
	var yyhl2908 bool = l >= 0
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2908++
		if yyhl2908 {
			yyb2908 = yyj2908 > l
		} else {
			yyb2908 = r.CheckBreak()
		}
		if yyb2908 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2908-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2913 := z.EncBinary()
		_ = yym2913
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2914 := !z.EncBinary()
			yy2arr2914 := z.EncBasicHandle().StructToArray
			var yyq2914 [1]bool
			_, _, _ = yysep2914, yyq2914, yy2arr2914
			const yyr2914 bool = false
			var yynn2914 int
			if yyr2914 || yy2arr2914 {
				r.EncodeArrayStart(1)
			} else {
				yynn2914 = 1
				for _, b := range yyq2914 {
					if b {
						yynn2914++
					}
				}
				r.EncodeMapStart(yynn2914)
				yynn2914 = 0
			}
			if yyr2914 || yy2arr2914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2916 := z.EncBinary()
				_ = yym2916
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2917 := z.EncBinary()
				_ = yym2917
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2914 || yy2arr2914 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2918 := z.DecBinary()
	_ = yym2918
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2919 := r.ContainerType()
		if yyct2919 == codecSelferValueTypeMap1234 {
			yyl2919 := r.ReadMapStart()
			if yyl2919 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2919, d)
			}
		} else if yyct2919 == codecSelferValueTypeArray1234 {
			yyl2919 := r.ReadArrayStart()
			if yyl2919 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2919, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2920Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2920Slc
	var yyhl2920 bool = l >= 0
	for yyj2920 := 0; ; yyj2920++ {
		if yyhl2920 {
			if yyj2920 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2920Slc = r.DecodeBytes(yys2920Slc, true, true)
		yys2920 := string(yys2920Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2920 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2920)
		} // end switch yys2920
	} // end for yyj2920
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2922 int
	var yyb2922 bool
	var yyhl2922 bool = l >= 0
	yyj2922++
	if yyhl2922 {
		yyb2922 = yyj2922 > l
	} else {
		yyb2922 = r.CheckBreak()
	}
	if yyb2922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2922++
		if yyhl2922 {
			yyb2922 = yyj2922 > l
		} else {
			yyb2922 = r.CheckBreak()
		}
		if yyb2922 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2922-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2924 := z.EncBinary()
		_ = yym2924
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2925 := !z.EncBinary()
			yy2arr2925 := z.EncBasicHandle().StructToArray
			var yyq2925 [1]bool
			_, _, _ = yysep2925, yyq2925, yy2arr2925
			const yyr2925 bool = false
			yyq2925[0] = true
			var yynn2925 int
			if yyr2925 || yy2arr2925 {
				r.EncodeArrayStart(1)
			} else {
				yynn2925 = 0
				for _, b := range yyq2925 {
					if b {
						yynn2925++
					}
				}
				r.EncodeMapStart(yynn2925)
				yynn2925 = 0
			}
			if yyr2925 || yy2arr2925 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2925[0] {
					yy2927 := &x.KubeletEndpoint
					yy2927.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2925[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2928 := &x.KubeletEndpoint
					yy2928.CodecEncodeSelf(e)
				}
			}
			if yyr2925 || yy2arr2925 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2929 := z.DecBinary()
	_ = yym2929
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2930 := r.ContainerType()
		if yyct2930 == codecSelferValueTypeMap1234 {
			yyl2930 := r.ReadMapStart()
			if yyl2930 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2930, d)
			}
		} else if yyct2930 == codecSelferValueTypeArray1234 {
			yyl2930 := r.ReadArrayStart()
			if yyl2930 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2930, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2931Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2931Slc
	var yyhl2931 bool = l >= 0
	for yyj2931 := 0; ; yyj2931++ {
		if yyhl2931 {
			if yyj2931 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2931Slc = r.DecodeBytes(yys2931Slc, true, true)
		yys2931 := string(yys2931Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2931 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2932 := &x.KubeletEndpoint
				yyv2932.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2931)
		} // end switch yys2931
	} // end for yyj2931
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2933 int
	var yyb2933 bool
	var yyhl2933 bool = l >= 0
	yyj2933++
	if yyhl2933 {
		yyb2933 = yyj2933 > l
	} else {
		yyb2933 = r.CheckBreak()
	}
	if yyb2933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2934 := &x.KubeletEndpoint
		yyv2934.CodecDecodeSelf(d)
	}
	for {
		yyj2933++
		if yyhl2933 {
			yyb2933 = yyj2933 > l
		} else {
			yyb2933 = r.CheckBreak()
		}
		if yyb2933 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2933-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2935 := z.EncBinary()
		_ = yym2935
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2936 := !z.EncBinary()
			yy2arr2936 := z.EncBasicHandle().StructToArray
			var yyq2936 [10]bool
			_, _, _ = yysep2936, yyq2936, yy2arr2936
			const yyr2936 bool = false
			var yynn2936 int
			if yyr2936 || yy2arr2936 {
				r.EncodeArrayStart(10)
			} else {
				yynn2936 = 10
				for _, b := range yyq2936 {
					if b {
						yynn2936++
					}
				}
				r.EncodeMapStart(yynn2936)
				yynn2936 = 0
			}
			if yyr2936 || yy2arr2936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2938 := z.EncBinary()
				_ = yym2938
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2939 := z.EncBinary()
				_ = yym2939
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2936 || yy2arr2936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2941 := z.EncBinary()
				_ = yym2941
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2942 := z.EncBinary()
				_ = yym2942
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2936 || yy2arr2936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2944 := z.EncBinary()
				_ = yym2944
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2945 := z.EncBinary()
				_ = yym2945
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2936 || yy2arr2936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2947 := z.EncBinary()
				_ = yym2947
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2948 := z.EncBinary()
				_ = yym2948
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2936 || yy2arr2936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2950 := z.EncBinary()
				_ = yym2950
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2951 := z.EncBinary()
				_ = yym2951
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2936 || yy2arr2936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2953 := z.EncBinary()
				_ = yym2953
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2954 := z.EncBinary()
				_ = yym2954
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2936 || yy2arr2936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2956 := z.EncBinary()
				_ = yym2956
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2957 := z.EncBinary()
				_ = yym2957
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2936 || yy2arr2936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2959 := z.EncBinary()
				_ = yym2959
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2960 := z.EncBinary()
				_ = yym2960
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2936 || yy2arr2936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2962 := z.EncBinary()
				_ = yym2962
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2963 := z.EncBinary()
				_ = yym2963
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2936 || yy2arr2936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2965 := z.EncBinary()
				_ = yym2965
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2966 := z.EncBinary()
				_ = yym2966
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2936 || yy2arr2936 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2967 := z.DecBinary()
	_ = yym2967
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2968 := r.ContainerType()
		if yyct2968 == codecSelferValueTypeMap1234 {
			yyl2968 := r.ReadMapStart()
			if yyl2968 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2968, d)
			}
		} else if yyct2968 == codecSelferValueTypeArray1234 {
			yyl2968 := r.ReadArrayStart()
			if yyl2968 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2968, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2969Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2969Slc
	var yyhl2969 bool = l >= 0
	for yyj2969 := 0; ; yyj2969++ {
		if yyhl2969 {
			if yyj2969 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2969Slc = r.DecodeBytes(yys2969Slc, true, true)
		yys2969 := string(yys2969Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2969 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2969)
		} // end switch yys2969
	} // end for yyj2969
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2980 int
	var yyb2980 bool
	var yyhl2980 bool = l >= 0
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2980++
		if yyhl2980 {
			yyb2980 = yyj2980 > l
		} else {
			yyb2980 = r.CheckBreak()
		}
		if yyb2980 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2980-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2991 := z.EncBinary()
		_ = yym2991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2992 := !z.EncBinary()
			yy2arr2992 := z.EncBasicHandle().StructToArray
			var yyq2992 [10]bool
			_, _, _ = yysep2992, yyq2992, yy2arr2992
			const yyr2992 bool = false
			yyq2992[0] = len(x.Capacity) != 0
			yyq2992[1] = len(x.Allocatable) != 0
			yyq2992[2] = x.Phase != ""
			yyq2992[3] = len(x.Conditions) != 0
			yyq2992[4] = len(x.Addresses) != 0
			yyq2992[5] = true
			yyq2992[6] = true
			yyq2992[7] = len(x.Images) != 0
			yyq2992[8] = len(x.VolumesInUse) != 0
			yyq2992[9] = len(x.VolumesAttached) != 0
			var yynn2992 int
			if yyr2992 || yy2arr2992 {
				r.EncodeArrayStart(10)
			} else {
				yynn2992 = 0
				for _, b := range yyq2992 {
					if b {
						yynn2992++
					}
				}
				r.EncodeMapStart(yynn2992)
				yynn2992 = 0
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2992[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2992[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2992[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2992[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2992[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2992[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2992[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2997 := z.EncBinary()
						_ = yym2997
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2992[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2998 := z.EncBinary()
						_ = yym2998
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2992[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3000 := z.EncBinary()
						_ = yym3000
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2992[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3001 := z.EncBinary()
						_ = yym3001
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2992[5] {
					yy3003 := &x.DaemonEndpoints
					yy3003.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2992[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3004 := &x.DaemonEndpoints
					yy3004.CodecEncodeSelf(e)
				}
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2992[6] {
					yy3006 := &x.NodeInfo
					yy3006.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2992[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3007 := &x.NodeInfo
					yy3007.CodecEncodeSelf(e)
				}
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2992[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3009 := z.EncBinary()
						_ = yym3009
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2992[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3010 := z.EncBinary()
						_ = yym3010
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2992[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3012 := z.EncBinary()
						_ = yym3012
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2992[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3013 := z.EncBinary()
						_ = yym3013
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2992[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3015 := z.EncBinary()
						_ = yym3015
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2992[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3016 := z.EncBinary()
						_ = yym3016
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3017 := z.DecBinary()
	_ = yym3017
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3018 := r.ContainerType()
		if yyct3018 == codecSelferValueTypeMap1234 {
			yyl3018 := r.ReadMapStart()
			if yyl3018 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3018, d)
			}
		} else if yyct3018 == codecSelferValueTypeArray1234 {
			yyl3018 := r.ReadArrayStart()
			if yyl3018 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3018, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3019Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3019Slc
	var yyhl3019 bool = l >= 0
	for yyj3019 := 0; ; yyj3019++ {
		if yyhl3019 {
			if yyj3019 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3019Slc = r.DecodeBytes(yys3019Slc, true, true)
		yys3019 := string(yys3019Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3019 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3020 := &x.Capacity
				yyv3020.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3021 := &x.Allocatable
				yyv3021.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3023 := &x.Conditions
				yym3024 := z.DecBinary()
				_ = yym3024
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3023), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3025 := &x.Addresses
				yym3026 := z.DecBinary()
				_ = yym3026
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3025), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3027 := &x.DaemonEndpoints
				yyv3027.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3028 := &x.NodeInfo
				yyv3028.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3029 := &x.Images
				yym3030 := z.DecBinary()
				_ = yym3030
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3029), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3031 := &x.VolumesInUse
				yym3032 := z.DecBinary()
				_ = yym3032
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3031), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3033 := &x.VolumesAttached
				yym3034 := z.DecBinary()
				_ = yym3034
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3033), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3019)
		} // end switch yys3019
	} // end for yyj3019
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3035 int
	var yyb3035 bool
	var yyhl3035 bool = l >= 0
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3036 := &x.Capacity
		yyv3036.CodecDecodeSelf(d)
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3037 := &x.Allocatable
		yyv3037.CodecDecodeSelf(d)
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3039 := &x.Conditions
		yym3040 := z.DecBinary()
		_ = yym3040
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3039), d)
		}
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3041 := &x.Addresses
		yym3042 := z.DecBinary()
		_ = yym3042
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3041), d)
		}
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3043 := &x.DaemonEndpoints
		yyv3043.CodecDecodeSelf(d)
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3044 := &x.NodeInfo
		yyv3044.CodecDecodeSelf(d)
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3045 := &x.Images
		yym3046 := z.DecBinary()
		_ = yym3046
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3045), d)
		}
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3047 := &x.VolumesInUse
		yym3048 := z.DecBinary()
		_ = yym3048
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3047), d)
		}
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3049 := &x.VolumesAttached
		yym3050 := z.DecBinary()
		_ = yym3050
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3049), d)
		}
	}
	for {
		yyj3035++
		if yyhl3035 {
			yyb3035 = yyj3035 > l
		} else {
			yyb3035 = r.CheckBreak()
		}
		if yyb3035 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3035-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3051 := z.EncBinary()
	_ = yym3051
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3052 := z.DecBinary()
	_ = yym3052
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3053 := z.EncBinary()
		_ = yym3053
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3054 := !z.EncBinary()
			yy2arr3054 := z.EncBasicHandle().StructToArray
			var yyq3054 [2]bool
			_, _, _ = yysep3054, yyq3054, yy2arr3054
			const yyr3054 bool = false
			var yynn3054 int
			if yyr3054 || yy2arr3054 {
				r.EncodeArrayStart(2)
			} else {
				yynn3054 = 2
				for _, b := range yyq3054 {
					if b {
						yynn3054++
					}
				}
				r.EncodeMapStart(yynn3054)
				yynn3054 = 0
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3057 := z.EncBinary()
				_ = yym3057
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3058 := z.EncBinary()
				_ = yym3058
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3059 := z.DecBinary()
	_ = yym3059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3060 := r.ContainerType()
		if yyct3060 == codecSelferValueTypeMap1234 {
			yyl3060 := r.ReadMapStart()
			if yyl3060 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3060, d)
			}
		} else if yyct3060 == codecSelferValueTypeArray1234 {
			yyl3060 := r.ReadArrayStart()
			if yyl3060 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3060, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3061Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3061Slc
	var yyhl3061 bool = l >= 0
	for yyj3061 := 0; ; yyj3061++ {
		if yyhl3061 {
			if yyj3061 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3061Slc = r.DecodeBytes(yys3061Slc, true, true)
		yys3061 := string(yys3061Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3061 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3061)
		} // end switch yys3061
	} // end for yyj3061
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3064 int
	var yyb3064 bool
	var yyhl3064 bool = l >= 0
	yyj3064++
	if yyhl3064 {
		yyb3064 = yyj3064 > l
	} else {
		yyb3064 = r.CheckBreak()
	}
	if yyb3064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3064++
	if yyhl3064 {
		yyb3064 = yyj3064 > l
	} else {
		yyb3064 = r.CheckBreak()
	}
	if yyb3064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3064++
		if yyhl3064 {
			yyb3064 = yyj3064 > l
		} else {
			yyb3064 = r.CheckBreak()
		}
		if yyb3064 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3064-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3067 := z.EncBinary()
		_ = yym3067
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3068 := !z.EncBinary()
			yy2arr3068 := z.EncBasicHandle().StructToArray
			var yyq3068 [1]bool
			_, _, _ = yysep3068, yyq3068, yy2arr3068
			const yyr3068 bool = false
			yyq3068[0] = len(x.PreferAvoidPods) != 0
			var yynn3068 int
			if yyr3068 || yy2arr3068 {
				r.EncodeArrayStart(1)
			} else {
				yynn3068 = 0
				for _, b := range yyq3068 {
					if b {
						yynn3068++
					}
				}
				r.EncodeMapStart(yynn3068)
				yynn3068 = 0
			}
			if yyr3068 || yy2arr3068 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3068[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3070 := z.EncBinary()
						_ = yym3070
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3068[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3071 := z.EncBinary()
						_ = yym3071
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3068 || yy2arr3068 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3072 := z.DecBinary()
	_ = yym3072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3073 := r.ContainerType()
		if yyct3073 == codecSelferValueTypeMap1234 {
			yyl3073 := r.ReadMapStart()
			if yyl3073 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3073, d)
			}
		} else if yyct3073 == codecSelferValueTypeArray1234 {
			yyl3073 := r.ReadArrayStart()
			if yyl3073 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3073, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3074Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3074Slc
	var yyhl3074 bool = l >= 0
	for yyj3074 := 0; ; yyj3074++ {
		if yyhl3074 {
			if yyj3074 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3074Slc = r.DecodeBytes(yys3074Slc, true, true)
		yys3074 := string(yys3074Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3074 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3075 := &x.PreferAvoidPods
				yym3076 := z.DecBinary()
				_ = yym3076
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3075), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3074)
		} // end switch yys3074
	} // end for yyj3074
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3077 int
	var yyb3077 bool
	var yyhl3077 bool = l >= 0
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3078 := &x.PreferAvoidPods
		yym3079 := z.DecBinary()
		_ = yym3079
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3078), d)
		}
	}
	for {
		yyj3077++
		if yyhl3077 {
			yyb3077 = yyj3077 > l
		} else {
			yyb3077 = r.CheckBreak()
		}
		if yyb3077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3080 := z.EncBinary()
		_ = yym3080
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3081 := !z.EncBinary()
			yy2arr3081 := z.EncBasicHandle().StructToArray
			var yyq3081 [4]bool
			_, _, _ = yysep3081, yyq3081, yy2arr3081
			const yyr3081 bool = false
			yyq3081[1] = true
			yyq3081[2] = x.Reason != ""
			yyq3081[3] = x.Message != ""
			var yynn3081 int
			if yyr3081 || yy2arr3081 {
				r.EncodeArrayStart(4)
			} else {
				yynn3081 = 1
				for _, b := range yyq3081 {
					if b {
						yynn3081++
					}
				}
				r.EncodeMapStart(yynn3081)
				yynn3081 = 0
			}
			if yyr3081 || yy2arr3081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3083 := &x.PodSignature
				yy3083.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3084 := &x.PodSignature
				yy3084.CodecEncodeSelf(e)
			}
			if yyr3081 || yy2arr3081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3081[1] {
					yy3086 := &x.EvictionTime
					yym3087 := z.EncBinary()
					_ = yym3087
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3086) {
					} else if yym3087 {
						z.EncBinaryMarshal(yy3086)
					} else if !yym3087 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3086)
					} else {
						z.EncFallback(yy3086)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3081[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3088 := &x.EvictionTime
					yym3089 := z.EncBinary()
					_ = yym3089
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3088) {
					} else if yym3089 {
						z.EncBinaryMarshal(yy3088)
					} else if !yym3089 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3088)
					} else {
						z.EncFallback(yy3088)
					}
				}
			}
			if yyr3081 || yy2arr3081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3081[2] {
					yym3091 := z.EncBinary()
					_ = yym3091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3081[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3092 := z.EncBinary()
					_ = yym3092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3081 || yy2arr3081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3081[3] {
					yym3094 := z.EncBinary()
					_ = yym3094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3081[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3095 := z.EncBinary()
					_ = yym3095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3081 || yy2arr3081 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3096 := z.DecBinary()
	_ = yym3096
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3097 := r.ContainerType()
		if yyct3097 == codecSelferValueTypeMap1234 {
			yyl3097 := r.ReadMapStart()
			if yyl3097 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3097, d)
			}
		} else if yyct3097 == codecSelferValueTypeArray1234 {
			yyl3097 := r.ReadArrayStart()
			if yyl3097 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3097, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3098Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3098Slc
	var yyhl3098 bool = l >= 0
	for yyj3098 := 0; ; yyj3098++ {
		if yyhl3098 {
			if yyj3098 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3098Slc = r.DecodeBytes(yys3098Slc, true, true)
		yys3098 := string(yys3098Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3098 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3099 := &x.PodSignature
				yyv3099.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3100 := &x.EvictionTime
				yym3101 := z.DecBinary()
				_ = yym3101
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3100) {
				} else if yym3101 {
					z.DecBinaryUnmarshal(yyv3100)
				} else if !yym3101 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3100)
				} else {
					z.DecFallback(yyv3100, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3098)
		} // end switch yys3098
	} // end for yyj3098
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3104 int
	var yyb3104 bool
	var yyhl3104 bool = l >= 0
	yyj3104++
	if yyhl3104 {
		yyb3104 = yyj3104 > l
	} else {
		yyb3104 = r.CheckBreak()
	}
	if yyb3104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3105 := &x.PodSignature
		yyv3105.CodecDecodeSelf(d)
	}
	yyj3104++
	if yyhl3104 {
		yyb3104 = yyj3104 > l
	} else {
		yyb3104 = r.CheckBreak()
	}
	if yyb3104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3106 := &x.EvictionTime
		yym3107 := z.DecBinary()
		_ = yym3107
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3106) {
		} else if yym3107 {
			z.DecBinaryUnmarshal(yyv3106)
		} else if !yym3107 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3106)
		} else {
			z.DecFallback(yyv3106, false)
		}
	}
	yyj3104++
	if yyhl3104 {
		yyb3104 = yyj3104 > l
	} else {
		yyb3104 = r.CheckBreak()
	}
	if yyb3104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3104++
	if yyhl3104 {
		yyb3104 = yyj3104 > l
	} else {
		yyb3104 = r.CheckBreak()
	}
	if yyb3104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3104++
		if yyhl3104 {
			yyb3104 = yyj3104 > l
		} else {
			yyb3104 = r.CheckBreak()
		}
		if yyb3104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3110 := z.EncBinary()
		_ = yym3110
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3111 := !z.EncBinary()
			yy2arr3111 := z.EncBasicHandle().StructToArray
			var yyq3111 [1]bool
			_, _, _ = yysep3111, yyq3111, yy2arr3111
			const yyr3111 bool = false
			yyq3111[0] = x.PodController != nil
			var yynn3111 int
			if yyr3111 || yy2arr3111 {
				r.EncodeArrayStart(1)
			} else {
				yynn3111 = 0
				for _, b := range yyq3111 {
					if b {
						yynn3111++
					}
				}
				r.EncodeMapStart(yynn3111)
				yynn3111 = 0
			}
			if yyr3111 || yy2arr3111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3111[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3111[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3111 || yy2arr3111 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3113 := z.DecBinary()
	_ = yym3113
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3114 := r.ContainerType()
		if yyct3114 == codecSelferValueTypeMap1234 {
			yyl3114 := r.ReadMapStart()
			if yyl3114 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3114, d)
			}
		} else if yyct3114 == codecSelferValueTypeArray1234 {
			yyl3114 := r.ReadArrayStart()
			if yyl3114 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3114, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3115Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3115Slc
	var yyhl3115 bool = l >= 0
	for yyj3115 := 0; ; yyj3115++ {
		if yyhl3115 {
			if yyj3115 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3115Slc = r.DecodeBytes(yys3115Slc, true, true)
		yys3115 := string(yys3115Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3115 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3115)
		} // end switch yys3115
	} // end for yyj3115
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3117 int
	var yyb3117 bool
	var yyhl3117 bool = l >= 0
	yyj3117++
	if yyhl3117 {
		yyb3117 = yyj3117 > l
	} else {
		yyb3117 = r.CheckBreak()
	}
	if yyb3117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3117++
		if yyhl3117 {
			yyb3117 = yyj3117 > l
		} else {
			yyb3117 = r.CheckBreak()
		}
		if yyb3117 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3117-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3119 := z.EncBinary()
		_ = yym3119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3120 := !z.EncBinary()
			yy2arr3120 := z.EncBasicHandle().StructToArray
			var yyq3120 [2]bool
			_, _, _ = yysep3120, yyq3120, yy2arr3120
			const yyr3120 bool = false
			yyq3120[1] = x.SizeBytes != 0
			var yynn3120 int
			if yyr3120 || yy2arr3120 {
				r.EncodeArrayStart(2)
			} else {
				yynn3120 = 1
				for _, b := range yyq3120 {
					if b {
						yynn3120++
					}
				}
				r.EncodeMapStart(yynn3120)
				yynn3120 = 0
			}
			if yyr3120 || yy2arr3120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3122 := z.EncBinary()
					_ = yym3122
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3123 := z.EncBinary()
					_ = yym3123
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3120 || yy2arr3120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3120[1] {
					yym3125 := z.EncBinary()
					_ = yym3125
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3120[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3126 := z.EncBinary()
					_ = yym3126
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3120 || yy2arr3120 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3127 := z.DecBinary()
	_ = yym3127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3128 := r.ContainerType()
		if yyct3128 == codecSelferValueTypeMap1234 {
			yyl3128 := r.ReadMapStart()
			if yyl3128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3128, d)
			}
		} else if yyct3128 == codecSelferValueTypeArray1234 {
			yyl3128 := r.ReadArrayStart()
			if yyl3128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3129Slc
	var yyhl3129 bool = l >= 0
	for yyj3129 := 0; ; yyj3129++ {
		if yyhl3129 {
			if yyj3129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3129Slc = r.DecodeBytes(yys3129Slc, true, true)
		yys3129 := string(yys3129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3129 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3130 := &x.Names
				yym3131 := z.DecBinary()
				_ = yym3131
				if false {
				} else {
					z.F.DecSliceStringX(yyv3130, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3129)
		} // end switch yys3129
	} // end for yyj3129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3133 int
	var yyb3133 bool
	var yyhl3133 bool = l >= 0
	yyj3133++
	if yyhl3133 {
		yyb3133 = yyj3133 > l
	} else {
		yyb3133 = r.CheckBreak()
	}
	if yyb3133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3134 := &x.Names
		yym3135 := z.DecBinary()
		_ = yym3135
		if false {
		} else {
			z.F.DecSliceStringX(yyv3134, false, d)
		}
	}
	yyj3133++
	if yyhl3133 {
		yyb3133 = yyj3133 > l
	} else {
		yyb3133 = r.CheckBreak()
	}
	if yyb3133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3133++
		if yyhl3133 {
			yyb3133 = yyj3133 > l
		} else {
			yyb3133 = r.CheckBreak()
		}
		if yyb3133 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3133-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3137 := z.EncBinary()
	_ = yym3137
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3138 := z.DecBinary()
	_ = yym3138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3139 := z.EncBinary()
	_ = yym3139
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3140 := z.DecBinary()
	_ = yym3140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3141 := z.EncBinary()
		_ = yym3141
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3142 := !z.EncBinary()
			yy2arr3142 := z.EncBasicHandle().StructToArray
			var yyq3142 [6]bool
			_, _, _ = yysep3142, yyq3142, yy2arr3142
			const yyr3142 bool = false
			yyq3142[2] = true
			yyq3142[3] = true
			yyq3142[4] = x.Reason != ""
			yyq3142[5] = x.Message != ""
			var yynn3142 int
			if yyr3142 || yy2arr3142 {
				r.EncodeArrayStart(6)
			} else {
				yynn3142 = 2
				for _, b := range yyq3142 {
					if b {
						yynn3142++
					}
				}
				r.EncodeMapStart(yynn3142)
				yynn3142 = 0
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3142[2] {
					yy3146 := &x.LastHeartbeatTime
					yym3147 := z.EncBinary()
					_ = yym3147
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3146) {
					} else if yym3147 {
						z.EncBinaryMarshal(yy3146)
					} else if !yym3147 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3146)
					} else {
						z.EncFallback(yy3146)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3142[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3148 := &x.LastHeartbeatTime
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3148) {
					} else if yym3149 {
						z.EncBinaryMarshal(yy3148)
					} else if !yym3149 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3148)
					} else {
						z.EncFallback(yy3148)
					}
				}
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3142[3] {
					yy3151 := &x.LastTransitionTime
					yym3152 := z.EncBinary()
					_ = yym3152
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3151) {
					} else if yym3152 {
						z.EncBinaryMarshal(yy3151)
					} else if !yym3152 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3151)
					} else {
						z.EncFallback(yy3151)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3142[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3153 := &x.LastTransitionTime
					yym3154 := z.EncBinary()
					_ = yym3154
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3153) {
					} else if yym3154 {
						z.EncBinaryMarshal(yy3153)
					} else if !yym3154 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3153)
					} else {
						z.EncFallback(yy3153)
					}
				}
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3142[4] {
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3142[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3142[5] {
					yym3159 := z.EncBinary()
					_ = yym3159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3142[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3160 := z.EncBinary()
					_ = yym3160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3161 := z.DecBinary()
	_ = yym3161
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3162 := r.ContainerType()
		if yyct3162 == codecSelferValueTypeMap1234 {
			yyl3162 := r.ReadMapStart()
			if yyl3162 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3162, d)
			}
		} else if yyct3162 == codecSelferValueTypeArray1234 {
			yyl3162 := r.ReadArrayStart()
			if yyl3162 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3162, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3163Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3163Slc
	var yyhl3163 bool = l >= 0
	for yyj3163 := 0; ; yyj3163++ {
		if yyhl3163 {
			if yyj3163 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3163Slc = r.DecodeBytes(yys3163Slc, true, true)
		yys3163 := string(yys3163Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3163 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3166 := &x.LastHeartbeatTime
				yym3167 := z.DecBinary()
				_ = yym3167
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3166) {
				} else if yym3167 {
					z.DecBinaryUnmarshal(yyv3166)
				} else if !yym3167 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3166)
				} else {
					z.DecFallback(yyv3166, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3168 := &x.LastTransitionTime
				yym3169 := z.DecBinary()
				_ = yym3169
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3168) {
				} else if yym3169 {
					z.DecBinaryUnmarshal(yyv3168)
				} else if !yym3169 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3168)
				} else {
					z.DecFallback(yyv3168, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3163)
		} // end switch yys3163
	} // end for yyj3163
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3172 int
	var yyb3172 bool
	var yyhl3172 bool = l >= 0
	yyj3172++
	if yyhl3172 {
		yyb3172 = yyj3172 > l
	} else {
		yyb3172 = r.CheckBreak()
	}
	if yyb3172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3172++
	if yyhl3172 {
		yyb3172 = yyj3172 > l
	} else {
		yyb3172 = r.CheckBreak()
	}
	if yyb3172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3172++
	if yyhl3172 {
		yyb3172 = yyj3172 > l
	} else {
		yyb3172 = r.CheckBreak()
	}
	if yyb3172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3175 := &x.LastHeartbeatTime
		yym3176 := z.DecBinary()
		_ = yym3176
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3175) {
		} else if yym3176 {
			z.DecBinaryUnmarshal(yyv3175)
		} else if !yym3176 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3175)
		} else {
			z.DecFallback(yyv3175, false)
		}
	}
	yyj3172++
	if yyhl3172 {
		yyb3172 = yyj3172 > l
	} else {
		yyb3172 = r.CheckBreak()
	}
	if yyb3172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3177 := &x.LastTransitionTime
		yym3178 := z.DecBinary()
		_ = yym3178
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3177) {
		} else if yym3178 {
			z.DecBinaryUnmarshal(yyv3177)
		} else if !yym3178 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3177)
		} else {
			z.DecFallback(yyv3177, false)
		}
	}
	yyj3172++
	if yyhl3172 {
		yyb3172 = yyj3172 > l
	} else {
		yyb3172 = r.CheckBreak()
	}
	if yyb3172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3172++
	if yyhl3172 {
		yyb3172 = yyj3172 > l
	} else {
		yyb3172 = r.CheckBreak()
	}
	if yyb3172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3172++
		if yyhl3172 {
			yyb3172 = yyj3172 > l
		} else {
			yyb3172 = r.CheckBreak()
		}
		if yyb3172 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3172-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3181 := z.EncBinary()
	_ = yym3181
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3182 := z.DecBinary()
	_ = yym3182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3183 := z.EncBinary()
		_ = yym3183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3184 := !z.EncBinary()
			yy2arr3184 := z.EncBasicHandle().StructToArray
			var yyq3184 [2]bool
			_, _, _ = yysep3184, yyq3184, yy2arr3184
			const yyr3184 bool = false
			var yynn3184 int
			if yyr3184 || yy2arr3184 {
				r.EncodeArrayStart(2)
			} else {
				yynn3184 = 2
				for _, b := range yyq3184 {
					if b {
						yynn3184++
					}
				}
				r.EncodeMapStart(yynn3184)
				yynn3184 = 0
			}
			if yyr3184 || yy2arr3184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3184 || yy2arr3184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3187 := z.EncBinary()
				_ = yym3187
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3188 := z.EncBinary()
				_ = yym3188
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3184 || yy2arr3184 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3189 := z.DecBinary()
	_ = yym3189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3190 := r.ContainerType()
		if yyct3190 == codecSelferValueTypeMap1234 {
			yyl3190 := r.ReadMapStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3190, d)
			}
		} else if yyct3190 == codecSelferValueTypeArray1234 {
			yyl3190 := r.ReadArrayStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3191Slc
	var yyhl3191 bool = l >= 0
	for yyj3191 := 0; ; yyj3191++ {
		if yyhl3191 {
			if yyj3191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3191Slc = r.DecodeBytes(yys3191Slc, true, true)
		yys3191 := string(yys3191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3191 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3191)
		} // end switch yys3191
	} // end for yyj3191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3194 int
	var yyb3194 bool
	var yyhl3194 bool = l >= 0
	yyj3194++
	if yyhl3194 {
		yyb3194 = yyj3194 > l
	} else {
		yyb3194 = r.CheckBreak()
	}
	if yyb3194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3194++
	if yyhl3194 {
		yyb3194 = yyj3194 > l
	} else {
		yyb3194 = r.CheckBreak()
	}
	if yyb3194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3194++
		if yyhl3194 {
			yyb3194 = yyj3194 > l
		} else {
			yyb3194 = r.CheckBreak()
		}
		if yyb3194 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3194-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3197 := z.EncBinary()
	_ = yym3197
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3198 := z.DecBinary()
	_ = yym3198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3199 := z.EncBinary()
		_ = yym3199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3200 := z.DecBinary()
	_ = yym3200
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3201 := z.EncBinary()
		_ = yym3201
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3202 := !z.EncBinary()
			yy2arr3202 := z.EncBasicHandle().StructToArray
			var yyq3202 [5]bool
			_, _, _ = yysep3202, yyq3202, yy2arr3202
			const yyr3202 bool = false
			yyq3202[0] = x.Kind != ""
			yyq3202[1] = x.APIVersion != ""
			yyq3202[2] = true
			yyq3202[3] = true
			yyq3202[4] = true
			var yynn3202 int
			if yyr3202 || yy2arr3202 {
				r.EncodeArrayStart(5)
			} else {
				yynn3202 = 0
				for _, b := range yyq3202 {
					if b {
						yynn3202++
					}
				}
				r.EncodeMapStart(yynn3202)
				yynn3202 = 0
			}
			if yyr3202 || yy2arr3202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3202[0] {
					yym3204 := z.EncBinary()
					_ = yym3204
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3202[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3205 := z.EncBinary()
					_ = yym3205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3202 || yy2arr3202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3202[1] {
					yym3207 := z.EncBinary()
					_ = yym3207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3202[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3208 := z.EncBinary()
					_ = yym3208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3202 || yy2arr3202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3202[2] {
					yy3210 := &x.ObjectMeta
					yy3210.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3202[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3211 := &x.ObjectMeta
					yy3211.CodecEncodeSelf(e)
				}
			}
			if yyr3202 || yy2arr3202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3202[3] {
					yy3213 := &x.Spec
					yy3213.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3202[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3214 := &x.Spec
					yy3214.CodecEncodeSelf(e)
				}
			}
			if yyr3202 || yy2arr3202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3202[4] {
					yy3216 := &x.Status
					yy3216.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3202[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3217 := &x.Status
					yy3217.CodecEncodeSelf(e)
				}
			}
			if yyr3202 || yy2arr3202 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3218 := z.DecBinary()
	_ = yym3218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3219 := r.ContainerType()
		if yyct3219 == codecSelferValueTypeMap1234 {
			yyl3219 := r.ReadMapStart()
			if yyl3219 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3219, d)
			}
		} else if yyct3219 == codecSelferValueTypeArray1234 {
			yyl3219 := r.ReadArrayStart()
			if yyl3219 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3220Slc
	var yyhl3220 bool = l >= 0
	for yyj3220 := 0; ; yyj3220++ {
		if yyhl3220 {
			if yyj3220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3220Slc = r.DecodeBytes(yys3220Slc, true, true)
		yys3220 := string(yys3220Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3220 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3223 := &x.ObjectMeta
				yyv3223.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3224 := &x.Spec
				yyv3224.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3225 := &x.Status
				yyv3225.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3220)
		} // end switch yys3220
	} // end for yyj3220
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3226 int
	var yyb3226 bool
	var yyhl3226 bool = l >= 0
	yyj3226++
	if yyhl3226 {
		yyb3226 = yyj3226 > l
	} else {
		yyb3226 = r.CheckBreak()
	}
	if yyb3226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3226++
	if yyhl3226 {
		yyb3226 = yyj3226 > l
	} else {
		yyb3226 = r.CheckBreak()
	}
	if yyb3226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3226++
	if yyhl3226 {
		yyb3226 = yyj3226 > l
	} else {
		yyb3226 = r.CheckBreak()
	}
	if yyb3226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3229 := &x.ObjectMeta
		yyv3229.CodecDecodeSelf(d)
	}
	yyj3226++
	if yyhl3226 {
		yyb3226 = yyj3226 > l
	} else {
		yyb3226 = r.CheckBreak()
	}
	if yyb3226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3230 := &x.Spec
		yyv3230.CodecDecodeSelf(d)
	}
	yyj3226++
	if yyhl3226 {
		yyb3226 = yyj3226 > l
	} else {
		yyb3226 = r.CheckBreak()
	}
	if yyb3226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3231 := &x.Status
		yyv3231.CodecDecodeSelf(d)
	}
	for {
		yyj3226++
		if yyhl3226 {
			yyb3226 = yyj3226 > l
		} else {
			yyb3226 = r.CheckBreak()
		}
		if yyb3226 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3226-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3232 := z.EncBinary()
		_ = yym3232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3233 := !z.EncBinary()
			yy2arr3233 := z.EncBasicHandle().StructToArray
			var yyq3233 [4]bool
			_, _, _ = yysep3233, yyq3233, yy2arr3233
			const yyr3233 bool = false
			yyq3233[0] = x.Kind != ""
			yyq3233[1] = x.APIVersion != ""
			yyq3233[2] = true
			var yynn3233 int
			if yyr3233 || yy2arr3233 {
				r.EncodeArrayStart(4)
			} else {
				yynn3233 = 1
				for _, b := range yyq3233 {
					if b {
						yynn3233++
					}
				}
				r.EncodeMapStart(yynn3233)
				yynn3233 = 0
			}
			if yyr3233 || yy2arr3233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3233[0] {
					yym3235 := z.EncBinary()
					_ = yym3235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3233[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3236 := z.EncBinary()
					_ = yym3236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3233 || yy2arr3233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3233[1] {
					yym3238 := z.EncBinary()
					_ = yym3238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3233[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3239 := z.EncBinary()
					_ = yym3239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3233 || yy2arr3233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3233[2] {
					yy3241 := &x.ListMeta
					yym3242 := z.EncBinary()
					_ = yym3242
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3241) {
					} else {
						z.EncFallback(yy3241)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3233[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3243 := &x.ListMeta
					yym3244 := z.EncBinary()
					_ = yym3244
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3243) {
					} else {
						z.EncFallback(yy3243)
					}
				}
			}
			if yyr3233 || yy2arr3233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3246 := z.EncBinary()
					_ = yym3246
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3247 := z.EncBinary()
					_ = yym3247
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3233 || yy2arr3233 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3248 := z.DecBinary()
	_ = yym3248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3249 := r.ContainerType()
		if yyct3249 == codecSelferValueTypeMap1234 {
			yyl3249 := r.ReadMapStart()
			if yyl3249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3249, d)
			}
		} else if yyct3249 == codecSelferValueTypeArray1234 {
			yyl3249 := r.ReadArrayStart()
			if yyl3249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3250Slc
	var yyhl3250 bool = l >= 0
	for yyj3250 := 0; ; yyj3250++ {
		if yyhl3250 {
			if yyj3250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3250Slc = r.DecodeBytes(yys3250Slc, true, true)
		yys3250 := string(yys3250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3250 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3253 := &x.ListMeta
				yym3254 := z.DecBinary()
				_ = yym3254
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3253) {
				} else {
					z.DecFallback(yyv3253, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3255 := &x.Items
				yym3256 := z.DecBinary()
				_ = yym3256
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3255), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3250)
		} // end switch yys3250
	} // end for yyj3250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3257 int
	var yyb3257 bool
	var yyhl3257 bool = l >= 0
	yyj3257++
	if yyhl3257 {
		yyb3257 = yyj3257 > l
	} else {
		yyb3257 = r.CheckBreak()
	}
	if yyb3257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3257++
	if yyhl3257 {
		yyb3257 = yyj3257 > l
	} else {
		yyb3257 = r.CheckBreak()
	}
	if yyb3257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3257++
	if yyhl3257 {
		yyb3257 = yyj3257 > l
	} else {
		yyb3257 = r.CheckBreak()
	}
	if yyb3257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3260 := &x.ListMeta
		yym3261 := z.DecBinary()
		_ = yym3261
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3260) {
		} else {
			z.DecFallback(yyv3260, false)
		}
	}
	yyj3257++
	if yyhl3257 {
		yyb3257 = yyj3257 > l
	} else {
		yyb3257 = r.CheckBreak()
	}
	if yyb3257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3262 := &x.Items
		yym3263 := z.DecBinary()
		_ = yym3263
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3262), d)
		}
	}
	for {
		yyj3257++
		if yyhl3257 {
			yyb3257 = yyj3257 > l
		} else {
			yyb3257 = r.CheckBreak()
		}
		if yyb3257 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3257-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3264 := z.EncBinary()
	_ = yym3264
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3265 := z.DecBinary()
	_ = yym3265
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3266 := z.EncBinary()
		_ = yym3266
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3267 := !z.EncBinary()
			yy2arr3267 := z.EncBasicHandle().StructToArray
			var yyq3267 [1]bool
			_, _, _ = yysep3267, yyq3267, yy2arr3267
			const yyr3267 bool = false
			yyq3267[0] = len(x.Finalizers) != 0
			var yynn3267 int
			if yyr3267 || yy2arr3267 {
				r.EncodeArrayStart(1)
			} else {
				yynn3267 = 0
				for _, b := range yyq3267 {
					if b {
						yynn3267++
					}
				}
				r.EncodeMapStart(yynn3267)
				yynn3267 = 0
			}
			if yyr3267 || yy2arr3267 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3267[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3269 := z.EncBinary()
						_ = yym3269
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3267[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3270 := z.EncBinary()
						_ = yym3270
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3267 || yy2arr3267 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3271 := z.DecBinary()
	_ = yym3271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3272 := r.ContainerType()
		if yyct3272 == codecSelferValueTypeMap1234 {
			yyl3272 := r.ReadMapStart()
			if yyl3272 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3272, d)
			}
		} else if yyct3272 == codecSelferValueTypeArray1234 {
			yyl3272 := r.ReadArrayStart()
			if yyl3272 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3273Slc
	var yyhl3273 bool = l >= 0
	for yyj3273 := 0; ; yyj3273++ {
		if yyhl3273 {
			if yyj3273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3273Slc = r.DecodeBytes(yys3273Slc, true, true)
		yys3273 := string(yys3273Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3273 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3274 := &x.Finalizers
				yym3275 := z.DecBinary()
				_ = yym3275
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3274), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3273)
		} // end switch yys3273
	} // end for yyj3273
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3276 int
	var yyb3276 bool
	var yyhl3276 bool = l >= 0
	yyj3276++
	if yyhl3276 {
		yyb3276 = yyj3276 > l
	} else {
		yyb3276 = r.CheckBreak()
	}
	if yyb3276 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3277 := &x.Finalizers
		yym3278 := z.DecBinary()
		_ = yym3278
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3277), d)
		}
	}
	for {
		yyj3276++
		if yyhl3276 {
			yyb3276 = yyj3276 > l
		} else {
			yyb3276 = r.CheckBreak()
		}
		if yyb3276 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3276-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3279 := z.EncBinary()
		_ = yym3279
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3280 := !z.EncBinary()
			yy2arr3280 := z.EncBasicHandle().StructToArray
			var yyq3280 [1]bool
			_, _, _ = yysep3280, yyq3280, yy2arr3280
			const yyr3280 bool = false
			yyq3280[0] = x.Phase != ""
			var yynn3280 int
			if yyr3280 || yy2arr3280 {
				r.EncodeArrayStart(1)
			} else {
				yynn3280 = 0
				for _, b := range yyq3280 {
					if b {
						yynn3280++
					}
				}
				r.EncodeMapStart(yynn3280)
				yynn3280 = 0
			}
			if yyr3280 || yy2arr3280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3280[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3280[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3280 || yy2arr3280 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3282 := z.DecBinary()
	_ = yym3282
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3283 := r.ContainerType()
		if yyct3283 == codecSelferValueTypeMap1234 {
			yyl3283 := r.ReadMapStart()
			if yyl3283 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3283, d)
			}
		} else if yyct3283 == codecSelferValueTypeArray1234 {
			yyl3283 := r.ReadArrayStart()
			if yyl3283 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3283, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3284Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3284Slc
	var yyhl3284 bool = l >= 0
	for yyj3284 := 0; ; yyj3284++ {
		if yyhl3284 {
			if yyj3284 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3284Slc = r.DecodeBytes(yys3284Slc, true, true)
		yys3284 := string(yys3284Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3284 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3284)
		} // end switch yys3284
	} // end for yyj3284
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3286 int
	var yyb3286 bool
	var yyhl3286 bool = l >= 0
	yyj3286++
	if yyhl3286 {
		yyb3286 = yyj3286 > l
	} else {
		yyb3286 = r.CheckBreak()
	}
	if yyb3286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3286++
		if yyhl3286 {
			yyb3286 = yyj3286 > l
		} else {
			yyb3286 = r.CheckBreak()
		}
		if yyb3286 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3286-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3288 := z.EncBinary()
	_ = yym3288
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3289 := z.DecBinary()
	_ = yym3289
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3290 := z.EncBinary()
		_ = yym3290
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3291 := !z.EncBinary()
			yy2arr3291 := z.EncBasicHandle().StructToArray
			var yyq3291 [5]bool
			_, _, _ = yysep3291, yyq3291, yy2arr3291
			const yyr3291 bool = false
			yyq3291[0] = x.Kind != ""
			yyq3291[1] = x.APIVersion != ""
			yyq3291[2] = true
			yyq3291[3] = true
			yyq3291[4] = true
			var yynn3291 int
			if yyr3291 || yy2arr3291 {
				r.EncodeArrayStart(5)
			} else {
				yynn3291 = 0
				for _, b := range yyq3291 {
					if b {
						yynn3291++
					}
				}
				r.EncodeMapStart(yynn3291)
				yynn3291 = 0
			}
			if yyr3291 || yy2arr3291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3291[0] {
					yym3293 := z.EncBinary()
					_ = yym3293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3291[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3294 := z.EncBinary()
					_ = yym3294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3291 || yy2arr3291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3291[1] {
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3291[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3297 := z.EncBinary()
					_ = yym3297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3291 || yy2arr3291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3291[2] {
					yy3299 := &x.ObjectMeta
					yy3299.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3291[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3300 := &x.ObjectMeta
					yy3300.CodecEncodeSelf(e)
				}
			}
			if yyr3291 || yy2arr3291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3291[3] {
					yy3302 := &x.Spec
					yy3302.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3291[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3303 := &x.Spec
					yy3303.CodecEncodeSelf(e)
				}
			}
			if yyr3291 || yy2arr3291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3291[4] {
					yy3305 := &x.Status
					yy3305.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3291[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3306 := &x.Status
					yy3306.CodecEncodeSelf(e)
				}
			}
			if yyr3291 || yy2arr3291 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3307 := z.DecBinary()
	_ = yym3307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3308 := r.ContainerType()
		if yyct3308 == codecSelferValueTypeMap1234 {
			yyl3308 := r.ReadMapStart()
			if yyl3308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3308, d)
			}
		} else if yyct3308 == codecSelferValueTypeArray1234 {
			yyl3308 := r.ReadArrayStart()
			if yyl3308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3309Slc
	var yyhl3309 bool = l >= 0
	for yyj3309 := 0; ; yyj3309++ {
		if yyhl3309 {
			if yyj3309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3309Slc = r.DecodeBytes(yys3309Slc, true, true)
		yys3309 := string(yys3309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3309 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3312 := &x.ObjectMeta
				yyv3312.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3313 := &x.Spec
				yyv3313.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3314 := &x.Status
				yyv3314.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3309)
		} // end switch yys3309
	} // end for yyj3309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3315 int
	var yyb3315 bool
	var yyhl3315 bool = l >= 0
	yyj3315++
	if yyhl3315 {
		yyb3315 = yyj3315 > l
	} else {
		yyb3315 = r.CheckBreak()
	}
	if yyb3315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3315++
	if yyhl3315 {
		yyb3315 = yyj3315 > l
	} else {
		yyb3315 = r.CheckBreak()
	}
	if yyb3315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3315++
	if yyhl3315 {
		yyb3315 = yyj3315 > l
	} else {
		yyb3315 = r.CheckBreak()
	}
	if yyb3315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3318 := &x.ObjectMeta
		yyv3318.CodecDecodeSelf(d)
	}
	yyj3315++
	if yyhl3315 {
		yyb3315 = yyj3315 > l
	} else {
		yyb3315 = r.CheckBreak()
	}
	if yyb3315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3319 := &x.Spec
		yyv3319.CodecDecodeSelf(d)
	}
	yyj3315++
	if yyhl3315 {
		yyb3315 = yyj3315 > l
	} else {
		yyb3315 = r.CheckBreak()
	}
	if yyb3315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3320 := &x.Status
		yyv3320.CodecDecodeSelf(d)
	}
	for {
		yyj3315++
		if yyhl3315 {
			yyb3315 = yyj3315 > l
		} else {
			yyb3315 = r.CheckBreak()
		}
		if yyb3315 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3315-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3321 := z.EncBinary()
		_ = yym3321
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3322 := !z.EncBinary()
			yy2arr3322 := z.EncBasicHandle().StructToArray
			var yyq3322 [4]bool
			_, _, _ = yysep3322, yyq3322, yy2arr3322
			const yyr3322 bool = false
			yyq3322[0] = x.Kind != ""
			yyq3322[1] = x.APIVersion != ""
			yyq3322[2] = true
			var yynn3322 int
			if yyr3322 || yy2arr3322 {
				r.EncodeArrayStart(4)
			} else {
				yynn3322 = 1
				for _, b := range yyq3322 {
					if b {
						yynn3322++
					}
				}
				r.EncodeMapStart(yynn3322)
				yynn3322 = 0
			}
			if yyr3322 || yy2arr3322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3322[0] {
					yym3324 := z.EncBinary()
					_ = yym3324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3322[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3325 := z.EncBinary()
					_ = yym3325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3322 || yy2arr3322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3322[1] {
					yym3327 := z.EncBinary()
					_ = yym3327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3322[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3322 || yy2arr3322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3322[2] {
					yy3330 := &x.ListMeta
					yym3331 := z.EncBinary()
					_ = yym3331
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3330) {
					} else {
						z.EncFallback(yy3330)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3322[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3332 := &x.ListMeta
					yym3333 := z.EncBinary()
					_ = yym3333
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3332) {
					} else {
						z.EncFallback(yy3332)
					}
				}
			}
			if yyr3322 || yy2arr3322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3335 := z.EncBinary()
					_ = yym3335
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3336 := z.EncBinary()
					_ = yym3336
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3322 || yy2arr3322 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3337 := z.DecBinary()
	_ = yym3337
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3338 := r.ContainerType()
		if yyct3338 == codecSelferValueTypeMap1234 {
			yyl3338 := r.ReadMapStart()
			if yyl3338 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3338, d)
			}
		} else if yyct3338 == codecSelferValueTypeArray1234 {
			yyl3338 := r.ReadArrayStart()
			if yyl3338 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3338, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3339Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3339Slc
	var yyhl3339 bool = l >= 0
	for yyj3339 := 0; ; yyj3339++ {
		if yyhl3339 {
			if yyj3339 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3339Slc = r.DecodeBytes(yys3339Slc, true, true)
		yys3339 := string(yys3339Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3339 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3342 := &x.ListMeta
				yym3343 := z.DecBinary()
				_ = yym3343
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3342) {
				} else {
					z.DecFallback(yyv3342, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3344 := &x.Items
				yym3345 := z.DecBinary()
				_ = yym3345
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3344), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3339)
		} // end switch yys3339
	} // end for yyj3339
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3346 int
	var yyb3346 bool
	var yyhl3346 bool = l >= 0
	yyj3346++
	if yyhl3346 {
		yyb3346 = yyj3346 > l
	} else {
		yyb3346 = r.CheckBreak()
	}
	if yyb3346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3346++
	if yyhl3346 {
		yyb3346 = yyj3346 > l
	} else {
		yyb3346 = r.CheckBreak()
	}
	if yyb3346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3346++
	if yyhl3346 {
		yyb3346 = yyj3346 > l
	} else {
		yyb3346 = r.CheckBreak()
	}
	if yyb3346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3349 := &x.ListMeta
		yym3350 := z.DecBinary()
		_ = yym3350
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3349) {
		} else {
			z.DecFallback(yyv3349, false)
		}
	}
	yyj3346++
	if yyhl3346 {
		yyb3346 = yyj3346 > l
	} else {
		yyb3346 = r.CheckBreak()
	}
	if yyb3346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3351 := &x.Items
		yym3352 := z.DecBinary()
		_ = yym3352
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3351), d)
		}
	}
	for {
		yyj3346++
		if yyhl3346 {
			yyb3346 = yyj3346 > l
		} else {
			yyb3346 = r.CheckBreak()
		}
		if yyb3346 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3346-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3353 := z.EncBinary()
		_ = yym3353
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3354 := !z.EncBinary()
			yy2arr3354 := z.EncBasicHandle().StructToArray
			var yyq3354 [4]bool
			_, _, _ = yysep3354, yyq3354, yy2arr3354
			const yyr3354 bool = false
			yyq3354[0] = x.Kind != ""
			yyq3354[1] = x.APIVersion != ""
			yyq3354[2] = true
			var yynn3354 int
			if yyr3354 || yy2arr3354 {
				r.EncodeArrayStart(4)
			} else {
				yynn3354 = 1
				for _, b := range yyq3354 {
					if b {
						yynn3354++
					}
				}
				r.EncodeMapStart(yynn3354)
				yynn3354 = 0
			}
			if yyr3354 || yy2arr3354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3354[0] {
					yym3356 := z.EncBinary()
					_ = yym3356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3354[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3357 := z.EncBinary()
					_ = yym3357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3354 || yy2arr3354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3354[1] {
					yym3359 := z.EncBinary()
					_ = yym3359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3354[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3360 := z.EncBinary()
					_ = yym3360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3354 || yy2arr3354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3354[2] {
					yy3362 := &x.ObjectMeta
					yy3362.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3354[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3363 := &x.ObjectMeta
					yy3363.CodecEncodeSelf(e)
				}
			}
			if yyr3354 || yy2arr3354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3365 := &x.Target
				yy3365.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3366 := &x.Target
				yy3366.CodecEncodeSelf(e)
			}
			if yyr3354 || yy2arr3354 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3367 := z.DecBinary()
	_ = yym3367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3368 := r.ContainerType()
		if yyct3368 == codecSelferValueTypeMap1234 {
			yyl3368 := r.ReadMapStart()
			if yyl3368 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3368, d)
			}
		} else if yyct3368 == codecSelferValueTypeArray1234 {
			yyl3368 := r.ReadArrayStart()
			if yyl3368 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3369Slc
	var yyhl3369 bool = l >= 0
	for yyj3369 := 0; ; yyj3369++ {
		if yyhl3369 {
			if yyj3369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3369Slc = r.DecodeBytes(yys3369Slc, true, true)
		yys3369 := string(yys3369Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3369 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3372 := &x.ObjectMeta
				yyv3372.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3373 := &x.Target
				yyv3373.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3369)
		} // end switch yys3369
	} // end for yyj3369
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3374 int
	var yyb3374 bool
	var yyhl3374 bool = l >= 0
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3377 := &x.ObjectMeta
		yyv3377.CodecDecodeSelf(d)
	}
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3378 := &x.Target
		yyv3378.CodecDecodeSelf(d)
	}
	for {
		yyj3374++
		if yyhl3374 {
			yyb3374 = yyj3374 > l
		} else {
			yyb3374 = r.CheckBreak()
		}
		if yyb3374 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3374-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3379 := z.EncBinary()
		_ = yym3379
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3380 := !z.EncBinary()
			yy2arr3380 := z.EncBasicHandle().StructToArray
			var yyq3380 [1]bool
			_, _, _ = yysep3380, yyq3380, yy2arr3380
			const yyr3380 bool = false
			yyq3380[0] = x.UID != nil
			var yynn3380 int
			if yyr3380 || yy2arr3380 {
				r.EncodeArrayStart(1)
			} else {
				yynn3380 = 0
				for _, b := range yyq3380 {
					if b {
						yynn3380++
					}
				}
				r.EncodeMapStart(yynn3380)
				yynn3380 = 0
			}
			if yyr3380 || yy2arr3380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3380[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3382 := *x.UID
						yym3383 := z.EncBinary()
						_ = yym3383
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3382) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3382))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3380[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3384 := *x.UID
						yym3385 := z.EncBinary()
						_ = yym3385
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3384) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3384))
						}
					}
				}
			}
			if yyr3380 || yy2arr3380 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3386 := z.DecBinary()
	_ = yym3386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3387 := r.ContainerType()
		if yyct3387 == codecSelferValueTypeMap1234 {
			yyl3387 := r.ReadMapStart()
			if yyl3387 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3387, d)
			}
		} else if yyct3387 == codecSelferValueTypeArray1234 {
			yyl3387 := r.ReadArrayStart()
			if yyl3387 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3387, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3388Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3388Slc
	var yyhl3388 bool = l >= 0
	for yyj3388 := 0; ; yyj3388++ {
		if yyhl3388 {
			if yyj3388 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3388Slc = r.DecodeBytes(yys3388Slc, true, true)
		yys3388 := string(yys3388Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3388 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3390 := z.DecBinary()
				_ = yym3390
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3388)
		} // end switch yys3388
	} // end for yyj3388
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3391 int
	var yyb3391 bool
	var yyhl3391 bool = l >= 0
	yyj3391++
	if yyhl3391 {
		yyb3391 = yyj3391 > l
	} else {
		yyb3391 = r.CheckBreak()
	}
	if yyb3391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3393 := z.DecBinary()
		_ = yym3393
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3391++
		if yyhl3391 {
			yyb3391 = yyj3391 > l
		} else {
			yyb3391 = r.CheckBreak()
		}
		if yyb3391 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3391-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3394 := z.EncBinary()
		_ = yym3394
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3395 := !z.EncBinary()
			yy2arr3395 := z.EncBasicHandle().StructToArray
			var yyq3395 [5]bool
			_, _, _ = yysep3395, yyq3395, yy2arr3395
			const yyr3395 bool = false
			yyq3395[0] = x.Kind != ""
			yyq3395[1] = x.APIVersion != ""
			yyq3395[2] = x.GracePeriodSeconds != nil
			yyq3395[3] = x.Preconditions != nil
			yyq3395[4] = x.OrphanDependents != nil
			var yynn3395 int
			if yyr3395 || yy2arr3395 {
				r.EncodeArrayStart(5)
			} else {
				yynn3395 = 0
				for _, b := range yyq3395 {
					if b {
						yynn3395++
					}
				}
				r.EncodeMapStart(yynn3395)
				yynn3395 = 0
			}
			if yyr3395 || yy2arr3395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3395[0] {
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3395[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3398 := z.EncBinary()
					_ = yym3398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3395 || yy2arr3395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3395[1] {
					yym3400 := z.EncBinary()
					_ = yym3400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3395[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3401 := z.EncBinary()
					_ = yym3401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3395 || yy2arr3395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3395[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3403 := *x.GracePeriodSeconds
						yym3404 := z.EncBinary()
						_ = yym3404
						if false {
						} else {
							r.EncodeInt(int64(yy3403))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3395[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3405 := *x.GracePeriodSeconds
						yym3406 := z.EncBinary()
						_ = yym3406
						if false {
						} else {
							r.EncodeInt(int64(yy3405))
						}
					}
				}
			}
			if yyr3395 || yy2arr3395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3395[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3395[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3395 || yy2arr3395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3395[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3409 := *x.OrphanDependents
						yym3410 := z.EncBinary()
						_ = yym3410
						if false {
						} else {
							r.EncodeBool(bool(yy3409))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3395[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3411 := *x.OrphanDependents
						yym3412 := z.EncBinary()
						_ = yym3412
						if false {
						} else {
							r.EncodeBool(bool(yy3411))
						}
					}
				}
			}
			if yyr3395 || yy2arr3395 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3413 := z.DecBinary()
	_ = yym3413
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3414 := r.ContainerType()
		if yyct3414 == codecSelferValueTypeMap1234 {
			yyl3414 := r.ReadMapStart()
			if yyl3414 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3414, d)
			}
		} else if yyct3414 == codecSelferValueTypeArray1234 {
			yyl3414 := r.ReadArrayStart()
			if yyl3414 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3414, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3415Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3415Slc
	var yyhl3415 bool = l >= 0
	for yyj3415 := 0; ; yyj3415++ {
		if yyhl3415 {
			if yyj3415 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3415Slc = r.DecodeBytes(yys3415Slc, true, true)
		yys3415 := string(yys3415Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3415 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3419 := z.DecBinary()
				_ = yym3419
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3422 := z.DecBinary()
				_ = yym3422
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3415)
		} // end switch yys3415
	} // end for yyj3415
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3423 int
	var yyb3423 bool
	var yyhl3423 bool = l >= 0
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3427 := z.DecBinary()
		_ = yym3427
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3430 := z.DecBinary()
		_ = yym3430
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3423++
		if yyhl3423 {
			yyb3423 = yyj3423 > l
		} else {
			yyb3423 = r.CheckBreak()
		}
		if yyb3423 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3423-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3431 := z.EncBinary()
		_ = yym3431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3432 := !z.EncBinary()
			yy2arr3432 := z.EncBasicHandle().StructToArray
			var yyq3432 [4]bool
			_, _, _ = yysep3432, yyq3432, yy2arr3432
			const yyr3432 bool = false
			yyq3432[0] = x.Kind != ""
			yyq3432[1] = x.APIVersion != ""
			var yynn3432 int
			if yyr3432 || yy2arr3432 {
				r.EncodeArrayStart(4)
			} else {
				yynn3432 = 2
				for _, b := range yyq3432 {
					if b {
						yynn3432++
					}
				}
				r.EncodeMapStart(yynn3432)
				yynn3432 = 0
			}
			if yyr3432 || yy2arr3432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3432[0] {
					yym3434 := z.EncBinary()
					_ = yym3434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3432[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3435 := z.EncBinary()
					_ = yym3435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3432 || yy2arr3432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3432[1] {
					yym3437 := z.EncBinary()
					_ = yym3437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3432[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3438 := z.EncBinary()
					_ = yym3438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3432 || yy2arr3432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3440 := z.EncBinary()
				_ = yym3440
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3441 := z.EncBinary()
				_ = yym3441
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3432 || yy2arr3432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3443 := z.EncBinary()
				_ = yym3443
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3444 := z.EncBinary()
				_ = yym3444
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3432 || yy2arr3432 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3445 := z.DecBinary()
	_ = yym3445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3446 := r.ContainerType()
		if yyct3446 == codecSelferValueTypeMap1234 {
			yyl3446 := r.ReadMapStart()
			if yyl3446 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3446, d)
			}
		} else if yyct3446 == codecSelferValueTypeArray1234 {
			yyl3446 := r.ReadArrayStart()
			if yyl3446 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3446, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3447Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3447Slc
	var yyhl3447 bool = l >= 0
	for yyj3447 := 0; ; yyj3447++ {
		if yyhl3447 {
			if yyj3447 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3447Slc = r.DecodeBytes(yys3447Slc, true, true)
		yys3447 := string(yys3447Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3447 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3447)
		} // end switch yys3447
	} // end for yyj3447
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3452 int
	var yyb3452 bool
	var yyhl3452 bool = l >= 0
	yyj3452++
	if yyhl3452 {
		yyb3452 = yyj3452 > l
	} else {
		yyb3452 = r.CheckBreak()
	}
	if yyb3452 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3452++
	if yyhl3452 {
		yyb3452 = yyj3452 > l
	} else {
		yyb3452 = r.CheckBreak()
	}
	if yyb3452 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3452++
	if yyhl3452 {
		yyb3452 = yyj3452 > l
	} else {
		yyb3452 = r.CheckBreak()
	}
	if yyb3452 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3452++
	if yyhl3452 {
		yyb3452 = yyj3452 > l
	} else {
		yyb3452 = r.CheckBreak()
	}
	if yyb3452 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3452++
		if yyhl3452 {
			yyb3452 = yyj3452 > l
		} else {
			yyb3452 = r.CheckBreak()
		}
		if yyb3452 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3452-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3457 := z.EncBinary()
		_ = yym3457
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3458 := !z.EncBinary()
			yy2arr3458 := z.EncBasicHandle().StructToArray
			var yyq3458 [7]bool
			_, _, _ = yysep3458, yyq3458, yy2arr3458
			const yyr3458 bool = false
			yyq3458[0] = x.Kind != ""
			yyq3458[1] = x.APIVersion != ""
			yyq3458[2] = x.LabelSelector != ""
			yyq3458[3] = x.FieldSelector != ""
			yyq3458[4] = x.Watch != false
			yyq3458[5] = x.ResourceVersion != ""
			yyq3458[6] = x.TimeoutSeconds != nil
			var yynn3458 int
			if yyr3458 || yy2arr3458 {
				r.EncodeArrayStart(7)
			} else {
				yynn3458 = 0
				for _, b := range yyq3458 {
					if b {
						yynn3458++
					}
				}
				r.EncodeMapStart(yynn3458)
				yynn3458 = 0
			}
			if yyr3458 || yy2arr3458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3458[0] {
					yym3460 := z.EncBinary()
					_ = yym3460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3458[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3461 := z.EncBinary()
					_ = yym3461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3458 || yy2arr3458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3458[1] {
					yym3463 := z.EncBinary()
					_ = yym3463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3458[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3464 := z.EncBinary()
					_ = yym3464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3458 || yy2arr3458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3458[2] {
					yym3466 := z.EncBinary()
					_ = yym3466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3458[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3467 := z.EncBinary()
					_ = yym3467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3458 || yy2arr3458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3458[3] {
					yym3469 := z.EncBinary()
					_ = yym3469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3458[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3470 := z.EncBinary()
					_ = yym3470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3458 || yy2arr3458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3458[4] {
					yym3472 := z.EncBinary()
					_ = yym3472
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3458[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3473 := z.EncBinary()
					_ = yym3473
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3458 || yy2arr3458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3458[5] {
					yym3475 := z.EncBinary()
					_ = yym3475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3458[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3476 := z.EncBinary()
					_ = yym3476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3458 || yy2arr3458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3458[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3478 := *x.TimeoutSeconds
						yym3479 := z.EncBinary()
						_ = yym3479
						if false {
						} else {
							r.EncodeInt(int64(yy3478))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3458[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3480 := *x.TimeoutSeconds
						yym3481 := z.EncBinary()
						_ = yym3481
						if false {
						} else {
							r.EncodeInt(int64(yy3480))
						}
					}
				}
			}
			if yyr3458 || yy2arr3458 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3482 := z.DecBinary()
	_ = yym3482
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3483 := r.ContainerType()
		if yyct3483 == codecSelferValueTypeMap1234 {
			yyl3483 := r.ReadMapStart()
			if yyl3483 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3483, d)
			}
		} else if yyct3483 == codecSelferValueTypeArray1234 {
			yyl3483 := r.ReadArrayStart()
			if yyl3483 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3483, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3484Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3484Slc
	var yyhl3484 bool = l >= 0
	for yyj3484 := 0; ; yyj3484++ {
		if yyhl3484 {
			if yyj3484 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3484Slc = r.DecodeBytes(yys3484Slc, true, true)
		yys3484 := string(yys3484Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3484 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3492 := z.DecBinary()
				_ = yym3492
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3484)
		} // end switch yys3484
	} // end for yyj3484
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3493 int
	var yyb3493 bool
	var yyhl3493 bool = l >= 0
	yyj3493++
	if yyhl3493 {
		yyb3493 = yyj3493 > l
	} else {
		yyb3493 = r.CheckBreak()
	}
	if yyb3493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3493++
	if yyhl3493 {
		yyb3493 = yyj3493 > l
	} else {
		yyb3493 = r.CheckBreak()
	}
	if yyb3493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3493++
	if yyhl3493 {
		yyb3493 = yyj3493 > l
	} else {
		yyb3493 = r.CheckBreak()
	}
	if yyb3493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3493++
	if yyhl3493 {
		yyb3493 = yyj3493 > l
	} else {
		yyb3493 = r.CheckBreak()
	}
	if yyb3493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3493++
	if yyhl3493 {
		yyb3493 = yyj3493 > l
	} else {
		yyb3493 = r.CheckBreak()
	}
	if yyb3493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3493++
	if yyhl3493 {
		yyb3493 = yyj3493 > l
	} else {
		yyb3493 = r.CheckBreak()
	}
	if yyb3493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3493++
	if yyhl3493 {
		yyb3493 = yyj3493 > l
	} else {
		yyb3493 = r.CheckBreak()
	}
	if yyb3493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3501 := z.DecBinary()
		_ = yym3501
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3493++
		if yyhl3493 {
			yyb3493 = yyj3493 > l
		} else {
			yyb3493 = r.CheckBreak()
		}
		if yyb3493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3502 := z.EncBinary()
		_ = yym3502
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3503 := !z.EncBinary()
			yy2arr3503 := z.EncBasicHandle().StructToArray
			var yyq3503 [10]bool
			_, _, _ = yysep3503, yyq3503, yy2arr3503
			const yyr3503 bool = false
			yyq3503[0] = x.Kind != ""
			yyq3503[1] = x.APIVersion != ""
			yyq3503[2] = x.Container != ""
			yyq3503[3] = x.Follow != false
			yyq3503[4] = x.Previous != false
			yyq3503[5] = x.SinceSeconds != nil
			yyq3503[6] = x.SinceTime != nil
			yyq3503[7] = x.Timestamps != false
			yyq3503[8] = x.TailLines != nil
			yyq3503[9] = x.LimitBytes != nil
			var yynn3503 int
			if yyr3503 || yy2arr3503 {
				r.EncodeArrayStart(10)
			} else {
				yynn3503 = 0
				for _, b := range yyq3503 {
					if b {
						yynn3503++
					}
				}
				r.EncodeMapStart(yynn3503)
				yynn3503 = 0
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[0] {
					yym3505 := z.EncBinary()
					_ = yym3505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3503[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3506 := z.EncBinary()
					_ = yym3506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[1] {
					yym3508 := z.EncBinary()
					_ = yym3508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3503[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3509 := z.EncBinary()
					_ = yym3509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[2] {
					yym3511 := z.EncBinary()
					_ = yym3511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3503[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3512 := z.EncBinary()
					_ = yym3512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[3] {
					yym3514 := z.EncBinary()
					_ = yym3514
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3503[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3515 := z.EncBinary()
					_ = yym3515
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[4] {
					yym3517 := z.EncBinary()
					_ = yym3517
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3503[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3518 := z.EncBinary()
					_ = yym3518
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3520 := *x.SinceSeconds
						yym3521 := z.EncBinary()
						_ = yym3521
						if false {
						} else {
							r.EncodeInt(int64(yy3520))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3503[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3522 := *x.SinceSeconds
						yym3523 := z.EncBinary()
						_ = yym3523
						if false {
						} else {
							r.EncodeInt(int64(yy3522))
						}
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3525 := z.EncBinary()
						_ = yym3525
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3525 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3525 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3503[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3526 := z.EncBinary()
						_ = yym3526
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3526 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3526 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[7] {
					yym3528 := z.EncBinary()
					_ = yym3528
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3503[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3529 := z.EncBinary()
					_ = yym3529
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3531 := *x.TailLines
						yym3532 := z.EncBinary()
						_ = yym3532
						if false {
						} else {
							r.EncodeInt(int64(yy3531))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3503[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3533 := *x.TailLines
						yym3534 := z.EncBinary()
						_ = yym3534
						if false {
						} else {
							r.EncodeInt(int64(yy3533))
						}
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3536 := *x.LimitBytes
						yym3537 := z.EncBinary()
						_ = yym3537
						if false {
						} else {
							r.EncodeInt(int64(yy3536))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3503[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3538 := *x.LimitBytes
						yym3539 := z.EncBinary()
						_ = yym3539
						if false {
						} else {
							r.EncodeInt(int64(yy3538))
						}
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3540 := z.DecBinary()
	_ = yym3540
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3541 := r.ContainerType()
		if yyct3541 == codecSelferValueTypeMap1234 {
			yyl3541 := r.ReadMapStart()
			if yyl3541 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3541, d)
			}
		} else if yyct3541 == codecSelferValueTypeArray1234 {
			yyl3541 := r.ReadArrayStart()
			if yyl3541 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3541, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3542Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3542Slc
	var yyhl3542 bool = l >= 0
	for yyj3542 := 0; ; yyj3542++ {
		if yyhl3542 {
			if yyj3542 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3542Slc = r.DecodeBytes(yys3542Slc, true, true)
		yys3542 := string(yys3542Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3542 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3549 := z.DecBinary()
				_ = yym3549
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3551 := z.DecBinary()
				_ = yym3551
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3551 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3551 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3554 := z.DecBinary()
				_ = yym3554
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3556 := z.DecBinary()
				_ = yym3556
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3542)
		} // end switch yys3542
	} // end for yyj3542
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3557 int
	var yyb3557 bool
	var yyhl3557 bool = l >= 0
	yyj3557++
	if yyhl3557 {
		yyb3557 = yyj3557 > l
	} else {
		yyb3557 = r.CheckBreak()
	}
	if yyb3557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3557++
	if yyhl3557 {
		yyb3557 = yyj3557 > l
	} else {
		yyb3557 = r.CheckBreak()
	}
	if yyb3557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3557++
	if yyhl3557 {
		yyb3557 = yyj3557 > l
	} else {
		yyb3557 = r.CheckBreak()
	}
	if yyb3557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3557++
	if yyhl3557 {
		yyb3557 = yyj3557 > l
	} else {
		yyb3557 = r.CheckBreak()
	}
	if yyb3557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3557++
	if yyhl3557 {
		yyb3557 = yyj3557 > l
	} else {
		yyb3557 = r.CheckBreak()
	}
	if yyb3557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3557++
	if yyhl3557 {
		yyb3557 = yyj3557 > l
	} else {
		yyb3557 = r.CheckBreak()
	}
	if yyb3557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3564 := z.DecBinary()
		_ = yym3564
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3557++
	if yyhl3557 {
		yyb3557 = yyj3557 > l
	} else {
		yyb3557 = r.CheckBreak()
	}
	if yyb3557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3566 := z.DecBinary()
		_ = yym3566
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3566 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3566 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3557++
	if yyhl3557 {
		yyb3557 = yyj3557 > l
	} else {
		yyb3557 = r.CheckBreak()
	}
	if yyb3557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3557++
	if yyhl3557 {
		yyb3557 = yyj3557 > l
	} else {
		yyb3557 = r.CheckBreak()
	}
	if yyb3557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3569 := z.DecBinary()
		_ = yym3569
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3557++
	if yyhl3557 {
		yyb3557 = yyj3557 > l
	} else {
		yyb3557 = r.CheckBreak()
	}
	if yyb3557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3571 := z.DecBinary()
		_ = yym3571
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3557++
		if yyhl3557 {
			yyb3557 = yyj3557 > l
		} else {
			yyb3557 = r.CheckBreak()
		}
		if yyb3557 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3557-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3572 := z.EncBinary()
		_ = yym3572
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3573 := !z.EncBinary()
			yy2arr3573 := z.EncBasicHandle().StructToArray
			var yyq3573 [7]bool
			_, _, _ = yysep3573, yyq3573, yy2arr3573
			const yyr3573 bool = false
			yyq3573[0] = x.Kind != ""
			yyq3573[1] = x.APIVersion != ""
			yyq3573[2] = x.Stdin != false
			yyq3573[3] = x.Stdout != false
			yyq3573[4] = x.Stderr != false
			yyq3573[5] = x.TTY != false
			yyq3573[6] = x.Container != ""
			var yynn3573 int
			if yyr3573 || yy2arr3573 {
				r.EncodeArrayStart(7)
			} else {
				yynn3573 = 0
				for _, b := range yyq3573 {
					if b {
						yynn3573++
					}
				}
				r.EncodeMapStart(yynn3573)
				yynn3573 = 0
			}
			if yyr3573 || yy2arr3573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3573[0] {
					yym3575 := z.EncBinary()
					_ = yym3575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3573[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3576 := z.EncBinary()
					_ = yym3576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3573 || yy2arr3573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3573[1] {
					yym3578 := z.EncBinary()
					_ = yym3578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3573[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3579 := z.EncBinary()
					_ = yym3579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3573 || yy2arr3573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3573[2] {
					yym3581 := z.EncBinary()
					_ = yym3581
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3573[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3582 := z.EncBinary()
					_ = yym3582
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3573 || yy2arr3573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3573[3] {
					yym3584 := z.EncBinary()
					_ = yym3584
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3573[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3585 := z.EncBinary()
					_ = yym3585
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3573 || yy2arr3573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3573[4] {
					yym3587 := z.EncBinary()
					_ = yym3587
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3573[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3588 := z.EncBinary()
					_ = yym3588
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3573 || yy2arr3573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3573[5] {
					yym3590 := z.EncBinary()
					_ = yym3590
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3573[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3591 := z.EncBinary()
					_ = yym3591
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3573 || yy2arr3573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3573[6] {
					yym3593 := z.EncBinary()
					_ = yym3593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3573[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3594 := z.EncBinary()
					_ = yym3594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3573 || yy2arr3573 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3595 := z.DecBinary()
	_ = yym3595
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3596 := r.ContainerType()
		if yyct3596 == codecSelferValueTypeMap1234 {
			yyl3596 := r.ReadMapStart()
			if yyl3596 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3596, d)
			}
		} else if yyct3596 == codecSelferValueTypeArray1234 {
			yyl3596 := r.ReadArrayStart()
			if yyl3596 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3596, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3597Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3597Slc
	var yyhl3597 bool = l >= 0
	for yyj3597 := 0; ; yyj3597++ {
		if yyhl3597 {
			if yyj3597 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3597Slc = r.DecodeBytes(yys3597Slc, true, true)
		yys3597 := string(yys3597Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3597 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3597)
		} // end switch yys3597
	} // end for yyj3597
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3605 int
	var yyb3605 bool
	var yyhl3605 bool = l >= 0
	yyj3605++
	if yyhl3605 {
		yyb3605 = yyj3605 > l
	} else {
		yyb3605 = r.CheckBreak()
	}
	if yyb3605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3605++
	if yyhl3605 {
		yyb3605 = yyj3605 > l
	} else {
		yyb3605 = r.CheckBreak()
	}
	if yyb3605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3605++
	if yyhl3605 {
		yyb3605 = yyj3605 > l
	} else {
		yyb3605 = r.CheckBreak()
	}
	if yyb3605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3605++
	if yyhl3605 {
		yyb3605 = yyj3605 > l
	} else {
		yyb3605 = r.CheckBreak()
	}
	if yyb3605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3605++
	if yyhl3605 {
		yyb3605 = yyj3605 > l
	} else {
		yyb3605 = r.CheckBreak()
	}
	if yyb3605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3605++
	if yyhl3605 {
		yyb3605 = yyj3605 > l
	} else {
		yyb3605 = r.CheckBreak()
	}
	if yyb3605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3605++
	if yyhl3605 {
		yyb3605 = yyj3605 > l
	} else {
		yyb3605 = r.CheckBreak()
	}
	if yyb3605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3605++
		if yyhl3605 {
			yyb3605 = yyj3605 > l
		} else {
			yyb3605 = r.CheckBreak()
		}
		if yyb3605 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3605-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3613 := z.EncBinary()
		_ = yym3613
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3614 := !z.EncBinary()
			yy2arr3614 := z.EncBasicHandle().StructToArray
			var yyq3614 [8]bool
			_, _, _ = yysep3614, yyq3614, yy2arr3614
			const yyr3614 bool = false
			yyq3614[0] = x.Kind != ""
			yyq3614[1] = x.APIVersion != ""
			yyq3614[2] = x.Stdin != false
			yyq3614[3] = x.Stdout != false
			yyq3614[4] = x.Stderr != false
			yyq3614[5] = x.TTY != false
			yyq3614[6] = x.Container != ""
			var yynn3614 int
			if yyr3614 || yy2arr3614 {
				r.EncodeArrayStart(8)
			} else {
				yynn3614 = 1
				for _, b := range yyq3614 {
					if b {
						yynn3614++
					}
				}
				r.EncodeMapStart(yynn3614)
				yynn3614 = 0
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3614[0] {
					yym3616 := z.EncBinary()
					_ = yym3616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3614[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3617 := z.EncBinary()
					_ = yym3617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3614[1] {
					yym3619 := z.EncBinary()
					_ = yym3619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3614[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3620 := z.EncBinary()
					_ = yym3620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3614[2] {
					yym3622 := z.EncBinary()
					_ = yym3622
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3614[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3623 := z.EncBinary()
					_ = yym3623
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3614[3] {
					yym3625 := z.EncBinary()
					_ = yym3625
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3614[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3626 := z.EncBinary()
					_ = yym3626
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3614[4] {
					yym3628 := z.EncBinary()
					_ = yym3628
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3614[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3629 := z.EncBinary()
					_ = yym3629
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3614[5] {
					yym3631 := z.EncBinary()
					_ = yym3631
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3614[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3632 := z.EncBinary()
					_ = yym3632
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3614[6] {
					yym3634 := z.EncBinary()
					_ = yym3634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3614[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3635 := z.EncBinary()
					_ = yym3635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3637 := z.EncBinary()
					_ = yym3637
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3638 := z.EncBinary()
					_ = yym3638
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3639 := z.DecBinary()
	_ = yym3639
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3640 := r.ContainerType()
		if yyct3640 == codecSelferValueTypeMap1234 {
			yyl3640 := r.ReadMapStart()
			if yyl3640 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3640, d)
			}
		} else if yyct3640 == codecSelferValueTypeArray1234 {
			yyl3640 := r.ReadArrayStart()
			if yyl3640 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3640, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3641Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3641Slc
	var yyhl3641 bool = l >= 0
	for yyj3641 := 0; ; yyj3641++ {
		if yyhl3641 {
			if yyj3641 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3641Slc = r.DecodeBytes(yys3641Slc, true, true)
		yys3641 := string(yys3641Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3641 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3649 := &x.Command
				yym3650 := z.DecBinary()
				_ = yym3650
				if false {
				} else {
					z.F.DecSliceStringX(yyv3649, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3641)
		} // end switch yys3641
	} // end for yyj3641
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3651 int
	var yyb3651 bool
	var yyhl3651 bool = l >= 0
	yyj3651++
	if yyhl3651 {
		yyb3651 = yyj3651 > l
	} else {
		yyb3651 = r.CheckBreak()
	}
	if yyb3651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3651++
	if yyhl3651 {
		yyb3651 = yyj3651 > l
	} else {
		yyb3651 = r.CheckBreak()
	}
	if yyb3651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3651++
	if yyhl3651 {
		yyb3651 = yyj3651 > l
	} else {
		yyb3651 = r.CheckBreak()
	}
	if yyb3651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3651++
	if yyhl3651 {
		yyb3651 = yyj3651 > l
	} else {
		yyb3651 = r.CheckBreak()
	}
	if yyb3651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3651++
	if yyhl3651 {
		yyb3651 = yyj3651 > l
	} else {
		yyb3651 = r.CheckBreak()
	}
	if yyb3651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3651++
	if yyhl3651 {
		yyb3651 = yyj3651 > l
	} else {
		yyb3651 = r.CheckBreak()
	}
	if yyb3651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3651++
	if yyhl3651 {
		yyb3651 = yyj3651 > l
	} else {
		yyb3651 = r.CheckBreak()
	}
	if yyb3651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3651++
	if yyhl3651 {
		yyb3651 = yyj3651 > l
	} else {
		yyb3651 = r.CheckBreak()
	}
	if yyb3651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3659 := &x.Command
		yym3660 := z.DecBinary()
		_ = yym3660
		if false {
		} else {
			z.F.DecSliceStringX(yyv3659, false, d)
		}
	}
	for {
		yyj3651++
		if yyhl3651 {
			yyb3651 = yyj3651 > l
		} else {
			yyb3651 = r.CheckBreak()
		}
		if yyb3651 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3651-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3661 := z.EncBinary()
		_ = yym3661
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3662 := !z.EncBinary()
			yy2arr3662 := z.EncBasicHandle().StructToArray
			var yyq3662 [3]bool
			_, _, _ = yysep3662, yyq3662, yy2arr3662
			const yyr3662 bool = false
			yyq3662[0] = x.Kind != ""
			yyq3662[1] = x.APIVersion != ""
			yyq3662[2] = x.Path != ""
			var yynn3662 int
			if yyr3662 || yy2arr3662 {
				r.EncodeArrayStart(3)
			} else {
				yynn3662 = 0
				for _, b := range yyq3662 {
					if b {
						yynn3662++
					}
				}
				r.EncodeMapStart(yynn3662)
				yynn3662 = 0
			}
			if yyr3662 || yy2arr3662 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3662[0] {
					yym3664 := z.EncBinary()
					_ = yym3664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3662[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3665 := z.EncBinary()
					_ = yym3665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3662 || yy2arr3662 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3662[1] {
					yym3667 := z.EncBinary()
					_ = yym3667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3662[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3668 := z.EncBinary()
					_ = yym3668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3662 || yy2arr3662 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3662[2] {
					yym3670 := z.EncBinary()
					_ = yym3670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3662[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3671 := z.EncBinary()
					_ = yym3671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3662 || yy2arr3662 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3672 := z.DecBinary()
	_ = yym3672
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3673 := r.ContainerType()
		if yyct3673 == codecSelferValueTypeMap1234 {
			yyl3673 := r.ReadMapStart()
			if yyl3673 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3673, d)
			}
		} else if yyct3673 == codecSelferValueTypeArray1234 {
			yyl3673 := r.ReadArrayStart()
			if yyl3673 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3673, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3674Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3674Slc
	var yyhl3674 bool = l >= 0
	for yyj3674 := 0; ; yyj3674++ {
		if yyhl3674 {
			if yyj3674 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3674Slc = r.DecodeBytes(yys3674Slc, true, true)
		yys3674 := string(yys3674Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3674 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3674)
		} // end switch yys3674
	} // end for yyj3674
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3678 int
	var yyb3678 bool
	var yyhl3678 bool = l >= 0
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3678++
		if yyhl3678 {
			yyb3678 = yyj3678 > l
		} else {
			yyb3678 = r.CheckBreak()
		}
		if yyb3678 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3678-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3682 := z.EncBinary()
		_ = yym3682
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3683 := !z.EncBinary()
			yy2arr3683 := z.EncBasicHandle().StructToArray
			var yyq3683 [3]bool
			_, _, _ = yysep3683, yyq3683, yy2arr3683
			const yyr3683 bool = false
			yyq3683[0] = x.Kind != ""
			yyq3683[1] = x.APIVersion != ""
			yyq3683[2] = x.Path != ""
			var yynn3683 int
			if yyr3683 || yy2arr3683 {
				r.EncodeArrayStart(3)
			} else {
				yynn3683 = 0
				for _, b := range yyq3683 {
					if b {
						yynn3683++
					}
				}
				r.EncodeMapStart(yynn3683)
				yynn3683 = 0
			}
			if yyr3683 || yy2arr3683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3683[0] {
					yym3685 := z.EncBinary()
					_ = yym3685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3683[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3686 := z.EncBinary()
					_ = yym3686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3683 || yy2arr3683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3683[1] {
					yym3688 := z.EncBinary()
					_ = yym3688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3683[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3689 := z.EncBinary()
					_ = yym3689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3683 || yy2arr3683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3683[2] {
					yym3691 := z.EncBinary()
					_ = yym3691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3683[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3692 := z.EncBinary()
					_ = yym3692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3683 || yy2arr3683 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3693 := z.DecBinary()
	_ = yym3693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3694 := r.ContainerType()
		if yyct3694 == codecSelferValueTypeMap1234 {
			yyl3694 := r.ReadMapStart()
			if yyl3694 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3694, d)
			}
		} else if yyct3694 == codecSelferValueTypeArray1234 {
			yyl3694 := r.ReadArrayStart()
			if yyl3694 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3695Slc
	var yyhl3695 bool = l >= 0
	for yyj3695 := 0; ; yyj3695++ {
		if yyhl3695 {
			if yyj3695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3695Slc = r.DecodeBytes(yys3695Slc, true, true)
		yys3695 := string(yys3695Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3695 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3695)
		} // end switch yys3695
	} // end for yyj3695
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3699 int
	var yyb3699 bool
	var yyhl3699 bool = l >= 0
	yyj3699++
	if yyhl3699 {
		yyb3699 = yyj3699 > l
	} else {
		yyb3699 = r.CheckBreak()
	}
	if yyb3699 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3699++
	if yyhl3699 {
		yyb3699 = yyj3699 > l
	} else {
		yyb3699 = r.CheckBreak()
	}
	if yyb3699 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3699++
	if yyhl3699 {
		yyb3699 = yyj3699 > l
	} else {
		yyb3699 = r.CheckBreak()
	}
	if yyb3699 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3699++
		if yyhl3699 {
			yyb3699 = yyj3699 > l
		} else {
			yyb3699 = r.CheckBreak()
		}
		if yyb3699 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3699-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3703 := z.EncBinary()
		_ = yym3703
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3704 := !z.EncBinary()
			yy2arr3704 := z.EncBasicHandle().StructToArray
			var yyq3704 [3]bool
			_, _, _ = yysep3704, yyq3704, yy2arr3704
			const yyr3704 bool = false
			yyq3704[0] = x.Kind != ""
			yyq3704[1] = x.APIVersion != ""
			yyq3704[2] = x.Path != ""
			var yynn3704 int
			if yyr3704 || yy2arr3704 {
				r.EncodeArrayStart(3)
			} else {
				yynn3704 = 0
				for _, b := range yyq3704 {
					if b {
						yynn3704++
					}
				}
				r.EncodeMapStart(yynn3704)
				yynn3704 = 0
			}
			if yyr3704 || yy2arr3704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3704[0] {
					yym3706 := z.EncBinary()
					_ = yym3706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3704[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3707 := z.EncBinary()
					_ = yym3707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3704 || yy2arr3704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3704[1] {
					yym3709 := z.EncBinary()
					_ = yym3709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3704[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3710 := z.EncBinary()
					_ = yym3710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3704 || yy2arr3704 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3704[2] {
					yym3712 := z.EncBinary()
					_ = yym3712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3704[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3713 := z.EncBinary()
					_ = yym3713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3704 || yy2arr3704 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3714 := z.DecBinary()
	_ = yym3714
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3715 := r.ContainerType()
		if yyct3715 == codecSelferValueTypeMap1234 {
			yyl3715 := r.ReadMapStart()
			if yyl3715 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3715, d)
			}
		} else if yyct3715 == codecSelferValueTypeArray1234 {
			yyl3715 := r.ReadArrayStart()
			if yyl3715 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3715, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3716Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3716Slc
	var yyhl3716 bool = l >= 0
	for yyj3716 := 0; ; yyj3716++ {
		if yyhl3716 {
			if yyj3716 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3716Slc = r.DecodeBytes(yys3716Slc, true, true)
		yys3716 := string(yys3716Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3716 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3716)
		} // end switch yys3716
	} // end for yyj3716
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3720 int
	var yyb3720 bool
	var yyhl3720 bool = l >= 0
	yyj3720++
	if yyhl3720 {
		yyb3720 = yyj3720 > l
	} else {
		yyb3720 = r.CheckBreak()
	}
	if yyb3720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3720++
	if yyhl3720 {
		yyb3720 = yyj3720 > l
	} else {
		yyb3720 = r.CheckBreak()
	}
	if yyb3720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3720++
	if yyhl3720 {
		yyb3720 = yyj3720 > l
	} else {
		yyb3720 = r.CheckBreak()
	}
	if yyb3720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3720++
		if yyhl3720 {
			yyb3720 = yyj3720 > l
		} else {
			yyb3720 = r.CheckBreak()
		}
		if yyb3720 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3720-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3724 := z.EncBinary()
		_ = yym3724
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3725 := !z.EncBinary()
			yy2arr3725 := z.EncBasicHandle().StructToArray
			var yyq3725 [5]bool
			_, _, _ = yysep3725, yyq3725, yy2arr3725
			const yyr3725 bool = false
			yyq3725[4] = x.Controller != nil
			var yynn3725 int
			if yyr3725 || yy2arr3725 {
				r.EncodeArrayStart(5)
			} else {
				yynn3725 = 4
				for _, b := range yyq3725 {
					if b {
						yynn3725++
					}
				}
				r.EncodeMapStart(yynn3725)
				yynn3725 = 0
			}
			if yyr3725 || yy2arr3725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3727 := z.EncBinary()
				_ = yym3727
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3728 := z.EncBinary()
				_ = yym3728
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3725 || yy2arr3725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3730 := z.EncBinary()
				_ = yym3730
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3731 := z.EncBinary()
				_ = yym3731
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3725 || yy2arr3725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3733 := z.EncBinary()
				_ = yym3733
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3734 := z.EncBinary()
				_ = yym3734
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3725 || yy2arr3725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3736 := z.EncBinary()
				_ = yym3736
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3737 := z.EncBinary()
				_ = yym3737
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3725 || yy2arr3725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3725[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3739 := *x.Controller
						yym3740 := z.EncBinary()
						_ = yym3740
						if false {
						} else {
							r.EncodeBool(bool(yy3739))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3725[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3741 := *x.Controller
						yym3742 := z.EncBinary()
						_ = yym3742
						if false {
						} else {
							r.EncodeBool(bool(yy3741))
						}
					}
				}
			}
			if yyr3725 || yy2arr3725 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3743 := z.DecBinary()
	_ = yym3743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3744 := r.ContainerType()
		if yyct3744 == codecSelferValueTypeMap1234 {
			yyl3744 := r.ReadMapStart()
			if yyl3744 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3744, d)
			}
		} else if yyct3744 == codecSelferValueTypeArray1234 {
			yyl3744 := r.ReadArrayStart()
			if yyl3744 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3745Slc
	var yyhl3745 bool = l >= 0
	for yyj3745 := 0; ; yyj3745++ {
		if yyhl3745 {
			if yyj3745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3745Slc = r.DecodeBytes(yys3745Slc, true, true)
		yys3745 := string(yys3745Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3745 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3751 := z.DecBinary()
				_ = yym3751
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3745)
		} // end switch yys3745
	} // end for yyj3745
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3752 int
	var yyb3752 bool
	var yyhl3752 bool = l >= 0
	yyj3752++
	if yyhl3752 {
		yyb3752 = yyj3752 > l
	} else {
		yyb3752 = r.CheckBreak()
	}
	if yyb3752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3752++
	if yyhl3752 {
		yyb3752 = yyj3752 > l
	} else {
		yyb3752 = r.CheckBreak()
	}
	if yyb3752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3752++
	if yyhl3752 {
		yyb3752 = yyj3752 > l
	} else {
		yyb3752 = r.CheckBreak()
	}
	if yyb3752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3752++
	if yyhl3752 {
		yyb3752 = yyj3752 > l
	} else {
		yyb3752 = r.CheckBreak()
	}
	if yyb3752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3752++
	if yyhl3752 {
		yyb3752 = yyj3752 > l
	} else {
		yyb3752 = r.CheckBreak()
	}
	if yyb3752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3758 := z.DecBinary()
		_ = yym3758
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3752++
		if yyhl3752 {
			yyb3752 = yyj3752 > l
		} else {
			yyb3752 = r.CheckBreak()
		}
		if yyb3752 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3752-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3759 := z.EncBinary()
		_ = yym3759
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3760 := !z.EncBinary()
			yy2arr3760 := z.EncBasicHandle().StructToArray
			var yyq3760 [7]bool
			_, _, _ = yysep3760, yyq3760, yy2arr3760
			const yyr3760 bool = false
			yyq3760[0] = x.Kind != ""
			yyq3760[1] = x.Namespace != ""
			yyq3760[2] = x.Name != ""
			yyq3760[3] = x.UID != ""
			yyq3760[4] = x.APIVersion != ""
			yyq3760[5] = x.ResourceVersion != ""
			yyq3760[6] = x.FieldPath != ""
			var yynn3760 int
			if yyr3760 || yy2arr3760 {
				r.EncodeArrayStart(7)
			} else {
				yynn3760 = 0
				for _, b := range yyq3760 {
					if b {
						yynn3760++
					}
				}
				r.EncodeMapStart(yynn3760)
				yynn3760 = 0
			}
			if yyr3760 || yy2arr3760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3760[0] {
					yym3762 := z.EncBinary()
					_ = yym3762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3760[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3763 := z.EncBinary()
					_ = yym3763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3760 || yy2arr3760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3760[1] {
					yym3765 := z.EncBinary()
					_ = yym3765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3760[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3766 := z.EncBinary()
					_ = yym3766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3760 || yy2arr3760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3760[2] {
					yym3768 := z.EncBinary()
					_ = yym3768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3760[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3769 := z.EncBinary()
					_ = yym3769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3760 || yy2arr3760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3760[3] {
					yym3771 := z.EncBinary()
					_ = yym3771
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3760[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3772 := z.EncBinary()
					_ = yym3772
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3760 || yy2arr3760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3760[4] {
					yym3774 := z.EncBinary()
					_ = yym3774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3760[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3775 := z.EncBinary()
					_ = yym3775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3760 || yy2arr3760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3760[5] {
					yym3777 := z.EncBinary()
					_ = yym3777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3760[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3778 := z.EncBinary()
					_ = yym3778
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3760 || yy2arr3760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3760[6] {
					yym3780 := z.EncBinary()
					_ = yym3780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3760[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3781 := z.EncBinary()
					_ = yym3781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3760 || yy2arr3760 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3782 := z.DecBinary()
	_ = yym3782
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3783 := r.ContainerType()
		if yyct3783 == codecSelferValueTypeMap1234 {
			yyl3783 := r.ReadMapStart()
			if yyl3783 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3783, d)
			}
		} else if yyct3783 == codecSelferValueTypeArray1234 {
			yyl3783 := r.ReadArrayStart()
			if yyl3783 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3783, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3784Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3784Slc
	var yyhl3784 bool = l >= 0
	for yyj3784 := 0; ; yyj3784++ {
		if yyhl3784 {
			if yyj3784 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3784Slc = r.DecodeBytes(yys3784Slc, true, true)
		yys3784 := string(yys3784Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3784 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3784)
		} // end switch yys3784
	} // end for yyj3784
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3792 int
	var yyb3792 bool
	var yyhl3792 bool = l >= 0
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3792++
		if yyhl3792 {
			yyb3792 = yyj3792 > l
		} else {
			yyb3792 = r.CheckBreak()
		}
		if yyb3792 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3792-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3800 := z.EncBinary()
		_ = yym3800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3801 := !z.EncBinary()
			yy2arr3801 := z.EncBasicHandle().StructToArray
			var yyq3801 [1]bool
			_, _, _ = yysep3801, yyq3801, yy2arr3801
			const yyr3801 bool = false
			yyq3801[0] = x.Name != ""
			var yynn3801 int
			if yyr3801 || yy2arr3801 {
				r.EncodeArrayStart(1)
			} else {
				yynn3801 = 0
				for _, b := range yyq3801 {
					if b {
						yynn3801++
					}
				}
				r.EncodeMapStart(yynn3801)
				yynn3801 = 0
			}
			if yyr3801 || yy2arr3801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3801[0] {
					yym3803 := z.EncBinary()
					_ = yym3803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3801[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3804 := z.EncBinary()
					_ = yym3804
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3801 || yy2arr3801 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3805 := z.DecBinary()
	_ = yym3805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3806 := r.ContainerType()
		if yyct3806 == codecSelferValueTypeMap1234 {
			yyl3806 := r.ReadMapStart()
			if yyl3806 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3806, d)
			}
		} else if yyct3806 == codecSelferValueTypeArray1234 {
			yyl3806 := r.ReadArrayStart()
			if yyl3806 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3807Slc
	var yyhl3807 bool = l >= 0
	for yyj3807 := 0; ; yyj3807++ {
		if yyhl3807 {
			if yyj3807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3807Slc = r.DecodeBytes(yys3807Slc, true, true)
		yys3807 := string(yys3807Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3807 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3807)
		} // end switch yys3807
	} // end for yyj3807
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3809 int
	var yyb3809 bool
	var yyhl3809 bool = l >= 0
	yyj3809++
	if yyhl3809 {
		yyb3809 = yyj3809 > l
	} else {
		yyb3809 = r.CheckBreak()
	}
	if yyb3809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3809++
		if yyhl3809 {
			yyb3809 = yyj3809 > l
		} else {
			yyb3809 = r.CheckBreak()
		}
		if yyb3809 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3809-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3811 := z.EncBinary()
		_ = yym3811
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3812 := !z.EncBinary()
			yy2arr3812 := z.EncBasicHandle().StructToArray
			var yyq3812 [3]bool
			_, _, _ = yysep3812, yyq3812, yy2arr3812
			const yyr3812 bool = false
			yyq3812[0] = x.Kind != ""
			yyq3812[1] = x.APIVersion != ""
			yyq3812[2] = true
			var yynn3812 int
			if yyr3812 || yy2arr3812 {
				r.EncodeArrayStart(3)
			} else {
				yynn3812 = 0
				for _, b := range yyq3812 {
					if b {
						yynn3812++
					}
				}
				r.EncodeMapStart(yynn3812)
				yynn3812 = 0
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[0] {
					yym3814 := z.EncBinary()
					_ = yym3814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3812[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3815 := z.EncBinary()
					_ = yym3815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[1] {
					yym3817 := z.EncBinary()
					_ = yym3817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3812[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[2] {
					yy3820 := &x.Reference
					yy3820.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3812[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3821 := &x.Reference
					yy3821.CodecEncodeSelf(e)
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3822 := z.DecBinary()
	_ = yym3822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3823 := r.ContainerType()
		if yyct3823 == codecSelferValueTypeMap1234 {
			yyl3823 := r.ReadMapStart()
			if yyl3823 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3823, d)
			}
		} else if yyct3823 == codecSelferValueTypeArray1234 {
			yyl3823 := r.ReadArrayStart()
			if yyl3823 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3823, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3824Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3824Slc
	var yyhl3824 bool = l >= 0
	for yyj3824 := 0; ; yyj3824++ {
		if yyhl3824 {
			if yyj3824 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3824Slc = r.DecodeBytes(yys3824Slc, true, true)
		yys3824 := string(yys3824Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3824 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3827 := &x.Reference
				yyv3827.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3824)
		} // end switch yys3824
	} // end for yyj3824
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3828 int
	var yyb3828 bool
	var yyhl3828 bool = l >= 0
	yyj3828++
	if yyhl3828 {
		yyb3828 = yyj3828 > l
	} else {
		yyb3828 = r.CheckBreak()
	}
	if yyb3828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3828++
	if yyhl3828 {
		yyb3828 = yyj3828 > l
	} else {
		yyb3828 = r.CheckBreak()
	}
	if yyb3828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3828++
	if yyhl3828 {
		yyb3828 = yyj3828 > l
	} else {
		yyb3828 = r.CheckBreak()
	}
	if yyb3828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3831 := &x.Reference
		yyv3831.CodecDecodeSelf(d)
	}
	for {
		yyj3828++
		if yyhl3828 {
			yyb3828 = yyj3828 > l
		} else {
			yyb3828 = r.CheckBreak()
		}
		if yyb3828 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3828-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3832 := z.EncBinary()
		_ = yym3832
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3833 := !z.EncBinary()
			yy2arr3833 := z.EncBasicHandle().StructToArray
			var yyq3833 [2]bool
			_, _, _ = yysep3833, yyq3833, yy2arr3833
			const yyr3833 bool = false
			yyq3833[0] = x.Component != ""
			yyq3833[1] = x.Host != ""
			var yynn3833 int
			if yyr3833 || yy2arr3833 {
				r.EncodeArrayStart(2)
			} else {
				yynn3833 = 0
				for _, b := range yyq3833 {
					if b {
						yynn3833++
					}
				}
				r.EncodeMapStart(yynn3833)
				yynn3833 = 0
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3833[0] {
					yym3835 := z.EncBinary()
					_ = yym3835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3833[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3836 := z.EncBinary()
					_ = yym3836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3833[1] {
					yym3838 := z.EncBinary()
					_ = yym3838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3833[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3839 := z.EncBinary()
					_ = yym3839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3840 := z.DecBinary()
	_ = yym3840
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3841 := r.ContainerType()
		if yyct3841 == codecSelferValueTypeMap1234 {
			yyl3841 := r.ReadMapStart()
			if yyl3841 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3841, d)
			}
		} else if yyct3841 == codecSelferValueTypeArray1234 {
			yyl3841 := r.ReadArrayStart()
			if yyl3841 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3841, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3842Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3842Slc
	var yyhl3842 bool = l >= 0
	for yyj3842 := 0; ; yyj3842++ {
		if yyhl3842 {
			if yyj3842 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3842Slc = r.DecodeBytes(yys3842Slc, true, true)
		yys3842 := string(yys3842Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3842 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3842)
		} // end switch yys3842
	} // end for yyj3842
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3845 int
	var yyb3845 bool
	var yyhl3845 bool = l >= 0
	yyj3845++
	if yyhl3845 {
		yyb3845 = yyj3845 > l
	} else {
		yyb3845 = r.CheckBreak()
	}
	if yyb3845 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3845++
	if yyhl3845 {
		yyb3845 = yyj3845 > l
	} else {
		yyb3845 = r.CheckBreak()
	}
	if yyb3845 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3845++
		if yyhl3845 {
			yyb3845 = yyj3845 > l
		} else {
			yyb3845 = r.CheckBreak()
		}
		if yyb3845 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3845-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3848 := z.EncBinary()
		_ = yym3848
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3849 := !z.EncBinary()
			yy2arr3849 := z.EncBasicHandle().StructToArray
			var yyq3849 [11]bool
			_, _, _ = yysep3849, yyq3849, yy2arr3849
			const yyr3849 bool = false
			yyq3849[0] = x.Kind != ""
			yyq3849[1] = x.APIVersion != ""
			yyq3849[4] = x.Reason != ""
			yyq3849[5] = x.Message != ""
			yyq3849[6] = true
			yyq3849[7] = true
			yyq3849[8] = true
			yyq3849[9] = x.Count != 0
			yyq3849[10] = x.Type != ""
			var yynn3849 int
			if yyr3849 || yy2arr3849 {
				r.EncodeArrayStart(11)
			} else {
				yynn3849 = 2
				for _, b := range yyq3849 {
					if b {
						yynn3849++
					}
				}
				r.EncodeMapStart(yynn3849)
				yynn3849 = 0
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[0] {
					yym3851 := z.EncBinary()
					_ = yym3851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3849[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3852 := z.EncBinary()
					_ = yym3852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[1] {
					yym3854 := z.EncBinary()
					_ = yym3854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3849[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3855 := z.EncBinary()
					_ = yym3855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3857 := &x.ObjectMeta
				yy3857.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3858 := &x.ObjectMeta
				yy3858.CodecEncodeSelf(e)
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3860 := &x.InvolvedObject
				yy3860.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3861 := &x.InvolvedObject
				yy3861.CodecEncodeSelf(e)
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[4] {
					yym3863 := z.EncBinary()
					_ = yym3863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3849[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3864 := z.EncBinary()
					_ = yym3864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[5] {
					yym3866 := z.EncBinary()
					_ = yym3866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3849[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3867 := z.EncBinary()
					_ = yym3867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[6] {
					yy3869 := &x.Source
					yy3869.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3849[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3870 := &x.Source
					yy3870.CodecEncodeSelf(e)
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[7] {
					yy3872 := &x.FirstTimestamp
					yym3873 := z.EncBinary()
					_ = yym3873
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3872) {
					} else if yym3873 {
						z.EncBinaryMarshal(yy3872)
					} else if !yym3873 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3872)
					} else {
						z.EncFallback(yy3872)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3849[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3874 := &x.FirstTimestamp
					yym3875 := z.EncBinary()
					_ = yym3875
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3874) {
					} else if yym3875 {
						z.EncBinaryMarshal(yy3874)
					} else if !yym3875 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3874)
					} else {
						z.EncFallback(yy3874)
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[8] {
					yy3877 := &x.LastTimestamp
					yym3878 := z.EncBinary()
					_ = yym3878
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3877) {
					} else if yym3878 {
						z.EncBinaryMarshal(yy3877)
					} else if !yym3878 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3877)
					} else {
						z.EncFallback(yy3877)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3849[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3879 := &x.LastTimestamp
					yym3880 := z.EncBinary()
					_ = yym3880
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3879) {
					} else if yym3880 {
						z.EncBinaryMarshal(yy3879)
					} else if !yym3880 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3879)
					} else {
						z.EncFallback(yy3879)
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[9] {
					yym3882 := z.EncBinary()
					_ = yym3882
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3849[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3883 := z.EncBinary()
					_ = yym3883
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[10] {
					yym3885 := z.EncBinary()
					_ = yym3885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3849[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3886 := z.EncBinary()
					_ = yym3886
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3887 := z.DecBinary()
	_ = yym3887
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3888 := r.ContainerType()
		if yyct3888 == codecSelferValueTypeMap1234 {
			yyl3888 := r.ReadMapStart()
			if yyl3888 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3888, d)
			}
		} else if yyct3888 == codecSelferValueTypeArray1234 {
			yyl3888 := r.ReadArrayStart()
			if yyl3888 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3888, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3889Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3889Slc
	var yyhl3889 bool = l >= 0
	for yyj3889 := 0; ; yyj3889++ {
		if yyhl3889 {
			if yyj3889 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3889Slc = r.DecodeBytes(yys3889Slc, true, true)
		yys3889 := string(yys3889Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3889 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3892 := &x.ObjectMeta
				yyv3892.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3893 := &x.InvolvedObject
				yyv3893.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3896 := &x.Source
				yyv3896.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3897 := &x.FirstTimestamp
				yym3898 := z.DecBinary()
				_ = yym3898
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3897) {
				} else if yym3898 {
					z.DecBinaryUnmarshal(yyv3897)
				} else if !yym3898 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3897)
				} else {
					z.DecFallback(yyv3897, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3899 := &x.LastTimestamp
				yym3900 := z.DecBinary()
				_ = yym3900
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3899) {
				} else if yym3900 {
					z.DecBinaryUnmarshal(yyv3899)
				} else if !yym3900 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3899)
				} else {
					z.DecFallback(yyv3899, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3889)
		} // end switch yys3889
	} // end for yyj3889
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3903 int
	var yyb3903 bool
	var yyhl3903 bool = l >= 0
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3906 := &x.ObjectMeta
		yyv3906.CodecDecodeSelf(d)
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3907 := &x.InvolvedObject
		yyv3907.CodecDecodeSelf(d)
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3910 := &x.Source
		yyv3910.CodecDecodeSelf(d)
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3911 := &x.FirstTimestamp
		yym3912 := z.DecBinary()
		_ = yym3912
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3911) {
		} else if yym3912 {
			z.DecBinaryUnmarshal(yyv3911)
		} else if !yym3912 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3911)
		} else {
			z.DecFallback(yyv3911, false)
		}
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3913 := &x.LastTimestamp
		yym3914 := z.DecBinary()
		_ = yym3914
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3913) {
		} else if yym3914 {
			z.DecBinaryUnmarshal(yyv3913)
		} else if !yym3914 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3913)
		} else {
			z.DecFallback(yyv3913, false)
		}
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3903++
		if yyhl3903 {
			yyb3903 = yyj3903 > l
		} else {
			yyb3903 = r.CheckBreak()
		}
		if yyb3903 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3903-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3917 := z.EncBinary()
		_ = yym3917
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3918 := !z.EncBinary()
			yy2arr3918 := z.EncBasicHandle().StructToArray
			var yyq3918 [4]bool
			_, _, _ = yysep3918, yyq3918, yy2arr3918
			const yyr3918 bool = false
			yyq3918[0] = x.Kind != ""
			yyq3918[1] = x.APIVersion != ""
			yyq3918[2] = true
			var yynn3918 int
			if yyr3918 || yy2arr3918 {
				r.EncodeArrayStart(4)
			} else {
				yynn3918 = 1
				for _, b := range yyq3918 {
					if b {
						yynn3918++
					}
				}
				r.EncodeMapStart(yynn3918)
				yynn3918 = 0
			}
			if yyr3918 || yy2arr3918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3918[0] {
					yym3920 := z.EncBinary()
					_ = yym3920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3918[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3921 := z.EncBinary()
					_ = yym3921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3918 || yy2arr3918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3918[1] {
					yym3923 := z.EncBinary()
					_ = yym3923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3918[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3924 := z.EncBinary()
					_ = yym3924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3918 || yy2arr3918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3918[2] {
					yy3926 := &x.ListMeta
					yym3927 := z.EncBinary()
					_ = yym3927
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3926) {
					} else {
						z.EncFallback(yy3926)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3918[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3928 := &x.ListMeta
					yym3929 := z.EncBinary()
					_ = yym3929
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3928) {
					} else {
						z.EncFallback(yy3928)
					}
				}
			}
			if yyr3918 || yy2arr3918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3931 := z.EncBinary()
					_ = yym3931
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3932 := z.EncBinary()
					_ = yym3932
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3918 || yy2arr3918 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3933 := z.DecBinary()
	_ = yym3933
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3934 := r.ContainerType()
		if yyct3934 == codecSelferValueTypeMap1234 {
			yyl3934 := r.ReadMapStart()
			if yyl3934 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3934, d)
			}
		} else if yyct3934 == codecSelferValueTypeArray1234 {
			yyl3934 := r.ReadArrayStart()
			if yyl3934 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3934, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3935Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3935Slc
	var yyhl3935 bool = l >= 0
	for yyj3935 := 0; ; yyj3935++ {
		if yyhl3935 {
			if yyj3935 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3935Slc = r.DecodeBytes(yys3935Slc, true, true)
		yys3935 := string(yys3935Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3935 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3938 := &x.ListMeta
				yym3939 := z.DecBinary()
				_ = yym3939
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3938) {
				} else {
					z.DecFallback(yyv3938, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3940 := &x.Items
				yym3941 := z.DecBinary()
				_ = yym3941
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3940), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3935)
		} // end switch yys3935
	} // end for yyj3935
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3942 int
	var yyb3942 bool
	var yyhl3942 bool = l >= 0
	yyj3942++
	if yyhl3942 {
		yyb3942 = yyj3942 > l
	} else {
		yyb3942 = r.CheckBreak()
	}
	if yyb3942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3942++
	if yyhl3942 {
		yyb3942 = yyj3942 > l
	} else {
		yyb3942 = r.CheckBreak()
	}
	if yyb3942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3942++
	if yyhl3942 {
		yyb3942 = yyj3942 > l
	} else {
		yyb3942 = r.CheckBreak()
	}
	if yyb3942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3945 := &x.ListMeta
		yym3946 := z.DecBinary()
		_ = yym3946
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3945) {
		} else {
			z.DecFallback(yyv3945, false)
		}
	}
	yyj3942++
	if yyhl3942 {
		yyb3942 = yyj3942 > l
	} else {
		yyb3942 = r.CheckBreak()
	}
	if yyb3942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3947 := &x.Items
		yym3948 := z.DecBinary()
		_ = yym3948
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3947), d)
		}
	}
	for {
		yyj3942++
		if yyhl3942 {
			yyb3942 = yyj3942 > l
		} else {
			yyb3942 = r.CheckBreak()
		}
		if yyb3942 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3942-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3949 := z.EncBinary()
		_ = yym3949
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3950 := !z.EncBinary()
			yy2arr3950 := z.EncBasicHandle().StructToArray
			var yyq3950 [4]bool
			_, _, _ = yysep3950, yyq3950, yy2arr3950
			const yyr3950 bool = false
			yyq3950[0] = x.Kind != ""
			yyq3950[1] = x.APIVersion != ""
			yyq3950[2] = true
			var yynn3950 int
			if yyr3950 || yy2arr3950 {
				r.EncodeArrayStart(4)
			} else {
				yynn3950 = 1
				for _, b := range yyq3950 {
					if b {
						yynn3950++
					}
				}
				r.EncodeMapStart(yynn3950)
				yynn3950 = 0
			}
			if yyr3950 || yy2arr3950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3950[0] {
					yym3952 := z.EncBinary()
					_ = yym3952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3950[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3953 := z.EncBinary()
					_ = yym3953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3950 || yy2arr3950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3950[1] {
					yym3955 := z.EncBinary()
					_ = yym3955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3950[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3956 := z.EncBinary()
					_ = yym3956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3950 || yy2arr3950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3950[2] {
					yy3958 := &x.ListMeta
					yym3959 := z.EncBinary()
					_ = yym3959
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3958) {
					} else {
						z.EncFallback(yy3958)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3950[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3960 := &x.ListMeta
					yym3961 := z.EncBinary()
					_ = yym3961
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3960) {
					} else {
						z.EncFallback(yy3960)
					}
				}
			}
			if yyr3950 || yy2arr3950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3963 := z.EncBinary()
					_ = yym3963
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3964 := z.EncBinary()
					_ = yym3964
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3950 || yy2arr3950 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3965 := z.DecBinary()
	_ = yym3965
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3966 := r.ContainerType()
		if yyct3966 == codecSelferValueTypeMap1234 {
			yyl3966 := r.ReadMapStart()
			if yyl3966 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3966, d)
			}
		} else if yyct3966 == codecSelferValueTypeArray1234 {
			yyl3966 := r.ReadArrayStart()
			if yyl3966 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3966, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3967Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3967Slc
	var yyhl3967 bool = l >= 0
	for yyj3967 := 0; ; yyj3967++ {
		if yyhl3967 {
			if yyj3967 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3967Slc = r.DecodeBytes(yys3967Slc, true, true)
		yys3967 := string(yys3967Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3967 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3970 := &x.ListMeta
				yym3971 := z.DecBinary()
				_ = yym3971
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3970) {
				} else {
					z.DecFallback(yyv3970, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3972 := &x.Items
				yym3973 := z.DecBinary()
				_ = yym3973
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3972), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3967)
		} // end switch yys3967
	} // end for yyj3967
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3974 int
	var yyb3974 bool
	var yyhl3974 bool = l >= 0
	yyj3974++
	if yyhl3974 {
		yyb3974 = yyj3974 > l
	} else {
		yyb3974 = r.CheckBreak()
	}
	if yyb3974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3974++
	if yyhl3974 {
		yyb3974 = yyj3974 > l
	} else {
		yyb3974 = r.CheckBreak()
	}
	if yyb3974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3974++
	if yyhl3974 {
		yyb3974 = yyj3974 > l
	} else {
		yyb3974 = r.CheckBreak()
	}
	if yyb3974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3977 := &x.ListMeta
		yym3978 := z.DecBinary()
		_ = yym3978
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3977) {
		} else {
			z.DecFallback(yyv3977, false)
		}
	}
	yyj3974++
	if yyhl3974 {
		yyb3974 = yyj3974 > l
	} else {
		yyb3974 = r.CheckBreak()
	}
	if yyb3974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3979 := &x.Items
		yym3980 := z.DecBinary()
		_ = yym3980
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3979), d)
		}
	}
	for {
		yyj3974++
		if yyhl3974 {
			yyb3974 = yyj3974 > l
		} else {
			yyb3974 = r.CheckBreak()
		}
		if yyb3974 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3974-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3981 := z.EncBinary()
	_ = yym3981
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3982 := z.DecBinary()
	_ = yym3982
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3983 := z.EncBinary()
		_ = yym3983
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3984 := !z.EncBinary()
			yy2arr3984 := z.EncBasicHandle().StructToArray
			var yyq3984 [6]bool
			_, _, _ = yysep3984, yyq3984, yy2arr3984
			const yyr3984 bool = false
			yyq3984[0] = x.Type != ""
			yyq3984[1] = len(x.Max) != 0
			yyq3984[2] = len(x.Min) != 0
			yyq3984[3] = len(x.Default) != 0
			yyq3984[4] = len(x.DefaultRequest) != 0
			yyq3984[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3984 int
			if yyr3984 || yy2arr3984 {
				r.EncodeArrayStart(6)
			} else {
				yynn3984 = 0
				for _, b := range yyq3984 {
					if b {
						yynn3984++
					}
				}
				r.EncodeMapStart(yynn3984)
				yynn3984 = 0
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3984[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3984[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3984[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3984[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3984[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3984[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3984[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3984 || yy2arr3984 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3991 := z.DecBinary()
	_ = yym3991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3992 := r.ContainerType()
		if yyct3992 == codecSelferValueTypeMap1234 {
			yyl3992 := r.ReadMapStart()
			if yyl3992 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3992, d)
			}
		} else if yyct3992 == codecSelferValueTypeArray1234 {
			yyl3992 := r.ReadArrayStart()
			if yyl3992 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3993Slc
	var yyhl3993 bool = l >= 0
	for yyj3993 := 0; ; yyj3993++ {
		if yyhl3993 {
			if yyj3993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3993Slc = r.DecodeBytes(yys3993Slc, true, true)
		yys3993 := string(yys3993Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3993 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3995 := &x.Max
				yyv3995.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3996 := &x.Min
				yyv3996.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3997 := &x.Default
				yyv3997.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3998 := &x.DefaultRequest
				yyv3998.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3999 := &x.MaxLimitRequestRatio
				yyv3999.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3993)
		} // end switch yys3993
	} // end for yyj3993
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4000 int
	var yyb4000 bool
	var yyhl4000 bool = l >= 0
	yyj4000++
	if yyhl4000 {
		yyb4000 = yyj4000 > l
	} else {
		yyb4000 = r.CheckBreak()
	}
	if yyb4000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4000++
	if yyhl4000 {
		yyb4000 = yyj4000 > l
	} else {
		yyb4000 = r.CheckBreak()
	}
	if yyb4000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4002 := &x.Max
		yyv4002.CodecDecodeSelf(d)
	}
	yyj4000++
	if yyhl4000 {
		yyb4000 = yyj4000 > l
	} else {
		yyb4000 = r.CheckBreak()
	}
	if yyb4000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4003 := &x.Min
		yyv4003.CodecDecodeSelf(d)
	}
	yyj4000++
	if yyhl4000 {
		yyb4000 = yyj4000 > l
	} else {
		yyb4000 = r.CheckBreak()
	}
	if yyb4000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4004 := &x.Default
		yyv4004.CodecDecodeSelf(d)
	}
	yyj4000++
	if yyhl4000 {
		yyb4000 = yyj4000 > l
	} else {
		yyb4000 = r.CheckBreak()
	}
	if yyb4000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4005 := &x.DefaultRequest
		yyv4005.CodecDecodeSelf(d)
	}
	yyj4000++
	if yyhl4000 {
		yyb4000 = yyj4000 > l
	} else {
		yyb4000 = r.CheckBreak()
	}
	if yyb4000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4006 := &x.MaxLimitRequestRatio
		yyv4006.CodecDecodeSelf(d)
	}
	for {
		yyj4000++
		if yyhl4000 {
			yyb4000 = yyj4000 > l
		} else {
			yyb4000 = r.CheckBreak()
		}
		if yyb4000 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4000-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4007 := z.EncBinary()
		_ = yym4007
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4008 := !z.EncBinary()
			yy2arr4008 := z.EncBasicHandle().StructToArray
			var yyq4008 [1]bool
			_, _, _ = yysep4008, yyq4008, yy2arr4008
			const yyr4008 bool = false
			var yynn4008 int
			if yyr4008 || yy2arr4008 {
				r.EncodeArrayStart(1)
			} else {
				yynn4008 = 1
				for _, b := range yyq4008 {
					if b {
						yynn4008++
					}
				}
				r.EncodeMapStart(yynn4008)
				yynn4008 = 0
			}
			if yyr4008 || yy2arr4008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4010 := z.EncBinary()
					_ = yym4010
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4011 := z.EncBinary()
					_ = yym4011
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4008 || yy2arr4008 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4012 := z.DecBinary()
	_ = yym4012
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4013 := r.ContainerType()
		if yyct4013 == codecSelferValueTypeMap1234 {
			yyl4013 := r.ReadMapStart()
			if yyl4013 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4013, d)
			}
		} else if yyct4013 == codecSelferValueTypeArray1234 {
			yyl4013 := r.ReadArrayStart()
			if yyl4013 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4013, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4014Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4014Slc
	var yyhl4014 bool = l >= 0
	for yyj4014 := 0; ; yyj4014++ {
		if yyhl4014 {
			if yyj4014 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4014Slc = r.DecodeBytes(yys4014Slc, true, true)
		yys4014 := string(yys4014Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4014 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4015 := &x.Limits
				yym4016 := z.DecBinary()
				_ = yym4016
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4015), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4014)
		} // end switch yys4014
	} // end for yyj4014
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4017 int
	var yyb4017 bool
	var yyhl4017 bool = l >= 0
	yyj4017++
	if yyhl4017 {
		yyb4017 = yyj4017 > l
	} else {
		yyb4017 = r.CheckBreak()
	}
	if yyb4017 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4018 := &x.Limits
		yym4019 := z.DecBinary()
		_ = yym4019
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4018), d)
		}
	}
	for {
		yyj4017++
		if yyhl4017 {
			yyb4017 = yyj4017 > l
		} else {
			yyb4017 = r.CheckBreak()
		}
		if yyb4017 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4017-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4020 := z.EncBinary()
		_ = yym4020
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4021 := !z.EncBinary()
			yy2arr4021 := z.EncBasicHandle().StructToArray
			var yyq4021 [4]bool
			_, _, _ = yysep4021, yyq4021, yy2arr4021
			const yyr4021 bool = false
			yyq4021[0] = x.Kind != ""
			yyq4021[1] = x.APIVersion != ""
			yyq4021[2] = true
			yyq4021[3] = true
			var yynn4021 int
			if yyr4021 || yy2arr4021 {
				r.EncodeArrayStart(4)
			} else {
				yynn4021 = 0
				for _, b := range yyq4021 {
					if b {
						yynn4021++
					}
				}
				r.EncodeMapStart(yynn4021)
				yynn4021 = 0
			}
			if yyr4021 || yy2arr4021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4021[0] {
					yym4023 := z.EncBinary()
					_ = yym4023
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4021[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4024 := z.EncBinary()
					_ = yym4024
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4021 || yy2arr4021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4021[1] {
					yym4026 := z.EncBinary()
					_ = yym4026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4021[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4027 := z.EncBinary()
					_ = yym4027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4021 || yy2arr4021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4021[2] {
					yy4029 := &x.ObjectMeta
					yy4029.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4021[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4030 := &x.ObjectMeta
					yy4030.CodecEncodeSelf(e)
				}
			}
			if yyr4021 || yy2arr4021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4021[3] {
					yy4032 := &x.Spec
					yy4032.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4021[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4033 := &x.Spec
					yy4033.CodecEncodeSelf(e)
				}
			}
			if yyr4021 || yy2arr4021 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4034 := z.DecBinary()
	_ = yym4034
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4035 := r.ContainerType()
		if yyct4035 == codecSelferValueTypeMap1234 {
			yyl4035 := r.ReadMapStart()
			if yyl4035 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4035, d)
			}
		} else if yyct4035 == codecSelferValueTypeArray1234 {
			yyl4035 := r.ReadArrayStart()
			if yyl4035 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4035, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4036Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4036Slc
	var yyhl4036 bool = l >= 0
	for yyj4036 := 0; ; yyj4036++ {
		if yyhl4036 {
			if yyj4036 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4036Slc = r.DecodeBytes(yys4036Slc, true, true)
		yys4036 := string(yys4036Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4036 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4039 := &x.ObjectMeta
				yyv4039.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4040 := &x.Spec
				yyv4040.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4036)
		} // end switch yys4036
	} // end for yyj4036
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4041 int
	var yyb4041 bool
	var yyhl4041 bool = l >= 0
	yyj4041++
	if yyhl4041 {
		yyb4041 = yyj4041 > l
	} else {
		yyb4041 = r.CheckBreak()
	}
	if yyb4041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4041++
	if yyhl4041 {
		yyb4041 = yyj4041 > l
	} else {
		yyb4041 = r.CheckBreak()
	}
	if yyb4041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4041++
	if yyhl4041 {
		yyb4041 = yyj4041 > l
	} else {
		yyb4041 = r.CheckBreak()
	}
	if yyb4041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4044 := &x.ObjectMeta
		yyv4044.CodecDecodeSelf(d)
	}
	yyj4041++
	if yyhl4041 {
		yyb4041 = yyj4041 > l
	} else {
		yyb4041 = r.CheckBreak()
	}
	if yyb4041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4045 := &x.Spec
		yyv4045.CodecDecodeSelf(d)
	}
	for {
		yyj4041++
		if yyhl4041 {
			yyb4041 = yyj4041 > l
		} else {
			yyb4041 = r.CheckBreak()
		}
		if yyb4041 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4041-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4046 := z.EncBinary()
		_ = yym4046
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4047 := !z.EncBinary()
			yy2arr4047 := z.EncBasicHandle().StructToArray
			var yyq4047 [4]bool
			_, _, _ = yysep4047, yyq4047, yy2arr4047
			const yyr4047 bool = false
			yyq4047[0] = x.Kind != ""
			yyq4047[1] = x.APIVersion != ""
			yyq4047[2] = true
			var yynn4047 int
			if yyr4047 || yy2arr4047 {
				r.EncodeArrayStart(4)
			} else {
				yynn4047 = 1
				for _, b := range yyq4047 {
					if b {
						yynn4047++
					}
				}
				r.EncodeMapStart(yynn4047)
				yynn4047 = 0
			}
			if yyr4047 || yy2arr4047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4047[0] {
					yym4049 := z.EncBinary()
					_ = yym4049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4047[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4050 := z.EncBinary()
					_ = yym4050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4047 || yy2arr4047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4047[1] {
					yym4052 := z.EncBinary()
					_ = yym4052
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4047[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4053 := z.EncBinary()
					_ = yym4053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4047 || yy2arr4047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4047[2] {
					yy4055 := &x.ListMeta
					yym4056 := z.EncBinary()
					_ = yym4056
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4055) {
					} else {
						z.EncFallback(yy4055)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4047[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4057 := &x.ListMeta
					yym4058 := z.EncBinary()
					_ = yym4058
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4057) {
					} else {
						z.EncFallback(yy4057)
					}
				}
			}
			if yyr4047 || yy2arr4047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4060 := z.EncBinary()
					_ = yym4060
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4061 := z.EncBinary()
					_ = yym4061
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4047 || yy2arr4047 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4062 := z.DecBinary()
	_ = yym4062
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4063 := r.ContainerType()
		if yyct4063 == codecSelferValueTypeMap1234 {
			yyl4063 := r.ReadMapStart()
			if yyl4063 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4063, d)
			}
		} else if yyct4063 == codecSelferValueTypeArray1234 {
			yyl4063 := r.ReadArrayStart()
			if yyl4063 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4063, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4064Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4064Slc
	var yyhl4064 bool = l >= 0
	for yyj4064 := 0; ; yyj4064++ {
		if yyhl4064 {
			if yyj4064 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4064Slc = r.DecodeBytes(yys4064Slc, true, true)
		yys4064 := string(yys4064Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4064 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4067 := &x.ListMeta
				yym4068 := z.DecBinary()
				_ = yym4068
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4067) {
				} else {
					z.DecFallback(yyv4067, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4069 := &x.Items
				yym4070 := z.DecBinary()
				_ = yym4070
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4069), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4064)
		} // end switch yys4064
	} // end for yyj4064
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4071 int
	var yyb4071 bool
	var yyhl4071 bool = l >= 0
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4074 := &x.ListMeta
		yym4075 := z.DecBinary()
		_ = yym4075
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4074) {
		} else {
			z.DecFallback(yyv4074, false)
		}
	}
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4076 := &x.Items
		yym4077 := z.DecBinary()
		_ = yym4077
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4076), d)
		}
	}
	for {
		yyj4071++
		if yyhl4071 {
			yyb4071 = yyj4071 > l
		} else {
			yyb4071 = r.CheckBreak()
		}
		if yyb4071 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4071-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4078 := z.EncBinary()
	_ = yym4078
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4079 := z.DecBinary()
	_ = yym4079
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4080 := z.EncBinary()
		_ = yym4080
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4081 := !z.EncBinary()
			yy2arr4081 := z.EncBasicHandle().StructToArray
			var yyq4081 [2]bool
			_, _, _ = yysep4081, yyq4081, yy2arr4081
			const yyr4081 bool = false
			yyq4081[0] = len(x.Hard) != 0
			yyq4081[1] = len(x.Scopes) != 0
			var yynn4081 int
			if yyr4081 || yy2arr4081 {
				r.EncodeArrayStart(2)
			} else {
				yynn4081 = 0
				for _, b := range yyq4081 {
					if b {
						yynn4081++
					}
				}
				r.EncodeMapStart(yynn4081)
				yynn4081 = 0
			}
			if yyr4081 || yy2arr4081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4081[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4081[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4081 || yy2arr4081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4081[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4084 := z.EncBinary()
						_ = yym4084
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4081[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4085 := z.EncBinary()
						_ = yym4085
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4081 || yy2arr4081 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4086 := z.DecBinary()
	_ = yym4086
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4087 := r.ContainerType()
		if yyct4087 == codecSelferValueTypeMap1234 {
			yyl4087 := r.ReadMapStart()
			if yyl4087 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4087, d)
			}
		} else if yyct4087 == codecSelferValueTypeArray1234 {
			yyl4087 := r.ReadArrayStart()
			if yyl4087 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4087, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4088Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4088Slc
	var yyhl4088 bool = l >= 0
	for yyj4088 := 0; ; yyj4088++ {
		if yyhl4088 {
			if yyj4088 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4088Slc = r.DecodeBytes(yys4088Slc, true, true)
		yys4088 := string(yys4088Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4088 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4089 := &x.Hard
				yyv4089.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4090 := &x.Scopes
				yym4091 := z.DecBinary()
				_ = yym4091
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4090), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4088)
		} // end switch yys4088
	} // end for yyj4088
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4092 int
	var yyb4092 bool
	var yyhl4092 bool = l >= 0
	yyj4092++
	if yyhl4092 {
		yyb4092 = yyj4092 > l
	} else {
		yyb4092 = r.CheckBreak()
	}
	if yyb4092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4093 := &x.Hard
		yyv4093.CodecDecodeSelf(d)
	}
	yyj4092++
	if yyhl4092 {
		yyb4092 = yyj4092 > l
	} else {
		yyb4092 = r.CheckBreak()
	}
	if yyb4092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4094 := &x.Scopes
		yym4095 := z.DecBinary()
		_ = yym4095
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4094), d)
		}
	}
	for {
		yyj4092++
		if yyhl4092 {
			yyb4092 = yyj4092 > l
		} else {
			yyb4092 = r.CheckBreak()
		}
		if yyb4092 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4092-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4096 := z.EncBinary()
		_ = yym4096
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4097 := !z.EncBinary()
			yy2arr4097 := z.EncBasicHandle().StructToArray
			var yyq4097 [2]bool
			_, _, _ = yysep4097, yyq4097, yy2arr4097
			const yyr4097 bool = false
			yyq4097[0] = len(x.Hard) != 0
			yyq4097[1] = len(x.Used) != 0
			var yynn4097 int
			if yyr4097 || yy2arr4097 {
				r.EncodeArrayStart(2)
			} else {
				yynn4097 = 0
				for _, b := range yyq4097 {
					if b {
						yynn4097++
					}
				}
				r.EncodeMapStart(yynn4097)
				yynn4097 = 0
			}
			if yyr4097 || yy2arr4097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4097[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4097[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4097 || yy2arr4097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4097[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4097[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4097 || yy2arr4097 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4100 := z.DecBinary()
	_ = yym4100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4101 := r.ContainerType()
		if yyct4101 == codecSelferValueTypeMap1234 {
			yyl4101 := r.ReadMapStart()
			if yyl4101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4101, d)
			}
		} else if yyct4101 == codecSelferValueTypeArray1234 {
			yyl4101 := r.ReadArrayStart()
			if yyl4101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4102Slc
	var yyhl4102 bool = l >= 0
	for yyj4102 := 0; ; yyj4102++ {
		if yyhl4102 {
			if yyj4102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4102Slc = r.DecodeBytes(yys4102Slc, true, true)
		yys4102 := string(yys4102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4102 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4103 := &x.Hard
				yyv4103.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4104 := &x.Used
				yyv4104.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4102)
		} // end switch yys4102
	} // end for yyj4102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4105 int
	var yyb4105 bool
	var yyhl4105 bool = l >= 0
	yyj4105++
	if yyhl4105 {
		yyb4105 = yyj4105 > l
	} else {
		yyb4105 = r.CheckBreak()
	}
	if yyb4105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4106 := &x.Hard
		yyv4106.CodecDecodeSelf(d)
	}
	yyj4105++
	if yyhl4105 {
		yyb4105 = yyj4105 > l
	} else {
		yyb4105 = r.CheckBreak()
	}
	if yyb4105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4107 := &x.Used
		yyv4107.CodecDecodeSelf(d)
	}
	for {
		yyj4105++
		if yyhl4105 {
			yyb4105 = yyj4105 > l
		} else {
			yyb4105 = r.CheckBreak()
		}
		if yyb4105 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4105-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4108 := z.EncBinary()
		_ = yym4108
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4109 := !z.EncBinary()
			yy2arr4109 := z.EncBasicHandle().StructToArray
			var yyq4109 [5]bool
			_, _, _ = yysep4109, yyq4109, yy2arr4109
			const yyr4109 bool = false
			yyq4109[0] = x.Kind != ""
			yyq4109[1] = x.APIVersion != ""
			yyq4109[2] = true
			yyq4109[3] = true
			yyq4109[4] = true
			var yynn4109 int
			if yyr4109 || yy2arr4109 {
				r.EncodeArrayStart(5)
			} else {
				yynn4109 = 0
				for _, b := range yyq4109 {
					if b {
						yynn4109++
					}
				}
				r.EncodeMapStart(yynn4109)
				yynn4109 = 0
			}
			if yyr4109 || yy2arr4109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4109[0] {
					yym4111 := z.EncBinary()
					_ = yym4111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4109[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4112 := z.EncBinary()
					_ = yym4112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4109 || yy2arr4109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4109[1] {
					yym4114 := z.EncBinary()
					_ = yym4114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4109[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4115 := z.EncBinary()
					_ = yym4115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4109 || yy2arr4109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4109[2] {
					yy4117 := &x.ObjectMeta
					yy4117.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4109[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4118 := &x.ObjectMeta
					yy4118.CodecEncodeSelf(e)
				}
			}
			if yyr4109 || yy2arr4109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4109[3] {
					yy4120 := &x.Spec
					yy4120.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4109[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4121 := &x.Spec
					yy4121.CodecEncodeSelf(e)
				}
			}
			if yyr4109 || yy2arr4109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4109[4] {
					yy4123 := &x.Status
					yy4123.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4109[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4124 := &x.Status
					yy4124.CodecEncodeSelf(e)
				}
			}
			if yyr4109 || yy2arr4109 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4125 := z.DecBinary()
	_ = yym4125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4126 := r.ContainerType()
		if yyct4126 == codecSelferValueTypeMap1234 {
			yyl4126 := r.ReadMapStart()
			if yyl4126 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4126, d)
			}
		} else if yyct4126 == codecSelferValueTypeArray1234 {
			yyl4126 := r.ReadArrayStart()
			if yyl4126 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4127Slc
	var yyhl4127 bool = l >= 0
	for yyj4127 := 0; ; yyj4127++ {
		if yyhl4127 {
			if yyj4127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4127Slc = r.DecodeBytes(yys4127Slc, true, true)
		yys4127 := string(yys4127Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4127 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4130 := &x.ObjectMeta
				yyv4130.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4131 := &x.Spec
				yyv4131.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4132 := &x.Status
				yyv4132.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4127)
		} // end switch yys4127
	} // end for yyj4127
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4133 int
	var yyb4133 bool
	var yyhl4133 bool = l >= 0
	yyj4133++
	if yyhl4133 {
		yyb4133 = yyj4133 > l
	} else {
		yyb4133 = r.CheckBreak()
	}
	if yyb4133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4133++
	if yyhl4133 {
		yyb4133 = yyj4133 > l
	} else {
		yyb4133 = r.CheckBreak()
	}
	if yyb4133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4133++
	if yyhl4133 {
		yyb4133 = yyj4133 > l
	} else {
		yyb4133 = r.CheckBreak()
	}
	if yyb4133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4136 := &x.ObjectMeta
		yyv4136.CodecDecodeSelf(d)
	}
	yyj4133++
	if yyhl4133 {
		yyb4133 = yyj4133 > l
	} else {
		yyb4133 = r.CheckBreak()
	}
	if yyb4133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4137 := &x.Spec
		yyv4137.CodecDecodeSelf(d)
	}
	yyj4133++
	if yyhl4133 {
		yyb4133 = yyj4133 > l
	} else {
		yyb4133 = r.CheckBreak()
	}
	if yyb4133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4138 := &x.Status
		yyv4138.CodecDecodeSelf(d)
	}
	for {
		yyj4133++
		if yyhl4133 {
			yyb4133 = yyj4133 > l
		} else {
			yyb4133 = r.CheckBreak()
		}
		if yyb4133 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4133-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4139 := z.EncBinary()
		_ = yym4139
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4140 := !z.EncBinary()
			yy2arr4140 := z.EncBasicHandle().StructToArray
			var yyq4140 [4]bool
			_, _, _ = yysep4140, yyq4140, yy2arr4140
			const yyr4140 bool = false
			yyq4140[0] = x.Kind != ""
			yyq4140[1] = x.APIVersion != ""
			yyq4140[2] = true
			var yynn4140 int
			if yyr4140 || yy2arr4140 {
				r.EncodeArrayStart(4)
			} else {
				yynn4140 = 1
				for _, b := range yyq4140 {
					if b {
						yynn4140++
					}
				}
				r.EncodeMapStart(yynn4140)
				yynn4140 = 0
			}
			if yyr4140 || yy2arr4140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4140[0] {
					yym4142 := z.EncBinary()
					_ = yym4142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4140[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4143 := z.EncBinary()
					_ = yym4143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4140 || yy2arr4140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4140[1] {
					yym4145 := z.EncBinary()
					_ = yym4145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4140[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4146 := z.EncBinary()
					_ = yym4146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4140 || yy2arr4140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4140[2] {
					yy4148 := &x.ListMeta
					yym4149 := z.EncBinary()
					_ = yym4149
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4148) {
					} else {
						z.EncFallback(yy4148)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4140[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4150 := &x.ListMeta
					yym4151 := z.EncBinary()
					_ = yym4151
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4150) {
					} else {
						z.EncFallback(yy4150)
					}
				}
			}
			if yyr4140 || yy2arr4140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4153 := z.EncBinary()
					_ = yym4153
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4154 := z.EncBinary()
					_ = yym4154
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4140 || yy2arr4140 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4155 := z.DecBinary()
	_ = yym4155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4156 := r.ContainerType()
		if yyct4156 == codecSelferValueTypeMap1234 {
			yyl4156 := r.ReadMapStart()
			if yyl4156 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4156, d)
			}
		} else if yyct4156 == codecSelferValueTypeArray1234 {
			yyl4156 := r.ReadArrayStart()
			if yyl4156 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4157Slc
	var yyhl4157 bool = l >= 0
	for yyj4157 := 0; ; yyj4157++ {
		if yyhl4157 {
			if yyj4157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4157Slc = r.DecodeBytes(yys4157Slc, true, true)
		yys4157 := string(yys4157Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4157 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4160 := &x.ListMeta
				yym4161 := z.DecBinary()
				_ = yym4161
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4160) {
				} else {
					z.DecFallback(yyv4160, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4162 := &x.Items
				yym4163 := z.DecBinary()
				_ = yym4163
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4162), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4157)
		} // end switch yys4157
	} // end for yyj4157
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4164 int
	var yyb4164 bool
	var yyhl4164 bool = l >= 0
	yyj4164++
	if yyhl4164 {
		yyb4164 = yyj4164 > l
	} else {
		yyb4164 = r.CheckBreak()
	}
	if yyb4164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4164++
	if yyhl4164 {
		yyb4164 = yyj4164 > l
	} else {
		yyb4164 = r.CheckBreak()
	}
	if yyb4164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4164++
	if yyhl4164 {
		yyb4164 = yyj4164 > l
	} else {
		yyb4164 = r.CheckBreak()
	}
	if yyb4164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4167 := &x.ListMeta
		yym4168 := z.DecBinary()
		_ = yym4168
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4167) {
		} else {
			z.DecFallback(yyv4167, false)
		}
	}
	yyj4164++
	if yyhl4164 {
		yyb4164 = yyj4164 > l
	} else {
		yyb4164 = r.CheckBreak()
	}
	if yyb4164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4169 := &x.Items
		yym4170 := z.DecBinary()
		_ = yym4170
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4169), d)
		}
	}
	for {
		yyj4164++
		if yyhl4164 {
			yyb4164 = yyj4164 > l
		} else {
			yyb4164 = r.CheckBreak()
		}
		if yyb4164 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4164-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4171 := z.EncBinary()
		_ = yym4171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4172 := !z.EncBinary()
			yy2arr4172 := z.EncBasicHandle().StructToArray
			var yyq4172 [6]bool
			_, _, _ = yysep4172, yyq4172, yy2arr4172
			const yyr4172 bool = false
			yyq4172[0] = x.Kind != ""
			yyq4172[1] = x.APIVersion != ""
			yyq4172[2] = true
			yyq4172[3] = len(x.Data) != 0
			yyq4172[4] = len(x.StringData) != 0
			yyq4172[5] = x.Type != ""
			var yynn4172 int
			if yyr4172 || yy2arr4172 {
				r.EncodeArrayStart(6)
			} else {
				yynn4172 = 0
				for _, b := range yyq4172 {
					if b {
						yynn4172++
					}
				}
				r.EncodeMapStart(yynn4172)
				yynn4172 = 0
			}
			if yyr4172 || yy2arr4172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4172[0] {
					yym4174 := z.EncBinary()
					_ = yym4174
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4172[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4175 := z.EncBinary()
					_ = yym4175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4172 || yy2arr4172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4172[1] {
					yym4177 := z.EncBinary()
					_ = yym4177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4172[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4178 := z.EncBinary()
					_ = yym4178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4172 || yy2arr4172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4172[2] {
					yy4180 := &x.ObjectMeta
					yy4180.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4172[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4181 := &x.ObjectMeta
					yy4181.CodecEncodeSelf(e)
				}
			}
			if yyr4172 || yy2arr4172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4172[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4183 := z.EncBinary()
						_ = yym4183
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4172[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4184 := z.EncBinary()
						_ = yym4184
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4172 || yy2arr4172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4172[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4186 := z.EncBinary()
						_ = yym4186
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4172[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4187 := z.EncBinary()
						_ = yym4187
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4172 || yy2arr4172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4172[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4172[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4172 || yy2arr4172 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4189 := z.DecBinary()
	_ = yym4189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4190 := r.ContainerType()
		if yyct4190 == codecSelferValueTypeMap1234 {
			yyl4190 := r.ReadMapStart()
			if yyl4190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4190, d)
			}
		} else if yyct4190 == codecSelferValueTypeArray1234 {
			yyl4190 := r.ReadArrayStart()
			if yyl4190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4191Slc
	var yyhl4191 bool = l >= 0
	for yyj4191 := 0; ; yyj4191++ {
		if yyhl4191 {
			if yyj4191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4191Slc = r.DecodeBytes(yys4191Slc, true, true)
		yys4191 := string(yys4191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4191 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4194 := &x.ObjectMeta
				yyv4194.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4195 := &x.Data
				yym4196 := z.DecBinary()
				_ = yym4196
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4195), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4197 := &x.StringData
				yym4198 := z.DecBinary()
				_ = yym4198
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4197, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4191)
		} // end switch yys4191
	} // end for yyj4191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4200 int
	var yyb4200 bool
	var yyhl4200 bool = l >= 0
	yyj4200++
	if yyhl4200 {
		yyb4200 = yyj4200 > l
	} else {
		yyb4200 = r.CheckBreak()
	}
	if yyb4200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4200++
	if yyhl4200 {
		yyb4200 = yyj4200 > l
	} else {
		yyb4200 = r.CheckBreak()
	}
	if yyb4200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4200++
	if yyhl4200 {
		yyb4200 = yyj4200 > l
	} else {
		yyb4200 = r.CheckBreak()
	}
	if yyb4200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4203 := &x.ObjectMeta
		yyv4203.CodecDecodeSelf(d)
	}
	yyj4200++
	if yyhl4200 {
		yyb4200 = yyj4200 > l
	} else {
		yyb4200 = r.CheckBreak()
	}
	if yyb4200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4204 := &x.Data
		yym4205 := z.DecBinary()
		_ = yym4205
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4204), d)
		}
	}
	yyj4200++
	if yyhl4200 {
		yyb4200 = yyj4200 > l
	} else {
		yyb4200 = r.CheckBreak()
	}
	if yyb4200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4206 := &x.StringData
		yym4207 := z.DecBinary()
		_ = yym4207
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4206, false, d)
		}
	}
	yyj4200++
	if yyhl4200 {
		yyb4200 = yyj4200 > l
	} else {
		yyb4200 = r.CheckBreak()
	}
	if yyb4200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4200++
		if yyhl4200 {
			yyb4200 = yyj4200 > l
		} else {
			yyb4200 = r.CheckBreak()
		}
		if yyb4200 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4200-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4209 := z.EncBinary()
	_ = yym4209
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4210 := z.DecBinary()
	_ = yym4210
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4211 := z.EncBinary()
		_ = yym4211
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4212 := !z.EncBinary()
			yy2arr4212 := z.EncBasicHandle().StructToArray
			var yyq4212 [4]bool
			_, _, _ = yysep4212, yyq4212, yy2arr4212
			const yyr4212 bool = false
			yyq4212[0] = x.Kind != ""
			yyq4212[1] = x.APIVersion != ""
			yyq4212[2] = true
			var yynn4212 int
			if yyr4212 || yy2arr4212 {
				r.EncodeArrayStart(4)
			} else {
				yynn4212 = 1
				for _, b := range yyq4212 {
					if b {
						yynn4212++
					}
				}
				r.EncodeMapStart(yynn4212)
				yynn4212 = 0
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4212[0] {
					yym4214 := z.EncBinary()
					_ = yym4214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4212[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4215 := z.EncBinary()
					_ = yym4215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4212[1] {
					yym4217 := z.EncBinary()
					_ = yym4217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4212[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4218 := z.EncBinary()
					_ = yym4218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4212[2] {
					yy4220 := &x.ListMeta
					yym4221 := z.EncBinary()
					_ = yym4221
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4220) {
					} else {
						z.EncFallback(yy4220)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4212[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4222 := &x.ListMeta
					yym4223 := z.EncBinary()
					_ = yym4223
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4222) {
					} else {
						z.EncFallback(yy4222)
					}
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4225 := z.EncBinary()
					_ = yym4225
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4226 := z.EncBinary()
					_ = yym4226
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4227 := z.DecBinary()
	_ = yym4227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4228 := r.ContainerType()
		if yyct4228 == codecSelferValueTypeMap1234 {
			yyl4228 := r.ReadMapStart()
			if yyl4228 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4228, d)
			}
		} else if yyct4228 == codecSelferValueTypeArray1234 {
			yyl4228 := r.ReadArrayStart()
			if yyl4228 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4228, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4229Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4229Slc
	var yyhl4229 bool = l >= 0
	for yyj4229 := 0; ; yyj4229++ {
		if yyhl4229 {
			if yyj4229 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4229Slc = r.DecodeBytes(yys4229Slc, true, true)
		yys4229 := string(yys4229Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4229 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4232 := &x.ListMeta
				yym4233 := z.DecBinary()
				_ = yym4233
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4232) {
				} else {
					z.DecFallback(yyv4232, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4234 := &x.Items
				yym4235 := z.DecBinary()
				_ = yym4235
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4234), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4229)
		} // end switch yys4229
	} // end for yyj4229
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4236 int
	var yyb4236 bool
	var yyhl4236 bool = l >= 0
	yyj4236++
	if yyhl4236 {
		yyb4236 = yyj4236 > l
	} else {
		yyb4236 = r.CheckBreak()
	}
	if yyb4236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4236++
	if yyhl4236 {
		yyb4236 = yyj4236 > l
	} else {
		yyb4236 = r.CheckBreak()
	}
	if yyb4236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4236++
	if yyhl4236 {
		yyb4236 = yyj4236 > l
	} else {
		yyb4236 = r.CheckBreak()
	}
	if yyb4236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4239 := &x.ListMeta
		yym4240 := z.DecBinary()
		_ = yym4240
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4239) {
		} else {
			z.DecFallback(yyv4239, false)
		}
	}
	yyj4236++
	if yyhl4236 {
		yyb4236 = yyj4236 > l
	} else {
		yyb4236 = r.CheckBreak()
	}
	if yyb4236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4241 := &x.Items
		yym4242 := z.DecBinary()
		_ = yym4242
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4241), d)
		}
	}
	for {
		yyj4236++
		if yyhl4236 {
			yyb4236 = yyj4236 > l
		} else {
			yyb4236 = r.CheckBreak()
		}
		if yyb4236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4243 := z.EncBinary()
		_ = yym4243
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4244 := !z.EncBinary()
			yy2arr4244 := z.EncBasicHandle().StructToArray
			var yyq4244 [4]bool
			_, _, _ = yysep4244, yyq4244, yy2arr4244
			const yyr4244 bool = false
			yyq4244[0] = x.Kind != ""
			yyq4244[1] = x.APIVersion != ""
			yyq4244[2] = true
			yyq4244[3] = len(x.Data) != 0
			var yynn4244 int
			if yyr4244 || yy2arr4244 {
				r.EncodeArrayStart(4)
			} else {
				yynn4244 = 0
				for _, b := range yyq4244 {
					if b {
						yynn4244++
					}
				}
				r.EncodeMapStart(yynn4244)
				yynn4244 = 0
			}
			if yyr4244 || yy2arr4244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4244[0] {
					yym4246 := z.EncBinary()
					_ = yym4246
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4244[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4247 := z.EncBinary()
					_ = yym4247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4244 || yy2arr4244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4244[1] {
					yym4249 := z.EncBinary()
					_ = yym4249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4244[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4250 := z.EncBinary()
					_ = yym4250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4244 || yy2arr4244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4244[2] {
					yy4252 := &x.ObjectMeta
					yy4252.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4244[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4253 := &x.ObjectMeta
					yy4253.CodecEncodeSelf(e)
				}
			}
			if yyr4244 || yy2arr4244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4244[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4255 := z.EncBinary()
						_ = yym4255
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4244[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4256 := z.EncBinary()
						_ = yym4256
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4244 || yy2arr4244 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4257 := z.DecBinary()
	_ = yym4257
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4258 := r.ContainerType()
		if yyct4258 == codecSelferValueTypeMap1234 {
			yyl4258 := r.ReadMapStart()
			if yyl4258 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4258, d)
			}
		} else if yyct4258 == codecSelferValueTypeArray1234 {
			yyl4258 := r.ReadArrayStart()
			if yyl4258 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4258, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4259Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4259Slc
	var yyhl4259 bool = l >= 0
	for yyj4259 := 0; ; yyj4259++ {
		if yyhl4259 {
			if yyj4259 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4259Slc = r.DecodeBytes(yys4259Slc, true, true)
		yys4259 := string(yys4259Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4259 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4262 := &x.ObjectMeta
				yyv4262.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4263 := &x.Data
				yym4264 := z.DecBinary()
				_ = yym4264
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4263, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4259)
		} // end switch yys4259
	} // end for yyj4259
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4265 int
	var yyb4265 bool
	var yyhl4265 bool = l >= 0
	yyj4265++
	if yyhl4265 {
		yyb4265 = yyj4265 > l
	} else {
		yyb4265 = r.CheckBreak()
	}
	if yyb4265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4265++
	if yyhl4265 {
		yyb4265 = yyj4265 > l
	} else {
		yyb4265 = r.CheckBreak()
	}
	if yyb4265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4265++
	if yyhl4265 {
		yyb4265 = yyj4265 > l
	} else {
		yyb4265 = r.CheckBreak()
	}
	if yyb4265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4268 := &x.ObjectMeta
		yyv4268.CodecDecodeSelf(d)
	}
	yyj4265++
	if yyhl4265 {
		yyb4265 = yyj4265 > l
	} else {
		yyb4265 = r.CheckBreak()
	}
	if yyb4265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4269 := &x.Data
		yym4270 := z.DecBinary()
		_ = yym4270
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4269, false, d)
		}
	}
	for {
		yyj4265++
		if yyhl4265 {
			yyb4265 = yyj4265 > l
		} else {
			yyb4265 = r.CheckBreak()
		}
		if yyb4265 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4265-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4271 := z.EncBinary()
		_ = yym4271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4272 := !z.EncBinary()
			yy2arr4272 := z.EncBasicHandle().StructToArray
			var yyq4272 [4]bool
			_, _, _ = yysep4272, yyq4272, yy2arr4272
			const yyr4272 bool = false
			yyq4272[0] = x.Kind != ""
			yyq4272[1] = x.APIVersion != ""
			yyq4272[2] = true
			var yynn4272 int
			if yyr4272 || yy2arr4272 {
				r.EncodeArrayStart(4)
			} else {
				yynn4272 = 1
				for _, b := range yyq4272 {
					if b {
						yynn4272++
					}
				}
				r.EncodeMapStart(yynn4272)
				yynn4272 = 0
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4272[0] {
					yym4274 := z.EncBinary()
					_ = yym4274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4272[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4275 := z.EncBinary()
					_ = yym4275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4272[1] {
					yym4277 := z.EncBinary()
					_ = yym4277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4272[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4278 := z.EncBinary()
					_ = yym4278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4272[2] {
					yy4280 := &x.ListMeta
					yym4281 := z.EncBinary()
					_ = yym4281
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4280) {
					} else {
						z.EncFallback(yy4280)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4272[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4282 := &x.ListMeta
					yym4283 := z.EncBinary()
					_ = yym4283
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4282) {
					} else {
						z.EncFallback(yy4282)
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4285 := z.EncBinary()
					_ = yym4285
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4286 := z.EncBinary()
					_ = yym4286
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4287 := z.DecBinary()
	_ = yym4287
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4288 := r.ContainerType()
		if yyct4288 == codecSelferValueTypeMap1234 {
			yyl4288 := r.ReadMapStart()
			if yyl4288 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4288, d)
			}
		} else if yyct4288 == codecSelferValueTypeArray1234 {
			yyl4288 := r.ReadArrayStart()
			if yyl4288 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4288, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4289Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4289Slc
	var yyhl4289 bool = l >= 0
	for yyj4289 := 0; ; yyj4289++ {
		if yyhl4289 {
			if yyj4289 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4289Slc = r.DecodeBytes(yys4289Slc, true, true)
		yys4289 := string(yys4289Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4289 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4292 := &x.ListMeta
				yym4293 := z.DecBinary()
				_ = yym4293
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4292) {
				} else {
					z.DecFallback(yyv4292, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4294 := &x.Items
				yym4295 := z.DecBinary()
				_ = yym4295
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4294), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4289)
		} // end switch yys4289
	} // end for yyj4289
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4296 int
	var yyb4296 bool
	var yyhl4296 bool = l >= 0
	yyj4296++
	if yyhl4296 {
		yyb4296 = yyj4296 > l
	} else {
		yyb4296 = r.CheckBreak()
	}
	if yyb4296 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4296++
	if yyhl4296 {
		yyb4296 = yyj4296 > l
	} else {
		yyb4296 = r.CheckBreak()
	}
	if yyb4296 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4296++
	if yyhl4296 {
		yyb4296 = yyj4296 > l
	} else {
		yyb4296 = r.CheckBreak()
	}
	if yyb4296 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4299 := &x.ListMeta
		yym4300 := z.DecBinary()
		_ = yym4300
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4299) {
		} else {
			z.DecFallback(yyv4299, false)
		}
	}
	yyj4296++
	if yyhl4296 {
		yyb4296 = yyj4296 > l
	} else {
		yyb4296 = r.CheckBreak()
	}
	if yyb4296 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4301 := &x.Items
		yym4302 := z.DecBinary()
		_ = yym4302
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4301), d)
		}
	}
	for {
		yyj4296++
		if yyhl4296 {
			yyb4296 = yyj4296 > l
		} else {
			yyb4296 = r.CheckBreak()
		}
		if yyb4296 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4296-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4303 := z.EncBinary()
	_ = yym4303
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4304 := z.DecBinary()
	_ = yym4304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4305 := z.EncBinary()
		_ = yym4305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4306 := !z.EncBinary()
			yy2arr4306 := z.EncBasicHandle().StructToArray
			var yyq4306 [4]bool
			_, _, _ = yysep4306, yyq4306, yy2arr4306
			const yyr4306 bool = false
			yyq4306[2] = x.Message != ""
			yyq4306[3] = x.Error != ""
			var yynn4306 int
			if yyr4306 || yy2arr4306 {
				r.EncodeArrayStart(4)
			} else {
				yynn4306 = 2
				for _, b := range yyq4306 {
					if b {
						yynn4306++
					}
				}
				r.EncodeMapStart(yynn4306)
				yynn4306 = 0
			}
			if yyr4306 || yy2arr4306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4306 || yy2arr4306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4306 || yy2arr4306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4306[2] {
					yym4310 := z.EncBinary()
					_ = yym4310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4306[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4311 := z.EncBinary()
					_ = yym4311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4306 || yy2arr4306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4306[3] {
					yym4313 := z.EncBinary()
					_ = yym4313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4306[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4314 := z.EncBinary()
					_ = yym4314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4306 || yy2arr4306 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4315 := z.DecBinary()
	_ = yym4315
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4316 := r.ContainerType()
		if yyct4316 == codecSelferValueTypeMap1234 {
			yyl4316 := r.ReadMapStart()
			if yyl4316 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4316, d)
			}
		} else if yyct4316 == codecSelferValueTypeArray1234 {
			yyl4316 := r.ReadArrayStart()
			if yyl4316 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4316, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4317Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4317Slc
	var yyhl4317 bool = l >= 0
	for yyj4317 := 0; ; yyj4317++ {
		if yyhl4317 {
			if yyj4317 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4317Slc = r.DecodeBytes(yys4317Slc, true, true)
		yys4317 := string(yys4317Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4317 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4317)
		} // end switch yys4317
	} // end for yyj4317
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4322 int
	var yyb4322 bool
	var yyhl4322 bool = l >= 0
	yyj4322++
	if yyhl4322 {
		yyb4322 = yyj4322 > l
	} else {
		yyb4322 = r.CheckBreak()
	}
	if yyb4322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4322++
	if yyhl4322 {
		yyb4322 = yyj4322 > l
	} else {
		yyb4322 = r.CheckBreak()
	}
	if yyb4322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4322++
	if yyhl4322 {
		yyb4322 = yyj4322 > l
	} else {
		yyb4322 = r.CheckBreak()
	}
	if yyb4322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4322++
	if yyhl4322 {
		yyb4322 = yyj4322 > l
	} else {
		yyb4322 = r.CheckBreak()
	}
	if yyb4322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4322++
		if yyhl4322 {
			yyb4322 = yyj4322 > l
		} else {
			yyb4322 = r.CheckBreak()
		}
		if yyb4322 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4322-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4327 := z.EncBinary()
		_ = yym4327
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4328 := !z.EncBinary()
			yy2arr4328 := z.EncBasicHandle().StructToArray
			var yyq4328 [4]bool
			_, _, _ = yysep4328, yyq4328, yy2arr4328
			const yyr4328 bool = false
			yyq4328[0] = x.Kind != ""
			yyq4328[1] = x.APIVersion != ""
			yyq4328[2] = true
			yyq4328[3] = len(x.Conditions) != 0
			var yynn4328 int
			if yyr4328 || yy2arr4328 {
				r.EncodeArrayStart(4)
			} else {
				yynn4328 = 0
				for _, b := range yyq4328 {
					if b {
						yynn4328++
					}
				}
				r.EncodeMapStart(yynn4328)
				yynn4328 = 0
			}
			if yyr4328 || yy2arr4328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4328[0] {
					yym4330 := z.EncBinary()
					_ = yym4330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4328[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4331 := z.EncBinary()
					_ = yym4331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4328 || yy2arr4328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4328[1] {
					yym4333 := z.EncBinary()
					_ = yym4333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4328[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4334 := z.EncBinary()
					_ = yym4334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4328 || yy2arr4328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4328[2] {
					yy4336 := &x.ObjectMeta
					yy4336.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4328[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4337 := &x.ObjectMeta
					yy4337.CodecEncodeSelf(e)
				}
			}
			if yyr4328 || yy2arr4328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4328[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4339 := z.EncBinary()
						_ = yym4339
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4328[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4340 := z.EncBinary()
						_ = yym4340
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4328 || yy2arr4328 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4341 := z.DecBinary()
	_ = yym4341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4342 := r.ContainerType()
		if yyct4342 == codecSelferValueTypeMap1234 {
			yyl4342 := r.ReadMapStart()
			if yyl4342 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4342, d)
			}
		} else if yyct4342 == codecSelferValueTypeArray1234 {
			yyl4342 := r.ReadArrayStart()
			if yyl4342 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4342, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4343Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4343Slc
	var yyhl4343 bool = l >= 0
	for yyj4343 := 0; ; yyj4343++ {
		if yyhl4343 {
			if yyj4343 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4343Slc = r.DecodeBytes(yys4343Slc, true, true)
		yys4343 := string(yys4343Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4343 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4346 := &x.ObjectMeta
				yyv4346.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4347 := &x.Conditions
				yym4348 := z.DecBinary()
				_ = yym4348
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4347), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4343)
		} // end switch yys4343
	} // end for yyj4343
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4349 int
	var yyb4349 bool
	var yyhl4349 bool = l >= 0
	yyj4349++
	if yyhl4349 {
		yyb4349 = yyj4349 > l
	} else {
		yyb4349 = r.CheckBreak()
	}
	if yyb4349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4349++
	if yyhl4349 {
		yyb4349 = yyj4349 > l
	} else {
		yyb4349 = r.CheckBreak()
	}
	if yyb4349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4349++
	if yyhl4349 {
		yyb4349 = yyj4349 > l
	} else {
		yyb4349 = r.CheckBreak()
	}
	if yyb4349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4352 := &x.ObjectMeta
		yyv4352.CodecDecodeSelf(d)
	}
	yyj4349++
	if yyhl4349 {
		yyb4349 = yyj4349 > l
	} else {
		yyb4349 = r.CheckBreak()
	}
	if yyb4349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4353 := &x.Conditions
		yym4354 := z.DecBinary()
		_ = yym4354
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4353), d)
		}
	}
	for {
		yyj4349++
		if yyhl4349 {
			yyb4349 = yyj4349 > l
		} else {
			yyb4349 = r.CheckBreak()
		}
		if yyb4349 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4349-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4355 := z.EncBinary()
		_ = yym4355
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4356 := !z.EncBinary()
			yy2arr4356 := z.EncBasicHandle().StructToArray
			var yyq4356 [4]bool
			_, _, _ = yysep4356, yyq4356, yy2arr4356
			const yyr4356 bool = false
			yyq4356[0] = x.Kind != ""
			yyq4356[1] = x.APIVersion != ""
			yyq4356[2] = true
			var yynn4356 int
			if yyr4356 || yy2arr4356 {
				r.EncodeArrayStart(4)
			} else {
				yynn4356 = 1
				for _, b := range yyq4356 {
					if b {
						yynn4356++
					}
				}
				r.EncodeMapStart(yynn4356)
				yynn4356 = 0
			}
			if yyr4356 || yy2arr4356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4356[0] {
					yym4358 := z.EncBinary()
					_ = yym4358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4356[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4359 := z.EncBinary()
					_ = yym4359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4356 || yy2arr4356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4356[1] {
					yym4361 := z.EncBinary()
					_ = yym4361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4356[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4362 := z.EncBinary()
					_ = yym4362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4356 || yy2arr4356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4356[2] {
					yy4364 := &x.ListMeta
					yym4365 := z.EncBinary()
					_ = yym4365
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4364) {
					} else {
						z.EncFallback(yy4364)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4356[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4366 := &x.ListMeta
					yym4367 := z.EncBinary()
					_ = yym4367
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4366) {
					} else {
						z.EncFallback(yy4366)
					}
				}
			}
			if yyr4356 || yy2arr4356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4369 := z.EncBinary()
					_ = yym4369
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4370 := z.EncBinary()
					_ = yym4370
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4356 || yy2arr4356 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4371 := z.DecBinary()
	_ = yym4371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4372 := r.ContainerType()
		if yyct4372 == codecSelferValueTypeMap1234 {
			yyl4372 := r.ReadMapStart()
			if yyl4372 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4372, d)
			}
		} else if yyct4372 == codecSelferValueTypeArray1234 {
			yyl4372 := r.ReadArrayStart()
			if yyl4372 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4373Slc
	var yyhl4373 bool = l >= 0
	for yyj4373 := 0; ; yyj4373++ {
		if yyhl4373 {
			if yyj4373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4373Slc = r.DecodeBytes(yys4373Slc, true, true)
		yys4373 := string(yys4373Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4373 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4376 := &x.ListMeta
				yym4377 := z.DecBinary()
				_ = yym4377
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4376) {
				} else {
					z.DecFallback(yyv4376, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4378 := &x.Items
				yym4379 := z.DecBinary()
				_ = yym4379
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4378), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4373)
		} // end switch yys4373
	} // end for yyj4373
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4380 int
	var yyb4380 bool
	var yyhl4380 bool = l >= 0
	yyj4380++
	if yyhl4380 {
		yyb4380 = yyj4380 > l
	} else {
		yyb4380 = r.CheckBreak()
	}
	if yyb4380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4380++
	if yyhl4380 {
		yyb4380 = yyj4380 > l
	} else {
		yyb4380 = r.CheckBreak()
	}
	if yyb4380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4380++
	if yyhl4380 {
		yyb4380 = yyj4380 > l
	} else {
		yyb4380 = r.CheckBreak()
	}
	if yyb4380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4383 := &x.ListMeta
		yym4384 := z.DecBinary()
		_ = yym4384
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4383) {
		} else {
			z.DecFallback(yyv4383, false)
		}
	}
	yyj4380++
	if yyhl4380 {
		yyb4380 = yyj4380 > l
	} else {
		yyb4380 = r.CheckBreak()
	}
	if yyb4380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4385 := &x.Items
		yym4386 := z.DecBinary()
		_ = yym4386
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4385), d)
		}
	}
	for {
		yyj4380++
		if yyhl4380 {
			yyb4380 = yyj4380 > l
		} else {
			yyb4380 = r.CheckBreak()
		}
		if yyb4380 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4380-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4387 := z.EncBinary()
		_ = yym4387
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4388 := !z.EncBinary()
			yy2arr4388 := z.EncBasicHandle().StructToArray
			var yyq4388 [2]bool
			_, _, _ = yysep4388, yyq4388, yy2arr4388
			const yyr4388 bool = false
			yyq4388[0] = len(x.Items) != 0
			yyq4388[1] = x.DefaultMode != nil
			var yynn4388 int
			if yyr4388 || yy2arr4388 {
				r.EncodeArrayStart(2)
			} else {
				yynn4388 = 0
				for _, b := range yyq4388 {
					if b {
						yynn4388++
					}
				}
				r.EncodeMapStart(yynn4388)
				yynn4388 = 0
			}
			if yyr4388 || yy2arr4388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4388[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4390 := z.EncBinary()
						_ = yym4390
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4388[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4391 := z.EncBinary()
						_ = yym4391
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4388 || yy2arr4388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4388[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4393 := *x.DefaultMode
						yym4394 := z.EncBinary()
						_ = yym4394
						if false {
						} else {
							r.EncodeInt(int64(yy4393))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4388[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4395 := *x.DefaultMode
						yym4396 := z.EncBinary()
						_ = yym4396
						if false {
						} else {
							r.EncodeInt(int64(yy4395))
						}
					}
				}
			}
			if yyr4388 || yy2arr4388 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4397 := z.DecBinary()
	_ = yym4397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4398 := r.ContainerType()
		if yyct4398 == codecSelferValueTypeMap1234 {
			yyl4398 := r.ReadMapStart()
			if yyl4398 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4398, d)
			}
		} else if yyct4398 == codecSelferValueTypeArray1234 {
			yyl4398 := r.ReadArrayStart()
			if yyl4398 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4398, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4399Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4399Slc
	var yyhl4399 bool = l >= 0
	for yyj4399 := 0; ; yyj4399++ {
		if yyhl4399 {
			if yyj4399 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4399Slc = r.DecodeBytes(yys4399Slc, true, true)
		yys4399 := string(yys4399Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4399 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4400 := &x.Items
				yym4401 := z.DecBinary()
				_ = yym4401
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4400), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym4403 := z.DecBinary()
				_ = yym4403
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4399)
		} // end switch yys4399
	} // end for yyj4399
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4404 int
	var yyb4404 bool
	var yyhl4404 bool = l >= 0
	yyj4404++
	if yyhl4404 {
		yyb4404 = yyj4404 > l
	} else {
		yyb4404 = r.CheckBreak()
	}
	if yyb4404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4405 := &x.Items
		yym4406 := z.DecBinary()
		_ = yym4406
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4405), d)
		}
	}
	yyj4404++
	if yyhl4404 {
		yyb4404 = yyj4404 > l
	} else {
		yyb4404 = r.CheckBreak()
	}
	if yyb4404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym4408 := z.DecBinary()
		_ = yym4408
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4404++
		if yyhl4404 {
			yyb4404 = yyj4404 > l
		} else {
			yyb4404 = r.CheckBreak()
		}
		if yyb4404 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4404-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4409 := z.EncBinary()
		_ = yym4409
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4410 := !z.EncBinary()
			yy2arr4410 := z.EncBasicHandle().StructToArray
			var yyq4410 [4]bool
			_, _, _ = yysep4410, yyq4410, yy2arr4410
			const yyr4410 bool = false
			yyq4410[1] = x.FieldRef != nil
			yyq4410[2] = x.ResourceFieldRef != nil
			yyq4410[3] = x.Mode != nil
			var yynn4410 int
			if yyr4410 || yy2arr4410 {
				r.EncodeArrayStart(4)
			} else {
				yynn4410 = 1
				for _, b := range yyq4410 {
					if b {
						yynn4410++
					}
				}
				r.EncodeMapStart(yynn4410)
				yynn4410 = 0
			}
			if yyr4410 || yy2arr4410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4412 := z.EncBinary()
				_ = yym4412
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4413 := z.EncBinary()
				_ = yym4413
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4410 || yy2arr4410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4410[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4410[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4410 || yy2arr4410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4410[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4410[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4410 || yy2arr4410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4410[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4417 := *x.Mode
						yym4418 := z.EncBinary()
						_ = yym4418
						if false {
						} else {
							r.EncodeInt(int64(yy4417))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4410[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4419 := *x.Mode
						yym4420 := z.EncBinary()
						_ = yym4420
						if false {
						} else {
							r.EncodeInt(int64(yy4419))
						}
					}
				}
			}
			if yyr4410 || yy2arr4410 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4421 := z.DecBinary()
	_ = yym4421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4422 := r.ContainerType()
		if yyct4422 == codecSelferValueTypeMap1234 {
			yyl4422 := r.ReadMapStart()
			if yyl4422 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4422, d)
			}
		} else if yyct4422 == codecSelferValueTypeArray1234 {
			yyl4422 := r.ReadArrayStart()
			if yyl4422 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4423Slc
	var yyhl4423 bool = l >= 0
	for yyj4423 := 0; ; yyj4423++ {
		if yyhl4423 {
			if yyj4423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4423Slc = r.DecodeBytes(yys4423Slc, true, true)
		yys4423 := string(yys4423Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4423 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym4428 := z.DecBinary()
				_ = yym4428
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4423)
		} // end switch yys4423
	} // end for yyj4423
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4429 int
	var yyb4429 bool
	var yyhl4429 bool = l >= 0
	yyj4429++
	if yyhl4429 {
		yyb4429 = yyj4429 > l
	} else {
		yyb4429 = r.CheckBreak()
	}
	if yyb4429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4429++
	if yyhl4429 {
		yyb4429 = yyj4429 > l
	} else {
		yyb4429 = r.CheckBreak()
	}
	if yyb4429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4429++
	if yyhl4429 {
		yyb4429 = yyj4429 > l
	} else {
		yyb4429 = r.CheckBreak()
	}
	if yyb4429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj4429++
	if yyhl4429 {
		yyb4429 = yyj4429 > l
	} else {
		yyb4429 = r.CheckBreak()
	}
	if yyb4429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym4434 := z.DecBinary()
		_ = yym4434
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4429++
		if yyhl4429 {
			yyb4429 = yyj4429 > l
		} else {
			yyb4429 = r.CheckBreak()
		}
		if yyb4429 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4429-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4435 := z.EncBinary()
		_ = yym4435
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4436 := !z.EncBinary()
			yy2arr4436 := z.EncBasicHandle().StructToArray
			var yyq4436 [6]bool
			_, _, _ = yysep4436, yyq4436, yy2arr4436
			const yyr4436 bool = false
			yyq4436[0] = x.Capabilities != nil
			yyq4436[1] = x.Privileged != nil
			yyq4436[2] = x.SELinuxOptions != nil
			yyq4436[3] = x.RunAsUser != nil
			yyq4436[4] = x.RunAsNonRoot != nil
			yyq4436[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4436 int
			if yyr4436 || yy2arr4436 {
				r.EncodeArrayStart(6)
			} else {
				yynn4436 = 0
				for _, b := range yyq4436 {
					if b {
						yynn4436++
					}
				}
				r.EncodeMapStart(yynn4436)
				yynn4436 = 0
			}
			if yyr4436 || yy2arr4436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4436[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4436[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4436 || yy2arr4436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4436[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4439 := *x.Privileged
						yym4440 := z.EncBinary()
						_ = yym4440
						if false {
						} else {
							r.EncodeBool(bool(yy4439))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4436[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4441 := *x.Privileged
						yym4442 := z.EncBinary()
						_ = yym4442
						if false {
						} else {
							r.EncodeBool(bool(yy4441))
						}
					}
				}
			}
			if yyr4436 || yy2arr4436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4436[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4436[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4436 || yy2arr4436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4436[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4445 := *x.RunAsUser
						yym4446 := z.EncBinary()
						_ = yym4446
						if false {
						} else {
							r.EncodeInt(int64(yy4445))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4436[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4447 := *x.RunAsUser
						yym4448 := z.EncBinary()
						_ = yym4448
						if false {
						} else {
							r.EncodeInt(int64(yy4447))
						}
					}
				}
			}
			if yyr4436 || yy2arr4436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4436[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4450 := *x.RunAsNonRoot
						yym4451 := z.EncBinary()
						_ = yym4451
						if false {
						} else {
							r.EncodeBool(bool(yy4450))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4436[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4452 := *x.RunAsNonRoot
						yym4453 := z.EncBinary()
						_ = yym4453
						if false {
						} else {
							r.EncodeBool(bool(yy4452))
						}
					}
				}
			}
			if yyr4436 || yy2arr4436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4436[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4455 := *x.ReadOnlyRootFilesystem
						yym4456 := z.EncBinary()
						_ = yym4456
						if false {
						} else {
							r.EncodeBool(bool(yy4455))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4436[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4457 := *x.ReadOnlyRootFilesystem
						yym4458 := z.EncBinary()
						_ = yym4458
						if false {
						} else {
							r.EncodeBool(bool(yy4457))
						}
					}
				}
			}
			if yyr4436 || yy2arr4436 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4459 := z.DecBinary()
	_ = yym4459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4460 := r.ContainerType()
		if yyct4460 == codecSelferValueTypeMap1234 {
			yyl4460 := r.ReadMapStart()
			if yyl4460 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4460, d)
			}
		} else if yyct4460 == codecSelferValueTypeArray1234 {
			yyl4460 := r.ReadArrayStart()
			if yyl4460 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4460, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4461Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4461Slc
	var yyhl4461 bool = l >= 0
	for yyj4461 := 0; ; yyj4461++ {
		if yyhl4461 {
			if yyj4461 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4461Slc = r.DecodeBytes(yys4461Slc, true, true)
		yys4461 := string(yys4461Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4461 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4464 := z.DecBinary()
				_ = yym4464
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4467 := z.DecBinary()
				_ = yym4467
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4469 := z.DecBinary()
				_ = yym4469
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4471 := z.DecBinary()
				_ = yym4471
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4461)
		} // end switch yys4461
	} // end for yyj4461
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4472 int
	var yyb4472 bool
	var yyhl4472 bool = l >= 0
	yyj4472++
	if yyhl4472 {
		yyb4472 = yyj4472 > l
	} else {
		yyb4472 = r.CheckBreak()
	}
	if yyb4472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4472++
	if yyhl4472 {
		yyb4472 = yyj4472 > l
	} else {
		yyb4472 = r.CheckBreak()
	}
	if yyb4472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4475 := z.DecBinary()
		_ = yym4475
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4472++
	if yyhl4472 {
		yyb4472 = yyj4472 > l
	} else {
		yyb4472 = r.CheckBreak()
	}
	if yyb4472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4472++
	if yyhl4472 {
		yyb4472 = yyj4472 > l
	} else {
		yyb4472 = r.CheckBreak()
	}
	if yyb4472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4478 := z.DecBinary()
		_ = yym4478
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4472++
	if yyhl4472 {
		yyb4472 = yyj4472 > l
	} else {
		yyb4472 = r.CheckBreak()
	}
	if yyb4472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4480 := z.DecBinary()
		_ = yym4480
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4472++
	if yyhl4472 {
		yyb4472 = yyj4472 > l
	} else {
		yyb4472 = r.CheckBreak()
	}
	if yyb4472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4482 := z.DecBinary()
		_ = yym4482
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4472++
		if yyhl4472 {
			yyb4472 = yyj4472 > l
		} else {
			yyb4472 = r.CheckBreak()
		}
		if yyb4472 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4472-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4483 := z.EncBinary()
		_ = yym4483
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4484 := !z.EncBinary()
			yy2arr4484 := z.EncBasicHandle().StructToArray
			var yyq4484 [4]bool
			_, _, _ = yysep4484, yyq4484, yy2arr4484
			const yyr4484 bool = false
			yyq4484[0] = x.User != ""
			yyq4484[1] = x.Role != ""
			yyq4484[2] = x.Type != ""
			yyq4484[3] = x.Level != ""
			var yynn4484 int
			if yyr4484 || yy2arr4484 {
				r.EncodeArrayStart(4)
			} else {
				yynn4484 = 0
				for _, b := range yyq4484 {
					if b {
						yynn4484++
					}
				}
				r.EncodeMapStart(yynn4484)
				yynn4484 = 0
			}
			if yyr4484 || yy2arr4484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4484[0] {
					yym4486 := z.EncBinary()
					_ = yym4486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4484[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4487 := z.EncBinary()
					_ = yym4487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4484 || yy2arr4484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4484[1] {
					yym4489 := z.EncBinary()
					_ = yym4489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4484[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4490 := z.EncBinary()
					_ = yym4490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4484 || yy2arr4484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4484[2] {
					yym4492 := z.EncBinary()
					_ = yym4492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4484[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4493 := z.EncBinary()
					_ = yym4493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4484 || yy2arr4484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4484[3] {
					yym4495 := z.EncBinary()
					_ = yym4495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4484[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4496 := z.EncBinary()
					_ = yym4496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4484 || yy2arr4484 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4497 := z.DecBinary()
	_ = yym4497
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4498 := r.ContainerType()
		if yyct4498 == codecSelferValueTypeMap1234 {
			yyl4498 := r.ReadMapStart()
			if yyl4498 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4498, d)
			}
		} else if yyct4498 == codecSelferValueTypeArray1234 {
			yyl4498 := r.ReadArrayStart()
			if yyl4498 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4498, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4499Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4499Slc
	var yyhl4499 bool = l >= 0
	for yyj4499 := 0; ; yyj4499++ {
		if yyhl4499 {
			if yyj4499 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4499Slc = r.DecodeBytes(yys4499Slc, true, true)
		yys4499 := string(yys4499Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4499 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4499)
		} // end switch yys4499
	} // end for yyj4499
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4504 int
	var yyb4504 bool
	var yyhl4504 bool = l >= 0
	yyj4504++
	if yyhl4504 {
		yyb4504 = yyj4504 > l
	} else {
		yyb4504 = r.CheckBreak()
	}
	if yyb4504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4504++
	if yyhl4504 {
		yyb4504 = yyj4504 > l
	} else {
		yyb4504 = r.CheckBreak()
	}
	if yyb4504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4504++
	if yyhl4504 {
		yyb4504 = yyj4504 > l
	} else {
		yyb4504 = r.CheckBreak()
	}
	if yyb4504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4504++
	if yyhl4504 {
		yyb4504 = yyj4504 > l
	} else {
		yyb4504 = r.CheckBreak()
	}
	if yyb4504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4504++
		if yyhl4504 {
			yyb4504 = yyj4504 > l
		} else {
			yyb4504 = r.CheckBreak()
		}
		if yyb4504 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4504-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4509 := z.EncBinary()
		_ = yym4509
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4510 := !z.EncBinary()
			yy2arr4510 := z.EncBasicHandle().StructToArray
			var yyq4510 [5]bool
			_, _, _ = yysep4510, yyq4510, yy2arr4510
			const yyr4510 bool = false
			yyq4510[0] = x.Kind != ""
			yyq4510[1] = x.APIVersion != ""
			yyq4510[2] = true
			var yynn4510 int
			if yyr4510 || yy2arr4510 {
				r.EncodeArrayStart(5)
			} else {
				yynn4510 = 2
				for _, b := range yyq4510 {
					if b {
						yynn4510++
					}
				}
				r.EncodeMapStart(yynn4510)
				yynn4510 = 0
			}
			if yyr4510 || yy2arr4510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4510[0] {
					yym4512 := z.EncBinary()
					_ = yym4512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4510[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4513 := z.EncBinary()
					_ = yym4513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4510 || yy2arr4510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4510[1] {
					yym4515 := z.EncBinary()
					_ = yym4515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4510[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4516 := z.EncBinary()
					_ = yym4516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4510 || yy2arr4510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4510[2] {
					yy4518 := &x.ObjectMeta
					yy4518.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4510[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4519 := &x.ObjectMeta
					yy4519.CodecEncodeSelf(e)
				}
			}
			if yyr4510 || yy2arr4510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4521 := z.EncBinary()
				_ = yym4521
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4522 := z.EncBinary()
				_ = yym4522
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4510 || yy2arr4510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4524 := z.EncBinary()
					_ = yym4524
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4525 := z.EncBinary()
					_ = yym4525
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4510 || yy2arr4510 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4526 := z.DecBinary()
	_ = yym4526
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4527 := r.ContainerType()
		if yyct4527 == codecSelferValueTypeMap1234 {
			yyl4527 := r.ReadMapStart()
			if yyl4527 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4527, d)
			}
		} else if yyct4527 == codecSelferValueTypeArray1234 {
			yyl4527 := r.ReadArrayStart()
			if yyl4527 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4527, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4528Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4528Slc
	var yyhl4528 bool = l >= 0
	for yyj4528 := 0; ; yyj4528++ {
		if yyhl4528 {
			if yyj4528 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4528Slc = r.DecodeBytes(yys4528Slc, true, true)
		yys4528 := string(yys4528Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4528 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4531 := &x.ObjectMeta
				yyv4531.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4533 := &x.Data
				yym4534 := z.DecBinary()
				_ = yym4534
				if false {
				} else {
					*yyv4533 = r.DecodeBytes(*(*[]byte)(yyv4533), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4528)
		} // end switch yys4528
	} // end for yyj4528
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4535 int
	var yyb4535 bool
	var yyhl4535 bool = l >= 0
	yyj4535++
	if yyhl4535 {
		yyb4535 = yyj4535 > l
	} else {
		yyb4535 = r.CheckBreak()
	}
	if yyb4535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4535++
	if yyhl4535 {
		yyb4535 = yyj4535 > l
	} else {
		yyb4535 = r.CheckBreak()
	}
	if yyb4535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4535++
	if yyhl4535 {
		yyb4535 = yyj4535 > l
	} else {
		yyb4535 = r.CheckBreak()
	}
	if yyb4535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4538 := &x.ObjectMeta
		yyv4538.CodecDecodeSelf(d)
	}
	yyj4535++
	if yyhl4535 {
		yyb4535 = yyj4535 > l
	} else {
		yyb4535 = r.CheckBreak()
	}
	if yyb4535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4535++
	if yyhl4535 {
		yyb4535 = yyj4535 > l
	} else {
		yyb4535 = r.CheckBreak()
	}
	if yyb4535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4540 := &x.Data
		yym4541 := z.DecBinary()
		_ = yym4541
		if false {
		} else {
			*yyv4540 = r.DecodeBytes(*(*[]byte)(yyv4540), false, false)
		}
	}
	for {
		yyj4535++
		if yyhl4535 {
			yyb4535 = yyj4535 > l
		} else {
			yyb4535 = r.CheckBreak()
		}
		if yyb4535 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4535-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4542 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4543 := &yyv4542
		yy4543.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4544 := *v
	yyh4544, yyl4544 := z.DecSliceHelperStart()
	var yyc4544 bool
	if yyl4544 == 0 {
		if yyv4544 == nil {
			yyv4544 = []OwnerReference{}
			yyc4544 = true
		} else if len(yyv4544) != 0 {
			yyv4544 = yyv4544[:0]
			yyc4544 = true
		}
	} else if yyl4544 > 0 {
		var yyrr4544, yyrl4544 int
		var yyrt4544 bool
		if yyl4544 > cap(yyv4544) {

			yyrg4544 := len(yyv4544) > 0
			yyv24544 := yyv4544
			yyrl4544, yyrt4544 = z.DecInferLen(yyl4544, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4544 {
				if yyrl4544 <= cap(yyv4544) {
					yyv4544 = yyv4544[:yyrl4544]
				} else {
					yyv4544 = make([]OwnerReference, yyrl4544)
				}
			} else {
				yyv4544 = make([]OwnerReference, yyrl4544)
			}
			yyc4544 = true
			yyrr4544 = len(yyv4544)
			if yyrg4544 {
				copy(yyv4544, yyv24544)
			}
		} else if yyl4544 != len(yyv4544) {
			yyv4544 = yyv4544[:yyl4544]
			yyc4544 = true
		}
		yyj4544 := 0
		for ; yyj4544 < yyrr4544; yyj4544++ {
			yyh4544.ElemContainerState(yyj4544)
			if r.TryDecodeAsNil() {
				yyv4544[yyj4544] = OwnerReference{}
			} else {
				yyv4545 := &yyv4544[yyj4544]
				yyv4545.CodecDecodeSelf(d)
			}

		}
		if yyrt4544 {
			for ; yyj4544 < yyl4544; yyj4544++ {
				yyv4544 = append(yyv4544, OwnerReference{})
				yyh4544.ElemContainerState(yyj4544)
				if r.TryDecodeAsNil() {
					yyv4544[yyj4544] = OwnerReference{}
				} else {
					yyv4546 := &yyv4544[yyj4544]
					yyv4546.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4544 := 0
		for ; !r.CheckBreak(); yyj4544++ {

			if yyj4544 >= len(yyv4544) {
				yyv4544 = append(yyv4544, OwnerReference{}) // var yyz4544 OwnerReference
				yyc4544 = true
			}
			yyh4544.ElemContainerState(yyj4544)
			if yyj4544 < len(yyv4544) {
				if r.TryDecodeAsNil() {
					yyv4544[yyj4544] = OwnerReference{}
				} else {
					yyv4547 := &yyv4544[yyj4544]
					yyv4547.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4544 < len(yyv4544) {
			yyv4544 = yyv4544[:yyj4544]
			yyc4544 = true
		} else if yyj4544 == 0 && yyv4544 == nil {
			yyv4544 = []OwnerReference{}
			yyc4544 = true
		}
	}
	yyh4544.End()
	if yyc4544 {
		*v = yyv4544
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4548 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4548.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4549 := *v
	yyh4549, yyl4549 := z.DecSliceHelperStart()
	var yyc4549 bool
	if yyl4549 == 0 {
		if yyv4549 == nil {
			yyv4549 = []PersistentVolumeAccessMode{}
			yyc4549 = true
		} else if len(yyv4549) != 0 {
			yyv4549 = yyv4549[:0]
			yyc4549 = true
		}
	} else if yyl4549 > 0 {
		var yyrr4549, yyrl4549 int
		var yyrt4549 bool
		if yyl4549 > cap(yyv4549) {

			yyrl4549, yyrt4549 = z.DecInferLen(yyl4549, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4549 {
				if yyrl4549 <= cap(yyv4549) {
					yyv4549 = yyv4549[:yyrl4549]
				} else {
					yyv4549 = make([]PersistentVolumeAccessMode, yyrl4549)
				}
			} else {
				yyv4549 = make([]PersistentVolumeAccessMode, yyrl4549)
			}
			yyc4549 = true
			yyrr4549 = len(yyv4549)
		} else if yyl4549 != len(yyv4549) {
			yyv4549 = yyv4549[:yyl4549]
			yyc4549 = true
		}
		yyj4549 := 0
		for ; yyj4549 < yyrr4549; yyj4549++ {
			yyh4549.ElemContainerState(yyj4549)
			if r.TryDecodeAsNil() {
				yyv4549[yyj4549] = ""
			} else {
				yyv4549[yyj4549] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4549 {
			for ; yyj4549 < yyl4549; yyj4549++ {
				yyv4549 = append(yyv4549, "")
				yyh4549.ElemContainerState(yyj4549)
				if r.TryDecodeAsNil() {
					yyv4549[yyj4549] = ""
				} else {
					yyv4549[yyj4549] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4549 := 0
		for ; !r.CheckBreak(); yyj4549++ {

			if yyj4549 >= len(yyv4549) {
				yyv4549 = append(yyv4549, "") // var yyz4549 PersistentVolumeAccessMode
				yyc4549 = true
			}
			yyh4549.ElemContainerState(yyj4549)
			if yyj4549 < len(yyv4549) {
				if r.TryDecodeAsNil() {
					yyv4549[yyj4549] = ""
				} else {
					yyv4549[yyj4549] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4549 < len(yyv4549) {
			yyv4549 = yyv4549[:yyj4549]
			yyc4549 = true
		} else if yyj4549 == 0 && yyv4549 == nil {
			yyv4549 = []PersistentVolumeAccessMode{}
			yyc4549 = true
		}
	}
	yyh4549.End()
	if yyc4549 {
		*v = yyv4549
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4553 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4554 := &yyv4553
		yy4554.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4555 := *v
	yyh4555, yyl4555 := z.DecSliceHelperStart()
	var yyc4555 bool
	if yyl4555 == 0 {
		if yyv4555 == nil {
			yyv4555 = []PersistentVolume{}
			yyc4555 = true
		} else if len(yyv4555) != 0 {
			yyv4555 = yyv4555[:0]
			yyc4555 = true
		}
	} else if yyl4555 > 0 {
		var yyrr4555, yyrl4555 int
		var yyrt4555 bool
		if yyl4555 > cap(yyv4555) {

			yyrg4555 := len(yyv4555) > 0
			yyv24555 := yyv4555
			yyrl4555, yyrt4555 = z.DecInferLen(yyl4555, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4555 {
				if yyrl4555 <= cap(yyv4555) {
					yyv4555 = yyv4555[:yyrl4555]
				} else {
					yyv4555 = make([]PersistentVolume, yyrl4555)
				}
			} else {
				yyv4555 = make([]PersistentVolume, yyrl4555)
			}
			yyc4555 = true
			yyrr4555 = len(yyv4555)
			if yyrg4555 {
				copy(yyv4555, yyv24555)
			}
		} else if yyl4555 != len(yyv4555) {
			yyv4555 = yyv4555[:yyl4555]
			yyc4555 = true
		}
		yyj4555 := 0
		for ; yyj4555 < yyrr4555; yyj4555++ {
			yyh4555.ElemContainerState(yyj4555)
			if r.TryDecodeAsNil() {
				yyv4555[yyj4555] = PersistentVolume{}
			} else {
				yyv4556 := &yyv4555[yyj4555]
				yyv4556.CodecDecodeSelf(d)
			}

		}
		if yyrt4555 {
			for ; yyj4555 < yyl4555; yyj4555++ {
				yyv4555 = append(yyv4555, PersistentVolume{})
				yyh4555.ElemContainerState(yyj4555)
				if r.TryDecodeAsNil() {
					yyv4555[yyj4555] = PersistentVolume{}
				} else {
					yyv4557 := &yyv4555[yyj4555]
					yyv4557.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4555 := 0
		for ; !r.CheckBreak(); yyj4555++ {

			if yyj4555 >= len(yyv4555) {
				yyv4555 = append(yyv4555, PersistentVolume{}) // var yyz4555 PersistentVolume
				yyc4555 = true
			}
			yyh4555.ElemContainerState(yyj4555)
			if yyj4555 < len(yyv4555) {
				if r.TryDecodeAsNil() {
					yyv4555[yyj4555] = PersistentVolume{}
				} else {
					yyv4558 := &yyv4555[yyj4555]
					yyv4558.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4555 < len(yyv4555) {
			yyv4555 = yyv4555[:yyj4555]
			yyc4555 = true
		} else if yyj4555 == 0 && yyv4555 == nil {
			yyv4555 = []PersistentVolume{}
			yyc4555 = true
		}
	}
	yyh4555.End()
	if yyc4555 {
		*v = yyv4555
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4559 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4560 := &yyv4559
		yy4560.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4561 := *v
	yyh4561, yyl4561 := z.DecSliceHelperStart()
	var yyc4561 bool
	if yyl4561 == 0 {
		if yyv4561 == nil {
			yyv4561 = []PersistentVolumeClaim{}
			yyc4561 = true
		} else if len(yyv4561) != 0 {
			yyv4561 = yyv4561[:0]
			yyc4561 = true
		}
	} else if yyl4561 > 0 {
		var yyrr4561, yyrl4561 int
		var yyrt4561 bool
		if yyl4561 > cap(yyv4561) {

			yyrg4561 := len(yyv4561) > 0
			yyv24561 := yyv4561
			yyrl4561, yyrt4561 = z.DecInferLen(yyl4561, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4561 {
				if yyrl4561 <= cap(yyv4561) {
					yyv4561 = yyv4561[:yyrl4561]
				} else {
					yyv4561 = make([]PersistentVolumeClaim, yyrl4561)
				}
			} else {
				yyv4561 = make([]PersistentVolumeClaim, yyrl4561)
			}
			yyc4561 = true
			yyrr4561 = len(yyv4561)
			if yyrg4561 {
				copy(yyv4561, yyv24561)
			}
		} else if yyl4561 != len(yyv4561) {
			yyv4561 = yyv4561[:yyl4561]
			yyc4561 = true
		}
		yyj4561 := 0
		for ; yyj4561 < yyrr4561; yyj4561++ {
			yyh4561.ElemContainerState(yyj4561)
			if r.TryDecodeAsNil() {
				yyv4561[yyj4561] = PersistentVolumeClaim{}
			} else {
				yyv4562 := &yyv4561[yyj4561]
				yyv4562.CodecDecodeSelf(d)
			}

		}
		if yyrt4561 {
			for ; yyj4561 < yyl4561; yyj4561++ {
				yyv4561 = append(yyv4561, PersistentVolumeClaim{})
				yyh4561.ElemContainerState(yyj4561)
				if r.TryDecodeAsNil() {
					yyv4561[yyj4561] = PersistentVolumeClaim{}
				} else {
					yyv4563 := &yyv4561[yyj4561]
					yyv4563.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4561 := 0
		for ; !r.CheckBreak(); yyj4561++ {

			if yyj4561 >= len(yyv4561) {
				yyv4561 = append(yyv4561, PersistentVolumeClaim{}) // var yyz4561 PersistentVolumeClaim
				yyc4561 = true
			}
			yyh4561.ElemContainerState(yyj4561)
			if yyj4561 < len(yyv4561) {
				if r.TryDecodeAsNil() {
					yyv4561[yyj4561] = PersistentVolumeClaim{}
				} else {
					yyv4564 := &yyv4561[yyj4561]
					yyv4564.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4561 < len(yyv4561) {
			yyv4561 = yyv4561[:yyj4561]
			yyc4561 = true
		} else if yyj4561 == 0 && yyv4561 == nil {
			yyv4561 = []PersistentVolumeClaim{}
			yyc4561 = true
		}
	}
	yyh4561.End()
	if yyc4561 {
		*v = yyv4561
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4565 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4566 := &yyv4565
		yy4566.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4567 := *v
	yyh4567, yyl4567 := z.DecSliceHelperStart()
	var yyc4567 bool
	if yyl4567 == 0 {
		if yyv4567 == nil {
			yyv4567 = []KeyToPath{}
			yyc4567 = true
		} else if len(yyv4567) != 0 {
			yyv4567 = yyv4567[:0]
			yyc4567 = true
		}
	} else if yyl4567 > 0 {
		var yyrr4567, yyrl4567 int
		var yyrt4567 bool
		if yyl4567 > cap(yyv4567) {

			yyrg4567 := len(yyv4567) > 0
			yyv24567 := yyv4567
			yyrl4567, yyrt4567 = z.DecInferLen(yyl4567, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4567 {
				if yyrl4567 <= cap(yyv4567) {
					yyv4567 = yyv4567[:yyrl4567]
				} else {
					yyv4567 = make([]KeyToPath, yyrl4567)
				}
			} else {
				yyv4567 = make([]KeyToPath, yyrl4567)
			}
			yyc4567 = true
			yyrr4567 = len(yyv4567)
			if yyrg4567 {
				copy(yyv4567, yyv24567)
			}
		} else if yyl4567 != len(yyv4567) {
			yyv4567 = yyv4567[:yyl4567]
			yyc4567 = true
		}
		yyj4567 := 0
		for ; yyj4567 < yyrr4567; yyj4567++ {
			yyh4567.ElemContainerState(yyj4567)
			if r.TryDecodeAsNil() {
				yyv4567[yyj4567] = KeyToPath{}
			} else {
				yyv4568 := &yyv4567[yyj4567]
				yyv4568.CodecDecodeSelf(d)
			}

		}
		if yyrt4567 {
			for ; yyj4567 < yyl4567; yyj4567++ {
				yyv4567 = append(yyv4567, KeyToPath{})
				yyh4567.ElemContainerState(yyj4567)
				if r.TryDecodeAsNil() {
					yyv4567[yyj4567] = KeyToPath{}
				} else {
					yyv4569 := &yyv4567[yyj4567]
					yyv4569.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4567 := 0
		for ; !r.CheckBreak(); yyj4567++ {

			if yyj4567 >= len(yyv4567) {
				yyv4567 = append(yyv4567, KeyToPath{}) // var yyz4567 KeyToPath
				yyc4567 = true
			}
			yyh4567.ElemContainerState(yyj4567)
			if yyj4567 < len(yyv4567) {
				if r.TryDecodeAsNil() {
					yyv4567[yyj4567] = KeyToPath{}
				} else {
					yyv4570 := &yyv4567[yyj4567]
					yyv4570.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4567 < len(yyv4567) {
			yyv4567 = yyv4567[:yyj4567]
			yyc4567 = true
		} else if yyj4567 == 0 && yyv4567 == nil {
			yyv4567 = []KeyToPath{}
			yyc4567 = true
		}
	}
	yyh4567.End()
	if yyc4567 {
		*v = yyv4567
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4571 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4572 := &yyv4571
		yy4572.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4573 := *v
	yyh4573, yyl4573 := z.DecSliceHelperStart()
	var yyc4573 bool
	if yyl4573 == 0 {
		if yyv4573 == nil {
			yyv4573 = []HTTPHeader{}
			yyc4573 = true
		} else if len(yyv4573) != 0 {
			yyv4573 = yyv4573[:0]
			yyc4573 = true
		}
	} else if yyl4573 > 0 {
		var yyrr4573, yyrl4573 int
		var yyrt4573 bool
		if yyl4573 > cap(yyv4573) {

			yyrg4573 := len(yyv4573) > 0
			yyv24573 := yyv4573
			yyrl4573, yyrt4573 = z.DecInferLen(yyl4573, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4573 {
				if yyrl4573 <= cap(yyv4573) {
					yyv4573 = yyv4573[:yyrl4573]
				} else {
					yyv4573 = make([]HTTPHeader, yyrl4573)
				}
			} else {
				yyv4573 = make([]HTTPHeader, yyrl4573)
			}
			yyc4573 = true
			yyrr4573 = len(yyv4573)
			if yyrg4573 {
				copy(yyv4573, yyv24573)
			}
		} else if yyl4573 != len(yyv4573) {
			yyv4573 = yyv4573[:yyl4573]
			yyc4573 = true
		}
		yyj4573 := 0
		for ; yyj4573 < yyrr4573; yyj4573++ {
			yyh4573.ElemContainerState(yyj4573)
			if r.TryDecodeAsNil() {
				yyv4573[yyj4573] = HTTPHeader{}
			} else {
				yyv4574 := &yyv4573[yyj4573]
				yyv4574.CodecDecodeSelf(d)
			}

		}
		if yyrt4573 {
			for ; yyj4573 < yyl4573; yyj4573++ {
				yyv4573 = append(yyv4573, HTTPHeader{})
				yyh4573.ElemContainerState(yyj4573)
				if r.TryDecodeAsNil() {
					yyv4573[yyj4573] = HTTPHeader{}
				} else {
					yyv4575 := &yyv4573[yyj4573]
					yyv4575.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4573 := 0
		for ; !r.CheckBreak(); yyj4573++ {

			if yyj4573 >= len(yyv4573) {
				yyv4573 = append(yyv4573, HTTPHeader{}) // var yyz4573 HTTPHeader
				yyc4573 = true
			}
			yyh4573.ElemContainerState(yyj4573)
			if yyj4573 < len(yyv4573) {
				if r.TryDecodeAsNil() {
					yyv4573[yyj4573] = HTTPHeader{}
				} else {
					yyv4576 := &yyv4573[yyj4573]
					yyv4576.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4573 < len(yyv4573) {
			yyv4573 = yyv4573[:yyj4573]
			yyc4573 = true
		} else if yyj4573 == 0 && yyv4573 == nil {
			yyv4573 = []HTTPHeader{}
			yyc4573 = true
		}
	}
	yyh4573.End()
	if yyc4573 {
		*v = yyv4573
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4577 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4577.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4578 := *v
	yyh4578, yyl4578 := z.DecSliceHelperStart()
	var yyc4578 bool
	if yyl4578 == 0 {
		if yyv4578 == nil {
			yyv4578 = []Capability{}
			yyc4578 = true
		} else if len(yyv4578) != 0 {
			yyv4578 = yyv4578[:0]
			yyc4578 = true
		}
	} else if yyl4578 > 0 {
		var yyrr4578, yyrl4578 int
		var yyrt4578 bool
		if yyl4578 > cap(yyv4578) {

			yyrl4578, yyrt4578 = z.DecInferLen(yyl4578, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4578 {
				if yyrl4578 <= cap(yyv4578) {
					yyv4578 = yyv4578[:yyrl4578]
				} else {
					yyv4578 = make([]Capability, yyrl4578)
				}
			} else {
				yyv4578 = make([]Capability, yyrl4578)
			}
			yyc4578 = true
			yyrr4578 = len(yyv4578)
		} else if yyl4578 != len(yyv4578) {
			yyv4578 = yyv4578[:yyl4578]
			yyc4578 = true
		}
		yyj4578 := 0
		for ; yyj4578 < yyrr4578; yyj4578++ {
			yyh4578.ElemContainerState(yyj4578)
			if r.TryDecodeAsNil() {
				yyv4578[yyj4578] = ""
			} else {
				yyv4578[yyj4578] = Capability(r.DecodeString())
			}

		}
		if yyrt4578 {
			for ; yyj4578 < yyl4578; yyj4578++ {
				yyv4578 = append(yyv4578, "")
				yyh4578.ElemContainerState(yyj4578)
				if r.TryDecodeAsNil() {
					yyv4578[yyj4578] = ""
				} else {
					yyv4578[yyj4578] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4578 := 0
		for ; !r.CheckBreak(); yyj4578++ {

			if yyj4578 >= len(yyv4578) {
				yyv4578 = append(yyv4578, "") // var yyz4578 Capability
				yyc4578 = true
			}
			yyh4578.ElemContainerState(yyj4578)
			if yyj4578 < len(yyv4578) {
				if r.TryDecodeAsNil() {
					yyv4578[yyj4578] = ""
				} else {
					yyv4578[yyj4578] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4578 < len(yyv4578) {
			yyv4578 = yyv4578[:yyj4578]
			yyc4578 = true
		} else if yyj4578 == 0 && yyv4578 == nil {
			yyv4578 = []Capability{}
			yyc4578 = true
		}
	}
	yyh4578.End()
	if yyc4578 {
		*v = yyv4578
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4582 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4583 := &yyv4582
		yy4583.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4584 := *v
	yyh4584, yyl4584 := z.DecSliceHelperStart()
	var yyc4584 bool
	if yyl4584 == 0 {
		if yyv4584 == nil {
			yyv4584 = []ContainerPort{}
			yyc4584 = true
		} else if len(yyv4584) != 0 {
			yyv4584 = yyv4584[:0]
			yyc4584 = true
		}
	} else if yyl4584 > 0 {
		var yyrr4584, yyrl4584 int
		var yyrt4584 bool
		if yyl4584 > cap(yyv4584) {

			yyrg4584 := len(yyv4584) > 0
			yyv24584 := yyv4584
			yyrl4584, yyrt4584 = z.DecInferLen(yyl4584, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4584 {
				if yyrl4584 <= cap(yyv4584) {
					yyv4584 = yyv4584[:yyrl4584]
				} else {
					yyv4584 = make([]ContainerPort, yyrl4584)
				}
			} else {
				yyv4584 = make([]ContainerPort, yyrl4584)
			}
			yyc4584 = true
			yyrr4584 = len(yyv4584)
			if yyrg4584 {
				copy(yyv4584, yyv24584)
			}
		} else if yyl4584 != len(yyv4584) {
			yyv4584 = yyv4584[:yyl4584]
			yyc4584 = true
		}
		yyj4584 := 0
		for ; yyj4584 < yyrr4584; yyj4584++ {
			yyh4584.ElemContainerState(yyj4584)
			if r.TryDecodeAsNil() {
				yyv4584[yyj4584] = ContainerPort{}
			} else {
				yyv4585 := &yyv4584[yyj4584]
				yyv4585.CodecDecodeSelf(d)
			}

		}
		if yyrt4584 {
			for ; yyj4584 < yyl4584; yyj4584++ {
				yyv4584 = append(yyv4584, ContainerPort{})
				yyh4584.ElemContainerState(yyj4584)
				if r.TryDecodeAsNil() {
					yyv4584[yyj4584] = ContainerPort{}
				} else {
					yyv4586 := &yyv4584[yyj4584]
					yyv4586.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4584 := 0
		for ; !r.CheckBreak(); yyj4584++ {

			if yyj4584 >= len(yyv4584) {
				yyv4584 = append(yyv4584, ContainerPort{}) // var yyz4584 ContainerPort
				yyc4584 = true
			}
			yyh4584.ElemContainerState(yyj4584)
			if yyj4584 < len(yyv4584) {
				if r.TryDecodeAsNil() {
					yyv4584[yyj4584] = ContainerPort{}
				} else {
					yyv4587 := &yyv4584[yyj4584]
					yyv4587.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4584 < len(yyv4584) {
			yyv4584 = yyv4584[:yyj4584]
			yyc4584 = true
		} else if yyj4584 == 0 && yyv4584 == nil {
			yyv4584 = []ContainerPort{}
			yyc4584 = true
		}
	}
	yyh4584.End()
	if yyc4584 {
		*v = yyv4584
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4588 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4589 := &yyv4588
		yy4589.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4590 := *v
	yyh4590, yyl4590 := z.DecSliceHelperStart()
	var yyc4590 bool
	if yyl4590 == 0 {
		if yyv4590 == nil {
			yyv4590 = []EnvVar{}
			yyc4590 = true
		} else if len(yyv4590) != 0 {
			yyv4590 = yyv4590[:0]
			yyc4590 = true
		}
	} else if yyl4590 > 0 {
		var yyrr4590, yyrl4590 int
		var yyrt4590 bool
		if yyl4590 > cap(yyv4590) {

			yyrg4590 := len(yyv4590) > 0
			yyv24590 := yyv4590
			yyrl4590, yyrt4590 = z.DecInferLen(yyl4590, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4590 {
				if yyrl4590 <= cap(yyv4590) {
					yyv4590 = yyv4590[:yyrl4590]
				} else {
					yyv4590 = make([]EnvVar, yyrl4590)
				}
			} else {
				yyv4590 = make([]EnvVar, yyrl4590)
			}
			yyc4590 = true
			yyrr4590 = len(yyv4590)
			if yyrg4590 {
				copy(yyv4590, yyv24590)
			}
		} else if yyl4590 != len(yyv4590) {
			yyv4590 = yyv4590[:yyl4590]
			yyc4590 = true
		}
		yyj4590 := 0
		for ; yyj4590 < yyrr4590; yyj4590++ {
			yyh4590.ElemContainerState(yyj4590)
			if r.TryDecodeAsNil() {
				yyv4590[yyj4590] = EnvVar{}
			} else {
				yyv4591 := &yyv4590[yyj4590]
				yyv4591.CodecDecodeSelf(d)
			}

		}
		if yyrt4590 {
			for ; yyj4590 < yyl4590; yyj4590++ {
				yyv4590 = append(yyv4590, EnvVar{})
				yyh4590.ElemContainerState(yyj4590)
				if r.TryDecodeAsNil() {
					yyv4590[yyj4590] = EnvVar{}
				} else {
					yyv4592 := &yyv4590[yyj4590]
					yyv4592.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4590 := 0
		for ; !r.CheckBreak(); yyj4590++ {

			if yyj4590 >= len(yyv4590) {
				yyv4590 = append(yyv4590, EnvVar{}) // var yyz4590 EnvVar
				yyc4590 = true
			}
			yyh4590.ElemContainerState(yyj4590)
			if yyj4590 < len(yyv4590) {
				if r.TryDecodeAsNil() {
					yyv4590[yyj4590] = EnvVar{}
				} else {
					yyv4593 := &yyv4590[yyj4590]
					yyv4593.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4590 < len(yyv4590) {
			yyv4590 = yyv4590[:yyj4590]
			yyc4590 = true
		} else if yyj4590 == 0 && yyv4590 == nil {
			yyv4590 = []EnvVar{}
			yyc4590 = true
		}
	}
	yyh4590.End()
	if yyc4590 {
		*v = yyv4590
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4594 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4595 := &yyv4594
		yy4595.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4596 := *v
	yyh4596, yyl4596 := z.DecSliceHelperStart()
	var yyc4596 bool
	if yyl4596 == 0 {
		if yyv4596 == nil {
			yyv4596 = []VolumeMount{}
			yyc4596 = true
		} else if len(yyv4596) != 0 {
			yyv4596 = yyv4596[:0]
			yyc4596 = true
		}
	} else if yyl4596 > 0 {
		var yyrr4596, yyrl4596 int
		var yyrt4596 bool
		if yyl4596 > cap(yyv4596) {

			yyrg4596 := len(yyv4596) > 0
			yyv24596 := yyv4596
			yyrl4596, yyrt4596 = z.DecInferLen(yyl4596, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4596 {
				if yyrl4596 <= cap(yyv4596) {
					yyv4596 = yyv4596[:yyrl4596]
				} else {
					yyv4596 = make([]VolumeMount, yyrl4596)
				}
			} else {
				yyv4596 = make([]VolumeMount, yyrl4596)
			}
			yyc4596 = true
			yyrr4596 = len(yyv4596)
			if yyrg4596 {
				copy(yyv4596, yyv24596)
			}
		} else if yyl4596 != len(yyv4596) {
			yyv4596 = yyv4596[:yyl4596]
			yyc4596 = true
		}
		yyj4596 := 0
		for ; yyj4596 < yyrr4596; yyj4596++ {
			yyh4596.ElemContainerState(yyj4596)
			if r.TryDecodeAsNil() {
				yyv4596[yyj4596] = VolumeMount{}
			} else {
				yyv4597 := &yyv4596[yyj4596]
				yyv4597.CodecDecodeSelf(d)
			}

		}
		if yyrt4596 {
			for ; yyj4596 < yyl4596; yyj4596++ {
				yyv4596 = append(yyv4596, VolumeMount{})
				yyh4596.ElemContainerState(yyj4596)
				if r.TryDecodeAsNil() {
					yyv4596[yyj4596] = VolumeMount{}
				} else {
					yyv4598 := &yyv4596[yyj4596]
					yyv4598.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4596 := 0
		for ; !r.CheckBreak(); yyj4596++ {

			if yyj4596 >= len(yyv4596) {
				yyv4596 = append(yyv4596, VolumeMount{}) // var yyz4596 VolumeMount
				yyc4596 = true
			}
			yyh4596.ElemContainerState(yyj4596)
			if yyj4596 < len(yyv4596) {
				if r.TryDecodeAsNil() {
					yyv4596[yyj4596] = VolumeMount{}
				} else {
					yyv4599 := &yyv4596[yyj4596]
					yyv4599.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4596 < len(yyv4596) {
			yyv4596 = yyv4596[:yyj4596]
			yyc4596 = true
		} else if yyj4596 == 0 && yyv4596 == nil {
			yyv4596 = []VolumeMount{}
			yyc4596 = true
		}
	}
	yyh4596.End()
	if yyc4596 {
		*v = yyv4596
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4600 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4601 := &yyv4600
		yy4601.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4602 := *v
	yyh4602, yyl4602 := z.DecSliceHelperStart()
	var yyc4602 bool
	if yyl4602 == 0 {
		if yyv4602 == nil {
			yyv4602 = []NodeSelectorTerm{}
			yyc4602 = true
		} else if len(yyv4602) != 0 {
			yyv4602 = yyv4602[:0]
			yyc4602 = true
		}
	} else if yyl4602 > 0 {
		var yyrr4602, yyrl4602 int
		var yyrt4602 bool
		if yyl4602 > cap(yyv4602) {

			yyrg4602 := len(yyv4602) > 0
			yyv24602 := yyv4602
			yyrl4602, yyrt4602 = z.DecInferLen(yyl4602, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4602 {
				if yyrl4602 <= cap(yyv4602) {
					yyv4602 = yyv4602[:yyrl4602]
				} else {
					yyv4602 = make([]NodeSelectorTerm, yyrl4602)
				}
			} else {
				yyv4602 = make([]NodeSelectorTerm, yyrl4602)
			}
			yyc4602 = true
			yyrr4602 = len(yyv4602)
			if yyrg4602 {
				copy(yyv4602, yyv24602)
			}
		} else if yyl4602 != len(yyv4602) {
			yyv4602 = yyv4602[:yyl4602]
			yyc4602 = true
		}
		yyj4602 := 0
		for ; yyj4602 < yyrr4602; yyj4602++ {
			yyh4602.ElemContainerState(yyj4602)
			if r.TryDecodeAsNil() {
				yyv4602[yyj4602] = NodeSelectorTerm{}
			} else {
				yyv4603 := &yyv4602[yyj4602]
				yyv4603.CodecDecodeSelf(d)
			}

		}
		if yyrt4602 {
			for ; yyj4602 < yyl4602; yyj4602++ {
				yyv4602 = append(yyv4602, NodeSelectorTerm{})
				yyh4602.ElemContainerState(yyj4602)
				if r.TryDecodeAsNil() {
					yyv4602[yyj4602] = NodeSelectorTerm{}
				} else {
					yyv4604 := &yyv4602[yyj4602]
					yyv4604.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4602 := 0
		for ; !r.CheckBreak(); yyj4602++ {

			if yyj4602 >= len(yyv4602) {
				yyv4602 = append(yyv4602, NodeSelectorTerm{}) // var yyz4602 NodeSelectorTerm
				yyc4602 = true
			}
			yyh4602.ElemContainerState(yyj4602)
			if yyj4602 < len(yyv4602) {
				if r.TryDecodeAsNil() {
					yyv4602[yyj4602] = NodeSelectorTerm{}
				} else {
					yyv4605 := &yyv4602[yyj4602]
					yyv4605.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4602 < len(yyv4602) {
			yyv4602 = yyv4602[:yyj4602]
			yyc4602 = true
		} else if yyj4602 == 0 && yyv4602 == nil {
			yyv4602 = []NodeSelectorTerm{}
			yyc4602 = true
		}
	}
	yyh4602.End()
	if yyc4602 {
		*v = yyv4602
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4606 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4607 := &yyv4606
		yy4607.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4608 := *v
	yyh4608, yyl4608 := z.DecSliceHelperStart()
	var yyc4608 bool
	if yyl4608 == 0 {
		if yyv4608 == nil {
			yyv4608 = []NodeSelectorRequirement{}
			yyc4608 = true
		} else if len(yyv4608) != 0 {
			yyv4608 = yyv4608[:0]
			yyc4608 = true
		}
	} else if yyl4608 > 0 {
		var yyrr4608, yyrl4608 int
		var yyrt4608 bool
		if yyl4608 > cap(yyv4608) {

			yyrg4608 := len(yyv4608) > 0
			yyv24608 := yyv4608
			yyrl4608, yyrt4608 = z.DecInferLen(yyl4608, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4608 {
				if yyrl4608 <= cap(yyv4608) {
					yyv4608 = yyv4608[:yyrl4608]
				} else {
					yyv4608 = make([]NodeSelectorRequirement, yyrl4608)
				}
			} else {
				yyv4608 = make([]NodeSelectorRequirement, yyrl4608)
			}
			yyc4608 = true
			yyrr4608 = len(yyv4608)
			if yyrg4608 {
				copy(yyv4608, yyv24608)
			}
		} else if yyl4608 != len(yyv4608) {
			yyv4608 = yyv4608[:yyl4608]
			yyc4608 = true
		}
		yyj4608 := 0
		for ; yyj4608 < yyrr4608; yyj4608++ {
			yyh4608.ElemContainerState(yyj4608)
			if r.TryDecodeAsNil() {
				yyv4608[yyj4608] = NodeSelectorRequirement{}
			} else {
				yyv4609 := &yyv4608[yyj4608]
				yyv4609.CodecDecodeSelf(d)
			}

		}
		if yyrt4608 {
			for ; yyj4608 < yyl4608; yyj4608++ {
				yyv4608 = append(yyv4608, NodeSelectorRequirement{})
				yyh4608.ElemContainerState(yyj4608)
				if r.TryDecodeAsNil() {
					yyv4608[yyj4608] = NodeSelectorRequirement{}
				} else {
					yyv4610 := &yyv4608[yyj4608]
					yyv4610.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4608 := 0
		for ; !r.CheckBreak(); yyj4608++ {

			if yyj4608 >= len(yyv4608) {
				yyv4608 = append(yyv4608, NodeSelectorRequirement{}) // var yyz4608 NodeSelectorRequirement
				yyc4608 = true
			}
			yyh4608.ElemContainerState(yyj4608)
			if yyj4608 < len(yyv4608) {
				if r.TryDecodeAsNil() {
					yyv4608[yyj4608] = NodeSelectorRequirement{}
				} else {
					yyv4611 := &yyv4608[yyj4608]
					yyv4611.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4608 < len(yyv4608) {
			yyv4608 = yyv4608[:yyj4608]
			yyc4608 = true
		} else if yyj4608 == 0 && yyv4608 == nil {
			yyv4608 = []NodeSelectorRequirement{}
			yyc4608 = true
		}
	}
	yyh4608.End()
	if yyc4608 {
		*v = yyv4608
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4612 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4613 := &yyv4612
		yy4613.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4614 := *v
	yyh4614, yyl4614 := z.DecSliceHelperStart()
	var yyc4614 bool
	if yyl4614 == 0 {
		if yyv4614 == nil {
			yyv4614 = []PodAffinityTerm{}
			yyc4614 = true
		} else if len(yyv4614) != 0 {
			yyv4614 = yyv4614[:0]
			yyc4614 = true
		}
	} else if yyl4614 > 0 {
		var yyrr4614, yyrl4614 int
		var yyrt4614 bool
		if yyl4614 > cap(yyv4614) {

			yyrg4614 := len(yyv4614) > 0
			yyv24614 := yyv4614
			yyrl4614, yyrt4614 = z.DecInferLen(yyl4614, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4614 {
				if yyrl4614 <= cap(yyv4614) {
					yyv4614 = yyv4614[:yyrl4614]
				} else {
					yyv4614 = make([]PodAffinityTerm, yyrl4614)
				}
			} else {
				yyv4614 = make([]PodAffinityTerm, yyrl4614)
			}
			yyc4614 = true
			yyrr4614 = len(yyv4614)
			if yyrg4614 {
				copy(yyv4614, yyv24614)
			}
		} else if yyl4614 != len(yyv4614) {
			yyv4614 = yyv4614[:yyl4614]
			yyc4614 = true
		}
		yyj4614 := 0
		for ; yyj4614 < yyrr4614; yyj4614++ {
			yyh4614.ElemContainerState(yyj4614)
			if r.TryDecodeAsNil() {
				yyv4614[yyj4614] = PodAffinityTerm{}
			} else {
				yyv4615 := &yyv4614[yyj4614]
				yyv4615.CodecDecodeSelf(d)
			}

		}
		if yyrt4614 {
			for ; yyj4614 < yyl4614; yyj4614++ {
				yyv4614 = append(yyv4614, PodAffinityTerm{})
				yyh4614.ElemContainerState(yyj4614)
				if r.TryDecodeAsNil() {
					yyv4614[yyj4614] = PodAffinityTerm{}
				} else {
					yyv4616 := &yyv4614[yyj4614]
					yyv4616.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4614 := 0
		for ; !r.CheckBreak(); yyj4614++ {

			if yyj4614 >= len(yyv4614) {
				yyv4614 = append(yyv4614, PodAffinityTerm{}) // var yyz4614 PodAffinityTerm
				yyc4614 = true
			}
			yyh4614.ElemContainerState(yyj4614)
			if yyj4614 < len(yyv4614) {
				if r.TryDecodeAsNil() {
					yyv4614[yyj4614] = PodAffinityTerm{}
				} else {
					yyv4617 := &yyv4614[yyj4614]
					yyv4617.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4614 < len(yyv4614) {
			yyv4614 = yyv4614[:yyj4614]
			yyc4614 = true
		} else if yyj4614 == 0 && yyv4614 == nil {
			yyv4614 = []PodAffinityTerm{}
			yyc4614 = true
		}
	}
	yyh4614.End()
	if yyc4614 {
		*v = yyv4614
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4618 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4619 := &yyv4618
		yy4619.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4620 := *v
	yyh4620, yyl4620 := z.DecSliceHelperStart()
	var yyc4620 bool
	if yyl4620 == 0 {
		if yyv4620 == nil {
			yyv4620 = []WeightedPodAffinityTerm{}
			yyc4620 = true
		} else if len(yyv4620) != 0 {
			yyv4620 = yyv4620[:0]
			yyc4620 = true
		}
	} else if yyl4620 > 0 {
		var yyrr4620, yyrl4620 int
		var yyrt4620 bool
		if yyl4620 > cap(yyv4620) {

			yyrg4620 := len(yyv4620) > 0
			yyv24620 := yyv4620
			yyrl4620, yyrt4620 = z.DecInferLen(yyl4620, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4620 {
				if yyrl4620 <= cap(yyv4620) {
					yyv4620 = yyv4620[:yyrl4620]
				} else {
					yyv4620 = make([]WeightedPodAffinityTerm, yyrl4620)
				}
			} else {
				yyv4620 = make([]WeightedPodAffinityTerm, yyrl4620)
			}
			yyc4620 = true
			yyrr4620 = len(yyv4620)
			if yyrg4620 {
				copy(yyv4620, yyv24620)
			}
		} else if yyl4620 != len(yyv4620) {
			yyv4620 = yyv4620[:yyl4620]
			yyc4620 = true
		}
		yyj4620 := 0
		for ; yyj4620 < yyrr4620; yyj4620++ {
			yyh4620.ElemContainerState(yyj4620)
			if r.TryDecodeAsNil() {
				yyv4620[yyj4620] = WeightedPodAffinityTerm{}
			} else {
				yyv4621 := &yyv4620[yyj4620]
				yyv4621.CodecDecodeSelf(d)
			}

		}
		if yyrt4620 {
			for ; yyj4620 < yyl4620; yyj4620++ {
				yyv4620 = append(yyv4620, WeightedPodAffinityTerm{})
				yyh4620.ElemContainerState(yyj4620)
				if r.TryDecodeAsNil() {
					yyv4620[yyj4620] = WeightedPodAffinityTerm{}
				} else {
					yyv4622 := &yyv4620[yyj4620]
					yyv4622.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4620 := 0
		for ; !r.CheckBreak(); yyj4620++ {

			if yyj4620 >= len(yyv4620) {
				yyv4620 = append(yyv4620, WeightedPodAffinityTerm{}) // var yyz4620 WeightedPodAffinityTerm
				yyc4620 = true
			}
			yyh4620.ElemContainerState(yyj4620)
			if yyj4620 < len(yyv4620) {
				if r.TryDecodeAsNil() {
					yyv4620[yyj4620] = WeightedPodAffinityTerm{}
				} else {
					yyv4623 := &yyv4620[yyj4620]
					yyv4623.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4620 < len(yyv4620) {
			yyv4620 = yyv4620[:yyj4620]
			yyc4620 = true
		} else if yyj4620 == 0 && yyv4620 == nil {
			yyv4620 = []WeightedPodAffinityTerm{}
			yyc4620 = true
		}
	}
	yyh4620.End()
	if yyc4620 {
		*v = yyv4620
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4624 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4625 := &yyv4624
		yy4625.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4626 := *v
	yyh4626, yyl4626 := z.DecSliceHelperStart()
	var yyc4626 bool
	if yyl4626 == 0 {
		if yyv4626 == nil {
			yyv4626 = []PreferredSchedulingTerm{}
			yyc4626 = true
		} else if len(yyv4626) != 0 {
			yyv4626 = yyv4626[:0]
			yyc4626 = true
		}
	} else if yyl4626 > 0 {
		var yyrr4626, yyrl4626 int
		var yyrt4626 bool
		if yyl4626 > cap(yyv4626) {

			yyrg4626 := len(yyv4626) > 0
			yyv24626 := yyv4626
			yyrl4626, yyrt4626 = z.DecInferLen(yyl4626, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4626 {
				if yyrl4626 <= cap(yyv4626) {
					yyv4626 = yyv4626[:yyrl4626]
				} else {
					yyv4626 = make([]PreferredSchedulingTerm, yyrl4626)
				}
			} else {
				yyv4626 = make([]PreferredSchedulingTerm, yyrl4626)
			}
			yyc4626 = true
			yyrr4626 = len(yyv4626)
			if yyrg4626 {
				copy(yyv4626, yyv24626)
			}
		} else if yyl4626 != len(yyv4626) {
			yyv4626 = yyv4626[:yyl4626]
			yyc4626 = true
		}
		yyj4626 := 0
		for ; yyj4626 < yyrr4626; yyj4626++ {
			yyh4626.ElemContainerState(yyj4626)
			if r.TryDecodeAsNil() {
				yyv4626[yyj4626] = PreferredSchedulingTerm{}
			} else {
				yyv4627 := &yyv4626[yyj4626]
				yyv4627.CodecDecodeSelf(d)
			}

		}
		if yyrt4626 {
			for ; yyj4626 < yyl4626; yyj4626++ {
				yyv4626 = append(yyv4626, PreferredSchedulingTerm{})
				yyh4626.ElemContainerState(yyj4626)
				if r.TryDecodeAsNil() {
					yyv4626[yyj4626] = PreferredSchedulingTerm{}
				} else {
					yyv4628 := &yyv4626[yyj4626]
					yyv4628.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4626 := 0
		for ; !r.CheckBreak(); yyj4626++ {

			if yyj4626 >= len(yyv4626) {
				yyv4626 = append(yyv4626, PreferredSchedulingTerm{}) // var yyz4626 PreferredSchedulingTerm
				yyc4626 = true
			}
			yyh4626.ElemContainerState(yyj4626)
			if yyj4626 < len(yyv4626) {
				if r.TryDecodeAsNil() {
					yyv4626[yyj4626] = PreferredSchedulingTerm{}
				} else {
					yyv4629 := &yyv4626[yyj4626]
					yyv4629.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4626 < len(yyv4626) {
			yyv4626 = yyv4626[:yyj4626]
			yyc4626 = true
		} else if yyj4626 == 0 && yyv4626 == nil {
			yyv4626 = []PreferredSchedulingTerm{}
			yyc4626 = true
		}
	}
	yyh4626.End()
	if yyc4626 {
		*v = yyv4626
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4630 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4631 := &yyv4630
		yy4631.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4632 := *v
	yyh4632, yyl4632 := z.DecSliceHelperStart()
	var yyc4632 bool
	if yyl4632 == 0 {
		if yyv4632 == nil {
			yyv4632 = []Volume{}
			yyc4632 = true
		} else if len(yyv4632) != 0 {
			yyv4632 = yyv4632[:0]
			yyc4632 = true
		}
	} else if yyl4632 > 0 {
		var yyrr4632, yyrl4632 int
		var yyrt4632 bool
		if yyl4632 > cap(yyv4632) {

			yyrg4632 := len(yyv4632) > 0
			yyv24632 := yyv4632
			yyrl4632, yyrt4632 = z.DecInferLen(yyl4632, z.DecBasicHandle().MaxInitLen, 192)
			if yyrt4632 {
				if yyrl4632 <= cap(yyv4632) {
					yyv4632 = yyv4632[:yyrl4632]
				} else {
					yyv4632 = make([]Volume, yyrl4632)
				}
			} else {
				yyv4632 = make([]Volume, yyrl4632)
			}
			yyc4632 = true
			yyrr4632 = len(yyv4632)
			if yyrg4632 {
				copy(yyv4632, yyv24632)
			}
		} else if yyl4632 != len(yyv4632) {
			yyv4632 = yyv4632[:yyl4632]
			yyc4632 = true
		}
		yyj4632 := 0
		for ; yyj4632 < yyrr4632; yyj4632++ {
			yyh4632.ElemContainerState(yyj4632)
			if r.TryDecodeAsNil() {
				yyv4632[yyj4632] = Volume{}
			} else {
				yyv4633 := &yyv4632[yyj4632]
				yyv4633.CodecDecodeSelf(d)
			}

		}
		if yyrt4632 {
			for ; yyj4632 < yyl4632; yyj4632++ {
				yyv4632 = append(yyv4632, Volume{})
				yyh4632.ElemContainerState(yyj4632)
				if r.TryDecodeAsNil() {
					yyv4632[yyj4632] = Volume{}
				} else {
					yyv4634 := &yyv4632[yyj4632]
					yyv4634.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4632 := 0
		for ; !r.CheckBreak(); yyj4632++ {

			if yyj4632 >= len(yyv4632) {
				yyv4632 = append(yyv4632, Volume{}) // var yyz4632 Volume
				yyc4632 = true
			}
			yyh4632.ElemContainerState(yyj4632)
			if yyj4632 < len(yyv4632) {
				if r.TryDecodeAsNil() {
					yyv4632[yyj4632] = Volume{}
				} else {
					yyv4635 := &yyv4632[yyj4632]
					yyv4635.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4632 < len(yyv4632) {
			yyv4632 = yyv4632[:yyj4632]
			yyc4632 = true
		} else if yyj4632 == 0 && yyv4632 == nil {
			yyv4632 = []Volume{}
			yyc4632 = true
		}
	}
	yyh4632.End()
	if yyc4632 {
		*v = yyv4632
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4636 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4637 := &yyv4636
		yy4637.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4638 := *v
	yyh4638, yyl4638 := z.DecSliceHelperStart()
	var yyc4638 bool
	if yyl4638 == 0 {
		if yyv4638 == nil {
			yyv4638 = []Container{}
			yyc4638 = true
		} else if len(yyv4638) != 0 {
			yyv4638 = yyv4638[:0]
			yyc4638 = true
		}
	} else if yyl4638 > 0 {
		var yyrr4638, yyrl4638 int
		var yyrt4638 bool
		if yyl4638 > cap(yyv4638) {

			yyrg4638 := len(yyv4638) > 0
			yyv24638 := yyv4638
			yyrl4638, yyrt4638 = z.DecInferLen(yyl4638, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4638 {
				if yyrl4638 <= cap(yyv4638) {
					yyv4638 = yyv4638[:yyrl4638]
				} else {
					yyv4638 = make([]Container, yyrl4638)
				}
			} else {
				yyv4638 = make([]Container, yyrl4638)
			}
			yyc4638 = true
			yyrr4638 = len(yyv4638)
			if yyrg4638 {
				copy(yyv4638, yyv24638)
			}
		} else if yyl4638 != len(yyv4638) {
			yyv4638 = yyv4638[:yyl4638]
			yyc4638 = true
		}
		yyj4638 := 0
		for ; yyj4638 < yyrr4638; yyj4638++ {
			yyh4638.ElemContainerState(yyj4638)
			if r.TryDecodeAsNil() {
				yyv4638[yyj4638] = Container{}
			} else {
				yyv4639 := &yyv4638[yyj4638]
				yyv4639.CodecDecodeSelf(d)
			}

		}
		if yyrt4638 {
			for ; yyj4638 < yyl4638; yyj4638++ {
				yyv4638 = append(yyv4638, Container{})
				yyh4638.ElemContainerState(yyj4638)
				if r.TryDecodeAsNil() {
					yyv4638[yyj4638] = Container{}
				} else {
					yyv4640 := &yyv4638[yyj4638]
					yyv4640.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4638 := 0
		for ; !r.CheckBreak(); yyj4638++ {

			if yyj4638 >= len(yyv4638) {
				yyv4638 = append(yyv4638, Container{}) // var yyz4638 Container
				yyc4638 = true
			}
			yyh4638.ElemContainerState(yyj4638)
			if yyj4638 < len(yyv4638) {
				if r.TryDecodeAsNil() {
					yyv4638[yyj4638] = Container{}
				} else {
					yyv4641 := &yyv4638[yyj4638]
					yyv4641.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4638 < len(yyv4638) {
			yyv4638 = yyv4638[:yyj4638]
			yyc4638 = true
		} else if yyj4638 == 0 && yyv4638 == nil {
			yyv4638 = []Container{}
			yyc4638 = true
		}
	}
	yyh4638.End()
	if yyc4638 {
		*v = yyv4638
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4642 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4643 := &yyv4642
		yy4643.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4644 := *v
	yyh4644, yyl4644 := z.DecSliceHelperStart()
	var yyc4644 bool
	if yyl4644 == 0 {
		if yyv4644 == nil {
			yyv4644 = []LocalObjectReference{}
			yyc4644 = true
		} else if len(yyv4644) != 0 {
			yyv4644 = yyv4644[:0]
			yyc4644 = true
		}
	} else if yyl4644 > 0 {
		var yyrr4644, yyrl4644 int
		var yyrt4644 bool
		if yyl4644 > cap(yyv4644) {

			yyrg4644 := len(yyv4644) > 0
			yyv24644 := yyv4644
			yyrl4644, yyrt4644 = z.DecInferLen(yyl4644, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4644 {
				if yyrl4644 <= cap(yyv4644) {
					yyv4644 = yyv4644[:yyrl4644]
				} else {
					yyv4644 = make([]LocalObjectReference, yyrl4644)
				}
			} else {
				yyv4644 = make([]LocalObjectReference, yyrl4644)
			}
			yyc4644 = true
			yyrr4644 = len(yyv4644)
			if yyrg4644 {
				copy(yyv4644, yyv24644)
			}
		} else if yyl4644 != len(yyv4644) {
			yyv4644 = yyv4644[:yyl4644]
			yyc4644 = true
		}
		yyj4644 := 0
		for ; yyj4644 < yyrr4644; yyj4644++ {
			yyh4644.ElemContainerState(yyj4644)
			if r.TryDecodeAsNil() {
				yyv4644[yyj4644] = LocalObjectReference{}
			} else {
				yyv4645 := &yyv4644[yyj4644]
				yyv4645.CodecDecodeSelf(d)
			}

		}
		if yyrt4644 {
			for ; yyj4644 < yyl4644; yyj4644++ {
				yyv4644 = append(yyv4644, LocalObjectReference{})
				yyh4644.ElemContainerState(yyj4644)
				if r.TryDecodeAsNil() {
					yyv4644[yyj4644] = LocalObjectReference{}
				} else {
					yyv4646 := &yyv4644[yyj4644]
					yyv4646.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4644 := 0
		for ; !r.CheckBreak(); yyj4644++ {

			if yyj4644 >= len(yyv4644) {
				yyv4644 = append(yyv4644, LocalObjectReference{}) // var yyz4644 LocalObjectReference
				yyc4644 = true
			}
			yyh4644.ElemContainerState(yyj4644)
			if yyj4644 < len(yyv4644) {
				if r.TryDecodeAsNil() {
					yyv4644[yyj4644] = LocalObjectReference{}
				} else {
					yyv4647 := &yyv4644[yyj4644]
					yyv4647.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4644 < len(yyv4644) {
			yyv4644 = yyv4644[:yyj4644]
			yyc4644 = true
		} else if yyj4644 == 0 && yyv4644 == nil {
			yyv4644 = []LocalObjectReference{}
			yyc4644 = true
		}
	}
	yyh4644.End()
	if yyc4644 {
		*v = yyv4644
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4648 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4649 := &yyv4648
		yy4649.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4650 := *v
	yyh4650, yyl4650 := z.DecSliceHelperStart()
	var yyc4650 bool
	if yyl4650 == 0 {
		if yyv4650 == nil {
			yyv4650 = []PodCondition{}
			yyc4650 = true
		} else if len(yyv4650) != 0 {
			yyv4650 = yyv4650[:0]
			yyc4650 = true
		}
	} else if yyl4650 > 0 {
		var yyrr4650, yyrl4650 int
		var yyrt4650 bool
		if yyl4650 > cap(yyv4650) {

			yyrg4650 := len(yyv4650) > 0
			yyv24650 := yyv4650
			yyrl4650, yyrt4650 = z.DecInferLen(yyl4650, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4650 {
				if yyrl4650 <= cap(yyv4650) {
					yyv4650 = yyv4650[:yyrl4650]
				} else {
					yyv4650 = make([]PodCondition, yyrl4650)
				}
			} else {
				yyv4650 = make([]PodCondition, yyrl4650)
			}
			yyc4650 = true
			yyrr4650 = len(yyv4650)
			if yyrg4650 {
				copy(yyv4650, yyv24650)
			}
		} else if yyl4650 != len(yyv4650) {
			yyv4650 = yyv4650[:yyl4650]
			yyc4650 = true
		}
		yyj4650 := 0
		for ; yyj4650 < yyrr4650; yyj4650++ {
			yyh4650.ElemContainerState(yyj4650)
			if r.TryDecodeAsNil() {
				yyv4650[yyj4650] = PodCondition{}
			} else {
				yyv4651 := &yyv4650[yyj4650]
				yyv4651.CodecDecodeSelf(d)
			}

		}
		if yyrt4650 {
			for ; yyj4650 < yyl4650; yyj4650++ {
				yyv4650 = append(yyv4650, PodCondition{})
				yyh4650.ElemContainerState(yyj4650)
				if r.TryDecodeAsNil() {
					yyv4650[yyj4650] = PodCondition{}
				} else {
					yyv4652 := &yyv4650[yyj4650]
					yyv4652.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4650 := 0
		for ; !r.CheckBreak(); yyj4650++ {

			if yyj4650 >= len(yyv4650) {
				yyv4650 = append(yyv4650, PodCondition{}) // var yyz4650 PodCondition
				yyc4650 = true
			}
			yyh4650.ElemContainerState(yyj4650)
			if yyj4650 < len(yyv4650) {
				if r.TryDecodeAsNil() {
					yyv4650[yyj4650] = PodCondition{}
				} else {
					yyv4653 := &yyv4650[yyj4650]
					yyv4653.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4650 < len(yyv4650) {
			yyv4650 = yyv4650[:yyj4650]
			yyc4650 = true
		} else if yyj4650 == 0 && yyv4650 == nil {
			yyv4650 = []PodCondition{}
			yyc4650 = true
		}
	}
	yyh4650.End()
	if yyc4650 {
		*v = yyv4650
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4654 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4655 := &yyv4654
		yy4655.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4656 := *v
	yyh4656, yyl4656 := z.DecSliceHelperStart()
	var yyc4656 bool
	if yyl4656 == 0 {
		if yyv4656 == nil {
			yyv4656 = []ContainerStatus{}
			yyc4656 = true
		} else if len(yyv4656) != 0 {
			yyv4656 = yyv4656[:0]
			yyc4656 = true
		}
	} else if yyl4656 > 0 {
		var yyrr4656, yyrl4656 int
		var yyrt4656 bool
		if yyl4656 > cap(yyv4656) {

			yyrg4656 := len(yyv4656) > 0
			yyv24656 := yyv4656
			yyrl4656, yyrt4656 = z.DecInferLen(yyl4656, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4656 {
				if yyrl4656 <= cap(yyv4656) {
					yyv4656 = yyv4656[:yyrl4656]
				} else {
					yyv4656 = make([]ContainerStatus, yyrl4656)
				}
			} else {
				yyv4656 = make([]ContainerStatus, yyrl4656)
			}
			yyc4656 = true
			yyrr4656 = len(yyv4656)
			if yyrg4656 {
				copy(yyv4656, yyv24656)
			}
		} else if yyl4656 != len(yyv4656) {
			yyv4656 = yyv4656[:yyl4656]
			yyc4656 = true
		}
		yyj4656 := 0
		for ; yyj4656 < yyrr4656; yyj4656++ {
			yyh4656.ElemContainerState(yyj4656)
			if r.TryDecodeAsNil() {
				yyv4656[yyj4656] = ContainerStatus{}
			} else {
				yyv4657 := &yyv4656[yyj4656]
				yyv4657.CodecDecodeSelf(d)
			}

		}
		if yyrt4656 {
			for ; yyj4656 < yyl4656; yyj4656++ {
				yyv4656 = append(yyv4656, ContainerStatus{})
				yyh4656.ElemContainerState(yyj4656)
				if r.TryDecodeAsNil() {
					yyv4656[yyj4656] = ContainerStatus{}
				} else {
					yyv4658 := &yyv4656[yyj4656]
					yyv4658.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4656 := 0
		for ; !r.CheckBreak(); yyj4656++ {

			if yyj4656 >= len(yyv4656) {
				yyv4656 = append(yyv4656, ContainerStatus{}) // var yyz4656 ContainerStatus
				yyc4656 = true
			}
			yyh4656.ElemContainerState(yyj4656)
			if yyj4656 < len(yyv4656) {
				if r.TryDecodeAsNil() {
					yyv4656[yyj4656] = ContainerStatus{}
				} else {
					yyv4659 := &yyv4656[yyj4656]
					yyv4659.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4656 < len(yyv4656) {
			yyv4656 = yyv4656[:yyj4656]
			yyc4656 = true
		} else if yyj4656 == 0 && yyv4656 == nil {
			yyv4656 = []ContainerStatus{}
			yyc4656 = true
		}
	}
	yyh4656.End()
	if yyc4656 {
		*v = yyv4656
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4660 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4661 := &yyv4660
		yy4661.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4662 := *v
	yyh4662, yyl4662 := z.DecSliceHelperStart()
	var yyc4662 bool
	if yyl4662 == 0 {
		if yyv4662 == nil {
			yyv4662 = []Pod{}
			yyc4662 = true
		} else if len(yyv4662) != 0 {
			yyv4662 = yyv4662[:0]
			yyc4662 = true
		}
	} else if yyl4662 > 0 {
		var yyrr4662, yyrl4662 int
		var yyrt4662 bool
		if yyl4662 > cap(yyv4662) {

			yyrg4662 := len(yyv4662) > 0
			yyv24662 := yyv4662
			yyrl4662, yyrt4662 = z.DecInferLen(yyl4662, z.DecBasicHandle().MaxInitLen, 664)
			if yyrt4662 {
				if yyrl4662 <= cap(yyv4662) {
					yyv4662 = yyv4662[:yyrl4662]
				} else {
					yyv4662 = make([]Pod, yyrl4662)
				}
			} else {
				yyv4662 = make([]Pod, yyrl4662)
			}
			yyc4662 = true
			yyrr4662 = len(yyv4662)
			if yyrg4662 {
				copy(yyv4662, yyv24662)
			}
		} else if yyl4662 != len(yyv4662) {
			yyv4662 = yyv4662[:yyl4662]
			yyc4662 = true
		}
		yyj4662 := 0
		for ; yyj4662 < yyrr4662; yyj4662++ {
			yyh4662.ElemContainerState(yyj4662)
			if r.TryDecodeAsNil() {
				yyv4662[yyj4662] = Pod{}
			} else {
				yyv4663 := &yyv4662[yyj4662]
				yyv4663.CodecDecodeSelf(d)
			}

		}
		if yyrt4662 {
			for ; yyj4662 < yyl4662; yyj4662++ {
				yyv4662 = append(yyv4662, Pod{})
				yyh4662.ElemContainerState(yyj4662)
				if r.TryDecodeAsNil() {
					yyv4662[yyj4662] = Pod{}
				} else {
					yyv4664 := &yyv4662[yyj4662]
					yyv4664.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4662 := 0
		for ; !r.CheckBreak(); yyj4662++ {

			if yyj4662 >= len(yyv4662) {
				yyv4662 = append(yyv4662, Pod{}) // var yyz4662 Pod
				yyc4662 = true
			}
			yyh4662.ElemContainerState(yyj4662)
			if yyj4662 < len(yyv4662) {
				if r.TryDecodeAsNil() {
					yyv4662[yyj4662] = Pod{}
				} else {
					yyv4665 := &yyv4662[yyj4662]
					yyv4665.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4662 < len(yyv4662) {
			yyv4662 = yyv4662[:yyj4662]
			yyc4662 = true
		} else if yyj4662 == 0 && yyv4662 == nil {
			yyv4662 = []Pod{}
			yyc4662 = true
		}
	}
	yyh4662.End()
	if yyc4662 {
		*v = yyv4662
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4666 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4667 := &yyv4666
		yy4667.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4668 := *v
	yyh4668, yyl4668 := z.DecSliceHelperStart()
	var yyc4668 bool
	if yyl4668 == 0 {
		if yyv4668 == nil {
			yyv4668 = []PodTemplate{}
			yyc4668 = true
		} else if len(yyv4668) != 0 {
			yyv4668 = yyv4668[:0]
			yyc4668 = true
		}
	} else if yyl4668 > 0 {
		var yyrr4668, yyrl4668 int
		var yyrt4668 bool
		if yyl4668 > cap(yyv4668) {

			yyrg4668 := len(yyv4668) > 0
			yyv24668 := yyv4668
			yyrl4668, yyrt4668 = z.DecInferLen(yyl4668, z.DecBasicHandle().MaxInitLen, 728)
			if yyrt4668 {
				if yyrl4668 <= cap(yyv4668) {
					yyv4668 = yyv4668[:yyrl4668]
				} else {
					yyv4668 = make([]PodTemplate, yyrl4668)
				}
			} else {
				yyv4668 = make([]PodTemplate, yyrl4668)
			}
			yyc4668 = true
			yyrr4668 = len(yyv4668)
			if yyrg4668 {
				copy(yyv4668, yyv24668)
			}
		} else if yyl4668 != len(yyv4668) {
			yyv4668 = yyv4668[:yyl4668]
			yyc4668 = true
		}
		yyj4668 := 0
		for ; yyj4668 < yyrr4668; yyj4668++ {
			yyh4668.ElemContainerState(yyj4668)
			if r.TryDecodeAsNil() {
				yyv4668[yyj4668] = PodTemplate{}
			} else {
				yyv4669 := &yyv4668[yyj4668]
				yyv4669.CodecDecodeSelf(d)
			}

		}
		if yyrt4668 {
			for ; yyj4668 < yyl4668; yyj4668++ {
				yyv4668 = append(yyv4668, PodTemplate{})
				yyh4668.ElemContainerState(yyj4668)
				if r.TryDecodeAsNil() {
					yyv4668[yyj4668] = PodTemplate{}
				} else {
					yyv4670 := &yyv4668[yyj4668]
					yyv4670.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4668 := 0
		for ; !r.CheckBreak(); yyj4668++ {

			if yyj4668 >= len(yyv4668) {
				yyv4668 = append(yyv4668, PodTemplate{}) // var yyz4668 PodTemplate
				yyc4668 = true
			}
			yyh4668.ElemContainerState(yyj4668)
			if yyj4668 < len(yyv4668) {
				if r.TryDecodeAsNil() {
					yyv4668[yyj4668] = PodTemplate{}
				} else {
					yyv4671 := &yyv4668[yyj4668]
					yyv4671.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4668 < len(yyv4668) {
			yyv4668 = yyv4668[:yyj4668]
			yyc4668 = true
		} else if yyj4668 == 0 && yyv4668 == nil {
			yyv4668 = []PodTemplate{}
			yyc4668 = true
		}
	}
	yyh4668.End()
	if yyc4668 {
		*v = yyv4668
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4672 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4673 := &yyv4672
		yy4673.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4674 := *v
	yyh4674, yyl4674 := z.DecSliceHelperStart()
	var yyc4674 bool
	if yyl4674 == 0 {
		if yyv4674 == nil {
			yyv4674 = []ReplicationController{}
			yyc4674 = true
		} else if len(yyv4674) != 0 {
			yyv4674 = yyv4674[:0]
			yyc4674 = true
		}
	} else if yyl4674 > 0 {
		var yyrr4674, yyrl4674 int
		var yyrt4674 bool
		if yyl4674 > cap(yyv4674) {

			yyrg4674 := len(yyv4674) > 0
			yyv24674 := yyv4674
			yyrl4674, yyrt4674 = z.DecInferLen(yyl4674, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt4674 {
				if yyrl4674 <= cap(yyv4674) {
					yyv4674 = yyv4674[:yyrl4674]
				} else {
					yyv4674 = make([]ReplicationController, yyrl4674)
				}
			} else {
				yyv4674 = make([]ReplicationController, yyrl4674)
			}
			yyc4674 = true
			yyrr4674 = len(yyv4674)
			if yyrg4674 {
				copy(yyv4674, yyv24674)
			}
		} else if yyl4674 != len(yyv4674) {
			yyv4674 = yyv4674[:yyl4674]
			yyc4674 = true
		}
		yyj4674 := 0
		for ; yyj4674 < yyrr4674; yyj4674++ {
			yyh4674.ElemContainerState(yyj4674)
			if r.TryDecodeAsNil() {
				yyv4674[yyj4674] = ReplicationController{}
			} else {
				yyv4675 := &yyv4674[yyj4674]
				yyv4675.CodecDecodeSelf(d)
			}

		}
		if yyrt4674 {
			for ; yyj4674 < yyl4674; yyj4674++ {
				yyv4674 = append(yyv4674, ReplicationController{})
				yyh4674.ElemContainerState(yyj4674)
				if r.TryDecodeAsNil() {
					yyv4674[yyj4674] = ReplicationController{}
				} else {
					yyv4676 := &yyv4674[yyj4674]
					yyv4676.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4674 := 0
		for ; !r.CheckBreak(); yyj4674++ {

			if yyj4674 >= len(yyv4674) {
				yyv4674 = append(yyv4674, ReplicationController{}) // var yyz4674 ReplicationController
				yyc4674 = true
			}
			yyh4674.ElemContainerState(yyj4674)
			if yyj4674 < len(yyv4674) {
				if r.TryDecodeAsNil() {
					yyv4674[yyj4674] = ReplicationController{}
				} else {
					yyv4677 := &yyv4674[yyj4674]
					yyv4677.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4674 < len(yyv4674) {
			yyv4674 = yyv4674[:yyj4674]
			yyc4674 = true
		} else if yyj4674 == 0 && yyv4674 == nil {
			yyv4674 = []ReplicationController{}
			yyc4674 = true
		}
	}
	yyh4674.End()
	if yyc4674 {
		*v = yyv4674
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4678 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4679 := &yyv4678
		yy4679.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4680 := *v
	yyh4680, yyl4680 := z.DecSliceHelperStart()
	var yyc4680 bool
	if yyl4680 == 0 {
		if yyv4680 == nil {
			yyv4680 = []LoadBalancerIngress{}
			yyc4680 = true
		} else if len(yyv4680) != 0 {
			yyv4680 = yyv4680[:0]
			yyc4680 = true
		}
	} else if yyl4680 > 0 {
		var yyrr4680, yyrl4680 int
		var yyrt4680 bool
		if yyl4680 > cap(yyv4680) {

			yyrg4680 := len(yyv4680) > 0
			yyv24680 := yyv4680
			yyrl4680, yyrt4680 = z.DecInferLen(yyl4680, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4680 {
				if yyrl4680 <= cap(yyv4680) {
					yyv4680 = yyv4680[:yyrl4680]
				} else {
					yyv4680 = make([]LoadBalancerIngress, yyrl4680)
				}
			} else {
				yyv4680 = make([]LoadBalancerIngress, yyrl4680)
			}
			yyc4680 = true
			yyrr4680 = len(yyv4680)
			if yyrg4680 {
				copy(yyv4680, yyv24680)
			}
		} else if yyl4680 != len(yyv4680) {
			yyv4680 = yyv4680[:yyl4680]
			yyc4680 = true
		}
		yyj4680 := 0
		for ; yyj4680 < yyrr4680; yyj4680++ {
			yyh4680.ElemContainerState(yyj4680)
			if r.TryDecodeAsNil() {
				yyv4680[yyj4680] = LoadBalancerIngress{}
			} else {
				yyv4681 := &yyv4680[yyj4680]
				yyv4681.CodecDecodeSelf(d)
			}

		}
		if yyrt4680 {
			for ; yyj4680 < yyl4680; yyj4680++ {
				yyv4680 = append(yyv4680, LoadBalancerIngress{})
				yyh4680.ElemContainerState(yyj4680)
				if r.TryDecodeAsNil() {
					yyv4680[yyj4680] = LoadBalancerIngress{}
				} else {
					yyv4682 := &yyv4680[yyj4680]
					yyv4682.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4680 := 0
		for ; !r.CheckBreak(); yyj4680++ {

			if yyj4680 >= len(yyv4680) {
				yyv4680 = append(yyv4680, LoadBalancerIngress{}) // var yyz4680 LoadBalancerIngress
				yyc4680 = true
			}
			yyh4680.ElemContainerState(yyj4680)
			if yyj4680 < len(yyv4680) {
				if r.TryDecodeAsNil() {
					yyv4680[yyj4680] = LoadBalancerIngress{}
				} else {
					yyv4683 := &yyv4680[yyj4680]
					yyv4683.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4680 < len(yyv4680) {
			yyv4680 = yyv4680[:yyj4680]
			yyc4680 = true
		} else if yyj4680 == 0 && yyv4680 == nil {
			yyv4680 = []LoadBalancerIngress{}
			yyc4680 = true
		}
	}
	yyh4680.End()
	if yyc4680 {
		*v = yyv4680
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4684 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4685 := &yyv4684
		yy4685.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4686 := *v
	yyh4686, yyl4686 := z.DecSliceHelperStart()
	var yyc4686 bool
	if yyl4686 == 0 {
		if yyv4686 == nil {
			yyv4686 = []ServicePort{}
			yyc4686 = true
		} else if len(yyv4686) != 0 {
			yyv4686 = yyv4686[:0]
			yyc4686 = true
		}
	} else if yyl4686 > 0 {
		var yyrr4686, yyrl4686 int
		var yyrt4686 bool
		if yyl4686 > cap(yyv4686) {

			yyrg4686 := len(yyv4686) > 0
			yyv24686 := yyv4686
			yyrl4686, yyrt4686 = z.DecInferLen(yyl4686, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4686 {
				if yyrl4686 <= cap(yyv4686) {
					yyv4686 = yyv4686[:yyrl4686]
				} else {
					yyv4686 = make([]ServicePort, yyrl4686)
				}
			} else {
				yyv4686 = make([]ServicePort, yyrl4686)
			}
			yyc4686 = true
			yyrr4686 = len(yyv4686)
			if yyrg4686 {
				copy(yyv4686, yyv24686)
			}
		} else if yyl4686 != len(yyv4686) {
			yyv4686 = yyv4686[:yyl4686]
			yyc4686 = true
		}
		yyj4686 := 0
		for ; yyj4686 < yyrr4686; yyj4686++ {
			yyh4686.ElemContainerState(yyj4686)
			if r.TryDecodeAsNil() {
				yyv4686[yyj4686] = ServicePort{}
			} else {
				yyv4687 := &yyv4686[yyj4686]
				yyv4687.CodecDecodeSelf(d)
			}

		}
		if yyrt4686 {
			for ; yyj4686 < yyl4686; yyj4686++ {
				yyv4686 = append(yyv4686, ServicePort{})
				yyh4686.ElemContainerState(yyj4686)
				if r.TryDecodeAsNil() {
					yyv4686[yyj4686] = ServicePort{}
				} else {
					yyv4688 := &yyv4686[yyj4686]
					yyv4688.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4686 := 0
		for ; !r.CheckBreak(); yyj4686++ {

			if yyj4686 >= len(yyv4686) {
				yyv4686 = append(yyv4686, ServicePort{}) // var yyz4686 ServicePort
				yyc4686 = true
			}
			yyh4686.ElemContainerState(yyj4686)
			if yyj4686 < len(yyv4686) {
				if r.TryDecodeAsNil() {
					yyv4686[yyj4686] = ServicePort{}
				} else {
					yyv4689 := &yyv4686[yyj4686]
					yyv4689.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4686 < len(yyv4686) {
			yyv4686 = yyv4686[:yyj4686]
			yyc4686 = true
		} else if yyj4686 == 0 && yyv4686 == nil {
			yyv4686 = []ServicePort{}
			yyc4686 = true
		}
	}
	yyh4686.End()
	if yyc4686 {
		*v = yyv4686
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4690 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4691 := &yyv4690
		yy4691.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4692 := *v
	yyh4692, yyl4692 := z.DecSliceHelperStart()
	var yyc4692 bool
	if yyl4692 == 0 {
		if yyv4692 == nil {
			yyv4692 = []Service{}
			yyc4692 = true
		} else if len(yyv4692) != 0 {
			yyv4692 = yyv4692[:0]
			yyc4692 = true
		}
	} else if yyl4692 > 0 {
		var yyrr4692, yyrl4692 int
		var yyrt4692 bool
		if yyl4692 > cap(yyv4692) {

			yyrg4692 := len(yyv4692) > 0
			yyv24692 := yyv4692
			yyrl4692, yyrt4692 = z.DecInferLen(yyl4692, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4692 {
				if yyrl4692 <= cap(yyv4692) {
					yyv4692 = yyv4692[:yyrl4692]
				} else {
					yyv4692 = make([]Service, yyrl4692)
				}
			} else {
				yyv4692 = make([]Service, yyrl4692)
			}
			yyc4692 = true
			yyrr4692 = len(yyv4692)
			if yyrg4692 {
				copy(yyv4692, yyv24692)
			}
		} else if yyl4692 != len(yyv4692) {
			yyv4692 = yyv4692[:yyl4692]
			yyc4692 = true
		}
		yyj4692 := 0
		for ; yyj4692 < yyrr4692; yyj4692++ {
			yyh4692.ElemContainerState(yyj4692)
			if r.TryDecodeAsNil() {
				yyv4692[yyj4692] = Service{}
			} else {
				yyv4693 := &yyv4692[yyj4692]
				yyv4693.CodecDecodeSelf(d)
			}

		}
		if yyrt4692 {
			for ; yyj4692 < yyl4692; yyj4692++ {
				yyv4692 = append(yyv4692, Service{})
				yyh4692.ElemContainerState(yyj4692)
				if r.TryDecodeAsNil() {
					yyv4692[yyj4692] = Service{}
				} else {
					yyv4694 := &yyv4692[yyj4692]
					yyv4694.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4692 := 0
		for ; !r.CheckBreak(); yyj4692++ {

			if yyj4692 >= len(yyv4692) {
				yyv4692 = append(yyv4692, Service{}) // var yyz4692 Service
				yyc4692 = true
			}
			yyh4692.ElemContainerState(yyj4692)
			if yyj4692 < len(yyv4692) {
				if r.TryDecodeAsNil() {
					yyv4692[yyj4692] = Service{}
				} else {
					yyv4695 := &yyv4692[yyj4692]
					yyv4695.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4692 < len(yyv4692) {
			yyv4692 = yyv4692[:yyj4692]
			yyc4692 = true
		} else if yyj4692 == 0 && yyv4692 == nil {
			yyv4692 = []Service{}
			yyc4692 = true
		}
	}
	yyh4692.End()
	if yyc4692 {
		*v = yyv4692
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4696 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4697 := &yyv4696
		yy4697.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4698 := *v
	yyh4698, yyl4698 := z.DecSliceHelperStart()
	var yyc4698 bool
	if yyl4698 == 0 {
		if yyv4698 == nil {
			yyv4698 = []ObjectReference{}
			yyc4698 = true
		} else if len(yyv4698) != 0 {
			yyv4698 = yyv4698[:0]
			yyc4698 = true
		}
	} else if yyl4698 > 0 {
		var yyrr4698, yyrl4698 int
		var yyrt4698 bool
		if yyl4698 > cap(yyv4698) {

			yyrg4698 := len(yyv4698) > 0
			yyv24698 := yyv4698
			yyrl4698, yyrt4698 = z.DecInferLen(yyl4698, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4698 {
				if yyrl4698 <= cap(yyv4698) {
					yyv4698 = yyv4698[:yyrl4698]
				} else {
					yyv4698 = make([]ObjectReference, yyrl4698)
				}
			} else {
				yyv4698 = make([]ObjectReference, yyrl4698)
			}
			yyc4698 = true
			yyrr4698 = len(yyv4698)
			if yyrg4698 {
				copy(yyv4698, yyv24698)
			}
		} else if yyl4698 != len(yyv4698) {
			yyv4698 = yyv4698[:yyl4698]
			yyc4698 = true
		}
		yyj4698 := 0
		for ; yyj4698 < yyrr4698; yyj4698++ {
			yyh4698.ElemContainerState(yyj4698)
			if r.TryDecodeAsNil() {
				yyv4698[yyj4698] = ObjectReference{}
			} else {
				yyv4699 := &yyv4698[yyj4698]
				yyv4699.CodecDecodeSelf(d)
			}

		}
		if yyrt4698 {
			for ; yyj4698 < yyl4698; yyj4698++ {
				yyv4698 = append(yyv4698, ObjectReference{})
				yyh4698.ElemContainerState(yyj4698)
				if r.TryDecodeAsNil() {
					yyv4698[yyj4698] = ObjectReference{}
				} else {
					yyv4700 := &yyv4698[yyj4698]
					yyv4700.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4698 := 0
		for ; !r.CheckBreak(); yyj4698++ {

			if yyj4698 >= len(yyv4698) {
				yyv4698 = append(yyv4698, ObjectReference{}) // var yyz4698 ObjectReference
				yyc4698 = true
			}
			yyh4698.ElemContainerState(yyj4698)
			if yyj4698 < len(yyv4698) {
				if r.TryDecodeAsNil() {
					yyv4698[yyj4698] = ObjectReference{}
				} else {
					yyv4701 := &yyv4698[yyj4698]
					yyv4701.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4698 < len(yyv4698) {
			yyv4698 = yyv4698[:yyj4698]
			yyc4698 = true
		} else if yyj4698 == 0 && yyv4698 == nil {
			yyv4698 = []ObjectReference{}
			yyc4698 = true
		}
	}
	yyh4698.End()
	if yyc4698 {
		*v = yyv4698
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4702 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4703 := &yyv4702
		yy4703.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4704 := *v
	yyh4704, yyl4704 := z.DecSliceHelperStart()
	var yyc4704 bool
	if yyl4704 == 0 {
		if yyv4704 == nil {
			yyv4704 = []ServiceAccount{}
			yyc4704 = true
		} else if len(yyv4704) != 0 {
			yyv4704 = yyv4704[:0]
			yyc4704 = true
		}
	} else if yyl4704 > 0 {
		var yyrr4704, yyrl4704 int
		var yyrt4704 bool
		if yyl4704 > cap(yyv4704) {

			yyrg4704 := len(yyv4704) > 0
			yyv24704 := yyv4704
			yyrl4704, yyrt4704 = z.DecInferLen(yyl4704, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4704 {
				if yyrl4704 <= cap(yyv4704) {
					yyv4704 = yyv4704[:yyrl4704]
				} else {
					yyv4704 = make([]ServiceAccount, yyrl4704)
				}
			} else {
				yyv4704 = make([]ServiceAccount, yyrl4704)
			}
			yyc4704 = true
			yyrr4704 = len(yyv4704)
			if yyrg4704 {
				copy(yyv4704, yyv24704)
			}
		} else if yyl4704 != len(yyv4704) {
			yyv4704 = yyv4704[:yyl4704]
			yyc4704 = true
		}
		yyj4704 := 0
		for ; yyj4704 < yyrr4704; yyj4704++ {
			yyh4704.ElemContainerState(yyj4704)
			if r.TryDecodeAsNil() {
				yyv4704[yyj4704] = ServiceAccount{}
			} else {
				yyv4705 := &yyv4704[yyj4704]
				yyv4705.CodecDecodeSelf(d)
			}

		}
		if yyrt4704 {
			for ; yyj4704 < yyl4704; yyj4704++ {
				yyv4704 = append(yyv4704, ServiceAccount{})
				yyh4704.ElemContainerState(yyj4704)
				if r.TryDecodeAsNil() {
					yyv4704[yyj4704] = ServiceAccount{}
				} else {
					yyv4706 := &yyv4704[yyj4704]
					yyv4706.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4704 := 0
		for ; !r.CheckBreak(); yyj4704++ {

			if yyj4704 >= len(yyv4704) {
				yyv4704 = append(yyv4704, ServiceAccount{}) // var yyz4704 ServiceAccount
				yyc4704 = true
			}
			yyh4704.ElemContainerState(yyj4704)
			if yyj4704 < len(yyv4704) {
				if r.TryDecodeAsNil() {
					yyv4704[yyj4704] = ServiceAccount{}
				} else {
					yyv4707 := &yyv4704[yyj4704]
					yyv4707.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4704 < len(yyv4704) {
			yyv4704 = yyv4704[:yyj4704]
			yyc4704 = true
		} else if yyj4704 == 0 && yyv4704 == nil {
			yyv4704 = []ServiceAccount{}
			yyc4704 = true
		}
	}
	yyh4704.End()
	if yyc4704 {
		*v = yyv4704
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4708 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4709 := &yyv4708
		yy4709.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4710 := *v
	yyh4710, yyl4710 := z.DecSliceHelperStart()
	var yyc4710 bool
	if yyl4710 == 0 {
		if yyv4710 == nil {
			yyv4710 = []EndpointSubset{}
			yyc4710 = true
		} else if len(yyv4710) != 0 {
			yyv4710 = yyv4710[:0]
			yyc4710 = true
		}
	} else if yyl4710 > 0 {
		var yyrr4710, yyrl4710 int
		var yyrt4710 bool
		if yyl4710 > cap(yyv4710) {

			yyrg4710 := len(yyv4710) > 0
			yyv24710 := yyv4710
			yyrl4710, yyrt4710 = z.DecInferLen(yyl4710, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4710 {
				if yyrl4710 <= cap(yyv4710) {
					yyv4710 = yyv4710[:yyrl4710]
				} else {
					yyv4710 = make([]EndpointSubset, yyrl4710)
				}
			} else {
				yyv4710 = make([]EndpointSubset, yyrl4710)
			}
			yyc4710 = true
			yyrr4710 = len(yyv4710)
			if yyrg4710 {
				copy(yyv4710, yyv24710)
			}
		} else if yyl4710 != len(yyv4710) {
			yyv4710 = yyv4710[:yyl4710]
			yyc4710 = true
		}
		yyj4710 := 0
		for ; yyj4710 < yyrr4710; yyj4710++ {
			yyh4710.ElemContainerState(yyj4710)
			if r.TryDecodeAsNil() {
				yyv4710[yyj4710] = EndpointSubset{}
			} else {
				yyv4711 := &yyv4710[yyj4710]
				yyv4711.CodecDecodeSelf(d)
			}

		}
		if yyrt4710 {
			for ; yyj4710 < yyl4710; yyj4710++ {
				yyv4710 = append(yyv4710, EndpointSubset{})
				yyh4710.ElemContainerState(yyj4710)
				if r.TryDecodeAsNil() {
					yyv4710[yyj4710] = EndpointSubset{}
				} else {
					yyv4712 := &yyv4710[yyj4710]
					yyv4712.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4710 := 0
		for ; !r.CheckBreak(); yyj4710++ {

			if yyj4710 >= len(yyv4710) {
				yyv4710 = append(yyv4710, EndpointSubset{}) // var yyz4710 EndpointSubset
				yyc4710 = true
			}
			yyh4710.ElemContainerState(yyj4710)
			if yyj4710 < len(yyv4710) {
				if r.TryDecodeAsNil() {
					yyv4710[yyj4710] = EndpointSubset{}
				} else {
					yyv4713 := &yyv4710[yyj4710]
					yyv4713.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4710 < len(yyv4710) {
			yyv4710 = yyv4710[:yyj4710]
			yyc4710 = true
		} else if yyj4710 == 0 && yyv4710 == nil {
			yyv4710 = []EndpointSubset{}
			yyc4710 = true
		}
	}
	yyh4710.End()
	if yyc4710 {
		*v = yyv4710
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4714 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4715 := &yyv4714
		yy4715.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4716 := *v
	yyh4716, yyl4716 := z.DecSliceHelperStart()
	var yyc4716 bool
	if yyl4716 == 0 {
		if yyv4716 == nil {
			yyv4716 = []EndpointAddress{}
			yyc4716 = true
		} else if len(yyv4716) != 0 {
			yyv4716 = yyv4716[:0]
			yyc4716 = true
		}
	} else if yyl4716 > 0 {
		var yyrr4716, yyrl4716 int
		var yyrt4716 bool
		if yyl4716 > cap(yyv4716) {

			yyrg4716 := len(yyv4716) > 0
			yyv24716 := yyv4716
			yyrl4716, yyrt4716 = z.DecInferLen(yyl4716, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4716 {
				if yyrl4716 <= cap(yyv4716) {
					yyv4716 = yyv4716[:yyrl4716]
				} else {
					yyv4716 = make([]EndpointAddress, yyrl4716)
				}
			} else {
				yyv4716 = make([]EndpointAddress, yyrl4716)
			}
			yyc4716 = true
			yyrr4716 = len(yyv4716)
			if yyrg4716 {
				copy(yyv4716, yyv24716)
			}
		} else if yyl4716 != len(yyv4716) {
			yyv4716 = yyv4716[:yyl4716]
			yyc4716 = true
		}
		yyj4716 := 0
		for ; yyj4716 < yyrr4716; yyj4716++ {
			yyh4716.ElemContainerState(yyj4716)
			if r.TryDecodeAsNil() {
				yyv4716[yyj4716] = EndpointAddress{}
			} else {
				yyv4717 := &yyv4716[yyj4716]
				yyv4717.CodecDecodeSelf(d)
			}

		}
		if yyrt4716 {
			for ; yyj4716 < yyl4716; yyj4716++ {
				yyv4716 = append(yyv4716, EndpointAddress{})
				yyh4716.ElemContainerState(yyj4716)
				if r.TryDecodeAsNil() {
					yyv4716[yyj4716] = EndpointAddress{}
				} else {
					yyv4718 := &yyv4716[yyj4716]
					yyv4718.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4716 := 0
		for ; !r.CheckBreak(); yyj4716++ {

			if yyj4716 >= len(yyv4716) {
				yyv4716 = append(yyv4716, EndpointAddress{}) // var yyz4716 EndpointAddress
				yyc4716 = true
			}
			yyh4716.ElemContainerState(yyj4716)
			if yyj4716 < len(yyv4716) {
				if r.TryDecodeAsNil() {
					yyv4716[yyj4716] = EndpointAddress{}
				} else {
					yyv4719 := &yyv4716[yyj4716]
					yyv4719.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4716 < len(yyv4716) {
			yyv4716 = yyv4716[:yyj4716]
			yyc4716 = true
		} else if yyj4716 == 0 && yyv4716 == nil {
			yyv4716 = []EndpointAddress{}
			yyc4716 = true
		}
	}
	yyh4716.End()
	if yyc4716 {
		*v = yyv4716
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4720 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4721 := &yyv4720
		yy4721.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4722 := *v
	yyh4722, yyl4722 := z.DecSliceHelperStart()
	var yyc4722 bool
	if yyl4722 == 0 {
		if yyv4722 == nil {
			yyv4722 = []EndpointPort{}
			yyc4722 = true
		} else if len(yyv4722) != 0 {
			yyv4722 = yyv4722[:0]
			yyc4722 = true
		}
	} else if yyl4722 > 0 {
		var yyrr4722, yyrl4722 int
		var yyrt4722 bool
		if yyl4722 > cap(yyv4722) {

			yyrg4722 := len(yyv4722) > 0
			yyv24722 := yyv4722
			yyrl4722, yyrt4722 = z.DecInferLen(yyl4722, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4722 {
				if yyrl4722 <= cap(yyv4722) {
					yyv4722 = yyv4722[:yyrl4722]
				} else {
					yyv4722 = make([]EndpointPort, yyrl4722)
				}
			} else {
				yyv4722 = make([]EndpointPort, yyrl4722)
			}
			yyc4722 = true
			yyrr4722 = len(yyv4722)
			if yyrg4722 {
				copy(yyv4722, yyv24722)
			}
		} else if yyl4722 != len(yyv4722) {
			yyv4722 = yyv4722[:yyl4722]
			yyc4722 = true
		}
		yyj4722 := 0
		for ; yyj4722 < yyrr4722; yyj4722++ {
			yyh4722.ElemContainerState(yyj4722)
			if r.TryDecodeAsNil() {
				yyv4722[yyj4722] = EndpointPort{}
			} else {
				yyv4723 := &yyv4722[yyj4722]
				yyv4723.CodecDecodeSelf(d)
			}

		}
		if yyrt4722 {
			for ; yyj4722 < yyl4722; yyj4722++ {
				yyv4722 = append(yyv4722, EndpointPort{})
				yyh4722.ElemContainerState(yyj4722)
				if r.TryDecodeAsNil() {
					yyv4722[yyj4722] = EndpointPort{}
				} else {
					yyv4724 := &yyv4722[yyj4722]
					yyv4724.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4722 := 0
		for ; !r.CheckBreak(); yyj4722++ {

			if yyj4722 >= len(yyv4722) {
				yyv4722 = append(yyv4722, EndpointPort{}) // var yyz4722 EndpointPort
				yyc4722 = true
			}
			yyh4722.ElemContainerState(yyj4722)
			if yyj4722 < len(yyv4722) {
				if r.TryDecodeAsNil() {
					yyv4722[yyj4722] = EndpointPort{}
				} else {
					yyv4725 := &yyv4722[yyj4722]
					yyv4725.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4722 < len(yyv4722) {
			yyv4722 = yyv4722[:yyj4722]
			yyc4722 = true
		} else if yyj4722 == 0 && yyv4722 == nil {
			yyv4722 = []EndpointPort{}
			yyc4722 = true
		}
	}
	yyh4722.End()
	if yyc4722 {
		*v = yyv4722
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4726 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4727 := &yyv4726
		yy4727.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4728 := *v
	yyh4728, yyl4728 := z.DecSliceHelperStart()
	var yyc4728 bool
	if yyl4728 == 0 {
		if yyv4728 == nil {
			yyv4728 = []Endpoints{}
			yyc4728 = true
		} else if len(yyv4728) != 0 {
			yyv4728 = yyv4728[:0]
			yyc4728 = true
		}
	} else if yyl4728 > 0 {
		var yyrr4728, yyrl4728 int
		var yyrt4728 bool
		if yyl4728 > cap(yyv4728) {

			yyrg4728 := len(yyv4728) > 0
			yyv24728 := yyv4728
			yyrl4728, yyrt4728 = z.DecInferLen(yyl4728, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4728 {
				if yyrl4728 <= cap(yyv4728) {
					yyv4728 = yyv4728[:yyrl4728]
				} else {
					yyv4728 = make([]Endpoints, yyrl4728)
				}
			} else {
				yyv4728 = make([]Endpoints, yyrl4728)
			}
			yyc4728 = true
			yyrr4728 = len(yyv4728)
			if yyrg4728 {
				copy(yyv4728, yyv24728)
			}
		} else if yyl4728 != len(yyv4728) {
			yyv4728 = yyv4728[:yyl4728]
			yyc4728 = true
		}
		yyj4728 := 0
		for ; yyj4728 < yyrr4728; yyj4728++ {
			yyh4728.ElemContainerState(yyj4728)
			if r.TryDecodeAsNil() {
				yyv4728[yyj4728] = Endpoints{}
			} else {
				yyv4729 := &yyv4728[yyj4728]
				yyv4729.CodecDecodeSelf(d)
			}

		}
		if yyrt4728 {
			for ; yyj4728 < yyl4728; yyj4728++ {
				yyv4728 = append(yyv4728, Endpoints{})
				yyh4728.ElemContainerState(yyj4728)
				if r.TryDecodeAsNil() {
					yyv4728[yyj4728] = Endpoints{}
				} else {
					yyv4730 := &yyv4728[yyj4728]
					yyv4730.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4728 := 0
		for ; !r.CheckBreak(); yyj4728++ {

			if yyj4728 >= len(yyv4728) {
				yyv4728 = append(yyv4728, Endpoints{}) // var yyz4728 Endpoints
				yyc4728 = true
			}
			yyh4728.ElemContainerState(yyj4728)
			if yyj4728 < len(yyv4728) {
				if r.TryDecodeAsNil() {
					yyv4728[yyj4728] = Endpoints{}
				} else {
					yyv4731 := &yyv4728[yyj4728]
					yyv4731.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4728 < len(yyv4728) {
			yyv4728 = yyv4728[:yyj4728]
			yyc4728 = true
		} else if yyj4728 == 0 && yyv4728 == nil {
			yyv4728 = []Endpoints{}
			yyc4728 = true
		}
	}
	yyh4728.End()
	if yyc4728 {
		*v = yyv4728
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4732 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4733 := &yyv4732
		yy4733.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4734 := *v
	yyh4734, yyl4734 := z.DecSliceHelperStart()
	var yyc4734 bool
	if yyl4734 == 0 {
		if yyv4734 == nil {
			yyv4734 = []NodeCondition{}
			yyc4734 = true
		} else if len(yyv4734) != 0 {
			yyv4734 = yyv4734[:0]
			yyc4734 = true
		}
	} else if yyl4734 > 0 {
		var yyrr4734, yyrl4734 int
		var yyrt4734 bool
		if yyl4734 > cap(yyv4734) {

			yyrg4734 := len(yyv4734) > 0
			yyv24734 := yyv4734
			yyrl4734, yyrt4734 = z.DecInferLen(yyl4734, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4734 {
				if yyrl4734 <= cap(yyv4734) {
					yyv4734 = yyv4734[:yyrl4734]
				} else {
					yyv4734 = make([]NodeCondition, yyrl4734)
				}
			} else {
				yyv4734 = make([]NodeCondition, yyrl4734)
			}
			yyc4734 = true
			yyrr4734 = len(yyv4734)
			if yyrg4734 {
				copy(yyv4734, yyv24734)
			}
		} else if yyl4734 != len(yyv4734) {
			yyv4734 = yyv4734[:yyl4734]
			yyc4734 = true
		}
		yyj4734 := 0
		for ; yyj4734 < yyrr4734; yyj4734++ {
			yyh4734.ElemContainerState(yyj4734)
			if r.TryDecodeAsNil() {
				yyv4734[yyj4734] = NodeCondition{}
			} else {
				yyv4735 := &yyv4734[yyj4734]
				yyv4735.CodecDecodeSelf(d)
			}

		}
		if yyrt4734 {
			for ; yyj4734 < yyl4734; yyj4734++ {
				yyv4734 = append(yyv4734, NodeCondition{})
				yyh4734.ElemContainerState(yyj4734)
				if r.TryDecodeAsNil() {
					yyv4734[yyj4734] = NodeCondition{}
				} else {
					yyv4736 := &yyv4734[yyj4734]
					yyv4736.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4734 := 0
		for ; !r.CheckBreak(); yyj4734++ {

			if yyj4734 >= len(yyv4734) {
				yyv4734 = append(yyv4734, NodeCondition{}) // var yyz4734 NodeCondition
				yyc4734 = true
			}
			yyh4734.ElemContainerState(yyj4734)
			if yyj4734 < len(yyv4734) {
				if r.TryDecodeAsNil() {
					yyv4734[yyj4734] = NodeCondition{}
				} else {
					yyv4737 := &yyv4734[yyj4734]
					yyv4737.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4734 < len(yyv4734) {
			yyv4734 = yyv4734[:yyj4734]
			yyc4734 = true
		} else if yyj4734 == 0 && yyv4734 == nil {
			yyv4734 = []NodeCondition{}
			yyc4734 = true
		}
	}
	yyh4734.End()
	if yyc4734 {
		*v = yyv4734
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4738 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4739 := &yyv4738
		yy4739.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4740 := *v
	yyh4740, yyl4740 := z.DecSliceHelperStart()
	var yyc4740 bool
	if yyl4740 == 0 {
		if yyv4740 == nil {
			yyv4740 = []NodeAddress{}
			yyc4740 = true
		} else if len(yyv4740) != 0 {
			yyv4740 = yyv4740[:0]
			yyc4740 = true
		}
	} else if yyl4740 > 0 {
		var yyrr4740, yyrl4740 int
		var yyrt4740 bool
		if yyl4740 > cap(yyv4740) {

			yyrg4740 := len(yyv4740) > 0
			yyv24740 := yyv4740
			yyrl4740, yyrt4740 = z.DecInferLen(yyl4740, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4740 {
				if yyrl4740 <= cap(yyv4740) {
					yyv4740 = yyv4740[:yyrl4740]
				} else {
					yyv4740 = make([]NodeAddress, yyrl4740)
				}
			} else {
				yyv4740 = make([]NodeAddress, yyrl4740)
			}
			yyc4740 = true
			yyrr4740 = len(yyv4740)
			if yyrg4740 {
				copy(yyv4740, yyv24740)
			}
		} else if yyl4740 != len(yyv4740) {
			yyv4740 = yyv4740[:yyl4740]
			yyc4740 = true
		}
		yyj4740 := 0
		for ; yyj4740 < yyrr4740; yyj4740++ {
			yyh4740.ElemContainerState(yyj4740)
			if r.TryDecodeAsNil() {
				yyv4740[yyj4740] = NodeAddress{}
			} else {
				yyv4741 := &yyv4740[yyj4740]
				yyv4741.CodecDecodeSelf(d)
			}

		}
		if yyrt4740 {
			for ; yyj4740 < yyl4740; yyj4740++ {
				yyv4740 = append(yyv4740, NodeAddress{})
				yyh4740.ElemContainerState(yyj4740)
				if r.TryDecodeAsNil() {
					yyv4740[yyj4740] = NodeAddress{}
				} else {
					yyv4742 := &yyv4740[yyj4740]
					yyv4742.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4740 := 0
		for ; !r.CheckBreak(); yyj4740++ {

			if yyj4740 >= len(yyv4740) {
				yyv4740 = append(yyv4740, NodeAddress{}) // var yyz4740 NodeAddress
				yyc4740 = true
			}
			yyh4740.ElemContainerState(yyj4740)
			if yyj4740 < len(yyv4740) {
				if r.TryDecodeAsNil() {
					yyv4740[yyj4740] = NodeAddress{}
				} else {
					yyv4743 := &yyv4740[yyj4740]
					yyv4743.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4740 < len(yyv4740) {
			yyv4740 = yyv4740[:yyj4740]
			yyc4740 = true
		} else if yyj4740 == 0 && yyv4740 == nil {
			yyv4740 = []NodeAddress{}
			yyc4740 = true
		}
	}
	yyh4740.End()
	if yyc4740 {
		*v = yyv4740
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4744 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4745 := &yyv4744
		yy4745.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4746 := *v
	yyh4746, yyl4746 := z.DecSliceHelperStart()
	var yyc4746 bool
	if yyl4746 == 0 {
		if yyv4746 == nil {
			yyv4746 = []ContainerImage{}
			yyc4746 = true
		} else if len(yyv4746) != 0 {
			yyv4746 = yyv4746[:0]
			yyc4746 = true
		}
	} else if yyl4746 > 0 {
		var yyrr4746, yyrl4746 int
		var yyrt4746 bool
		if yyl4746 > cap(yyv4746) {

			yyrg4746 := len(yyv4746) > 0
			yyv24746 := yyv4746
			yyrl4746, yyrt4746 = z.DecInferLen(yyl4746, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4746 {
				if yyrl4746 <= cap(yyv4746) {
					yyv4746 = yyv4746[:yyrl4746]
				} else {
					yyv4746 = make([]ContainerImage, yyrl4746)
				}
			} else {
				yyv4746 = make([]ContainerImage, yyrl4746)
			}
			yyc4746 = true
			yyrr4746 = len(yyv4746)
			if yyrg4746 {
				copy(yyv4746, yyv24746)
			}
		} else if yyl4746 != len(yyv4746) {
			yyv4746 = yyv4746[:yyl4746]
			yyc4746 = true
		}
		yyj4746 := 0
		for ; yyj4746 < yyrr4746; yyj4746++ {
			yyh4746.ElemContainerState(yyj4746)
			if r.TryDecodeAsNil() {
				yyv4746[yyj4746] = ContainerImage{}
			} else {
				yyv4747 := &yyv4746[yyj4746]
				yyv4747.CodecDecodeSelf(d)
			}

		}
		if yyrt4746 {
			for ; yyj4746 < yyl4746; yyj4746++ {
				yyv4746 = append(yyv4746, ContainerImage{})
				yyh4746.ElemContainerState(yyj4746)
				if r.TryDecodeAsNil() {
					yyv4746[yyj4746] = ContainerImage{}
				} else {
					yyv4748 := &yyv4746[yyj4746]
					yyv4748.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4746 := 0
		for ; !r.CheckBreak(); yyj4746++ {

			if yyj4746 >= len(yyv4746) {
				yyv4746 = append(yyv4746, ContainerImage{}) // var yyz4746 ContainerImage
				yyc4746 = true
			}
			yyh4746.ElemContainerState(yyj4746)
			if yyj4746 < len(yyv4746) {
				if r.TryDecodeAsNil() {
					yyv4746[yyj4746] = ContainerImage{}
				} else {
					yyv4749 := &yyv4746[yyj4746]
					yyv4749.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4746 < len(yyv4746) {
			yyv4746 = yyv4746[:yyj4746]
			yyc4746 = true
		} else if yyj4746 == 0 && yyv4746 == nil {
			yyv4746 = []ContainerImage{}
			yyc4746 = true
		}
	}
	yyh4746.End()
	if yyc4746 {
		*v = yyv4746
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4750 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4750.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4751 := *v
	yyh4751, yyl4751 := z.DecSliceHelperStart()
	var yyc4751 bool
	if yyl4751 == 0 {
		if yyv4751 == nil {
			yyv4751 = []UniqueVolumeName{}
			yyc4751 = true
		} else if len(yyv4751) != 0 {
			yyv4751 = yyv4751[:0]
			yyc4751 = true
		}
	} else if yyl4751 > 0 {
		var yyrr4751, yyrl4751 int
		var yyrt4751 bool
		if yyl4751 > cap(yyv4751) {

			yyrl4751, yyrt4751 = z.DecInferLen(yyl4751, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4751 {
				if yyrl4751 <= cap(yyv4751) {
					yyv4751 = yyv4751[:yyrl4751]
				} else {
					yyv4751 = make([]UniqueVolumeName, yyrl4751)
				}
			} else {
				yyv4751 = make([]UniqueVolumeName, yyrl4751)
			}
			yyc4751 = true
			yyrr4751 = len(yyv4751)
		} else if yyl4751 != len(yyv4751) {
			yyv4751 = yyv4751[:yyl4751]
			yyc4751 = true
		}
		yyj4751 := 0
		for ; yyj4751 < yyrr4751; yyj4751++ {
			yyh4751.ElemContainerState(yyj4751)
			if r.TryDecodeAsNil() {
				yyv4751[yyj4751] = ""
			} else {
				yyv4751[yyj4751] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4751 {
			for ; yyj4751 < yyl4751; yyj4751++ {
				yyv4751 = append(yyv4751, "")
				yyh4751.ElemContainerState(yyj4751)
				if r.TryDecodeAsNil() {
					yyv4751[yyj4751] = ""
				} else {
					yyv4751[yyj4751] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4751 := 0
		for ; !r.CheckBreak(); yyj4751++ {

			if yyj4751 >= len(yyv4751) {
				yyv4751 = append(yyv4751, "") // var yyz4751 UniqueVolumeName
				yyc4751 = true
			}
			yyh4751.ElemContainerState(yyj4751)
			if yyj4751 < len(yyv4751) {
				if r.TryDecodeAsNil() {
					yyv4751[yyj4751] = ""
				} else {
					yyv4751[yyj4751] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4751 < len(yyv4751) {
			yyv4751 = yyv4751[:yyj4751]
			yyc4751 = true
		} else if yyj4751 == 0 && yyv4751 == nil {
			yyv4751 = []UniqueVolumeName{}
			yyc4751 = true
		}
	}
	yyh4751.End()
	if yyc4751 {
		*v = yyv4751
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4755 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4756 := &yyv4755
		yy4756.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4757 := *v
	yyh4757, yyl4757 := z.DecSliceHelperStart()
	var yyc4757 bool
	if yyl4757 == 0 {
		if yyv4757 == nil {
			yyv4757 = []AttachedVolume{}
			yyc4757 = true
		} else if len(yyv4757) != 0 {
			yyv4757 = yyv4757[:0]
			yyc4757 = true
		}
	} else if yyl4757 > 0 {
		var yyrr4757, yyrl4757 int
		var yyrt4757 bool
		if yyl4757 > cap(yyv4757) {

			yyrg4757 := len(yyv4757) > 0
			yyv24757 := yyv4757
			yyrl4757, yyrt4757 = z.DecInferLen(yyl4757, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4757 {
				if yyrl4757 <= cap(yyv4757) {
					yyv4757 = yyv4757[:yyrl4757]
				} else {
					yyv4757 = make([]AttachedVolume, yyrl4757)
				}
			} else {
				yyv4757 = make([]AttachedVolume, yyrl4757)
			}
			yyc4757 = true
			yyrr4757 = len(yyv4757)
			if yyrg4757 {
				copy(yyv4757, yyv24757)
			}
		} else if yyl4757 != len(yyv4757) {
			yyv4757 = yyv4757[:yyl4757]
			yyc4757 = true
		}
		yyj4757 := 0
		for ; yyj4757 < yyrr4757; yyj4757++ {
			yyh4757.ElemContainerState(yyj4757)
			if r.TryDecodeAsNil() {
				yyv4757[yyj4757] = AttachedVolume{}
			} else {
				yyv4758 := &yyv4757[yyj4757]
				yyv4758.CodecDecodeSelf(d)
			}

		}
		if yyrt4757 {
			for ; yyj4757 < yyl4757; yyj4757++ {
				yyv4757 = append(yyv4757, AttachedVolume{})
				yyh4757.ElemContainerState(yyj4757)
				if r.TryDecodeAsNil() {
					yyv4757[yyj4757] = AttachedVolume{}
				} else {
					yyv4759 := &yyv4757[yyj4757]
					yyv4759.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4757 := 0
		for ; !r.CheckBreak(); yyj4757++ {

			if yyj4757 >= len(yyv4757) {
				yyv4757 = append(yyv4757, AttachedVolume{}) // var yyz4757 AttachedVolume
				yyc4757 = true
			}
			yyh4757.ElemContainerState(yyj4757)
			if yyj4757 < len(yyv4757) {
				if r.TryDecodeAsNil() {
					yyv4757[yyj4757] = AttachedVolume{}
				} else {
					yyv4760 := &yyv4757[yyj4757]
					yyv4760.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4757 < len(yyv4757) {
			yyv4757 = yyv4757[:yyj4757]
			yyc4757 = true
		} else if yyj4757 == 0 && yyv4757 == nil {
			yyv4757 = []AttachedVolume{}
			yyc4757 = true
		}
	}
	yyh4757.End()
	if yyc4757 {
		*v = yyv4757
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4761 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4762 := &yyv4761
		yy4762.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4763 := *v
	yyh4763, yyl4763 := z.DecSliceHelperStart()
	var yyc4763 bool
	if yyl4763 == 0 {
		if yyv4763 == nil {
			yyv4763 = []PreferAvoidPodsEntry{}
			yyc4763 = true
		} else if len(yyv4763) != 0 {
			yyv4763 = yyv4763[:0]
			yyc4763 = true
		}
	} else if yyl4763 > 0 {
		var yyrr4763, yyrl4763 int
		var yyrt4763 bool
		if yyl4763 > cap(yyv4763) {

			yyrg4763 := len(yyv4763) > 0
			yyv24763 := yyv4763
			yyrl4763, yyrt4763 = z.DecInferLen(yyl4763, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4763 {
				if yyrl4763 <= cap(yyv4763) {
					yyv4763 = yyv4763[:yyrl4763]
				} else {
					yyv4763 = make([]PreferAvoidPodsEntry, yyrl4763)
				}
			} else {
				yyv4763 = make([]PreferAvoidPodsEntry, yyrl4763)
			}
			yyc4763 = true
			yyrr4763 = len(yyv4763)
			if yyrg4763 {
				copy(yyv4763, yyv24763)
			}
		} else if yyl4763 != len(yyv4763) {
			yyv4763 = yyv4763[:yyl4763]
			yyc4763 = true
		}
		yyj4763 := 0
		for ; yyj4763 < yyrr4763; yyj4763++ {
			yyh4763.ElemContainerState(yyj4763)
			if r.TryDecodeAsNil() {
				yyv4763[yyj4763] = PreferAvoidPodsEntry{}
			} else {
				yyv4764 := &yyv4763[yyj4763]
				yyv4764.CodecDecodeSelf(d)
			}

		}
		if yyrt4763 {
			for ; yyj4763 < yyl4763; yyj4763++ {
				yyv4763 = append(yyv4763, PreferAvoidPodsEntry{})
				yyh4763.ElemContainerState(yyj4763)
				if r.TryDecodeAsNil() {
					yyv4763[yyj4763] = PreferAvoidPodsEntry{}
				} else {
					yyv4765 := &yyv4763[yyj4763]
					yyv4765.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4763 := 0
		for ; !r.CheckBreak(); yyj4763++ {

			if yyj4763 >= len(yyv4763) {
				yyv4763 = append(yyv4763, PreferAvoidPodsEntry{}) // var yyz4763 PreferAvoidPodsEntry
				yyc4763 = true
			}
			yyh4763.ElemContainerState(yyj4763)
			if yyj4763 < len(yyv4763) {
				if r.TryDecodeAsNil() {
					yyv4763[yyj4763] = PreferAvoidPodsEntry{}
				} else {
					yyv4766 := &yyv4763[yyj4763]
					yyv4766.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4763 < len(yyv4763) {
			yyv4763 = yyv4763[:yyj4763]
			yyc4763 = true
		} else if yyj4763 == 0 && yyv4763 == nil {
			yyv4763 = []PreferAvoidPodsEntry{}
			yyc4763 = true
		}
	}
	yyh4763.End()
	if yyc4763 {
		*v = yyv4763
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4767, yyv4767 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4767.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4768 := &yyv4767
		yym4769 := z.EncBinary()
		_ = yym4769
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4768) {
		} else if !yym4769 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4768)
		} else {
			z.EncFallback(yy4768)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4770 := *v
	yyl4770 := r.ReadMapStart()
	yybh4770 := z.DecBasicHandle()
	if yyv4770 == nil {
		yyrl4770, _ := z.DecInferLen(yyl4770, yybh4770.MaxInitLen, 72)
		yyv4770 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4770)
		*v = yyv4770
	}
	var yymk4770 ResourceName
	var yymv4770 pkg3_resource.Quantity
	var yymg4770 bool
	if yybh4770.MapValueReset {
		yymg4770 = true
	}
	if yyl4770 > 0 {
		for yyj4770 := 0; yyj4770 < yyl4770; yyj4770++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4770 = ""
			} else {
				yymk4770 = ResourceName(r.DecodeString())
			}

			if yymg4770 {
				yymv4770 = yyv4770[yymk4770]
			} else {
				yymv4770 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4770 = pkg3_resource.Quantity{}
			} else {
				yyv4772 := &yymv4770
				yym4773 := z.DecBinary()
				_ = yym4773
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4772) {
				} else if !yym4773 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4772)
				} else {
					z.DecFallback(yyv4772, false)
				}
			}

			if yyv4770 != nil {
				yyv4770[yymk4770] = yymv4770
			}
		}
	} else if yyl4770 < 0 {
		for yyj4770 := 0; !r.CheckBreak(); yyj4770++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4770 = ""
			} else {
				yymk4770 = ResourceName(r.DecodeString())
			}

			if yymg4770 {
				yymv4770 = yyv4770[yymk4770]
			} else {
				yymv4770 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4770 = pkg3_resource.Quantity{}
			} else {
				yyv4775 := &yymv4770
				yym4776 := z.DecBinary()
				_ = yym4776
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4775) {
				} else if !yym4776 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4775)
				} else {
					z.DecFallback(yyv4775, false)
				}
			}

			if yyv4770 != nil {
				yyv4770[yymk4770] = yymv4770
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4777 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4778 := &yyv4777
		yy4778.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4779 := *v
	yyh4779, yyl4779 := z.DecSliceHelperStart()
	var yyc4779 bool
	if yyl4779 == 0 {
		if yyv4779 == nil {
			yyv4779 = []Node{}
			yyc4779 = true
		} else if len(yyv4779) != 0 {
			yyv4779 = yyv4779[:0]
			yyc4779 = true
		}
	} else if yyl4779 > 0 {
		var yyrr4779, yyrl4779 int
		var yyrt4779 bool
		if yyl4779 > cap(yyv4779) {

			yyrg4779 := len(yyv4779) > 0
			yyv24779 := yyv4779
			yyrl4779, yyrt4779 = z.DecInferLen(yyl4779, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4779 {
				if yyrl4779 <= cap(yyv4779) {
					yyv4779 = yyv4779[:yyrl4779]
				} else {
					yyv4779 = make([]Node, yyrl4779)
				}
			} else {
				yyv4779 = make([]Node, yyrl4779)
			}
			yyc4779 = true
			yyrr4779 = len(yyv4779)
			if yyrg4779 {
				copy(yyv4779, yyv24779)
			}
		} else if yyl4779 != len(yyv4779) {
			yyv4779 = yyv4779[:yyl4779]
			yyc4779 = true
		}
		yyj4779 := 0
		for ; yyj4779 < yyrr4779; yyj4779++ {
			yyh4779.ElemContainerState(yyj4779)
			if r.TryDecodeAsNil() {
				yyv4779[yyj4779] = Node{}
			} else {
				yyv4780 := &yyv4779[yyj4779]
				yyv4780.CodecDecodeSelf(d)
			}

		}
		if yyrt4779 {
			for ; yyj4779 < yyl4779; yyj4779++ {
				yyv4779 = append(yyv4779, Node{})
				yyh4779.ElemContainerState(yyj4779)
				if r.TryDecodeAsNil() {
					yyv4779[yyj4779] = Node{}
				} else {
					yyv4781 := &yyv4779[yyj4779]
					yyv4781.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4779 := 0
		for ; !r.CheckBreak(); yyj4779++ {

			if yyj4779 >= len(yyv4779) {
				yyv4779 = append(yyv4779, Node{}) // var yyz4779 Node
				yyc4779 = true
			}
			yyh4779.ElemContainerState(yyj4779)
			if yyj4779 < len(yyv4779) {
				if r.TryDecodeAsNil() {
					yyv4779[yyj4779] = Node{}
				} else {
					yyv4782 := &yyv4779[yyj4779]
					yyv4782.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4779 < len(yyv4779) {
			yyv4779 = yyv4779[:yyj4779]
			yyc4779 = true
		} else if yyj4779 == 0 && yyv4779 == nil {
			yyv4779 = []Node{}
			yyc4779 = true
		}
	}
	yyh4779.End()
	if yyc4779 {
		*v = yyv4779
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4783 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4783.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4784 := *v
	yyh4784, yyl4784 := z.DecSliceHelperStart()
	var yyc4784 bool
	if yyl4784 == 0 {
		if yyv4784 == nil {
			yyv4784 = []FinalizerName{}
			yyc4784 = true
		} else if len(yyv4784) != 0 {
			yyv4784 = yyv4784[:0]
			yyc4784 = true
		}
	} else if yyl4784 > 0 {
		var yyrr4784, yyrl4784 int
		var yyrt4784 bool
		if yyl4784 > cap(yyv4784) {

			yyrl4784, yyrt4784 = z.DecInferLen(yyl4784, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4784 {
				if yyrl4784 <= cap(yyv4784) {
					yyv4784 = yyv4784[:yyrl4784]
				} else {
					yyv4784 = make([]FinalizerName, yyrl4784)
				}
			} else {
				yyv4784 = make([]FinalizerName, yyrl4784)
			}
			yyc4784 = true
			yyrr4784 = len(yyv4784)
		} else if yyl4784 != len(yyv4784) {
			yyv4784 = yyv4784[:yyl4784]
			yyc4784 = true
		}
		yyj4784 := 0
		for ; yyj4784 < yyrr4784; yyj4784++ {
			yyh4784.ElemContainerState(yyj4784)
			if r.TryDecodeAsNil() {
				yyv4784[yyj4784] = ""
			} else {
				yyv4784[yyj4784] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4784 {
			for ; yyj4784 < yyl4784; yyj4784++ {
				yyv4784 = append(yyv4784, "")
				yyh4784.ElemContainerState(yyj4784)
				if r.TryDecodeAsNil() {
					yyv4784[yyj4784] = ""
				} else {
					yyv4784[yyj4784] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4784 := 0
		for ; !r.CheckBreak(); yyj4784++ {

			if yyj4784 >= len(yyv4784) {
				yyv4784 = append(yyv4784, "") // var yyz4784 FinalizerName
				yyc4784 = true
			}
			yyh4784.ElemContainerState(yyj4784)
			if yyj4784 < len(yyv4784) {
				if r.TryDecodeAsNil() {
					yyv4784[yyj4784] = ""
				} else {
					yyv4784[yyj4784] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4784 < len(yyv4784) {
			yyv4784 = yyv4784[:yyj4784]
			yyc4784 = true
		} else if yyj4784 == 0 && yyv4784 == nil {
			yyv4784 = []FinalizerName{}
			yyc4784 = true
		}
	}
	yyh4784.End()
	if yyc4784 {
		*v = yyv4784
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4788 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4789 := &yyv4788
		yy4789.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4790 := *v
	yyh4790, yyl4790 := z.DecSliceHelperStart()
	var yyc4790 bool
	if yyl4790 == 0 {
		if yyv4790 == nil {
			yyv4790 = []Namespace{}
			yyc4790 = true
		} else if len(yyv4790) != 0 {
			yyv4790 = yyv4790[:0]
			yyc4790 = true
		}
	} else if yyl4790 > 0 {
		var yyrr4790, yyrl4790 int
		var yyrt4790 bool
		if yyl4790 > cap(yyv4790) {

			yyrg4790 := len(yyv4790) > 0
			yyv24790 := yyv4790
			yyrl4790, yyrt4790 = z.DecInferLen(yyl4790, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4790 {
				if yyrl4790 <= cap(yyv4790) {
					yyv4790 = yyv4790[:yyrl4790]
				} else {
					yyv4790 = make([]Namespace, yyrl4790)
				}
			} else {
				yyv4790 = make([]Namespace, yyrl4790)
			}
			yyc4790 = true
			yyrr4790 = len(yyv4790)
			if yyrg4790 {
				copy(yyv4790, yyv24790)
			}
		} else if yyl4790 != len(yyv4790) {
			yyv4790 = yyv4790[:yyl4790]
			yyc4790 = true
		}
		yyj4790 := 0
		for ; yyj4790 < yyrr4790; yyj4790++ {
			yyh4790.ElemContainerState(yyj4790)
			if r.TryDecodeAsNil() {
				yyv4790[yyj4790] = Namespace{}
			} else {
				yyv4791 := &yyv4790[yyj4790]
				yyv4791.CodecDecodeSelf(d)
			}

		}
		if yyrt4790 {
			for ; yyj4790 < yyl4790; yyj4790++ {
				yyv4790 = append(yyv4790, Namespace{})
				yyh4790.ElemContainerState(yyj4790)
				if r.TryDecodeAsNil() {
					yyv4790[yyj4790] = Namespace{}
				} else {
					yyv4792 := &yyv4790[yyj4790]
					yyv4792.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4790 := 0
		for ; !r.CheckBreak(); yyj4790++ {

			if yyj4790 >= len(yyv4790) {
				yyv4790 = append(yyv4790, Namespace{}) // var yyz4790 Namespace
				yyc4790 = true
			}
			yyh4790.ElemContainerState(yyj4790)
			if yyj4790 < len(yyv4790) {
				if r.TryDecodeAsNil() {
					yyv4790[yyj4790] = Namespace{}
				} else {
					yyv4793 := &yyv4790[yyj4790]
					yyv4793.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4790 < len(yyv4790) {
			yyv4790 = yyv4790[:yyj4790]
			yyc4790 = true
		} else if yyj4790 == 0 && yyv4790 == nil {
			yyv4790 = []Namespace{}
			yyc4790 = true
		}
	}
	yyh4790.End()
	if yyc4790 {
		*v = yyv4790
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4794 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4795 := &yyv4794
		yy4795.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4796 := *v
	yyh4796, yyl4796 := z.DecSliceHelperStart()
	var yyc4796 bool
	if yyl4796 == 0 {
		if yyv4796 == nil {
			yyv4796 = []Event{}
			yyc4796 = true
		} else if len(yyv4796) != 0 {
			yyv4796 = yyv4796[:0]
			yyc4796 = true
		}
	} else if yyl4796 > 0 {
		var yyrr4796, yyrl4796 int
		var yyrt4796 bool
		if yyl4796 > cap(yyv4796) {

			yyrg4796 := len(yyv4796) > 0
			yyv24796 := yyv4796
			yyrl4796, yyrt4796 = z.DecInferLen(yyl4796, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4796 {
				if yyrl4796 <= cap(yyv4796) {
					yyv4796 = yyv4796[:yyrl4796]
				} else {
					yyv4796 = make([]Event, yyrl4796)
				}
			} else {
				yyv4796 = make([]Event, yyrl4796)
			}
			yyc4796 = true
			yyrr4796 = len(yyv4796)
			if yyrg4796 {
				copy(yyv4796, yyv24796)
			}
		} else if yyl4796 != len(yyv4796) {
			yyv4796 = yyv4796[:yyl4796]
			yyc4796 = true
		}
		yyj4796 := 0
		for ; yyj4796 < yyrr4796; yyj4796++ {
			yyh4796.ElemContainerState(yyj4796)
			if r.TryDecodeAsNil() {
				yyv4796[yyj4796] = Event{}
			} else {
				yyv4797 := &yyv4796[yyj4796]
				yyv4797.CodecDecodeSelf(d)
			}

		}
		if yyrt4796 {
			for ; yyj4796 < yyl4796; yyj4796++ {
				yyv4796 = append(yyv4796, Event{})
				yyh4796.ElemContainerState(yyj4796)
				if r.TryDecodeAsNil() {
					yyv4796[yyj4796] = Event{}
				} else {
					yyv4798 := &yyv4796[yyj4796]
					yyv4798.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4796 := 0
		for ; !r.CheckBreak(); yyj4796++ {

			if yyj4796 >= len(yyv4796) {
				yyv4796 = append(yyv4796, Event{}) // var yyz4796 Event
				yyc4796 = true
			}
			yyh4796.ElemContainerState(yyj4796)
			if yyj4796 < len(yyv4796) {
				if r.TryDecodeAsNil() {
					yyv4796[yyj4796] = Event{}
				} else {
					yyv4799 := &yyv4796[yyj4796]
					yyv4799.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4796 < len(yyv4796) {
			yyv4796 = yyv4796[:yyj4796]
			yyc4796 = true
		} else if yyj4796 == 0 && yyv4796 == nil {
			yyv4796 = []Event{}
			yyc4796 = true
		}
	}
	yyh4796.End()
	if yyc4796 {
		*v = yyv4796
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4800 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4801 := &yyv4800
		yym4802 := z.EncBinary()
		_ = yym4802
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4801) {
		} else if !yym4802 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4801)
		} else {
			z.EncFallback(yy4801)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4803 := *v
	yyh4803, yyl4803 := z.DecSliceHelperStart()
	var yyc4803 bool
	if yyl4803 == 0 {
		if yyv4803 == nil {
			yyv4803 = []pkg5_runtime.RawExtension{}
			yyc4803 = true
		} else if len(yyv4803) != 0 {
			yyv4803 = yyv4803[:0]
			yyc4803 = true
		}
	} else if yyl4803 > 0 {
		var yyrr4803, yyrl4803 int
		var yyrt4803 bool
		if yyl4803 > cap(yyv4803) {

			yyrg4803 := len(yyv4803) > 0
			yyv24803 := yyv4803
			yyrl4803, yyrt4803 = z.DecInferLen(yyl4803, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4803 {
				if yyrl4803 <= cap(yyv4803) {
					yyv4803 = yyv4803[:yyrl4803]
				} else {
					yyv4803 = make([]pkg5_runtime.RawExtension, yyrl4803)
				}
			} else {
				yyv4803 = make([]pkg5_runtime.RawExtension, yyrl4803)
			}
			yyc4803 = true
			yyrr4803 = len(yyv4803)
			if yyrg4803 {
				copy(yyv4803, yyv24803)
			}
		} else if yyl4803 != len(yyv4803) {
			yyv4803 = yyv4803[:yyl4803]
			yyc4803 = true
		}
		yyj4803 := 0
		for ; yyj4803 < yyrr4803; yyj4803++ {
			yyh4803.ElemContainerState(yyj4803)
			if r.TryDecodeAsNil() {
				yyv4803[yyj4803] = pkg5_runtime.RawExtension{}
			} else {
				yyv4804 := &yyv4803[yyj4803]
				yym4805 := z.DecBinary()
				_ = yym4805
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4804) {
				} else if !yym4805 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4804)
				} else {
					z.DecFallback(yyv4804, false)
				}
			}

		}
		if yyrt4803 {
			for ; yyj4803 < yyl4803; yyj4803++ {
				yyv4803 = append(yyv4803, pkg5_runtime.RawExtension{})
				yyh4803.ElemContainerState(yyj4803)
				if r.TryDecodeAsNil() {
					yyv4803[yyj4803] = pkg5_runtime.RawExtension{}
				} else {
					yyv4806 := &yyv4803[yyj4803]
					yym4807 := z.DecBinary()
					_ = yym4807
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4806) {
					} else if !yym4807 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4806)
					} else {
						z.DecFallback(yyv4806, false)
					}
				}

			}
		}

	} else {
		yyj4803 := 0
		for ; !r.CheckBreak(); yyj4803++ {

			if yyj4803 >= len(yyv4803) {
				yyv4803 = append(yyv4803, pkg5_runtime.RawExtension{}) // var yyz4803 pkg5_runtime.RawExtension
				yyc4803 = true
			}
			yyh4803.ElemContainerState(yyj4803)
			if yyj4803 < len(yyv4803) {
				if r.TryDecodeAsNil() {
					yyv4803[yyj4803] = pkg5_runtime.RawExtension{}
				} else {
					yyv4808 := &yyv4803[yyj4803]
					yym4809 := z.DecBinary()
					_ = yym4809
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4808) {
					} else if !yym4809 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4808)
					} else {
						z.DecFallback(yyv4808, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4803 < len(yyv4803) {
			yyv4803 = yyv4803[:yyj4803]
			yyc4803 = true
		} else if yyj4803 == 0 && yyv4803 == nil {
			yyv4803 = []pkg5_runtime.RawExtension{}
			yyc4803 = true
		}
	}
	yyh4803.End()
	if yyc4803 {
		*v = yyv4803
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4810 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4811 := &yyv4810
		yy4811.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4812 := *v
	yyh4812, yyl4812 := z.DecSliceHelperStart()
	var yyc4812 bool
	if yyl4812 == 0 {
		if yyv4812 == nil {
			yyv4812 = []LimitRangeItem{}
			yyc4812 = true
		} else if len(yyv4812) != 0 {
			yyv4812 = yyv4812[:0]
			yyc4812 = true
		}
	} else if yyl4812 > 0 {
		var yyrr4812, yyrl4812 int
		var yyrt4812 bool
		if yyl4812 > cap(yyv4812) {

			yyrg4812 := len(yyv4812) > 0
			yyv24812 := yyv4812
			yyrl4812, yyrt4812 = z.DecInferLen(yyl4812, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4812 {
				if yyrl4812 <= cap(yyv4812) {
					yyv4812 = yyv4812[:yyrl4812]
				} else {
					yyv4812 = make([]LimitRangeItem, yyrl4812)
				}
			} else {
				yyv4812 = make([]LimitRangeItem, yyrl4812)
			}
			yyc4812 = true
			yyrr4812 = len(yyv4812)
			if yyrg4812 {
				copy(yyv4812, yyv24812)
			}
		} else if yyl4812 != len(yyv4812) {
			yyv4812 = yyv4812[:yyl4812]
			yyc4812 = true
		}
		yyj4812 := 0
		for ; yyj4812 < yyrr4812; yyj4812++ {
			yyh4812.ElemContainerState(yyj4812)
			if r.TryDecodeAsNil() {
				yyv4812[yyj4812] = LimitRangeItem{}
			} else {
				yyv4813 := &yyv4812[yyj4812]
				yyv4813.CodecDecodeSelf(d)
			}

		}
		if yyrt4812 {
			for ; yyj4812 < yyl4812; yyj4812++ {
				yyv4812 = append(yyv4812, LimitRangeItem{})
				yyh4812.ElemContainerState(yyj4812)
				if r.TryDecodeAsNil() {
					yyv4812[yyj4812] = LimitRangeItem{}
				} else {
					yyv4814 := &yyv4812[yyj4812]
					yyv4814.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4812 := 0
		for ; !r.CheckBreak(); yyj4812++ {

			if yyj4812 >= len(yyv4812) {
				yyv4812 = append(yyv4812, LimitRangeItem{}) // var yyz4812 LimitRangeItem
				yyc4812 = true
			}
			yyh4812.ElemContainerState(yyj4812)
			if yyj4812 < len(yyv4812) {
				if r.TryDecodeAsNil() {
					yyv4812[yyj4812] = LimitRangeItem{}
				} else {
					yyv4815 := &yyv4812[yyj4812]
					yyv4815.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4812 < len(yyv4812) {
			yyv4812 = yyv4812[:yyj4812]
			yyc4812 = true
		} else if yyj4812 == 0 && yyv4812 == nil {
			yyv4812 = []LimitRangeItem{}
			yyc4812 = true
		}
	}
	yyh4812.End()
	if yyc4812 {
		*v = yyv4812
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4816 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4817 := &yyv4816
		yy4817.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4818 := *v
	yyh4818, yyl4818 := z.DecSliceHelperStart()
	var yyc4818 bool
	if yyl4818 == 0 {
		if yyv4818 == nil {
			yyv4818 = []LimitRange{}
			yyc4818 = true
		} else if len(yyv4818) != 0 {
			yyv4818 = yyv4818[:0]
			yyc4818 = true
		}
	} else if yyl4818 > 0 {
		var yyrr4818, yyrl4818 int
		var yyrt4818 bool
		if yyl4818 > cap(yyv4818) {

			yyrg4818 := len(yyv4818) > 0
			yyv24818 := yyv4818
			yyrl4818, yyrt4818 = z.DecInferLen(yyl4818, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4818 {
				if yyrl4818 <= cap(yyv4818) {
					yyv4818 = yyv4818[:yyrl4818]
				} else {
					yyv4818 = make([]LimitRange, yyrl4818)
				}
			} else {
				yyv4818 = make([]LimitRange, yyrl4818)
			}
			yyc4818 = true
			yyrr4818 = len(yyv4818)
			if yyrg4818 {
				copy(yyv4818, yyv24818)
			}
		} else if yyl4818 != len(yyv4818) {
			yyv4818 = yyv4818[:yyl4818]
			yyc4818 = true
		}
		yyj4818 := 0
		for ; yyj4818 < yyrr4818; yyj4818++ {
			yyh4818.ElemContainerState(yyj4818)
			if r.TryDecodeAsNil() {
				yyv4818[yyj4818] = LimitRange{}
			} else {
				yyv4819 := &yyv4818[yyj4818]
				yyv4819.CodecDecodeSelf(d)
			}

		}
		if yyrt4818 {
			for ; yyj4818 < yyl4818; yyj4818++ {
				yyv4818 = append(yyv4818, LimitRange{})
				yyh4818.ElemContainerState(yyj4818)
				if r.TryDecodeAsNil() {
					yyv4818[yyj4818] = LimitRange{}
				} else {
					yyv4820 := &yyv4818[yyj4818]
					yyv4820.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4818 := 0
		for ; !r.CheckBreak(); yyj4818++ {

			if yyj4818 >= len(yyv4818) {
				yyv4818 = append(yyv4818, LimitRange{}) // var yyz4818 LimitRange
				yyc4818 = true
			}
			yyh4818.ElemContainerState(yyj4818)
			if yyj4818 < len(yyv4818) {
				if r.TryDecodeAsNil() {
					yyv4818[yyj4818] = LimitRange{}
				} else {
					yyv4821 := &yyv4818[yyj4818]
					yyv4821.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4818 < len(yyv4818) {
			yyv4818 = yyv4818[:yyj4818]
			yyc4818 = true
		} else if yyj4818 == 0 && yyv4818 == nil {
			yyv4818 = []LimitRange{}
			yyc4818 = true
		}
	}
	yyh4818.End()
	if yyc4818 {
		*v = yyv4818
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4822 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4822.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4823 := *v
	yyh4823, yyl4823 := z.DecSliceHelperStart()
	var yyc4823 bool
	if yyl4823 == 0 {
		if yyv4823 == nil {
			yyv4823 = []ResourceQuotaScope{}
			yyc4823 = true
		} else if len(yyv4823) != 0 {
			yyv4823 = yyv4823[:0]
			yyc4823 = true
		}
	} else if yyl4823 > 0 {
		var yyrr4823, yyrl4823 int
		var yyrt4823 bool
		if yyl4823 > cap(yyv4823) {

			yyrl4823, yyrt4823 = z.DecInferLen(yyl4823, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4823 {
				if yyrl4823 <= cap(yyv4823) {
					yyv4823 = yyv4823[:yyrl4823]
				} else {
					yyv4823 = make([]ResourceQuotaScope, yyrl4823)
				}
			} else {
				yyv4823 = make([]ResourceQuotaScope, yyrl4823)
			}
			yyc4823 = true
			yyrr4823 = len(yyv4823)
		} else if yyl4823 != len(yyv4823) {
			yyv4823 = yyv4823[:yyl4823]
			yyc4823 = true
		}
		yyj4823 := 0
		for ; yyj4823 < yyrr4823; yyj4823++ {
			yyh4823.ElemContainerState(yyj4823)
			if r.TryDecodeAsNil() {
				yyv4823[yyj4823] = ""
			} else {
				yyv4823[yyj4823] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4823 {
			for ; yyj4823 < yyl4823; yyj4823++ {
				yyv4823 = append(yyv4823, "")
				yyh4823.ElemContainerState(yyj4823)
				if r.TryDecodeAsNil() {
					yyv4823[yyj4823] = ""
				} else {
					yyv4823[yyj4823] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4823 := 0
		for ; !r.CheckBreak(); yyj4823++ {

			if yyj4823 >= len(yyv4823) {
				yyv4823 = append(yyv4823, "") // var yyz4823 ResourceQuotaScope
				yyc4823 = true
			}
			yyh4823.ElemContainerState(yyj4823)
			if yyj4823 < len(yyv4823) {
				if r.TryDecodeAsNil() {
					yyv4823[yyj4823] = ""
				} else {
					yyv4823[yyj4823] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4823 < len(yyv4823) {
			yyv4823 = yyv4823[:yyj4823]
			yyc4823 = true
		} else if yyj4823 == 0 && yyv4823 == nil {
			yyv4823 = []ResourceQuotaScope{}
			yyc4823 = true
		}
	}
	yyh4823.End()
	if yyc4823 {
		*v = yyv4823
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4827 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4828 := &yyv4827
		yy4828.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4829 := *v
	yyh4829, yyl4829 := z.DecSliceHelperStart()
	var yyc4829 bool
	if yyl4829 == 0 {
		if yyv4829 == nil {
			yyv4829 = []ResourceQuota{}
			yyc4829 = true
		} else if len(yyv4829) != 0 {
			yyv4829 = yyv4829[:0]
			yyc4829 = true
		}
	} else if yyl4829 > 0 {
		var yyrr4829, yyrl4829 int
		var yyrt4829 bool
		if yyl4829 > cap(yyv4829) {

			yyrg4829 := len(yyv4829) > 0
			yyv24829 := yyv4829
			yyrl4829, yyrt4829 = z.DecInferLen(yyl4829, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4829 {
				if yyrl4829 <= cap(yyv4829) {
					yyv4829 = yyv4829[:yyrl4829]
				} else {
					yyv4829 = make([]ResourceQuota, yyrl4829)
				}
			} else {
				yyv4829 = make([]ResourceQuota, yyrl4829)
			}
			yyc4829 = true
			yyrr4829 = len(yyv4829)
			if yyrg4829 {
				copy(yyv4829, yyv24829)
			}
		} else if yyl4829 != len(yyv4829) {
			yyv4829 = yyv4829[:yyl4829]
			yyc4829 = true
		}
		yyj4829 := 0
		for ; yyj4829 < yyrr4829; yyj4829++ {
			yyh4829.ElemContainerState(yyj4829)
			if r.TryDecodeAsNil() {
				yyv4829[yyj4829] = ResourceQuota{}
			} else {
				yyv4830 := &yyv4829[yyj4829]
				yyv4830.CodecDecodeSelf(d)
			}

		}
		if yyrt4829 {
			for ; yyj4829 < yyl4829; yyj4829++ {
				yyv4829 = append(yyv4829, ResourceQuota{})
				yyh4829.ElemContainerState(yyj4829)
				if r.TryDecodeAsNil() {
					yyv4829[yyj4829] = ResourceQuota{}
				} else {
					yyv4831 := &yyv4829[yyj4829]
					yyv4831.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4829 := 0
		for ; !r.CheckBreak(); yyj4829++ {

			if yyj4829 >= len(yyv4829) {
				yyv4829 = append(yyv4829, ResourceQuota{}) // var yyz4829 ResourceQuota
				yyc4829 = true
			}
			yyh4829.ElemContainerState(yyj4829)
			if yyj4829 < len(yyv4829) {
				if r.TryDecodeAsNil() {
					yyv4829[yyj4829] = ResourceQuota{}
				} else {
					yyv4832 := &yyv4829[yyj4829]
					yyv4832.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4829 < len(yyv4829) {
			yyv4829 = yyv4829[:yyj4829]
			yyc4829 = true
		} else if yyj4829 == 0 && yyv4829 == nil {
			yyv4829 = []ResourceQuota{}
			yyc4829 = true
		}
	}
	yyh4829.End()
	if yyc4829 {
		*v = yyv4829
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4833, yyv4833 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4834 := z.EncBinary()
		_ = yym4834
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4833))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4833 == nil {
			r.EncodeNil()
		} else {
			yym4835 := z.EncBinary()
			_ = yym4835
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4833))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4836 := *v
	yyl4836 := r.ReadMapStart()
	yybh4836 := z.DecBasicHandle()
	if yyv4836 == nil {
		yyrl4836, _ := z.DecInferLen(yyl4836, yybh4836.MaxInitLen, 40)
		yyv4836 = make(map[string][]uint8, yyrl4836)
		*v = yyv4836
	}
	var yymk4836 string
	var yymv4836 []uint8
	var yymg4836 bool
	if yybh4836.MapValueReset {
		yymg4836 = true
	}
	if yyl4836 > 0 {
		for yyj4836 := 0; yyj4836 < yyl4836; yyj4836++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4836 = ""
			} else {
				yymk4836 = string(r.DecodeString())
			}

			if yymg4836 {
				yymv4836 = yyv4836[yymk4836]
			} else {
				yymv4836 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4836 = nil
			} else {
				yyv4838 := &yymv4836
				yym4839 := z.DecBinary()
				_ = yym4839
				if false {
				} else {
					*yyv4838 = r.DecodeBytes(*(*[]byte)(yyv4838), false, false)
				}
			}

			if yyv4836 != nil {
				yyv4836[yymk4836] = yymv4836
			}
		}
	} else if yyl4836 < 0 {
		for yyj4836 := 0; !r.CheckBreak(); yyj4836++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4836 = ""
			} else {
				yymk4836 = string(r.DecodeString())
			}

			if yymg4836 {
				yymv4836 = yyv4836[yymk4836]
			} else {
				yymv4836 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4836 = nil
			} else {
				yyv4841 := &yymv4836
				yym4842 := z.DecBinary()
				_ = yym4842
				if false {
				} else {
					*yyv4841 = r.DecodeBytes(*(*[]byte)(yyv4841), false, false)
				}
			}

			if yyv4836 != nil {
				yyv4836[yymk4836] = yymv4836
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4843 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4844 := &yyv4843
		yy4844.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4845 := *v
	yyh4845, yyl4845 := z.DecSliceHelperStart()
	var yyc4845 bool
	if yyl4845 == 0 {
		if yyv4845 == nil {
			yyv4845 = []Secret{}
			yyc4845 = true
		} else if len(yyv4845) != 0 {
			yyv4845 = yyv4845[:0]
			yyc4845 = true
		}
	} else if yyl4845 > 0 {
		var yyrr4845, yyrl4845 int
		var yyrt4845 bool
		if yyl4845 > cap(yyv4845) {

			yyrg4845 := len(yyv4845) > 0
			yyv24845 := yyv4845
			yyrl4845, yyrt4845 = z.DecInferLen(yyl4845, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4845 {
				if yyrl4845 <= cap(yyv4845) {
					yyv4845 = yyv4845[:yyrl4845]
				} else {
					yyv4845 = make([]Secret, yyrl4845)
				}
			} else {
				yyv4845 = make([]Secret, yyrl4845)
			}
			yyc4845 = true
			yyrr4845 = len(yyv4845)
			if yyrg4845 {
				copy(yyv4845, yyv24845)
			}
		} else if yyl4845 != len(yyv4845) {
			yyv4845 = yyv4845[:yyl4845]
			yyc4845 = true
		}
		yyj4845 := 0
		for ; yyj4845 < yyrr4845; yyj4845++ {
			yyh4845.ElemContainerState(yyj4845)
			if r.TryDecodeAsNil() {
				yyv4845[yyj4845] = Secret{}
			} else {
				yyv4846 := &yyv4845[yyj4845]
				yyv4846.CodecDecodeSelf(d)
			}

		}
		if yyrt4845 {
			for ; yyj4845 < yyl4845; yyj4845++ {
				yyv4845 = append(yyv4845, Secret{})
				yyh4845.ElemContainerState(yyj4845)
				if r.TryDecodeAsNil() {
					yyv4845[yyj4845] = Secret{}
				} else {
					yyv4847 := &yyv4845[yyj4845]
					yyv4847.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4845 := 0
		for ; !r.CheckBreak(); yyj4845++ {

			if yyj4845 >= len(yyv4845) {
				yyv4845 = append(yyv4845, Secret{}) // var yyz4845 Secret
				yyc4845 = true
			}
			yyh4845.ElemContainerState(yyj4845)
			if yyj4845 < len(yyv4845) {
				if r.TryDecodeAsNil() {
					yyv4845[yyj4845] = Secret{}
				} else {
					yyv4848 := &yyv4845[yyj4845]
					yyv4848.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4845 < len(yyv4845) {
			yyv4845 = yyv4845[:yyj4845]
			yyc4845 = true
		} else if yyj4845 == 0 && yyv4845 == nil {
			yyv4845 = []Secret{}
			yyc4845 = true
		}
	}
	yyh4845.End()
	if yyc4845 {
		*v = yyv4845
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4849 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4850 := &yyv4849
		yy4850.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4851 := *v
	yyh4851, yyl4851 := z.DecSliceHelperStart()
	var yyc4851 bool
	if yyl4851 == 0 {
		if yyv4851 == nil {
			yyv4851 = []ConfigMap{}
			yyc4851 = true
		} else if len(yyv4851) != 0 {
			yyv4851 = yyv4851[:0]
			yyc4851 = true
		}
	} else if yyl4851 > 0 {
		var yyrr4851, yyrl4851 int
		var yyrt4851 bool
		if yyl4851 > cap(yyv4851) {

			yyrg4851 := len(yyv4851) > 0
			yyv24851 := yyv4851
			yyrl4851, yyrt4851 = z.DecInferLen(yyl4851, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4851 {
				if yyrl4851 <= cap(yyv4851) {
					yyv4851 = yyv4851[:yyrl4851]
				} else {
					yyv4851 = make([]ConfigMap, yyrl4851)
				}
			} else {
				yyv4851 = make([]ConfigMap, yyrl4851)
			}
			yyc4851 = true
			yyrr4851 = len(yyv4851)
			if yyrg4851 {
				copy(yyv4851, yyv24851)
			}
		} else if yyl4851 != len(yyv4851) {
			yyv4851 = yyv4851[:yyl4851]
			yyc4851 = true
		}
		yyj4851 := 0
		for ; yyj4851 < yyrr4851; yyj4851++ {
			yyh4851.ElemContainerState(yyj4851)
			if r.TryDecodeAsNil() {
				yyv4851[yyj4851] = ConfigMap{}
			} else {
				yyv4852 := &yyv4851[yyj4851]
				yyv4852.CodecDecodeSelf(d)
			}

		}
		if yyrt4851 {
			for ; yyj4851 < yyl4851; yyj4851++ {
				yyv4851 = append(yyv4851, ConfigMap{})
				yyh4851.ElemContainerState(yyj4851)
				if r.TryDecodeAsNil() {
					yyv4851[yyj4851] = ConfigMap{}
				} else {
					yyv4853 := &yyv4851[yyj4851]
					yyv4853.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4851 := 0
		for ; !r.CheckBreak(); yyj4851++ {

			if yyj4851 >= len(yyv4851) {
				yyv4851 = append(yyv4851, ConfigMap{}) // var yyz4851 ConfigMap
				yyc4851 = true
			}
			yyh4851.ElemContainerState(yyj4851)
			if yyj4851 < len(yyv4851) {
				if r.TryDecodeAsNil() {
					yyv4851[yyj4851] = ConfigMap{}
				} else {
					yyv4854 := &yyv4851[yyj4851]
					yyv4854.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4851 < len(yyv4851) {
			yyv4851 = yyv4851[:yyj4851]
			yyc4851 = true
		} else if yyj4851 == 0 && yyv4851 == nil {
			yyv4851 = []ConfigMap{}
			yyc4851 = true
		}
	}
	yyh4851.End()
	if yyc4851 {
		*v = yyv4851
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4855 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4856 := &yyv4855
		yy4856.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4857 := *v
	yyh4857, yyl4857 := z.DecSliceHelperStart()
	var yyc4857 bool
	if yyl4857 == 0 {
		if yyv4857 == nil {
			yyv4857 = []ComponentCondition{}
			yyc4857 = true
		} else if len(yyv4857) != 0 {
			yyv4857 = yyv4857[:0]
			yyc4857 = true
		}
	} else if yyl4857 > 0 {
		var yyrr4857, yyrl4857 int
		var yyrt4857 bool
		if yyl4857 > cap(yyv4857) {

			yyrg4857 := len(yyv4857) > 0
			yyv24857 := yyv4857
			yyrl4857, yyrt4857 = z.DecInferLen(yyl4857, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4857 {
				if yyrl4857 <= cap(yyv4857) {
					yyv4857 = yyv4857[:yyrl4857]
				} else {
					yyv4857 = make([]ComponentCondition, yyrl4857)
				}
			} else {
				yyv4857 = make([]ComponentCondition, yyrl4857)
			}
			yyc4857 = true
			yyrr4857 = len(yyv4857)
			if yyrg4857 {
				copy(yyv4857, yyv24857)
			}
		} else if yyl4857 != len(yyv4857) {
			yyv4857 = yyv4857[:yyl4857]
			yyc4857 = true
		}
		yyj4857 := 0
		for ; yyj4857 < yyrr4857; yyj4857++ {
			yyh4857.ElemContainerState(yyj4857)
			if r.TryDecodeAsNil() {
				yyv4857[yyj4857] = ComponentCondition{}
			} else {
				yyv4858 := &yyv4857[yyj4857]
				yyv4858.CodecDecodeSelf(d)
			}

		}
		if yyrt4857 {
			for ; yyj4857 < yyl4857; yyj4857++ {
				yyv4857 = append(yyv4857, ComponentCondition{})
				yyh4857.ElemContainerState(yyj4857)
				if r.TryDecodeAsNil() {
					yyv4857[yyj4857] = ComponentCondition{}
				} else {
					yyv4859 := &yyv4857[yyj4857]
					yyv4859.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4857 := 0
		for ; !r.CheckBreak(); yyj4857++ {

			if yyj4857 >= len(yyv4857) {
				yyv4857 = append(yyv4857, ComponentCondition{}) // var yyz4857 ComponentCondition
				yyc4857 = true
			}
			yyh4857.ElemContainerState(yyj4857)
			if yyj4857 < len(yyv4857) {
				if r.TryDecodeAsNil() {
					yyv4857[yyj4857] = ComponentCondition{}
				} else {
					yyv4860 := &yyv4857[yyj4857]
					yyv4860.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4857 < len(yyv4857) {
			yyv4857 = yyv4857[:yyj4857]
			yyc4857 = true
		} else if yyj4857 == 0 && yyv4857 == nil {
			yyv4857 = []ComponentCondition{}
			yyc4857 = true
		}
	}
	yyh4857.End()
	if yyc4857 {
		*v = yyv4857
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4861 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4862 := &yyv4861
		yy4862.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4863 := *v
	yyh4863, yyl4863 := z.DecSliceHelperStart()
	var yyc4863 bool
	if yyl4863 == 0 {
		if yyv4863 == nil {
			yyv4863 = []ComponentStatus{}
			yyc4863 = true
		} else if len(yyv4863) != 0 {
			yyv4863 = yyv4863[:0]
			yyc4863 = true
		}
	} else if yyl4863 > 0 {
		var yyrr4863, yyrl4863 int
		var yyrt4863 bool
		if yyl4863 > cap(yyv4863) {

			yyrg4863 := len(yyv4863) > 0
			yyv24863 := yyv4863
			yyrl4863, yyrt4863 = z.DecInferLen(yyl4863, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4863 {
				if yyrl4863 <= cap(yyv4863) {
					yyv4863 = yyv4863[:yyrl4863]
				} else {
					yyv4863 = make([]ComponentStatus, yyrl4863)
				}
			} else {
				yyv4863 = make([]ComponentStatus, yyrl4863)
			}
			yyc4863 = true
			yyrr4863 = len(yyv4863)
			if yyrg4863 {
				copy(yyv4863, yyv24863)
			}
		} else if yyl4863 != len(yyv4863) {
			yyv4863 = yyv4863[:yyl4863]
			yyc4863 = true
		}
		yyj4863 := 0
		for ; yyj4863 < yyrr4863; yyj4863++ {
			yyh4863.ElemContainerState(yyj4863)
			if r.TryDecodeAsNil() {
				yyv4863[yyj4863] = ComponentStatus{}
			} else {
				yyv4864 := &yyv4863[yyj4863]
				yyv4864.CodecDecodeSelf(d)
			}

		}
		if yyrt4863 {
			for ; yyj4863 < yyl4863; yyj4863++ {
				yyv4863 = append(yyv4863, ComponentStatus{})
				yyh4863.ElemContainerState(yyj4863)
				if r.TryDecodeAsNil() {
					yyv4863[yyj4863] = ComponentStatus{}
				} else {
					yyv4865 := &yyv4863[yyj4863]
					yyv4865.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4863 := 0
		for ; !r.CheckBreak(); yyj4863++ {

			if yyj4863 >= len(yyv4863) {
				yyv4863 = append(yyv4863, ComponentStatus{}) // var yyz4863 ComponentStatus
				yyc4863 = true
			}
			yyh4863.ElemContainerState(yyj4863)
			if yyj4863 < len(yyv4863) {
				if r.TryDecodeAsNil() {
					yyv4863[yyj4863] = ComponentStatus{}
				} else {
					yyv4866 := &yyv4863[yyj4863]
					yyv4866.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4863 < len(yyv4863) {
			yyv4863 = yyv4863[:yyj4863]
			yyc4863 = true
		} else if yyj4863 == 0 && yyv4863 == nil {
			yyv4863 = []ComponentStatus{}
			yyc4863 = true
		}
	}
	yyh4863.End()
	if yyc4863 {
		*v = yyv4863
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4867 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4868 := &yyv4867
		yy4868.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4869 := *v
	yyh4869, yyl4869 := z.DecSliceHelperStart()
	var yyc4869 bool
	if yyl4869 == 0 {
		if yyv4869 == nil {
			yyv4869 = []DownwardAPIVolumeFile{}
			yyc4869 = true
		} else if len(yyv4869) != 0 {
			yyv4869 = yyv4869[:0]
			yyc4869 = true
		}
	} else if yyl4869 > 0 {
		var yyrr4869, yyrl4869 int
		var yyrt4869 bool
		if yyl4869 > cap(yyv4869) {

			yyrg4869 := len(yyv4869) > 0
			yyv24869 := yyv4869
			yyrl4869, yyrt4869 = z.DecInferLen(yyl4869, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4869 {
				if yyrl4869 <= cap(yyv4869) {
					yyv4869 = yyv4869[:yyrl4869]
				} else {
					yyv4869 = make([]DownwardAPIVolumeFile, yyrl4869)
				}
			} else {
				yyv4869 = make([]DownwardAPIVolumeFile, yyrl4869)
			}
			yyc4869 = true
			yyrr4869 = len(yyv4869)
			if yyrg4869 {
				copy(yyv4869, yyv24869)
			}
		} else if yyl4869 != len(yyv4869) {
			yyv4869 = yyv4869[:yyl4869]
			yyc4869 = true
		}
		yyj4869 := 0
		for ; yyj4869 < yyrr4869; yyj4869++ {
			yyh4869.ElemContainerState(yyj4869)
			if r.TryDecodeAsNil() {
				yyv4869[yyj4869] = DownwardAPIVolumeFile{}
			} else {
				yyv4870 := &yyv4869[yyj4869]
				yyv4870.CodecDecodeSelf(d)
			}

		}
		if yyrt4869 {
			for ; yyj4869 < yyl4869; yyj4869++ {
				yyv4869 = append(yyv4869, DownwardAPIVolumeFile{})
				yyh4869.ElemContainerState(yyj4869)
				if r.TryDecodeAsNil() {
					yyv4869[yyj4869] = DownwardAPIVolumeFile{}
				} else {
					yyv4871 := &yyv4869[yyj4869]
					yyv4871.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4869 := 0
		for ; !r.CheckBreak(); yyj4869++ {

			if yyj4869 >= len(yyv4869) {
				yyv4869 = append(yyv4869, DownwardAPIVolumeFile{}) // var yyz4869 DownwardAPIVolumeFile
				yyc4869 = true
			}
			yyh4869.ElemContainerState(yyj4869)
			if yyj4869 < len(yyv4869) {
				if r.TryDecodeAsNil() {
					yyv4869[yyj4869] = DownwardAPIVolumeFile{}
				} else {
					yyv4872 := &yyv4869[yyj4869]
					yyv4872.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4869 < len(yyv4869) {
			yyv4869 = yyv4869[:yyj4869]
			yyc4869 = true
		} else if yyj4869 == 0 && yyv4869 == nil {
			yyv4869 = []DownwardAPIVolumeFile{}
			yyc4869 = true
		}
	}
	yyh4869.End()
	if yyc4869 {
		*v = yyv4869
	}
}
